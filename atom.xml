<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guest997</title>
  
  <subtitle>一个在互联网下的小小 Coder</subtitle>
  <link href="http://guest997.tk/atom.xml" rel="self"/>
  
  <link href="http://guest997.tk/"/>
  <updated>2022-04-05T13:54:09.986Z</updated>
  <id>http://guest997.tk/</id>
  
  <author>
    <name>Guest997</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaSE 进阶(十八)</title>
    <link href="http://guest997.tk/2022/03/31/javase-advanced18/"/>
    <id>http://guest997.tk/2022/03/31/javase-advanced18/</id>
    <published>2022-03-31T03:22:30.000Z</published>
    <updated>2022-04-05T13:54:09.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="结婚案例"><a href="#结婚案例" class="headerlink" title="结婚案例"></a>结婚案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Company company = <span class="keyword">new</span> Company(<span class="keyword">new</span> Person());        <span class="comment">//静态代理对象的创建需要传入真实对象</span></span><br><span class="line">        company.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结婚接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//人（真实对象）实现结婚接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Marry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人结婚了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公司（代理对象）也实现结婚接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span> <span class="keyword">implements</span> <span class="title">Marry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代理的真实对象</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Company</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//代理对象可以做很多真实对象做不了的事情，这样真实对象就能专注做自己的事。</span></span><br><span class="line">        before();</span><br><span class="line">        person.work();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;公司处理结婚前事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;公司处理结婚后事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">公司处理结婚前事务</span></span><br><span class="line"><span class="comment">人结婚了</span></span><br><span class="line"><span class="comment">公司处理结婚后事务</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以看到代理对象的创建类似于线程创建时传了个实现 Runnable 接口的类对象。</p><h2 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h2><p>为什么要使用 Lambda 表达式？</p><ul><li>  避兔匿名内部类定义过多</li><li>  可以让代码看起来很简洁</li><li>  只留下核心的逻辑</li></ul><p>什么时候能够使用 Lambda 表达式？</p><ul><li>  创建函数式接口对象的时候。</li></ul><p>什么是函数式接口？</p><ul><li>  接口只包含唯ー一个抽象方法。</li></ul><h3 id="以前的代码实现"><a href="#以前的代码实现" class="headerlink" title="以前的代码实现"></a>以前的代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Talk02</span> <span class="keyword">implements</span> <span class="title">ITalk</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;talk02&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Talk01().talk();</span><br><span class="line">        <span class="keyword">new</span> Talk02().talk();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Talk03</span> <span class="keyword">implements</span> <span class="title">ITalk</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;talk03&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Talk03().talk();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        ITalk talk04 = <span class="keyword">new</span> ITalk() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;talk04&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        talk04.talk();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ITalk</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Talk01</span> <span class="keyword">implements</span> <span class="title">ITalk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;talk01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">talk01</span></span><br><span class="line"><span class="comment">talk02</span></span><br><span class="line"><span class="comment">talk03</span></span><br><span class="line"><span class="comment">talk04</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>有些代码只会使用到一次，之前就能使用如上面的方法来简化代码。而 java8 之后提供了新的方式来简化代码。</p><h3 id="Lambda-简化代码"><a href="#Lambda-简化代码" class="headerlink" title="Lambda 简化代码"></a>Lambda 简化代码</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> LambdaTest02 &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        //标准 Lambda 语法</span><br><span class="line">        ISay say01 = (String <span class="type">name</span>) -&gt; &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">name</span> + &quot; say01&quot;);</span><br><span class="line">        &#125;;</span><br><span class="line">        say01.say(&quot;01&quot;);</span><br><span class="line"></span><br><span class="line">        //简化一：去掉全部参数类型</span><br><span class="line">        ISay say02 = (<span class="type">name</span>) -&gt; &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">name</span> + &quot; say02&quot;);</span><br><span class="line">        &#125;;</span><br><span class="line">        say02.say(&quot;02&quot;);</span><br><span class="line"></span><br><span class="line">        //简化二：去掉括号（需要只有一个参数）</span><br><span class="line">        ISay say03 = <span class="type">name</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">name</span> + &quot; say03&quot;);</span><br><span class="line">        &#125;;</span><br><span class="line">        say03.say(&quot;03&quot;);</span><br><span class="line"></span><br><span class="line">        //简化三：去掉花括号（需要代码只有一行）</span><br><span class="line">        ISay say04 = <span class="type">name</span> -&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">name</span> + &quot; say04&quot;);</span><br><span class="line">        say04.say(&quot;04&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//函数式接口</span><br><span class="line">interface ISay &#123;</span><br><span class="line">    <span class="type">void</span> say(String <span class="type">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">01 say01</span></span><br><span class="line"><span class="comment">02 say02</span></span><br><span class="line"><span class="comment">03 say03</span></span><br><span class="line"><span class="comment">04 say04</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以看到通过 Lambda 简化后的代码甚至可以短到只有一行。</p><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p><img data-src="/images/javase-advanced18.md-0.jpg"></p><p><strong>线程只能启动一次，一旦死亡就不能再次启动。</strong></p><h3 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h3><p>不推荐使用 JDK 提供的方法。推荐让线程自己停下来。使用一个标志位当作终止变量，如当 flag = false 时线程终止。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopTest</span> <span class="title">implements</span> <span class="title">Runnable</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        StopTest stopTest = <span class="keyword">new</span> <span class="built_in">StopTest</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Thread</span>(stopTest).<span class="built_in">start</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;main&quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">500</span>) &#123;</span><br><span class="line">                stopTest.<span class="built_in">stop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;running&quot;</span> + i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;线程停止了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/javase-advanced18.md-1.png"></p><h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><p>休眠可以模拟网络延时和倒计时。每一个对象都有一个锁，休眠不会释放锁。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> SleepTest &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        SleepTest sleepTest = <span class="built_in">new</span> SleepTest();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;每隔一秒输出当前时间&quot;);</span><br><span class="line">        sleepTest.nowTime();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;十秒倒计时&quot;);</span><br><span class="line">        sleepTest.countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> nowTime() &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="type">date</span> = <span class="built_in">new</span> <span class="type">Date</span>(<span class="keyword">System</span>.currentTimeMillis());</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="built_in">new</span> SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(<span class="type">date</span>));</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="type">date</span> = <span class="built_in">new</span> <span class="type">Date</span>(<span class="keyword">System</span>.currentTimeMillis());</span><br><span class="line">                i++;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> countDown() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>; i &gt;= <span class="number">0</span>; i<span class="comment">--) &#123;</span></span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(i);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">每隔一秒输出当前时间</span></span><br><span class="line"><span class="comment">2021-11-28 00:42:45</span></span><br><span class="line"><span class="comment">2021-11-28 00:42:46</span></span><br><span class="line"><span class="comment">2021-11-28 00:42:47</span></span><br><span class="line"><span class="comment">2021-11-28 00:42:48</span></span><br><span class="line"><span class="comment">2021-11-28 00:42:49</span></span><br><span class="line"><span class="comment">十秒倒计时</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h3><p>线程礼让就是让运行中的线程暂停，但不是进入阻塞状态，而是进入就绪状态，与其它线程回到同一起跑线。所以礼让不一定会成功，看 CPU 的调度。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> YieldTest implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        YieldTest yieldTest = <span class="keyword">new</span> <span class="constructor">YieldTest()</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">yieldTest</span>, <span class="string">&quot;A&quot;</span>)</span>.start<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">yieldTest</span>, <span class="string">&quot;B&quot;</span>)</span>.start<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run<span class="literal">()</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span> + <span class="string">&quot;线程开始&quot;</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>yield<span class="literal">()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span> + <span class="string">&quot;线程结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">A线程开始</span></span><br><span class="line"><span class="comment">B线程开始</span></span><br><span class="line"><span class="comment">A线程结束</span></span><br><span class="line"><span class="comment">B线程结束</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="线程合并"><a href="#线程合并" class="headerlink" title="线程合并"></a>线程合并</h3><p>线程合并可以想象为插队，只有当插队的线程运行完才能运行其它线程，其它线程会处于阻塞状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;使用线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JoinTest joinTest = <span class="keyword">new</span> JoinTest();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(joinTest);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;使用 main 线程&quot;</span> + i);</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                    thread.join();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">使用 main 线程0</span></span><br><span class="line"><span class="comment">使用 main 线程1</span></span><br><span class="line"><span class="comment">使用 main 线程2</span></span><br><span class="line"><span class="comment">使用 main 线程3</span></span><br><span class="line"><span class="comment">使用 main 线程4</span></span><br><span class="line"><span class="comment">使用 main 线程5</span></span><br><span class="line"><span class="comment">使用线程0</span></span><br><span class="line"><span class="comment">使用线程1</span></span><br><span class="line"><span class="comment">使用线程2</span></span><br><span class="line"><span class="comment">使用线程3</span></span><br><span class="line"><span class="comment">使用线程4</span></span><br><span class="line"><span class="comment">使用线程5</span></span><br><span class="line"><span class="comment">使用线程6</span></span><br><span class="line"><span class="comment">使用线程7</span></span><br><span class="line"><span class="comment">使用线程8</span></span><br><span class="line"><span class="comment">使用线程9</span></span><br><span class="line"><span class="comment">使用 main 线程6</span></span><br><span class="line"><span class="comment">使用 main 线程7</span></span><br><span class="line"><span class="comment">使用 main 线程8</span></span><br><span class="line"><span class="comment">使用 main 线程9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>线程优先级从1到10，1最低，10最高。当线程的优先级没有指定时，所有线程都为普通优先级（5）。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> PriorityTest implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run<span class="literal">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;main 线程优先级：&quot;</span> + <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Priority()</span>);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">new</span> PriorityTest()</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">new</span> PriorityTest()</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">new</span> PriorityTest()</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line">        t1.set<span class="constructor">Priority(6)</span>;</span><br><span class="line">        t3.set<span class="constructor">Priority(4)</span>;</span><br><span class="line">        t1.start<span class="literal">()</span>;</span><br><span class="line">        t2.start<span class="literal">()</span>;</span><br><span class="line">        t3.start<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">main 线程优先级：5</span></span><br><span class="line"><span class="comment">one0</span></span><br><span class="line"><span class="comment">two0</span></span><br><span class="line"><span class="comment">one1</span></span><br><span class="line"><span class="comment">two1</span></span><br><span class="line"><span class="comment">one2</span></span><br><span class="line"><span class="comment">two2</span></span><br><span class="line"><span class="comment">one3</span></span><br><span class="line"><span class="comment">two3</span></span><br><span class="line"><span class="comment">one4</span></span><br><span class="line"><span class="comment">two4</span></span><br><span class="line"><span class="comment">one5</span></span><br><span class="line"><span class="comment">two5</span></span><br><span class="line"><span class="comment">one6</span></span><br><span class="line"><span class="comment">two6</span></span><br><span class="line"><span class="comment">two7</span></span><br><span class="line"><span class="comment">one7</span></span><br><span class="line"><span class="comment">two8</span></span><br><span class="line"><span class="comment">two9</span></span><br><span class="line"><span class="comment">one8</span></span><br><span class="line"><span class="comment">one9</span></span><br><span class="line"><span class="comment">three0</span></span><br><span class="line"><span class="comment">three1</span></span><br><span class="line"><span class="comment">three2</span></span><br><span class="line"><span class="comment">three3</span></span><br><span class="line"><span class="comment">three4</span></span><br><span class="line"><span class="comment">three5</span></span><br><span class="line"><span class="comment">three6</span></span><br><span class="line"><span class="comment">three7</span></span><br><span class="line"><span class="comment">three8</span></span><br><span class="line"><span class="comment">three9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以从结果看出，<strong>不是高优先级的线程就一定先比低优先级的线程先运行完，而是高优先级的线程先运行的概率比低优先级的线程高。</strong></p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>线程分为用户线程和守护线程，<strong>虚拟机必须确保用户线程执行完毕，但是不用等待守护线程执行完毕</strong>。守护线程有如后台记录操作日志、监控内存和垃圾回收等待。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DaemonTest</span> &#123;</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="literal">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        Thread daemonThread = <span class="keyword">new</span> Thread<span class="function"><span class="params">(() -&gt; &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                System.out.println(<span class="string">&quot;守护线程一直运行&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">            &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">Thread</span> <span class="title">userThread</span> = <span class="title">new</span> <span class="title">Thread</span><span class="params">(() -&gt; &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                System.out.println(<span class="string">&quot;用户线程运行&quot;</span> + i);</span></span></span><br><span class="line"><span class="params"><span class="function">            &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">userThread</span>.<span class="title">setPriority</span><span class="params">(<span class="number">10</span>)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">userThread</span>.<span class="title">start</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        <span class="title">daemonThread</span>.<span class="title">setDaemon</span><span class="params">(<span class="literal">true</span>)</span>;   //设置线程为守护线程</span></span><br><span class="line"><span class="function">        <span class="title">daemonThread</span>.<span class="title">start</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">/*结果为</span></span><br><span class="line"><span class="function">用户线程运行0</span></span><br><span class="line"><span class="function">用户线程运行1</span></span><br><span class="line"><span class="function">用户线程运行2</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function">守护线程一直运行</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Process</span> <span class="title">finished</span> <span class="title">with</span> <span class="title">exit</span> <span class="title">code</span> 0</span></span><br><span class="line"><span class="function">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;静态代理&quot;&gt;&lt;a href=&quot;#静态代理&quot; class=&quot;headerlink&quot; title=&quot;静态代理&quot;&gt;&lt;/a&gt;静态代理&lt;/h2&gt;&lt;h3 id=&quot;结婚案例&quot;&gt;&lt;a href=&quot;#结婚案例&quot; class=&quot;headerlink&quot; title=&quot;结婚案例&quot;&gt;&lt;/a&gt;结婚案例&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; ml.guest997;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StaticProxy&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Company company = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Company(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person());        &lt;span class=&quot;comment&quot;&gt;//静态代理对象的创建需要传入真实对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        company.work();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//结婚接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Marry&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//人（真实对象）实现结婚接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Marry&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;人结婚了&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//公司（代理对象）也实现结婚接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Company&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Marry&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//代理的真实对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Person person;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Person person)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.person = person;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//代理对象可以做很多真实对象做不了的事情，这样真实对象就能专注做自己的事。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        before();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        person.work();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        after();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;公司处理结婚前事务&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;公司处理结婚后事务&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*结果为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;公司处理结婚前事务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;人结婚了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;公司处理结婚后事务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到代理对象的创建类似于线程创建时传了个实现 Runnable 接口的类对象。&lt;/p&gt;
&lt;h2 id=&quot;Lambda-表达式&quot;&gt;&lt;a href=&quot;#Lambda-表达式&quot; class=&quot;headerlink&quot; title=&quot;Lambda 表达式&quot;&gt;&lt;/a&gt;Lambda 表达式&lt;/h2&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(十七)</title>
    <link href="http://guest997.tk/2022/03/30/javase-advanced17/"/>
    <id>http://guest997.tk/2022/03/30/javase-advanced17/</id>
    <published>2022-03-30T03:20:02.000Z</published>
    <updated>2022-04-05T13:54:02.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序、进程和线程"><a href="#程序、进程和线程" class="headerlink" title="程序、进程和线程"></a>程序、进程和线程</h2><p>程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。<br>进程则是执行程序的一次执行过程，它是一个动态的概念。是系统资源分配的单位。<br>通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程是 CPU 调度和执行的的单位。</p><h2 id="普通方法调用和多线程启动"><a href="#普通方法调用和多线程启动" class="headerlink" title="普通方法调用和多线程启动"></a>普通方法调用和多线程启动</h2><p><img data-src="/images/javase-advanced17.md-0.png"></p><p><strong>注意：很多多线程是模拟出来的，真正的多线程是指有多个 CPU（多核），如服务器。如果是模拟出来的多线程，即在一个 CPU 的情况下，在同一个时间点，CPU 只能执行一个代码，因为切换得很快，所以就有同时执行的错觉。</strong></p><h2 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h2><h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承 Thread 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest01</span> <span class="title">extends</span> <span class="title">Thread</span> &#123;</span></span><br><span class="line">    <span class="comment">//main 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">ThreadTest01</span>().<span class="built_in">start</span>();     <span class="comment">//开启线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;        <span class="comment">//次数不能限制的太小，否则处理得太快，结果不明显。</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;使用 main 线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//run 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;使用线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/javase-advanced17.md-1.png"></p><p>可以从图中部分结果看出两个线程是交替执行的，如果将上面代码的 start() 改成 run()，就只是普通地调用方法，而并没有开启线程，会先执行完 run()，再执行后面的代码。</p><h4 id="多线程下载图片"><a href="#多线程下载图片" class="headerlink" title="多线程下载图片"></a>多线程下载图片</h4><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest02</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;         <span class="comment">//图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String FileName;    <span class="comment">//保存的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadTest02</span><span class="params">(String url, String FileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.FileName = FileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> ThreadTest02(<span class="string">&quot;https://img1.baidu.com/it/u=949092872,4035757232&amp;fm=26&amp;fmt=auto&quot;</span>, <span class="string">&quot;bg&quot;</span> + i + <span class="string">&quot;.png&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ImagesDownloader imagesDownloader = <span class="keyword">new</span> ImagesDownloader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            imagesDownloader.downloader(url, FileName);</span><br><span class="line">            System.out.println(FileName + <span class="string">&quot;下载完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片下载器</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ImagesDownloader</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String link, String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                URL url = <span class="keyword">new</span> URL(link);</span><br><span class="line">                url.openConnection().setRequestProperty(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)&quot;</span>);   <span class="comment">//如果服务器端禁止抓取，那么可以通过设置 User-Agent 来欺骗服务器.</span></span><br><span class="line">                FileUtils.copyURLToFile(url, <span class="keyword">new</span> File(filename));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">bg0.png下载完成</span></span><br><span class="line"><span class="comment">bg3.png下载完成</span></span><br><span class="line"><span class="comment">bg1.png下载完成</span></span><br><span class="line"><span class="comment">bg4.png下载完成</span></span><br><span class="line"><span class="comment">bg2.png下载完成</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现 Runnable 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest03</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//重写 run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;使用线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadTest03()).start();     <span class="comment">//将 Runnable 实现类对象通过代理的方式创建线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;使用 main 线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/javase-advanced17.md-2.png"></p><h4 id="多线程买火车票"><a href="#多线程买火车票" class="headerlink" title="多线程买火车票"></a>多线程买火车票</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest04</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Runnable</span></span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> int tickets = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> void run() &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到了第&quot;</span> + tickets-- + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        ThreadTest04 threadTest04 = <span class="keyword">new</span> <span class="type">ThreadTest04</span>();</span><br><span class="line">        <span class="comment">//多个线程同时操作一个对象。注意：可能有并发问题，就是有人拿到了同一张票或者拿到了0或-1张票。</span></span><br><span class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(threadTest04,<span class="string">&quot;01&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(threadTest04,<span class="string">&quot;02&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(threadTest04,<span class="string">&quot;03&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 OOP 的单继承局限性，所有推荐使用 Runnable 实现多线程，更加灵活，方便一个对象能被多个线程使用。</p><h4 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> ThreadTest05 implements Runnable &#123;</span><br><span class="line">    <span class="comment">//模拟赛道</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> race = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//胜利者</span></span><br><span class="line">    <span class="keyword">private</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟赛跑过程</span></span><br><span class="line">    @Override</span><br><span class="line">    public void run<span class="literal">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= race; i++) &#123;</span><br><span class="line">            <span class="comment">//当兔子跑到25米时，线程休眠。</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>.equals(<span class="string">&quot;兔子&quot;</span>) &amp; i<span class="operator"> == </span><span class="number">25</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            boolean gameOver = game<span class="constructor">Over(<span class="params">i</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (gameOver) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span> + <span class="string">&quot;跑了&quot;</span> + i + <span class="string">&quot;米&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检测是否存在胜利者</span></span><br><span class="line">    <span class="keyword">private</span> boolean game<span class="constructor">Over(<span class="params">int</span> <span class="params">already</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (winner != null) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;已经存在胜利者&quot;</span>);</span><br><span class="line">            return <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (already &gt;= race) &#123;</span><br><span class="line">                winner = <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;胜利者是：&quot;</span> + winner);</span><br><span class="line">                return <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                return <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        ThreadTest05 threadTest05 = <span class="keyword">new</span> <span class="constructor">ThreadTest05()</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">threadTest05</span>,<span class="string">&quot;兔子&quot;</span>)</span>.start<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">threadTest05</span>,<span class="string">&quot;乌龟&quot;</span>)</span>.start<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h3><h4 id="多线程下载图片-1"><a href="#多线程下载图片-1" class="headerlink" title="多线程下载图片"></a>多线程下载图片</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现 Callable 接口，并且可以有返回值。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest06</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Callable</span></span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> url;         <span class="comment">//图片地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> FileName;    <span class="comment">//保存的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ThreadTest06(<span class="keyword">String</span> url, <span class="keyword">String</span> FileName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.FileName = FileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        ThreadTest06 t1 = <span class="keyword">new</span> <span class="type">ThreadTest06</span>(<span class="string">&quot;https://img1.baidu.com/it/u=949092872,4035757232&amp;fm=26&amp;fmt=auto&quot;</span>, <span class="string">&quot;bg0.png&quot;</span>);</span><br><span class="line">        ThreadTest06 t2 = <span class="keyword">new</span> <span class="type">ThreadTest06</span>(<span class="string">&quot;https://img1.baidu.com/it/u=949092872,4035757232&amp;fm=26&amp;fmt=auto&quot;</span>, <span class="string">&quot;bg1.png&quot;</span>);</span><br><span class="line">        ThreadTest06 t3 = <span class="keyword">new</span> <span class="type">ThreadTest06</span>(<span class="string">&quot;https://img1.baidu.com/it/u=949092872,4035757232&amp;fm=26&amp;fmt=auto&quot;</span>, <span class="string">&quot;bg2.png&quot;</span>);</span><br><span class="line">        <span class="comment">//使用 FutureTask 类包装 Callable 的实例，泛型限制要与返回结果类型一致。</span></span><br><span class="line">        FutureTask&lt;Boolean&gt; futureTask1 = <span class="keyword">new</span> <span class="type">FutureTask</span>&lt;&gt;(t1);</span><br><span class="line">        FutureTask&lt;Boolean&gt; futureTask2 = <span class="keyword">new</span> <span class="type">FutureTask</span>&lt;&gt;(t2);</span><br><span class="line">        FutureTask&lt;Boolean&gt; futureTask3 = <span class="keyword">new</span> <span class="type">FutureTask</span>&lt;&gt;(t3);</span><br><span class="line">        <span class="comment">//将 FutureTask 的对象传给 Thread 来创建线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(futureTask1).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(futureTask2).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(futureTask3).start();</span><br><span class="line">        <span class="comment">//获取结果</span></span><br><span class="line">        System.out.println(futureTask1.<span class="keyword">get</span>());</span><br><span class="line">        System.out.println(futureTask2.<span class="keyword">get</span>());</span><br><span class="line">        System.out.println(futureTask3.<span class="keyword">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写 call()</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Boolean call() &#123;</span><br><span class="line">        ThreadTest06.ImagesDownloader imagesDownloader = <span class="keyword">new</span> <span class="type">ThreadTest06</span>.ImagesDownloader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            imagesDownloader.downloader(url, FileName);</span><br><span class="line">            System.out.println(FileName + <span class="string">&quot;下载完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片下载器</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ImagesDownloader</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> void downloader(<span class="keyword">String</span> link, <span class="keyword">String</span> filename) throws IOException &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                URL url = <span class="keyword">new</span> <span class="type">URL</span>(link);</span><br><span class="line">                url.openConnection().setRequestProperty(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)&quot;</span>);   <span class="comment">//如果服务器端禁止抓取，那么可以通过设置 User-Agent 来欺骗服务器.</span></span><br><span class="line">                FileUtils.copyURLToFile(url, <span class="keyword">new</span> <span class="type">File</span>(filename));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;程序、进程和线程&quot;&gt;&lt;a href=&quot;#程序、进程和线程&quot; class=&quot;headerlink&quot; title=&quot;程序、进程和线程&quot;&gt;&lt;/a&gt;程序、进程和线程&lt;/h2&gt;&lt;p&gt;程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。&lt;br&gt;进程则是执行程序的一次执行过程，它是一个动态的概念。是系统资源分配的单位。&lt;br&gt;通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程是 CPU 调度和执行的的单位。&lt;/p&gt;
&lt;h2 id=&quot;普通方法调用和多线程启动&quot;&gt;&lt;a href=&quot;#普通方法调用和多线程启动&quot; class=&quot;headerlink&quot; title=&quot;普通方法调用和多线程启动&quot;&gt;&lt;/a&gt;普通方法调用和多线程启动&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&quot;/images/javase-advanced17.md-0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：很多多线程是模拟出来的，真正的多线程是指有多个 CPU（多核），如服务器。如果是模拟出来的多线程，即在一个 CPU 的情况下，在同一个时间点，CPU 只能执行一个代码，因为切换得很快，所以就有同时执行的错觉。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(十六)</title>
    <link href="http://guest997.tk/2022/03/29/javase-advanced16/"/>
    <id>http://guest997.tk/2022/03/29/javase-advanced16/</id>
    <published>2022-03-29T03:25:22.000Z</published>
    <updated>2022-04-05T13:54:02.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p>表示物理磁盘中的一个文件或者文件夹。</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean CreateNewFile()</td><td>创建一个空文件。</td></tr><tr><td>boolean mkdir()</td><td>创建一个指定路径名的文件夹。</td></tr><tr><td>boolean delete()</td><td>删除一个指定的文件或文件夹，文件夹必须为空才能被删除。</td></tr><tr><td>boolean exists()</td><td>判断指定的文件或文件夹是否存在。</td></tr><tr><td>String getAbsolutePath()</td><td>返回文件或文件夹的绝对路径</td></tr><tr><td>String getName()</td><td>返回文件或文件夹的名称</td></tr><tr><td>String getParent()</td><td>返回文件/文件夹所在路径</td></tr><tr><td>boolean isDirectory()</td><td>判断是否为目录</td></tr><tr><td>boolean isFile()</td><td>判断是否为文件</td></tr><tr><td>long length()</td><td>返回文件的长度</td></tr><tr><td>File[] listFiles()</td><td>返回目录中的所有内容，一个文件数组。如果指定的路径不是一个目录就返回 null。</td></tr><tr><td>boolean renameTo(File dest)</td><td>重命名指定的文件。</td></tr></tbody></table><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> FileTest &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">File</span>.separator);     <span class="comment">//名称分隔符</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">File</span>.pathSeparator);     <span class="comment">//路径分隔符</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;../IO/test.md&quot;</span>);    <span class="comment">//创建文件对象</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">file</span>.exists()) &#123;</span><br><span class="line">            <span class="keyword">file</span>.createNewFile();</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;test.md&quot;</span>, <span class="keyword">true</span>);        <span class="comment">//设置为追加内容</span></span><br><span class="line">            fw.<span class="keyword">write</span>(<span class="string">&quot;https://guest997.ml - 一个在互联网下的小小 Coder&quot;</span>);</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.length());      <span class="comment">//返回的是文件字节数</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">new</span> Date(<span class="keyword">file</span>.lastModified()).toLocaleString());     <span class="comment">//获取文件最后修改时间</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.isFile());</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.renameTo(<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;rename.md&quot;</span>)));</span><br><span class="line">        <span class="comment">//即使文件被重命名了，下面方法显示的文件名依旧是在创建文件对象时传入的文件名。</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.getPath());</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.getAbsolutePath());</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.getName());</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.getParent());       <span class="comment">//只有在 new File 时，存在父路径，才能正常显示，否则为 null。</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.<span class="keyword">delete</span>());        <span class="comment">//重命名之后会使得删除文件失败</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">\</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">58</span></span><br><span class="line"><span class="comment">2022-3-12 20:14:32</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">..\IO\test.md</span></span><br><span class="line"><span class="comment">E:\DEMO\IO\..\IO\test.md</span></span><br><span class="line"><span class="comment">test.md</span></span><br><span class="line"><span class="comment">..\IO</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> FolderTest &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> <span class="constructor">File(<span class="string">&quot;../IO/d1/d2&quot;</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists<span class="literal">()</span>) &#123;</span><br><span class="line">            <span class="comment">//file.mkdir();       //只能创建单级目录</span></span><br><span class="line">            dir.mkdirs<span class="literal">()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(dir.get<span class="constructor">Name()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(dir.get<span class="constructor">Path()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(dir.get<span class="constructor">AbsolutePath()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(dir.get<span class="constructor">Parent()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="keyword">new</span> <span class="constructor">Date(<span class="params">dir</span>.<span class="params">lastModified</span>()</span>).<span class="keyword">to</span><span class="constructor">LocaleString()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(dir.is<span class="constructor">Directory()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历目录</span></span><br><span class="line">        File file = <span class="keyword">new</span> <span class="constructor">File(<span class="string">&quot;E:/Demo/IO/target&quot;</span>)</span>;</span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        String<span class="literal">[]</span> <span class="built_in">list</span> = file.<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">list</span>)</span>);</span><br><span class="line">        <span class="comment">//方式二</span></span><br><span class="line">        File<span class="literal">[]</span> files = file.<span class="built_in">list</span><span class="constructor">Files()</span>;</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(dir.delete<span class="literal">()</span>);        <span class="comment">//只能删除空的最后一级文件夹目录</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">d2</span></span><br><span class="line"><span class="comment">..\IO\d1\d2</span></span><br><span class="line"><span class="comment">E:\DEMO\IO\..\IO\d1\d2</span></span><br><span class="line"><span class="comment">..\IO\d1</span></span><br><span class="line"><span class="comment">2022-3-12 21:02:26</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">[classes, generated-sources]</span></span><br><span class="line"><span class="comment">E:\Demo\IO\target\classes</span></span><br><span class="line"><span class="comment">E:\Demo\IO\target\generated-sources</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="文件过滤器（FileFilter-接口）"><a href="#文件过滤器（FileFilter-接口）" class="headerlink" title="文件过滤器（FileFilter 接口）"></a>文件过滤器（FileFilter 接口）</h3><p>boolean accept(File pathname)：当调用 File 类中的 listFiles 方法时，支持传入 FileFilter 接口实现类，对获取的文件进行过滤，只有满足条件的文件才可以出现在返回值中。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> FF &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">File</span> dir = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;../IO&quot;</span>);</span><br><span class="line">        <span class="keyword">File</span>[] files = dir.listFiles(pathname -&gt; pathname.getName().endsWith(<span class="string">&quot;.md&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">File</span> <span class="keyword">file</span> : files) &#123;</span><br><span class="line">            System.out.<span class="keyword">println</span>(<span class="keyword">file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 ..\IO\rename.md</span></span><br></pre></td></tr></table></figure><h3 id="递归遍历和删除文件夹"><a href="#递归遍历和删除文件夹" class="headerlink" title="递归遍历和删除文件夹"></a>递归遍历和删除文件夹</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> RecursiveFolder &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        traverseFolder(<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;.idea&quot;</span>));</span><br><span class="line">        deleteFolder(<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;target&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归遍历文件夹</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> traverseFolder(<span class="keyword">File</span> dir) &#123;</span><br><span class="line">        <span class="keyword">File</span>[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="keyword">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">File</span> <span class="keyword">file</span> : files) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">file</span>.isDirectory()) &#123;</span><br><span class="line">                    traverseFolder(<span class="keyword">file</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.getAbsolutePath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归删除文件夹</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> deleteFolder(<span class="keyword">File</span> dir) &#123;</span><br><span class="line">        <span class="keyword">File</span>[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="keyword">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">File</span> <span class="keyword">file</span> : files) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">file</span>.isDirectory()) &#123;</span><br><span class="line">                    deleteFolder(<span class="keyword">file</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">file</span>.<span class="keyword">delete</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dir.<span class="keyword">delete</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">E:\DEMO\IO\.idea\.gitignore</span></span><br><span class="line"><span class="comment">E:\DEMO\IO\.idea\compiler.xml</span></span><br><span class="line"><span class="comment">E:\DEMO\IO\.idea\encodings.xml</span></span><br><span class="line"><span class="comment">E:\DEMO\IO\.idea\inspectionProfiles\Project_Default.xml</span></span><br><span class="line"><span class="comment">E:\DEMO\IO\.idea\jarRepositories.xml</span></span><br><span class="line"><span class="comment">E:\DEMO\IO\.idea\misc.xml</span></span><br><span class="line"><span class="comment">E:\DEMO\IO\.idea\runConfigurations.xml</span></span><br><span class="line"><span class="comment">E:\DEMO\IO\.idea\workspace.xml</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p>以键值对的形式存储属性名和属性值。属性名和属性值都是字符串类型。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> PropertiesTest &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) throws IOException &#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> <span class="constructor">Properties()</span>;</span><br><span class="line">        <span class="comment">//设置的属性最好不要有中文</span></span><br><span class="line">        properties.set<span class="constructor">Property(<span class="string">&quot;Blog&quot;</span>, <span class="string">&quot;https://guest997.ml&quot;</span>)</span>;</span><br><span class="line">        properties.set<span class="constructor">Property(<span class="string">&quot;Guest997&quot;</span>, <span class="string">&quot;一个在互联网下的小小 Coder&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Object key : properties.key<span class="constructor">Set()</span>) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Object value : properties.values<span class="literal">()</span>) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Object, Object&gt; kv : properties.entry<span class="constructor">Set()</span>) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(kv.get<span class="constructor">Key()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(kv.get<span class="constructor">Value()</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String propertyName : properties.<span class="built_in">string</span><span class="constructor">PropertyNames()</span>) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(propertyName + <span class="string">&quot;：&quot;</span> + properties.get<span class="constructor">Property(<span class="params">propertyName</span>)</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过流读取和写入</span></span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> <span class="constructor">PrintWriter(<span class="string">&quot;print.md&quot;</span>)</span>;</span><br><span class="line">        properties.<span class="built_in">list</span>(pw);</span><br><span class="line">        pw.close<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> <span class="constructor">FileWriter(<span class="string">&quot;test.properties&quot;</span>)</span>;</span><br><span class="line">        properties.store(fw, <span class="string">&quot;注释&quot;</span>);</span><br><span class="line">        fw.close<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载</span></span><br><span class="line">        Properties properties2 = <span class="keyword">new</span> <span class="constructor">Properties()</span>;</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> <span class="constructor">FileReader(<span class="string">&quot;test.properties&quot;</span>)</span>;</span><br><span class="line">        properties2.load(fr);</span><br><span class="line">        fr.close<span class="literal">()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(properties2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">Guest997</span></span><br><span class="line"><span class="comment">Blog</span></span><br><span class="line"><span class="comment">一个在互联网下的小小 Coder</span></span><br><span class="line"><span class="comment">https://guest997.ml</span></span><br><span class="line"><span class="comment">Guest997</span></span><br><span class="line"><span class="comment">一个在互联网下的小小 Coder</span></span><br><span class="line"><span class="comment">Blog</span></span><br><span class="line"><span class="comment">https://guest997.ml</span></span><br><span class="line"><span class="comment">Guest997：一个在互联网下的小小 Coder</span></span><br><span class="line"><span class="comment">Blog：https://guest997.ml</span></span><br><span class="line"><span class="comment">&#123;Guest997=一个在互联网下的小小 Coder, Blog=https://guest997.ml&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>print.md</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- listing properties --</span><br><span class="line"><span class="attribute">Guest997</span>=一个在互联网下的小小 Coder</span><br><span class="line"><span class="attribute">Blog</span>=https://guest997.ml</span><br></pre></td></tr></table></figure><p>test.properties</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#\u6CE8\u91CA</span></span><br><span class="line"><span class="comment">#Sat Mar 12 22:16:37 CST 2022</span></span><br><span class="line"><span class="attr">Guest997</span>=一个在互联网下的小小 Coder</span><br><span class="line"><span class="attr">Blog</span>=https\://guest997.ml</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;File&quot;&gt;&lt;a href=&quot;#File&quot; class=&quot;headerlink&quot; title=&quot;File&quot;&gt;&lt;/a&gt;File&lt;/h2&gt;&lt;p&gt;表示物理磁盘中的一个文件或者文件夹。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;boolean CreateNewFile()&lt;/td&gt;
&lt;td&gt;创建一个空文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean mkdir()&lt;/td&gt;
&lt;td&gt;创建一个指定路径名的文件夹。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean delete()&lt;/td&gt;
&lt;td&gt;删除一个指定的文件或文件夹，文件夹必须为空才能被删除。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean exists()&lt;/td&gt;
&lt;td&gt;判断指定的文件或文件夹是否存在。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getAbsolutePath()&lt;/td&gt;
&lt;td&gt;返回文件或文件夹的绝对路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getName()&lt;/td&gt;
&lt;td&gt;返回文件或文件夹的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getParent()&lt;/td&gt;
&lt;td&gt;返回文件/文件夹所在路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean isDirectory()&lt;/td&gt;
&lt;td&gt;判断是否为目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean isFile()&lt;/td&gt;
&lt;td&gt;判断是否为文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long length()&lt;/td&gt;
&lt;td&gt;返回文件的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File[] listFiles()&lt;/td&gt;
&lt;td&gt;返回目录中的所有内容，一个文件数组。如果指定的路径不是一个目录就返回 null。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean renameTo(File dest)&lt;/td&gt;
&lt;td&gt;重命名指定的文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;headerlink&quot; title=&quot;文件操作&quot;&gt;&lt;/a&gt;文件操作&lt;/h3&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; ml.guest997;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.&lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.FileWriter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; FileTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main(String[] args) &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt;.separator);     &lt;span class=&quot;comment&quot;&gt;//名称分隔符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt;.pathSeparator);     &lt;span class=&quot;comment&quot;&gt;//路径分隔符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;../IO/test.md&amp;quot;&lt;/span&gt;);    &lt;span class=&quot;comment&quot;&gt;//创建文件对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.exists()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.createNewFile();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            FileWriter fw = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileWriter(&lt;span class=&quot;string&quot;&gt;&amp;quot;test.md&amp;quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);        &lt;span class=&quot;comment&quot;&gt;//设置为追加内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fw.&lt;span class=&quot;keyword&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;https://guest997.ml - 一个在互联网下的小小 Coder&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fw.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.length());      &lt;span class=&quot;comment&quot;&gt;//返回的是文件字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Date(&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.lastModified()).toLocaleString());     &lt;span class=&quot;comment&quot;&gt;//获取文件最后修改时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.isFile());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.renameTo(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;rename.md&amp;quot;&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//即使文件被重命名了，下面方法显示的文件名依旧是在创建文件对象时传入的文件名。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.getPath());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.getAbsolutePath());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.getParent());       &lt;span class=&quot;comment&quot;&gt;//只有在 new File 时，存在父路径，才能正常显示，否则为 null。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;());        &lt;span class=&quot;comment&quot;&gt;//重命名之后会使得删除文件失败&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*结果为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;58&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;2022-3-12 20:14:32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;..\IO\test.md&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;E:\DEMO\IO\..\IO\test.md&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;test.md&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;..\IO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(十五)</title>
    <link href="http://guest997.tk/2022/03/28/javase-advanced15/"/>
    <id>http://guest997.tk/2022/03/28/javase-advanced15/</id>
    <published>2022-03-28T05:19:44.000Z</published>
    <updated>2022-04-05T13:54:02.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流（续）"><a href="#流（续）" class="headerlink" title="流（续）"></a>流（续）</h2><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p><img data-src="/images/javase-advanced15.md-0.png"></p><h4 id="字符流的父类（抽象类）"><a href="#字符流的父类（抽象类）" class="headerlink" title="字符流的父类（抽象类）"></a>字符流的父类（抽象类）</h4><ul><li>  Reader（字符输入流）</li><li>  Writer（字符输出流）</li></ul><h4 id="字符流的子类"><a href="#字符流的子类" class="headerlink" title="字符流的子类"></a>字符流的子类</h4><h5 id="文件字符流（自带缓冲区）"><a href="#文件字符流（自带缓冲区）" class="headerlink" title="文件字符流（自带缓冲区）"></a>文件字符流（自带缓冲区）</h5><ul><li>FileReader<ul><li>int read()：从输入流中读取一个字符数据。返回读到的字符数据，如果达到流末尾，返回-1。</li><li>int read(char[] c)：从输入流中读取字符数组长度的字符数据存入数组中。返回实际读到的字符数，如果达到流末尾，返回-1。</li></ul></li><li>FileWriter<ul><li>void write(int n)：将指定字符写入输出流，只能写入包含16位低阶字节的整型数值，16位高阶字节将会被忽略。</li><li>void write(String str)：将指定字符串写入输出流。</li><li>void write(char[] cbuf)：将指定字符数组写入输出流。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FR</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">while</span> ((data = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) data);</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 123abc你好</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FW</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;out3.txt&quot;</span>);</span><br><span class="line">        fw.write(<span class="number">110</span>);</span><br><span class="line">        fw.write(<span class="string">&quot;Guest997&quot;</span>);</span><br><span class="line">        fw.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出的文件内容为 nGuest997你好</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件复制（只能复制文本文件，因为其它文件并没有字符编码，自然就无法正常读取和写入）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;copy2.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">while</span> ((data = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fw.write(data);</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出的文件内容为 123abc你好</span></span><br></pre></td></tr></table></figure><h5 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h5><p>BufferedReader / BufferedWriter</p><ul><li>  高效读写</li><li>  支持换行输入符</li><li>  支持读一行或写一行</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">BufferedReader</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class BR &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        FileReader fr1 = <span class="keyword">new</span> FileReader(<span class="string">&quot;test2.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">BufferedReader</span> br1 = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(fr1);     <span class="comment">//需要传入 Reader 的实现类</span></span><br><span class="line">        <span class="built_in">int</span> data;</span><br><span class="line">        <span class="keyword">while</span> ((data = br1.read()) != <span class="number">-1</span>) &#123;</span><br><span class="line">            System.out.<span class="built_in">print</span>((<span class="built_in">char</span>) data);</span><br><span class="line">        &#125;</span><br><span class="line">        br1.close();     <span class="comment">//只需关闭 br 即可，br 内部会关闭 fr。</span></span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;\n------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        FileReader fr2 = <span class="keyword">new</span> FileReader(<span class="string">&quot;test2.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">BufferedReader</span> br2 = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(fr2);</span><br><span class="line">        <span class="keyword">String</span> lineData;</span><br><span class="line">        <span class="keyword">while</span> ((lineData = br2.readLine()) != <span class="keyword">null</span>) &#123;        <span class="comment">//读取一行数据，读取到最后一行之后就为 null。</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(lineData);</span><br><span class="line">        &#125;</span><br><span class="line">        br2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">456</span></span><br><span class="line"><span class="comment">def</span></span><br><span class="line"><span class="comment">世界</span></span><br><span class="line"><span class="comment">------</span></span><br><span class="line"><span class="comment">456</span></span><br><span class="line"><span class="comment">def</span></span><br><span class="line"><span class="comment">世界</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BW</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;out4.txt&quot;</span>);</span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">        bw.write(<span class="string">&quot;Guest997&quot;</span>);</span><br><span class="line">        bw.newLine();       <span class="comment">//换行</span></span><br><span class="line">        bw.write(<span class="string">&quot;一个在互联网下的小小 Coder&quot;</span>);</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出的文件内容为</span></span><br><span class="line"><span class="comment">Guest997</span></span><br><span class="line"><span class="comment">一个在互联网下的小小 Coder</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h5><p>PrintWriter</p><ul><li>  封装了 print() 和 println()。</li><li>  支持数据原样打印。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PW</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="string">&quot;print.txt&quot;</span>);</span><br><span class="line">        pw.println(<span class="number">110</span>);</span><br><span class="line">        pw.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        pw.println(<span class="number">3.1415926</span>);</span><br><span class="line">        pw.println(<span class="keyword">true</span>);</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出的文件内容为</span></span><br><span class="line"><span class="comment">110</span></span><br><span class="line"><span class="comment">你好</span></span><br><span class="line"><span class="comment">3.1415926</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h5><p>InputStreamReader / OutputStreamWriter</p><ul><li>  字节流和字符流互转。</li><li>  可设置字符的编码方式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ISR</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis, StandardCharsets.UTF_8);     <span class="comment">//需要传入 InputStream 的实现类</span></span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">while</span> ((data = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) data);      <span class="comment">//之前使用 FileInputStream 读取中文时是会乱码的。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 123abc你好</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OSW</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;out5.txt&quot;</span>);</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos, StandardCharsets.UTF_8);</span><br><span class="line">        osw.write(<span class="number">99</span>);</span><br><span class="line">        osw.write(<span class="string">&quot;guest&quot;</span>);     <span class="comment">//之前使用 FileOutputStream 还需要转成字节数组，中文还需要设置编码。</span></span><br><span class="line">        osw.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出的文件内容为 cguest你好</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;流（续）&quot;&gt;&lt;a href=&quot;#流（续）&quot; class=&quot;headerlink&quot; title=&quot;流（续）&quot;&gt;&lt;/a&gt;流（续）&lt;/h2&gt;&lt;h3 id=&quot;字符流&quot;&gt;&lt;a href=&quot;#字符流&quot; class=&quot;headerlink&quot; title=&quot;字符流&quot;&gt;&lt;/a&gt;字符流&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&quot;/images/javase-advanced15.md-0.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;字符流的父类（抽象类）&quot;&gt;&lt;a href=&quot;#字符流的父类（抽象类）&quot; class=&quot;headerlink&quot; title=&quot;字符流的父类（抽象类）&quot;&gt;&lt;/a&gt;字符流的父类（抽象类）&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;  Reader（字符输入流）&lt;/li&gt;
&lt;li&gt;  Writer（字符输出流）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(十四)</title>
    <link href="http://guest997.tk/2022/03/27/javase-advanced14/"/>
    <id>http://guest997.tk/2022/03/27/javase-advanced14/</id>
    <published>2022-03-27T04:21:07.000Z</published>
    <updated>2022-04-05T13:54:02.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p>内存与存储设备之间传输数据的通道。数据借助流传输。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>按方向分为：<ul><li>输入流：将存储设备中的内容读入到内存中。</li><li>输出流：将内存中的内容写入到存储设备中。</li></ul></li><li>按单位分为：<ul><li>字节流：以字节为单位，可以读写所有数据。</li><li>字符流：以字符为单位，只能读写文本数据。</li></ul></li><li>按功能分为：<ul><li>字节流：具有实际传输数据的读写功能。</li><li>过滤流：在节点流的基础之上增强功能。</li></ul></li></ul><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p><img data-src="/images/javase-advanced14.md-0.png"></p><h4 id="字节流的父类（抽象类）"><a href="#字节流的父类（抽象类）" class="headerlink" title="字节流的父类（抽象类）"></a>字节流的父类（抽象类）</h4><ul><li>  InputStream（字节输入流）</li><li>  OutputStream（字节输出流）</li></ul><h4 id="字节流的子类"><a href="#字节流的子类" class="headerlink" title="字节流的子类"></a>字节流的子类</h4><h5 id="文件字节流"><a href="#文件字节流" class="headerlink" title="文件字节流"></a>文件字节流</h5><ul><li>FileInputStream<ul><li>int read()：从输入流中读取一个字节数据。返回读到的字节数据，如果达到文件末尾，返回-1。</li><li>int read(byte[] b)：从输入流中读取字节数组长度的字节数据存入数组中。返回实际读到的字节数，如果达到文件末尾，返回-1。</li></ul></li><li>FileOutputStream<ul><li>void write(int b)：将指定字节写入输出流。</li><li>void write(byte[] b)：一次写多个字节，将数组中所有字节，写入输出。</li></ul></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FIS</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws IOException </span>&#123;</span><br><span class="line">        <span class="comment">//文件字节输入流</span></span><br><span class="line">        FileInputStream fis01 = <span class="keyword">new</span> <span class="built_in">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">while</span> ((data = fis01.<span class="built_in">read</span>()) != <span class="number">-1</span>) &#123;   <span class="comment">//一次读一个字节</span></span><br><span class="line">            System.out.<span class="built_in">print</span>((<span class="keyword">char</span>) data);        <span class="comment">//用这种方式中文会乱码，建议使用字符流。</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>();</span><br><span class="line"></span><br><span class="line">        FileInputStream fis02 = <span class="keyword">new</span> <span class="built_in">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//方式二（推荐）</span></span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];    <span class="comment">//创建缓冲区</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis02.<span class="built_in">read</span>(buf)) != <span class="number">-1</span>) &#123;     <span class="comment">//一次读1024个字节</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="keyword">new</span> <span class="built_in"><span class="keyword">String</span></span>(buf, <span class="number">0</span>, len, StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fis01.<span class="built_in">close</span>();</span><br><span class="line">        fis02.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">123abcä½&amp;nbsp;å¥½</span></span><br><span class="line"><span class="comment">123abc你好</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//文件字节输出流</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;out.txt&quot;</span>, <span class="keyword">false</span>);      <span class="comment">//第二个参数表示是否为追加内容。默认就是内容覆盖的。</span></span><br><span class="line">        <span class="comment">//写入数据</span></span><br><span class="line">        fos.write(<span class="number">99</span>);       <span class="comment">//参数不是数字的意思，而是 ASCII 码。</span></span><br><span class="line">        fos.write(<span class="string">&quot;guest&quot;</span>.getBytes());</span><br><span class="line">        fos.write(<span class="string">&quot;你好&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出的文件内容为 cguest你好</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件复制</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;copy.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h5><p>BufferedInputStream / BufferedOutputStream</p><ul><li>  提高 IO 效率，减少访问磁盘的次数。</li><li>  数据存储在缓冲区中。flush 方法可以将缓存区的内容写入文件，也可以直接关闭，因为其 close 方法就已经调用了 flush 方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);     <span class="comment">//需要传入 InputStream 的实现类</span></span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">while</span> ((data = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) data);       <span class="comment">//用这种方式中文会乱码，建议使用字符流。</span></span><br><span class="line">        &#125;</span><br><span class="line">        bis.close();        <span class="comment">//只需关闭 bis 即可，bis 内部会关闭 fis。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 123abcä½&amp;nbsp;å¥½</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BOS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;out2.txt&quot;</span>);</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">        bos.write(<span class="string">&quot;guest997 你好&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        bos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出的文件内容为 guest997 你好</span></span><br></pre></td></tr></table></figure><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><p>ObjectInputStream / ObjectOutputStream</p><ul><li>  具有缓冲区功能。</li><li>  具有读写8种基本数据类型和字符串功能。</li><li>  具有读写对象的功能：</li><li>  readObject()：从流中读取一个对象。</li><li>  writeObject(Object obj)：向流中写入一个对象。</li></ul><p><strong>使用流传输对象的过程称为序列化或反序列化。</strong></p><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;object.txt&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;Guest997&quot;</span>));        <span class="comment">//如果想添加多个对象可以使用集合实现。</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;guest997&quot;</span>));</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;      <span class="comment">//实现了 Serializable 接口才能被序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5292333357383387740L</span>;     <span class="comment">//IDEA 自动生成的 serialVersionUID。</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OIS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;object.txt&quot;</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        Person p1 = (Person) ois.readObject();</span><br><span class="line">        Person p2 = (Person) ois.readObject();</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">person&#123;name=&#x27;Guest997&#x27;&#125;</span></span><br><span class="line"><span class="comment">person&#123;name=&#x27;guest997&#x27;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>序列化和反序列化注意事项：</strong></p><ul><li>  序列化类必须实现 Serializable 接口。</li><li>  序列化类中的类对象属性也必须实现 Serializable 接口。</li><li>  serialVersionUID 用于保证序列化和反序列化的类是同一个类。（即使其它代码都相同，只要 serialVersionUID 不一样，系统就会认为这不是同一个类，反序列化就会失败）</li><li>  使用 transient 关键字修饰属性，可以避免该属性被序列化。（反序列化时属性就为0或者 null）</li><li>  静态属性不能被序列化。</li></ul><h3 id="常见字符编码"><a href="#常见字符编码" class="headerlink" title="常见字符编码"></a>常见字符编码</h3><ul><li>  IOS-8859-1：收录除 ASCII 码外，还包括西欧、希腊语、泰语、阿拉伯语、希伯来语对应的文字符号。采用1个字节来表示，最多只能表示256个字符。</li><li>  UTF-8：针对 Unicode 码表的可变长度字符编码。国际上使用的编码，也称为“万国码”，收录了几乎所有国家的常用字符。采用1至3个字节来表示一个字符。</li><li>  GB2312：简体中文，采用1个或2个字节来表示字符，95年之前所采用的编码。</li><li>  GBK：简体中文的扩充，GB2312的升级版本。</li><li>  BIG5：繁体中文。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;流&quot;&gt;&lt;a href=&quot;#流&quot; class=&quot;headerlink&quot; title=&quot;流&quot;&gt;&lt;/a&gt;流&lt;/h2&gt;&lt;p&gt;内存与存储设备之间传输数据的通道。数据借助流传输。&lt;/p&gt;
&lt;h3 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;按方向分为：&lt;ul&gt;
&lt;li&gt;输入流：将存储设备中的内容读入到内存中。&lt;/li&gt;
&lt;li&gt;输出流：将内存中的内容写入到存储设备中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按单位分为：&lt;ul&gt;
&lt;li&gt;字节流：以字节为单位，可以读写所有数据。&lt;/li&gt;
&lt;li&gt;字符流：以字符为单位，只能读写文本数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按功能分为：&lt;ul&gt;
&lt;li&gt;字节流：具有实际传输数据的读写功能。&lt;/li&gt;
&lt;li&gt;过滤流：在节点流的基础之上增强功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;字节流&quot;&gt;&lt;a href=&quot;#字节流&quot; class=&quot;headerlink&quot; title=&quot;字节流&quot;&gt;&lt;/a&gt;字节流&lt;/h3&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(十三)</title>
    <link href="http://guest997.tk/2022/03/26/javase-advanced13/"/>
    <id>http://guest997.tk/2022/03/26/javase-advanced13/</id>
    <published>2022-03-26T04:06:01.000Z</published>
    <updated>2022-04-05T13:54:02.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h2><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static void reverse(List&lt;?&gt; list)</td><td>反转集合元素</td></tr><tr><td>static void shuffle(List&lt;?&gt; list)</td><td>随机打乱集合元素的顺序</td></tr><tr><td>static void sort(List<T> list)</td><td>升序排序（元素类型需要实现 Comparable 接口）</td></tr></tbody></table><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> CollectionsTest &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        List&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        <span class="built_in">list</span>.add(<span class="number">6</span>);</span><br><span class="line">        <span class="built_in">list</span>.add(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">list</span>.add(<span class="number">8</span>);</span><br><span class="line">        <span class="built_in">list</span>.add(<span class="number">90</span>);</span><br><span class="line">        <span class="built_in">list</span>.add(<span class="number">11</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="built_in">list</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>sort(<span class="built_in">list</span>);     <span class="comment">//排序，还能通过实现 Comparator 接口定制排序规则。</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>binary<span class="constructor">Search(<span class="params">list</span>, 11)</span>);     <span class="comment">//二分查找法寻找元素下标，前提是元素是排序过了的。</span></span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>reverse(<span class="built_in">list</span>);      <span class="comment">//反转集合元素</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>shuffle(<span class="built_in">list</span>);      <span class="comment">//随机打乱集合元素的顺序</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//集合转数组（toArray 方法）</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">list</span>.<span class="params">toArray</span>()</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组只能直接转 list。注意：基本类型数组转成 list 时需要修改为包装类，否则全部元素会合起来只有一个元素存在。</span></span><br><span class="line">        <span class="built_in">int</span><span class="literal">[]</span> i = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">i</span>)</span>.size<span class="literal">()</span>);</span><br><span class="line">        String<span class="literal">[]</span> s = &#123;<span class="string">&quot;guest&quot;</span>, <span class="string">&quot;guest997&quot;</span>, <span class="string">&quot;Guest997&quot;</span>&#125;;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">s</span>)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">[6, 1, 8, 90, 11]</span></span><br><span class="line"><span class="comment">[1, 6, 8, 11, 90]</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">[90, 11, 8, 6, 1]</span></span><br><span class="line"><span class="comment">[90, 8, 6, 1, 11]</span></span><br><span class="line"><span class="comment">[90, 8, 6, 1, 11]</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">[guest, guest997, Guest997]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Collections-工具类&quot;&gt;&lt;a href=&quot;#Collections-工具类&quot; class=&quot;headerlink&quot; title=&quot;Collections 工具类&quot;&gt;&lt;/a&gt;Collections 工具类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
</summary>
      
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(十二)</title>
    <link href="http://guest997.tk/2022/03/25/javase-advanced12/"/>
    <id>http://guest997.tk/2022/03/25/javase-advanced12/</id>
    <published>2022-03-25T04:24:26.000Z</published>
    <updated>2022-04-05T13:54:02.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合（续三）"><a href="#集合（续三）" class="headerlink" title="集合（续三）"></a>集合（续三）</h2><h3 id="Map-体系"><a href="#Map-体系" class="headerlink" title="Map 体系"></a>Map 体系</h3><p><img data-src="/images/javase-advanced12.md-0.png"></p><h3 id="Map-根接口"><a href="#Map-根接口" class="headerlink" title="Map 根接口"></a>Map 根接口</h3><p>用于存储任意键值对（Key-Value）。</p><ul><li>键：无序、无下标、不允许重复。</li><li>值：无序、无下标、允许重复。</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>V put(K key,V value)</td><td>将对象存入。key 相同则覆盖 value 值。</td></tr><tr><td>Object get(Object key)</td><td>根据 key 获取相应的 value。</td></tr><tr><td>Set<K> keySet()</td><td>返回所有的 key</td></tr><tr><td>Collection<V> values()</td><td>返回所有的 value</td></tr><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</td><td>返回所有 Key-Value，用于遍历 Map。</td></tr></tbody></table><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            map.<span class="built_in">put</span>(i, i * i);      <span class="comment">//存入元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>(map);</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(map.<span class="built_in">containsKey</span>(<span class="number">0</span>));     <span class="comment">//是否有 key 为 0 的元素</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(map.<span class="built_in">containsValue</span>(<span class="number">1</span>));   <span class="comment">//是否有 value 为 1 的元素</span></span><br><span class="line"></span><br><span class="line">        map.<span class="built_in">remove</span>(<span class="number">0</span>);      <span class="comment">//根据 key 移除元素</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//entrySet 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.<span class="built_in">entrySet</span>()) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;key-value：&quot;</span> + entry.<span class="built_in">getKey</span>() + <span class="string">&quot;-&quot;</span> + entry.<span class="built_in">getValue</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只遍历 key 或 value</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key : map.<span class="built_in">keySet</span>()) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;Key：&quot;</span> + key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer value : map.<span class="built_in">values</span>()) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;value：&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//迭代器遍历</span></span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; iterator = map.<span class="built_in">entrySet</span>().<span class="built_in">iterator</span>();</span><br><span class="line">        <span class="keyword">while</span> (iterator.<span class="built_in">hasNext</span>()) &#123;</span><br><span class="line">            Map.Entry&lt;Integer, Integer&gt; next = iterator.<span class="built_in">next</span>();</span><br><span class="line">            Integer key = next.<span class="built_in">getKey</span>();</span><br><span class="line">            Integer value = next.<span class="built_in">getValue</span>();</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;key-value：&quot;</span> + key + <span class="string">&quot;-&quot;</span> + value);</span><br><span class="line">            iterator.<span class="built_in">remove</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">&#123;0=0, 1=1, 2=4, 3=9, 4=16, 5=25&#125;</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">&#123;1=1, 2=4, 3=9, 4=16, 5=25&#125;</span></span><br><span class="line"><span class="comment">key-value：1-1</span></span><br><span class="line"><span class="comment">key-value：2-4</span></span><br><span class="line"><span class="comment">key-value：3-9</span></span><br><span class="line"><span class="comment">key-value：4-16</span></span><br><span class="line"><span class="comment">key-value：5-25</span></span><br><span class="line"><span class="comment">Key：1</span></span><br><span class="line"><span class="comment">Key：2</span></span><br><span class="line"><span class="comment">Key：3</span></span><br><span class="line"><span class="comment">Key：4</span></span><br><span class="line"><span class="comment">Key：5</span></span><br><span class="line"><span class="comment">value：1</span></span><br><span class="line"><span class="comment">value：4</span></span><br><span class="line"><span class="comment">value：9</span></span><br><span class="line"><span class="comment">value：16</span></span><br><span class="line"><span class="comment">value：25</span></span><br><span class="line"><span class="comment">key-value：1-1</span></span><br><span class="line"><span class="comment">key-value：2-4</span></span><br><span class="line"><span class="comment">key-value：3-9</span></span><br><span class="line"><span class="comment">key-value：4-16</span></span><br><span class="line"><span class="comment">key-value：5-25</span></span><br><span class="line"><span class="comment">&#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>第二三种遍历方式会比第一种效率要高，第三种方式看起来冗余，却有其优点所在。其在遍历时可以调用 iterator.remove 方法来删除键值对，另两种则不行，因为会出现前面提到过的异常。（并发修改异常）</p><h4 id="HashMap（重点）"><a href="#HashMap（重点）" class="headerlink" title="HashMap（重点）"></a>HashMap（重点）</h4><p>哈希表结构实现（数组+链表+红黑树）。运行效率快、线程不安全。允许用 null 作为 key 或是 value。由于所使用的方法和 Map 也差不多，当然也有它自己特有的方法，有兴趣的可以自己去看下 api 文档，在这我就不再进行代码演示。</p><ul><li>  运行效率快： 散列的价值在于速度。它将键保存在某处，以便能够快速找到。存储一组元素最快的数据结构是数组，所以使用它来表示键的信息，但是数组是固定大小的，我们需要能够保存可变大小的数据。因此数组不能保存键本身，而是通过键生成一个数字作为数组的下标，这个数字就是散列码，由定义在 Object 中的或是自定义类覆盖的 hashCode() 生成。为解决数组容量被固定的问题，不同的键可以生成相同的下标，也就可能产生冲突。因此数组多大就不重要了，任何键在数组中总能找到自己的位置。 于是查询一个值的过程首先就是计算散列码，然后使用散列码查询数组。如果能够保证数组下标没有冲突，那就有了一个完美的散列函数，但这种情况是特例。通常，冲突由外部链接处理：数组并不直接保存值，而是保存值的 list，然后对 list 中的值使用 equals() 方法进行线性的查询，这也就是为什么 HashMap 存放自定义类需要重写 hashCode() 和 equals() 的原因。这部分的查询自然会比较慢，但是，如果散列函数好的话，数组的每个位置就会有较少的值。这样就不必查询整个 list，而是快速跳转到数组的某个位置，只对较少的元素进行比较。这便是 HashMap 如此快的原因。</li><li>  线程不安全：会在下面的源码分析进行解释。</li></ul><h4 id="HashMap-源码分析"><a href="#HashMap-源码分析" class="headerlink" title="HashMap 源码分析"></a>HashMap 源码分析</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;        <span class="comment">//默认初始化容量：2^4 = 16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;        <span class="comment">//数组最大容量：2^30</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75</span>f;        <span class="comment">//默认加载因子：判断数组是否扩容的一个因子。当存储元素个数超过了数组容量的75%，那么数组就会进行扩容。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;            <span class="comment">//链表转为红黑树的条件之一：链表长度 &gt;= 8</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;        <span class="comment">//链表转为红黑树的条件之二：数组长度 &gt;= 64</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;        <span class="comment">//红黑树转为链表的条件：链表长度 &lt;= 6</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;        <span class="comment">//存储的数组</span></span><br><span class="line"><span class="keyword">transient</span> <span class="built_in">int</span> <span class="built_in">size</span>;            <span class="comment">//存储的元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存储的元素其实就是 Node&lt;K,V&gt; 结点，除了 key 和 value，还有 Node&lt;K,V&gt; next 表示下一个结点。</span></span><br><span class="line"><span class="keyword">static</span> class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K <span class="built_in">key</span>;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参构造器只是赋值了一个默认加载因子，所以刚创建的 HashMap 对象并没有分配容量，目的就是为了节省空间。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">HashMap</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line"><span class="keyword">public</span> V put(K <span class="built_in">key</span>, V value) &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(<span class="built_in">key</span>), <span class="built_in">key</span>, value, <span class="keyword">false</span>, <span class="keyword">true</span>);        <span class="comment">//调用下面的方法，并将 hash 值、key 和 value 作为参数传入。第四个参数表示如果该 key 存在值且值为 null 的话，就允许插入新值。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V putVal(<span class="built_in">int</span> hash, K <span class="built_in">key</span>, V value, <span class="built_in">boolean</span> onlyIfAbsent, <span class="built_in">boolean</span> evict) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="built_in">int</span> n, i;        <span class="comment">//tab 哈希数组，p 结点，n hashMap 长度，i 计算出的数组下标。</span></span><br><span class="line">    <span class="comment">//判断 table 是否等于空或者等于0，如果是就进行初始化。resize 方法在这里只是被用于赋值给 n，真正进行空间分配的是 resize 方法。</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span>  (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//根据对 hash 值的计算得出存储位置，判断该位置是否已经有元素，没有就直接插入。</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)        <span class="comment">//注意：即使该位置已经有元素了，还是会将 p 进行赋值。即该位置已有元素，则 p = 已有元素，否则就将执行下行代码，p = 新插入元素。</span></span><br><span class="line">        tab[i] = newNode(hash, <span class="built_in">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;        <span class="comment">//哈希冲突处理（此时 p = 已有元素）</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;        <span class="comment">//e 临时节点，k 已有元素结点的 key。</span></span><br><span class="line">        <span class="comment">//第一种：如果新插入元素的 hash 值和 key 都与 p 结点的相等或 key 与 p 结点的相等，e = p。</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.<span class="built_in">key</span>) == <span class="built_in">key</span>  (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">//第二种：如果 p 是红黑树结点，则在红黑树中进行添加，如果该节点已经存在，则返回该节点（不为 null），该值很重要，用来判断 put 操作是否成功，如果添加成功则返回 null。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, <span class="built_in">key</span>, value);</span><br><span class="line">        <span class="comment">//第三种：到这就表示它是链表结点，</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;        <span class="comment">//遍历链表</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;        <span class="comment">//如果遍历到尾部，则表明添加的 key-value 没有重复，在尾部插入元素。</span></span><br><span class="line">                    p.next = newNode(hash, <span class="built_in">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)        <span class="comment">//判断是否要转换为红黑树结构</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果存在和新插入元素的 hash 值和 key 相等或有重复 key 的元素就结束循环。</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span>  (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//有重复 key 的元素，则插入新值，返回旧值。</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent  oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++<span class="built_in">size</span> &gt; threshold)        <span class="comment">//元素个数+1，判断是否大于临界值，大于则扩容。</span></span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩容</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;        <span class="comment">//旧数组</span></span><br><span class="line">    <span class="built_in">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;        <span class="comment">//旧数组长度</span></span><br><span class="line">    <span class="built_in">int</span> oldThr = threshold;        <span class="comment">//旧数组的临界值。未初始化时的临界值是0，插入元素时就会在下面进行赋值了。</span></span><br><span class="line">    <span class="built_in">int</span> newCap, newThr = <span class="number">0</span>;        <span class="comment">//初始化新的数组长度和临界值</span></span><br><span class="line">    <span class="comment">//旧长度大于0时</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;    <span class="comment">//当旧长度 &gt;= 数组长度最大值</span></span><br><span class="line">            threshold = Integer.MAX_VALUE;    <span class="comment">//临界值为整数的最大值</span></span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//给新长度赋值为旧长度的2倍之后，如果新长度 &lt; 数组长度最大值且旧长度 &gt;= 16</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>;        <span class="comment">//新临界值赋值为旧临界值2倍</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果能到这一步就说明旧长度是0，但是旧临界值又 &gt; 0，就说明之前是存过数据的，只不过都被移除了。直接将新长度赋值为旧临界值。(根据下面的初始化和上面的长度和临界值同时增加两倍能够得出临界值永远小于长度)</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>)</span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">//首次初始化</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;        <span class="comment">//新长度赋值为16</span></span><br><span class="line">        newThr = (<span class="built_in">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);        <span class="comment">//新临界值赋值为 0.75 x 16 = 12</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果新长度一直没被赋值，也就是上面提到的存过数据但是都被移除的情况，就需要设置个新临界值给它。</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//ft = 新长度 * 0.75（loadFactor 在构造器中就被赋值了，大多情况下这个负载因子是不会去改变的，也就是0.75）</span></span><br><span class="line">        <span class="built_in">float</span> ft = (<span class="built_in">float</span>)newCap * loadFactor;</span><br><span class="line">        <span class="comment">//当新长度和 ft 都小于数组长度最大值时，新临界值等于 ft，否则就为整数的最大值。</span></span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="built_in">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="built_in">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上面只是把各种值都确定了，下面就进行真实的空间分配了。（下面的源码由于数学不太好，就不进行讲解了。。）</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    @SuppressWarnings(&#123;<span class="string">&quot;rawtypes&quot;</span>,<span class="string">&quot;unchecked&quot;</span>&#125;)</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).<span class="built_in">split</span>(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    do &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;        <span class="comment">//返回新数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面有很多特定的数字，比如初始化的长度、红黑树和链表的转化临界值、扩容倍数和0.75的负载因子……为什么有这样确定的数值，肯定都是经过数学计算和实际测试的，感兴趣的可以到网上查一下。</p><p>其线程不安全就表现在比如这行代码中：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="literal">tab</span> = table) == <span class="literal">null</span>  (n = <span class="literal">tab</span>.<span class="built_in">length</span>) == <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>A、B 两个线程同时进行 put 操作，并且 hash 函数计算出的插入下标是相同的，当线程 A 执行完上面代码后挂起，而线程 B 得到时间片后在该下标处插入了元素，完成了正常的插入。然后线程 A 继续执行，由于之前已经进行了 hash 碰撞的判断，所已不会再进行判断，而是直接进行插入，这就导致了线程 B 插入的数据被线程 A 覆盖了，从而线程不安全。</p><p>还有就是比如这行代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (++size &gt; threshold)</span><br></pre></td></tr></table></figure><p>A、B 两个线程同时进行 put 操作，假设当前 size 大小为10，当线程 A 执行到上面代码时，获得 size 值为10后挂起，线程 B 又拿到 size 的值10进行+1操作。然后线程 A 继续执行，当执行完 put 操作后，将它拿到 size 的值10进行+1操作。此时，线程 A、B 都执行了一次 put 操作，然而 size 的值却只增加了1，所有说还是因为数据覆盖导致的线程不安全。</p><h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h4><p>哈希表结构实现（数组+链表）。运行效率慢、线程安全。不允许 null 作为 key 或是 value。</p><p>由于 Hashtable 现在已经用的很少了，并且方法都差不多，就不在这赘述了。其实如果想要保证线程安全，还可以使用别的 Map 类。（synchronizedMap 或 ConcurrentHashMap）如果想了解可以点击下方的链接。<br><a href="https://www.cnblogs.com/cruze/p/3689249.html">https://www.cnblogs.com/cruze/p/3689249.html</a><br><a href="https://www.jianshu.com/p/4e03b08dc007">https://www.jianshu.com/p/4e03b08dc007</a></p><h5 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h5><p>Hashtable 的子类，要求 key 和 value 都是字符串。通常用于配置文件的读取。它继承了 Hashtable 的方法，与流关系密切，之后的文章会进行讲解。</p><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><p>红黑树结构实现。无序的、不可重复 key 的集合。允许用 null 作为 key 或是 value。由于所使用的方法和 Map 也差不多，当然也有它自己特有的方法，有兴趣的可以自己去看下 api 文档，在这我就不再进行代码演示。</p><p>实现了 SortedMap 接口，对集合元素自动排序。TreeMap 的泛型类也是需要实现 Comparable 接口的，跟之前的 TreeMap 是一样的，同样的它也能通过实现 Comparator 接口定制多个排序规则。代码可以在上篇文章中找到，就不再进行代码演示。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;集合（续三）&quot;&gt;&lt;a href=&quot;#集合（续三）&quot; class=&quot;headerlink&quot; title=&quot;集合（续三）&quot;&gt;&lt;/a&gt;集合（续三）&lt;/h2&gt;&lt;h3 id=&quot;Map-体系&quot;&gt;&lt;a href=&quot;#Map-体系&quot; class=&quot;headerlink&quot; title=&quot;Map 体系&quot;&gt;&lt;/a&gt;Map 体系&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&quot;/images/javase-advanced12.md-0.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Map-根接口&quot;&gt;&lt;a href=&quot;#Map-根接口&quot; class=&quot;headerlink&quot; title=&quot;Map 根接口&quot;&gt;&lt;/a&gt;Map 根接口&lt;/h3&gt;&lt;p&gt;用于存储任意键值对（Key-Value）。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(十一)</title>
    <link href="http://guest997.tk/2022/03/24/javase-advanced11/"/>
    <id>http://guest997.tk/2022/03/24/javase-advanced11/</id>
    <published>2022-03-24T03:44:25.000Z</published>
    <updated>2022-04-05T13:54:02.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合（续二）"><a href="#集合（续二）" class="headerlink" title="集合（续二）"></a>集合（续二）</h2><h3 id="Collection-子接口"><a href="#Collection-子接口" class="headerlink" title="Collection 子接口"></a>Collection 子接口</h3><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>全部继承自 Collection 中的方法，没有自己特有的方法。故不再进行代码演示。</p><h5 id="HashSet（重点）"><a href="#HashSet（重点）" class="headerlink" title="HashSet（重点）"></a>HashSet（重点）</h5><p>哈希表结构实现（数组+链表+红黑树）。由于所使用的方法和 Set 也差不多，当然也有它自己特有的方法，有兴趣的可以自己去看下 api 文档，在这我就不再进行代码演示。HashSet 的底层实现是 HashMap，这个我会在后面的文章讲到，所以下面就不进行源码分析了。</p><p>HashSet 存储过程：</p><ol><li> 根据 hashCode 计算保存的位置，如果位置为空，则直接保存，否则执行第二步。</li><li> 执行 equals 方法，如果方法返回 true，则认为是重复，拒绝存储，否则形成链表。</li></ol><p>在使用 IDEA 生成的重写 hashCode 方法时，是如下的代码。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> Objects.<span class="title">hash</span><span class="params">(参数名)</span></span>;        <span class="comment">//调用下面的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object... values)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> Arrays.<span class="title">hashCode</span><span class="params">(values)</span></span>;        <span class="comment">//调用下面的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(Object a[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (Object element : a)</span><br><span class="line">        result = 31 * result + (element == <span class="keyword">null</span> ? 0 : element.hashCode());        <span class="comment">//这里的 hashCode 方法是操作系统帮我们实现的。</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到用31这个数字作为生成 hashCode 的乘数，这是为什么呢？</p><ul><li>  尽量减少散列冲突。</li><li>  可以被 JVM 优化，用移位和减法来代替乘法，以获得更好的性能。</li></ul><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h5><p>红黑树结构实现。有序的、不可重复的集合。实现了 SortedSet 接口，对集合元素自动排序。TreeSet 的底层实现是 TreeMap，这个我会在后面的文章讲到，所以下面就不进行源码分析了。TreeSet 的泛型类都需要实现 Comparable 接口，这是因为红黑树是类平衡二叉搜索树，会涉及到数据的比较，但是如果是自己定义的类，那又该按什么标准去比较呢？所以就需要实现 Comparable 接口，去指定排序规则。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        TreeSet&lt;Human&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> Human(<span class="string">&quot;guest&quot;</span>, <span class="number">18</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> Human(<span class="string">&quot;Guest&quot;</span>, <span class="number">18</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> Human(<span class="string">&quot;guest&quot;</span>, <span class="number">18</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> Human(<span class="string">&quot;guest&quot;</span>, <span class="number">20</span>));</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="title">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Human</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> int age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Human</span>(<span class="params"><span class="built_in">String</span> name, int age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setName</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> int <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setAge</span>(<span class="params">int age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Human&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> int <span class="function"><span class="title">compareTo</span>(<span class="params">Human o</span>)</span> &#123;     <span class="comment">//自定义排序规则，先比较名字再比较年龄。</span></span><br><span class="line">        int n1 = <span class="built_in">this</span>.getName().compareTo(o.getName());     <span class="comment">//返回0则表示同名</span></span><br><span class="line">        int n2 = <span class="built_in">this</span>.age - o.getAge();</span><br><span class="line">        <span class="keyword">return</span> n1 == <span class="number">0</span> ? n2 : n1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 [Human&#123;name=&#x27;Guest&#x27;, age=18&#125;, Human&#123;name=&#x27;guest&#x27;, age=18&#125;, Human&#123;name=&#x27;guest&#x27;, age=20&#125;]</span></span><br></pre></td></tr></table></figure><p>现在有个需求，我希望在不同情况下有不同的排序规则，那该怎么办？答案就是在实例化对象时，实现 Comparator 接口。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ComparatorTest</span> &#123;</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="literal">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        TreeSet&lt;<span class="built_in">String</span>&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;<span class="function"><span class="params">((o1, o2) -&gt; &#123;      <span class="regexp">//先比较长度再比较字符串</span></span></span></span><br><span class="line"><span class="regexp"><span class="params"><span class="function">            int n1 = o1.length() - o2.length();</span></span></span></span><br><span class="line"><span class="regexp"><span class="params"><span class="function">            int n2 = o1.compareTo(o2);      //</span>其实这里是有点代码冗余的，因为字符串的 compareTo 方法是先比较字符再比较长度的。</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">return</span> n1 == <span class="number">0</span> ? n2 : n1;</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">treeSet</span>.<span class="title">add</span><span class="params">(<span class="string">&quot;guest&quot;</span>)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">treeSet</span>.<span class="title">add</span><span class="params">(<span class="string">&quot;guest997&quot;</span>)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">treeSet</span>.<span class="title">add</span><span class="params">(<span class="string">&quot;Guest&quot;</span>)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(treeSet)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;集合（续二）&quot;&gt;&lt;a href=&quot;#集合（续二）&quot; class=&quot;headerlink&quot; title=&quot;集合（续二）&quot;&gt;&lt;/a&gt;集合（续二）&lt;/h2&gt;&lt;h3 id=&quot;Collection-子接口&quot;&gt;&lt;a href=&quot;#Collection-子接口&quot; class=&quot;headerlink&quot; title=&quot;Collection 子接口&quot;&gt;&lt;/a&gt;Collection 子接口&lt;/h3&gt;&lt;h4 id=&quot;Set&quot;&gt;&lt;a href=&quot;#Set&quot; class=&quot;headerlink&quot; title=&quot;Set&quot;&gt;&lt;/a&gt;Set&lt;/h4&gt;&lt;p&gt;全部继承自 Collection 中的方法，没有自己特有的方法。故不再进行代码演示。&lt;/p&gt;
&lt;h5 id=&quot;HashSet（重点）&quot;&gt;&lt;a href=&quot;#HashSet（重点）&quot; class=&quot;headerlink&quot; title=&quot;HashSet（重点）&quot;&gt;&lt;/a&gt;HashSet（重点）&lt;/h5&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(十)</title>
    <link href="http://guest997.tk/2022/03/23/javase-advanced10/"/>
    <id>http://guest997.tk/2022/03/23/javase-advanced10/</id>
    <published>2022-03-23T03:27:39.000Z</published>
    <updated>2022-04-05T13:54:02.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>其本质是参数化类型，把类型作为参数传递。常见形式有泛型类、泛型接口和泛型方法。</p><ul><li>  语法： T 称为<strong>类型占位符</strong>，表示一种引用类型。</li><li>  好处：提高代码的重用性。防止类型转换异常，提高代码的安全性。</li></ul><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        Generic&lt;<span class="built_in">String</span>&gt; stringGeneric = <span class="keyword">new</span> Generic&lt;&gt;(<span class="string">&quot;Guest&quot;</span>);</span><br><span class="line">        stringGeneric.out(stringGeneric.t);</span><br><span class="line">        System.out.println(stringGeneric.getT());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    T t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Generic</span>(<span class="params">T t</span>)</span> &#123;       <span class="comment">//作为构造器的参数</span></span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">out</span>(<span class="params">T t</span>)</span> &#123;      <span class="comment">//作为方法的参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;泛型类型为：&quot;</span> + t.getClass() + <span class="string">&quot;，数据为：&quot;</span> + t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="function"><span class="title">getT</span>(<span class="params"></span>)</span> &#123;       <span class="comment">//作为方法的返回值</span></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">泛型类型为：class java.lang.String，数据为：Guest</span></span><br><span class="line"><span class="comment">Guest</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="symbol">GenericInterface</span>&lt;<span class="symbol">T</span>&gt; &#123;  </span><br><span class="line">    T <span class="keyword">out</span>(T t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">GC01</span> <span class="symbol">implements</span> <span class="symbol">GenericInterface</span>&lt;<span class="symbol">String</span>&gt; &#123;        <span class="comment">//指定了泛型类型</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> String <span class="keyword">out</span>(String s) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">GC02</span>&lt;<span class="symbol">T</span>&gt; <span class="symbol">implements</span> <span class="symbol">GenericInterface</span>&lt;<span class="symbol">T</span>&gt; &#123;      <span class="comment">//没有指定泛型类型</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> T <span class="keyword">out</span>(T t) &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        GC01 gc01 = new GC01();</span><br><span class="line">        System.<span class="keyword">out</span>.println(gc01.<span class="keyword">out</span>(<span class="string">&quot;Guest&quot;</span>));</span><br><span class="line"></span><br><span class="line">        GC02&lt;Integer&gt; gc02 = new GC02&lt;&gt;();      <span class="comment">//需要在 new 时指定泛型类型</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(gc02.<span class="keyword">out</span>(<span class="number">997</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">Guest</span></span><br><span class="line"><span class="comment">997</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GenericMethod</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> GenericMethod().<span class="keyword">out</span>(<span class="string">&quot;Guest&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> GenericMethod().<span class="keyword">out</span>(<span class="number">997</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">out</span>(<span class="params">T t</span>)</span> &#123;      <span class="comment">//&lt;T&gt;更多地是表示该方法是一个泛型方法，不过这也使得该方法可以传入 T 类型的参数。</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型集合"><a href="#泛型集合" class="headerlink" title="泛型集合"></a>泛型集合</h3><p>类型安全的集合，强制集合元素的类型必须一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericCollection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        ListIterator&lt;Integer&gt; iterator = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="comment">//System.out.println((String) iterator.next());       加了泛型，会发现不用运行就会报错。</span></span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h2&gt;&lt;p&gt;其本质是参数化类型，把类型作为参数传递。常见形式有泛型类、泛型接口和泛型方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  语法： T 称为&lt;strong&gt;类型占位符&lt;/strong&gt;，表示一种引用类型。&lt;/li&gt;
&lt;li&gt;  好处：提高代码的重用性。防止类型转换异常，提高代码的安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;泛型类&quot;&gt;&lt;a href=&quot;#泛型类&quot; class=&quot;headerlink&quot; title=&quot;泛型类&quot;&gt;&lt;/a&gt;泛型类&lt;/h3&gt;&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package ml.guest997;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GenericClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Generic&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt; stringGeneric = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Generic&amp;lt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Guest&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stringGeneric.out(stringGeneric.t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(stringGeneric.getT());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//泛型类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Generic&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    T t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Generic&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;T t&lt;/span&gt;)&lt;/span&gt; &amp;#123;       &lt;span class=&quot;comment&quot;&gt;//作为构造器的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.t = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;out&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;T t&lt;/span&gt;)&lt;/span&gt; &amp;#123;      &lt;span class=&quot;comment&quot;&gt;//作为方法的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;泛型类型为：&amp;quot;&lt;/span&gt; + t.getClass() + &lt;span class=&quot;string&quot;&gt;&amp;quot;，数据为：&amp;quot;&lt;/span&gt; + t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getT&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;       &lt;span class=&quot;comment&quot;&gt;//作为方法的返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*结果为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;泛型类型为：class java.lang.String，数据为：Guest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;Guest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(九)</title>
    <link href="http://guest997.tk/2022/03/21/javase-advanced09/"/>
    <id>http://guest997.tk/2022/03/21/javase-advanced09/</id>
    <published>2022-03-21T03:21:20.000Z</published>
    <updated>2022-04-05T13:54:02.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合（续一）"><a href="#集合（续一）" class="headerlink" title="集合（续一）"></a>集合（续一）</h2><h3 id="Collection-子接口"><a href="#Collection-子接口" class="headerlink" title="Collection 子接口"></a>Collection 子接口</h3><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">void add(int index,Object o)</td><td align="left">在指定位置插入参数对象。</td></tr><tr><td align="left">boolean addAll(index,Collection c)</td><td align="left">将参数集合中的所有对象添加到其它集合中的指定位置。</td></tr><tr><td align="left">Object get(int index)</td><td align="left">返回集合中指定位置的元素。</td></tr><tr><td align="left">List subList(int fromIndex,int toIndex)</td><td align="left">返回 fromIndex 和 toIndex 之间的元素。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListMethods</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            list.add(i * i);</span><br><span class="line">        &#125;</span><br><span class="line">        ListIterator listIterator = list.listIterator();        <span class="comment">//列表迭代器</span></span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasNext()) &#123;        <span class="comment">//从前往后遍历</span></span><br><span class="line">            System.out.println(<span class="string">&quot;下标为：&quot;</span> + listIterator.nextIndex() + <span class="string">&quot;，内容为：&quot;</span> + listIterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasPrevious()) &#123;        <span class="comment">//从后往前遍历</span></span><br><span class="line">            System.out.println(<span class="string">&quot;下标为：&quot;</span> + listIterator.previousIndex() + <span class="string">&quot;，内容为：&quot;</span> + listIterator.previous());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移除内容为 4 的元素</span></span><br><span class="line">        <span class="comment">//list.remove(4);       下标数组越界，因为它会认为你要移除的是 4 这个下标的元素，但是实际存储就只有三个。</span></span><br><span class="line">        list.remove(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        System.out.println(list.subList(<span class="number">0</span>, <span class="number">2</span>));     <span class="comment">//切割列表，左闭右开。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">下标为：0，内容为：0</span></span><br><span class="line"><span class="comment">下标为：1，内容为：1</span></span><br><span class="line"><span class="comment">下标为：2，内容为：4</span></span><br><span class="line"><span class="comment">下标为：2，内容为：4</span></span><br><span class="line"><span class="comment">下标为：1，内容为：1</span></span><br><span class="line"><span class="comment">下标为：0，内容为：0</span></span><br><span class="line"><span class="comment">[0, 1]</span></span><br><span class="line"><span class="comment">[0, 1]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="ArrayList（重点）"><a href="#ArrayList（重点）" class="headerlink" title="ArrayList（重点）"></a>ArrayList（重点）</h5><p>数组结构实现。查询快、增删慢、线程不安全。</p><ul><li>  查询快：数组是一片连续的内存空间，根据数组的首地址+偏移量，就能直接计算出元素在内存中的位置。</li><li>  增删慢：数组是一片连续的内存空间，如果你想在特定的位置添加或删除一个元素，会使得其它元素都要进行移动。</li><li>  线程不安全：会在下面的源码分析进行解释。</li></ul><p>由于所使用的方法和 List 差不多，当然也有它自己特有的方法，有兴趣的可以自己去看下 api 文档，在这我就不再进行代码演示，我想讲下的是为什么创建 ArrayList 对象时是如下这样的。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">List list</span> = new ArrayList();</span><br></pre></td></tr></table></figure><p>而为什么不是这样子的？</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ArrayList arrayList</span> = new ArrayList();</span><br></pre></td></tr></table></figure><p>这里其实就是实现了多态，多态的好处之前的文章我就有提过。</p><p>List 是接口，它是不可以被直接实例化的，List 对象是被实例化为 ArrayList，但它实际上算是 List 对象，（父类的引用指向子类的对象）其只能使用 ArrayList 中已经实现了的 List 接口中的方法，ArrayList 中特有的方法是不可以被访问到的。</p><p>至于这样做的原因就是使程序更加灵活。如果是直接创建的 ArrayList 对象，那么它就就只能接收这一种类型的数据了，哪天该需求了，需要用别的实现类，就会发现需要改很多的代码，特别是如果你使用了 ArrayList 中特有的方法或属性。但是使用多态就不会这样，你就只需要修改上面的那行代码为相应的实现类即可。</p><h5 id="ArrayList-源码分析"><a href="#ArrayList-源码分析" class="headerlink" title="ArrayList 源码分析"></a>ArrayList 源码分析</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;        <span class="comment">//默认容量大小</span></span><br><span class="line">transient Object[] elementData;            <span class="comment">//存放元素的数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;            <span class="comment">//元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;        <span class="comment">//无参构造创建对象时，是个空数组，容量为0。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;        <span class="comment">//当往其中添加元素时</span></span><br><span class="line">    <span class="built_in">ensureCapacityInternal</span>(size + <span class="number">1</span>);        <span class="comment">//调用下面的方法，并将 size + 1 作为参数传入。</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;        <span class="comment">//当为空数组时，minCapacity 变量就取DEFAULT_CAPACITY 和 minCapacity 中的最大值，即为10。</span></span><br><span class="line">        minCapacity = Math.<span class="built_in">max</span>(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ensureExplicitCapacity</span>(minCapacity);        <span class="comment">//调用下面的方法，并将 minCapacity 作为参数传入。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)        <span class="comment">//当传入参数 - 存放元素的数组长度 &gt; 0时，调用下面的方法，并将 minCapacity 作为参数传入。</span></span><br><span class="line">        <span class="built_in">grow</span>(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;        <span class="comment">//允许的最大数组长度</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;        <span class="comment">//扩容</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);        <span class="comment">//oldCapacity &gt;&gt; 1表示把十进制对应的数字换成二进制后往右移一位，跟除以2差不多，并且对 CPU 而言，右移一位要比除以2快很多。最后这行代码的意思就是扩容为原来的大约1.5倍。</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = <span class="built_in">hugeCapacity</span>(minCapacity);</span><br><span class="line">    elementData = Arrays.<span class="built_in">copyOf</span>(elementData, newCapacity);        <span class="comment">//数组拷贝</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以从上面的整个流程看到，数组列表刚被 new 出来的时候，其实它容量为0，只有在当它加入元素时，容量才变为了10。当存满了10个元素时，就会调用扩容方法，并且扩容为原来的大约1.5倍。如果无法理解，将参数设置为0和10，模拟数组列表刚加入元素时以及容量满了的情景，一步步进行计算，就会明白了。</p><p>从上面的 add 方法中可以看到这样的代码：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">modCount</span>++<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>其实不止是 add 方法，但凡涉及到列表数组的元素变更时，都会有这行代码。这就要说起 ArrayList 的<strong>快速失败机制</strong>。</p><p>fail-fast 机制是 Java 集合中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生 fail-fast（快速失败）事件。为什么？因为假如两个线程同时对 ArrayList 进行操作，那么就很有可能导致 ArrayList 数据出错，当删除的时候我们相当于改变了这个 ArrayList 的结构，所以采用 fail-fast 机制来解决这样的问题。</p><p>当 ArrayList 使用 Iterator 去遍历数组时，会将 modCount 传进去，这个参数变成了 exceptedModCount，当我们遍历的时候就会检查当前的 modCount 和 execeptedModCount 是否一致，如果不一致直接抛出异常，因为在遍历时，遍历的数组列表结构发生了改变，很有可能导致遍历出错。</p><p>但是，无论 fail-fast 机制再怎么完善，ArrayList 依旧是<strong>非线程安全的集合</strong>。具体的表现如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//在其 add 方法中有这样的代码</span><br><span class="line">elementData[<span class="built_in">size</span>++] = e;        </span><br><span class="line">//这不是一个原子操作，是分两步执行的。</span><br><span class="line">elementData[<span class="built_in">size</span>] = e;</span><br><span class="line"><span class="built_in">size</span>++;</span><br><span class="line">//这样就有可能发生当两个线程执行完 elementData[<span class="built_in">size</span>] = e; 时，其中一个线程挂起，这时 <span class="built_in">size</span> 都相同，就会发生数据覆盖的问题。</span><br><span class="line"></span><br><span class="line">//还有就是表现在扩容时。假设现在已经添加进去 <span class="number">9</span> 个元素了，<span class="built_in">size</span> = <span class="number">9</span>。线程 A 执行完 add 函数中的ensureCapacityInternal(<span class="built_in">size</span> + <span class="number">1</span>)挂起了。线程 B 开始执行，校验数组容量发现不需要扩容。于是把元素放在了下标为 <span class="number">9</span> 的位置，且 <span class="built_in">size</span> 自增 <span class="number">1</span>。此时 <span class="built_in">size</span> = <span class="number">10</span>。线程 A 接着执行，尝试把元素放在下标为 <span class="number">10</span> 的位置，因为 <span class="built_in">size</span> = <span class="number">10</span>。但因为数组还没有扩容，最大的下标才为 <span class="number">9</span>，所以会抛出数组越界异常 ArrayIndexOutOfBoundsException。</span><br></pre></td></tr></table></figure><h5 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h5><p>数组结构实现。查询快、增删慢、线程安全。</p><p>由于 Vector 现在已经用的很少了，并且方法都差不多，就不在这赘述了。其实如果想要保证线程安全，还可以使用别的 List 类。（SynchronizedList 或 CopyOnWriteArrayList）如果想了解可以点击下方的链接。<br><a href="https://blog.csdn.net/NYfor2017/article/details/105306906">https://blog.csdn.net/NYfor2017/article/details/105306906</a><br><a href="https://www.jianshu.com/p/9b6a4d0b94ac">https://www.jianshu.com/p/9b6a4d0b94ac</a></p><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><p>双向链表结构实现。增删快、查询慢、线程不安全。</p><ul><li>  增删快：在双向链表中插入或删除元素不需要移动元素，只需要改变相关元素的头尾指针即可。</li><li>  查询慢：查找元素的时候需要从头或尾开始遍历整个链表，直到找到目标元素。</li><li>  线程不安全：会在下面的源码分析进行解释。</li></ul><p>由于所使用的方法和 List 差不多，当然也有它自己独特的方法，有兴趣的可以自己去看下 api 文档，在这我就不再进行代码演示，直接就进行源码分析。</p><h5 id="LinkedList-源码分析"><a href="#LinkedList-源码分析" class="headerlink" title="LinkedList 源码分析"></a>LinkedList 源码分析</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;        <span class="comment">//双向链表</span></span><br><span class="line">    E item;        <span class="comment">//结点数据</span></span><br><span class="line">    Node&lt;E&gt; <span class="keyword">next</span>;        <span class="comment">//后继结点</span></span><br><span class="line">    Node&lt;E&gt; prev;        <span class="comment">//前驱结点</span></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; <span class="keyword">next</span>) &#123;        <span class="comment">//有参构造（创建一个新结点，其前驱和后继结点根据传参设置）</span></span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">next</span> = <span class="keyword">next</span>;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> <span class="keyword">size</span> = <span class="number">0</span>;        <span class="comment">//链表大小</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;    <span class="comment">//链表头结点，起始为空。</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;        <span class="comment">//链表尾结点，起始为空。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> add(E e) &#123;    <span class="comment">//当往其中添加元素时</span></span><br><span class="line">    linkLast(e);        <span class="comment">//调用下面的方法，并将元素作为参数传入。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> linkLast(E e) &#123;        <span class="comment">//尾插法</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;        <span class="comment">//将尾结点赋值给 l</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);        <span class="comment">//将 l、元素和 null 传入 Node 的有参构造（在上面的代码中）</span></span><br><span class="line">    last = newNode;        <span class="comment">//将尾结点指向新创建的结点</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)        <span class="comment">//如果 l 结点为 null（即还没有任何元素的时候）</span></span><br><span class="line">        first = newNode;    <span class="comment">//头结点就指向新创建的结点</span></span><br><span class="line">    <span class="keyword">else</span>            <span class="comment">//即已经有其它元素了</span></span><br><span class="line">        l.<span class="keyword">next</span> = newNode;    <span class="comment">//之前的尾结点就指向新创建的结点</span></span><br><span class="line">    <span class="keyword">size</span>++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其线程不安全的表现其实类似于 ArrayList，在其 linkLast 方法中就能看出来。</p><p>当两个线程并行运行时，同时向第四个结点处尾插插入第五个结点，第一个线程拿到第四个结点的引用地址 last 赋值给 l，并创建新的结点，将新结点的 prev 指向第四个结点。此时该线程挂起，第二个线程执行，并成功添加第五个结点。然后第一个线程继续执行，将 last 赋值为刚刚新建的结点，并将 l（第四个结点）的 next 指针指向新结点，此时链表里面共五个结点，第二个线程创建的结点会被第一个线程创建的结点覆盖。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;集合（续一）&quot;&gt;&lt;a href=&quot;#集合（续一）&quot; class=&quot;headerlink&quot; title=&quot;集合（续一）&quot;&gt;&lt;/a&gt;集合（续一）&lt;/h2&gt;&lt;h3 id=&quot;Collection-子接口&quot;&gt;&lt;a href=&quot;#Collection-子接口&quot; class=&quot;headerlink&quot; title=&quot;Collection 子接口&quot;&gt;&lt;/a&gt;Collection 子接口&lt;/h3&gt;&lt;h4 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; class=&quot;headerlink&quot; title=&quot;List&quot;&gt;&lt;/a&gt;List&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;方法名&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;void add(int index,Object o)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;在指定位置插入参数对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;boolean addAll(index,Collection c)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;将参数集合中的所有对象添加到其它集合中的指定位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Object get(int index)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;返回集合中指定位置的元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;List subList(int fromIndex,int toIndex)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;返回 fromIndex 和 toIndex 之间的元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; ml.guest997;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ListIterator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListMethods&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            list.add(i * i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ListIterator listIterator = list.listIterator();        &lt;span class=&quot;comment&quot;&gt;//列表迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (listIterator.hasNext()) &amp;#123;        &lt;span class=&quot;comment&quot;&gt;//从前往后遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;下标为：&amp;quot;&lt;/span&gt; + listIterator.nextIndex() + &lt;span class=&quot;string&quot;&gt;&amp;quot;，内容为：&amp;quot;&lt;/span&gt; + listIterator.next());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (listIterator.hasPrevious()) &amp;#123;        &lt;span class=&quot;comment&quot;&gt;//从后往前遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;下标为：&amp;quot;&lt;/span&gt; + listIterator.previousIndex() + &lt;span class=&quot;string&quot;&gt;&amp;quot;，内容为：&amp;quot;&lt;/span&gt; + listIterator.previous());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//移除内容为 4 的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//list.remove(4);       下标数组越界，因为它会认为你要移除的是 4 这个下标的元素，但是实际存储就只有三个。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        list.remove(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Integer(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(list);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(list.subList(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));     &lt;span class=&quot;comment&quot;&gt;//切割列表，左闭右开。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*结果为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;下标为：0，内容为：0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;下标为：1，内容为：1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;下标为：2，内容为：4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;下标为：2，内容为：4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;下标为：1，内容为：1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;下标为：0，内容为：0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;[0, 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;[0, 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(八)</title>
    <link href="http://guest997.tk/2022/03/20/javase-advanced08/"/>
    <id>http://guest997.tk/2022/03/20/javase-advanced08/</id>
    <published>2022-03-20T04:39:30.000Z</published>
    <updated>2022-04-05T13:54:02.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>对象的容器，定义了对对象进行操作的常用方法。</p><p>和数组的区别：</p><ul><li>  数组长度固定，集合长度不固定。</li><li>  数组可以存储基本类型和引用类型，集合只能存储引用类型。</li></ul><h3 id="Collection-体系"><a href="#Collection-体系" class="headerlink" title="Collection 体系"></a>Collection 体系</h3><p><img data-src="/images/javase-advanced08.md-0.png"></p><h3 id="Collection-根接口"><a href="#Collection-根接口" class="headerlink" title="Collection 根接口"></a>Collection 根接口</h3><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">boolean add(Object obj)</td><td align="left">添加一个对象</td></tr><tr><td align="left">boolean addAll(Collection c)</td><td align="left">将参数集合中的所有对象添加到其它集合中。</td></tr><tr><td align="left">void clear()</td><td align="left">清空集合中的所有对象。</td></tr><tr><td align="left">boolean contains(Object o)</td><td align="left">集合中是否包含参数对象。</td></tr><tr><td align="left">boolean equals(Object o)</td><td align="left">集合是否与参数对象地址相等。</td></tr><tr><td align="left">boolean isEmpty()</td><td align="left">集合是否为空</td></tr><tr><td align="left">boolean remove(Object o)</td><td align="left">集合中移除参数对象</td></tr><tr><td align="left">int size()</td><td align="left">集合中的元素个数</td></tr><tr><td align="left">Object[] toArray()</td><td align="left">将集合转换成数组</td></tr></tbody></table><h4 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class CollectionTest01 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        Collection collection = <span class="keyword">new</span> ArrayList();        <span class="comment">//向上转型</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            collection.<span class="built_in">add</span>(i);        <span class="comment">//注意：基本数据类型是不能存放在集合中的，这一步是实现了自动装箱。</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;长度为：&quot;</span> + collection.<span class="built_in">size</span>());      <span class="comment">//获取集合长度</span></span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(collection.contains(<span class="number">1</span>));     <span class="comment">//是否包含指定元素</span></span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(collection.isEmpty());       <span class="comment">//集合是否为空</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//增强 for 遍历</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;-----增强 for 遍历-----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">Object</span> o : collection) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//迭代器遍历</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;-----迭代器遍历-----&quot;</span>);</span><br><span class="line">        Iterator iterator = collection.iterator();      <span class="comment">//创建迭代器</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;        <span class="comment">//是否有下一个元素</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(iterator.next());        <span class="comment">//返回下一个元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">长度为：6</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">-----增强 for 遍历-----</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">-----迭代器遍历-----</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest02</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Collection collection = <span class="keyword">new</span> <span class="built_in">ArrayList</span>();</span><br><span class="line">        collection.<span class="built_in">add</span>(<span class="keyword">new</span> <span class="built_in">Person</span>(<span class="string">&quot;guest&quot;</span>));</span><br><span class="line">        collection.<span class="built_in">add</span>(<span class="keyword">new</span> <span class="built_in">Person</span>(<span class="string">&quot;Guest&quot;</span>));</span><br><span class="line">        collection.<span class="built_in">add</span>(<span class="keyword">new</span> <span class="built_in">Person</span>(<span class="string">&quot;guest997&quot;</span>));</span><br><span class="line">        System.out.<span class="built_in">println</span>(collection.<span class="built_in">size</span>());</span><br><span class="line">        Iterator iterator = collection.<span class="built_in">iterator</span>();      <span class="comment">//创建迭代器</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.<span class="built_in">hasNext</span>()) &#123;        <span class="comment">//是否有下一个元素</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(iterator.<span class="built_in">next</span>());        <span class="comment">//返回下一个元素</span></span><br><span class="line">            <span class="comment">//collection.remove(iterator.next())      并发修改异常</span></span><br><span class="line">            iterator.<span class="built_in">remove</span>();      <span class="comment">//使用迭代器的 remove 方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>(collection.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">        collection.<span class="built_in">add</span>(<span class="keyword">new</span> <span class="built_in">Person</span>(<span class="string">&quot;guest&quot;</span>));</span><br><span class="line">        collection.<span class="built_in">remove</span>(<span class="keyword">new</span> <span class="built_in">Person</span>(<span class="string">&quot;guest&quot;</span>));     <span class="comment">//移除会失败（类似的 contains 和 indexOf 方法也是这样的）</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(collection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public boolean equals(Object o) &#123;</span></span><br><span class="line"><span class="comment">//        if (this == o) return true;</span></span><br><span class="line"><span class="comment">//        if (o == null  getClass() != o.getClass()) return false;</span></span><br><span class="line"><span class="comment">//        Person person = (Person) o;</span></span><br><span class="line"><span class="comment">//        return Objects.equals(name, person.name);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public int hashCode() &#123;</span></span><br><span class="line"><span class="comment">//        return Objects.hash(name);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    @<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">Person&#123;name=&#x27;guest&#x27;&#125;</span></span><br><span class="line"><span class="comment">Person&#123;name=&#x27;Guest&#x27;&#125;</span></span><br><span class="line"><span class="comment">Person&#123;name=&#x27;guest997&#x27;&#125;</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">[Person&#123;name=&#x27;guest&#x27;&#125;]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>迭代器其实是在另外一个线程复制了个一模一样的集合进行遍历的。当用集合的 remove 方法删除元素时，迭代器是不会知道的，所以就会抛出异常。毕竟别人在用着，你突然就把别人的东西给删掉了，肯定就会出现问题。并发修改异常是运行时异常，在特定的情况下是不会有问题的以及出现异常的原因，具体看如下网址：<a href="https://blog.csdn.net/qq_41946543/article/details/103705220">https://blog.csdn.net/qq_41946543/article/details/103705220</a>。</p><p>由于集合中存的都是对象的地址，所以如果在使用集合的 remove 方法时，传入的是直接 new 的对象，即使它内容相同，也是无法移除成功的。但是如果重写了对象的 hashCode 和 equals 方法，则是能直接移除的，这是因为如下的源码。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为上面用到的是 ArrayList 实现类，就直接用 ArrayList 的 remove 方法进行讲解。</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> remove(Object o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> <span class="keyword">index</span> = <span class="number">0</span>; <span class="keyword">index</span> &lt; size; <span class="keyword">index</span>++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[<span class="keyword">index</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">                fastRemove(<span class="keyword">index</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> <span class="keyword">index</span> = <span class="number">0</span>; <span class="keyword">index</span> &lt; size; <span class="keyword">index</span>++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[<span class="keyword">index</span>])) &#123;        <span class="comment">//可以看到 if 判断是使用传入类型的 equals 方法</span></span><br><span class="line">                fastRemove(<span class="keyword">index</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h2&gt;&lt;p&gt;对象的容器，定义了对对象进行操作的常用方法。&lt;/p&gt;
&lt;p&gt;和数组的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  数组长度固定，集合长度不固定。&lt;/li&gt;
&lt;li&gt;  数组可以存储基本类型和引用类型，集合只能存储引用类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Collection-体系&quot;&gt;&lt;a href=&quot;#Collection-体系&quot; class=&quot;headerlink&quot; title=&quot;Collection 体系&quot;&gt;&lt;/a&gt;Collection 体系&lt;/h3&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(七)</title>
    <link href="http://guest997.tk/2022/03/19/javase-advanced07/"/>
    <id>http://guest997.tk/2022/03/19/javase-advanced07/</id>
    <published>2022-03-19T03:38:31.000Z</published>
    <updated>2022-04-05T13:54:02.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><p>用于精确计算浮点数算法。double 和 float 都是浮点数，在计算机科学中，浮点是一种对于实数的近似值数值表现法。计算机计算加减乘除，实质都是二进制的加法处理。这里就有一个二进制表示的问题，1、0.5、0.25都是可以转换成二进制，但是0.1就无法用二进制准确地表示出来，因此只能使用近似值的方式表达。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.math.RoundingMode;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> BD &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        BigDecimal bd1 = <span class="keyword">new</span> <span class="constructor">BigDecimal(<span class="string">&quot;1.0&quot;</span>)</span>;</span><br><span class="line">        BigDecimal bd2 = <span class="keyword">new</span> <span class="constructor">BigDecimal(<span class="string">&quot;0.1&quot;</span>)</span>;</span><br><span class="line">        <span class="comment">//分别是加减乘除方法</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(bd1.add(bd2));</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(bd1.subtract(bd2));</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(bd1.multiply(bd2));</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(bd1.divide(bd2));</span><br><span class="line">        <span class="comment">//除法有时会除不尽，那么就需要指定保留位数、计算保留法，否则就会报错。</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="keyword">new</span> <span class="constructor">BigDecimal(<span class="string">&quot;10&quot;</span>)</span>.divide(<span class="keyword">new</span> <span class="constructor">BigDecimal(<span class="string">&quot;3&quot;</span>)</span>, <span class="number">2</span>, RoundingMode.HALF_UP));  <span class="comment">//最后一个参数是四舍五入法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">1.1</span></span><br><span class="line"><span class="comment">0.9</span></span><br><span class="line"><span class="comment">0.10</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">3.33</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>Date 表示时间，能够精确到毫秒。Date 类中的大部分方法都已经被 Calendar 类中的方法所取代。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> DateTest &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        Date d1 = <span class="keyword">new</span> <span class="constructor">Date()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(d1);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(d1.<span class="keyword">to</span><span class="constructor">LocaleString()</span>);    <span class="comment">//已过时</span></span><br><span class="line"></span><br><span class="line">        Date d2 = <span class="keyword">new</span> <span class="constructor">Date(<span class="params">d1</span>.<span class="params">getTime</span>()</span> - <span class="number">60</span><span class="operator"> * </span><span class="number">60</span><span class="operator"> * </span><span class="number">24</span><span class="operator"> * </span><span class="number">1000</span>);     <span class="comment">//昨天的时间，传入参数为毫秒数。</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(d2.<span class="keyword">to</span><span class="constructor">LocaleString()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(d1.before(d2));      <span class="comment">//d1 是否在 d2 前面</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(d1.after(d2));       <span class="comment">//d1 是否在 d2 后面</span></span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(d1.compare<span class="constructor">To(<span class="params">d2</span>)</span>);   <span class="comment">//d1 和 d2 进行比较</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(d2.compare<span class="constructor">To(<span class="params">d1</span>)</span>);   <span class="comment">//d1 和 d2 进行比较</span></span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(d1.equals(d2));      <span class="comment">//两个 Date 时间是否相同</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">Tue Mar 01 14:40:45 CST 2022</span></span><br><span class="line"><span class="comment">2022-3-1 14:40:45</span></span><br><span class="line"><span class="comment">2022-2-28 14:40:45</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">-1</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><p>提供了获取或设置各种日历字段的方法，由于其构造方法是受保护的（protected）所以对象无法直接 new 出来。</p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">static Calendar getInstance()</td><td align="left">使用默认时区和区域获取日历</td></tr><tr><td align="left">void set(int year, int month, int date, int hourofday, int minute, int second)</td><td align="left">设置日历的年、月、日、时、分、秒</td></tr><tr><td align="left">int get(int field)</td><td align="left">返回给定日历字段的值。比如年、月、日</td></tr><tr><td align="left">void setTime(Date date)</td><td align="left">用给定的 date 设置此日历时间</td></tr><tr><td align="left">Date getTime()</td><td align="left">返回一个 date 表示此日历的时间</td></tr><tr><td align="left">void add(int field, int amount)</td><td align="left">按照日历的规则，给指定字段添加或减少时间量。</td></tr><tr><td align="left">long getTimeInMilles()</td><td align="left">毫秒为单位返回该日历的时间值</td></tr></tbody></table><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">import java.util.Calendar;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> CalendarTest &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        Calendar c1 = <span class="module-access"><span class="module"><span class="identifier">Calendar</span>.</span></span>get<span class="constructor">Instance()</span>;       <span class="comment">//获取当前日历对象</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c1.get<span class="constructor">Time()</span>.<span class="keyword">to</span><span class="constructor">LocaleString()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取各时间字段值</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c1.get(Calendar.YEAR));</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c1.get(Calendar.MONTH));     <span class="comment">//字段值的范围是从0到11</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c1.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c1.get(Calendar.HOUR_OF_DAY));</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c1.get(Calendar.MINUTE));</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c1.get(Calendar.SECOND));</span><br><span class="line"></span><br><span class="line">        Calendar c2 = <span class="module-access"><span class="module"><span class="identifier">Calendar</span>.</span></span>get<span class="constructor">Instance()</span>;</span><br><span class="line">        <span class="comment">//修改时间</span></span><br><span class="line">        c2.set(Calendar.HOUR_OF_DAY, c1.get(Calendar.HOUR_OF_DAY) - <span class="number">1</span>);     <span class="comment">//提前一小时</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c2.get<span class="constructor">Time()</span>.<span class="keyword">to</span><span class="constructor">LocaleString()</span>);</span><br><span class="line">        c2.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);      <span class="comment">//提前一个月</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c2.get<span class="constructor">Time()</span>.<span class="keyword">to</span><span class="constructor">LocaleString()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c1.get<span class="constructor">ActualMaximum(Calendar.DAY_OF_MONTH)</span>);     <span class="comment">//获取日历对象中指定字段的实际最大值</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c1.get<span class="constructor">ActualMinimum(Calendar.DAY_OF_MONTH)</span>);     <span class="comment">//获取日历对象中指定字段的实际最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">2022-3-1 15:41:53</span></span><br><span class="line"><span class="comment">2022</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">15</span></span><br><span class="line"><span class="comment">41</span></span><br><span class="line"><span class="comment">53</span></span><br><span class="line"><span class="comment">2022-3-1 14:41:53</span></span><br><span class="line"><span class="comment">2022-2-28 14:41:53</span></span><br><span class="line"><span class="comment">31</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h2><p>用于格式化或解析日期。</p><table><thead><tr><th align="left">字母</th><th align="left">日期或时间</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">y</td><td align="left">年</td><td align="left">2022</td></tr><tr><td align="left">M</td><td align="left">年中月份</td><td align="left">03</td></tr><tr><td align="left">d</td><td align="left">月中天数</td><td align="left">10</td></tr><tr><td align="left">H</td><td align="left">天中小时（0-23）</td><td align="left">22</td></tr><tr><td align="left">m</td><td align="left">分钟</td><td align="left">30</td></tr><tr><td align="left">s</td><td align="left">秒</td><td align="left">59</td></tr><tr><td align="left">S</td><td align="left">毫秒</td><td align="left">356</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SDF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(sdf.format(<span class="keyword">new</span> Date()));     <span class="comment">//格式化 Date 对象，返回的是字符串。</span></span><br><span class="line">        System.out.println(sdf.parse(<span class="string">&quot;2022-5-20 13:14:00&quot;</span>).toLocaleString());       <span class="comment">//解析字符串，返回的是 Date 对象。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">2022-03-01 17:43:47</span></span><br><span class="line"><span class="comment">2022-5-20 13:14:00</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><p>主要用于获取系统的属性和其它操作，构造方法是私有的，其方法全部是静态的，所以可以直接调用。</p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">static void arraycopy(…)</td><td align="left">复制数组</td></tr><tr><td align="left">static long currentTimeMillis()</td><td align="left">获取当前系统时间，返回毫秒值。</td></tr><tr><td align="left">static void gc()</td><td align="left">建议 JVM 尽快启动垃圾回收期器回收垃圾</td></tr><tr><td align="left">static void exit(int status)</td><td align="left">退出 JVM。如果参数是0表示正常退出 JVM，否则表示异常退出。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] src = &#123;<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] dest = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        System.arraycopy(src, <span class="number">0</span>, dest, <span class="number">0</span>, dest.length);     <span class="comment">//参数分别为：源数组、源数组开始的复制位置、目标数组、目标数组开始的粘贴位置、复制长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : dest) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : Arrays.copyOf(src, <span class="number">2</span>)) &#123;       <span class="comment">//底层调用的也是 System.arraycopy()</span></span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;BigDecimal&quot;&gt;&lt;a href=&quot;#BigDecimal&quot; class=&quot;headerlink&quot; title=&quot;BigDecimal&quot;&gt;&lt;/a&gt;BigDecimal&lt;/h2&gt;&lt;p&gt;用于精确计算浮点数算法。double 和 float 都是浮点数，在计算机科学中，浮点是一种对于实数的近似值数值表现法。计算机计算加减乘除，实质都是二进制的加法处理。这里就有一个二进制表示的问题，1、0.5、0.25都是可以转换成二进制，但是0.1就无法用二进制准确地表示出来，因此只能使用近似值的方式表达。&lt;/p&gt;
&lt;figure class=&quot;highlight reasonml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package ml.guest997;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.math.BigDecimal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.math.RoundingMode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; BD &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String&lt;span class=&quot;literal&quot;&gt;[]&lt;/span&gt; args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BigDecimal bd1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;BigDecimal(&lt;span class=&quot;string&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BigDecimal bd2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;BigDecimal(&lt;span class=&quot;string&quot;&gt;&amp;quot;0.1&amp;quot;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//分别是加减乘除方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(bd1.add(bd2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(bd1.subtract(bd2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(bd1.multiply(bd2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(bd1.divide(bd2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//除法有时会除不尽，那么就需要指定保留位数、计算保留法，否则就会报错。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;BigDecimal(&lt;span class=&quot;string&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;)&lt;/span&gt;.divide(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;constructor&quot;&gt;BigDecimal(&lt;span class=&quot;string&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;)&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, RoundingMode.HALF_UP));  &lt;span class=&quot;comment&quot;&gt;//最后一个参数是四舍五入法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*结果为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;0.9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;0.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;3.33&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Date&quot;&gt;&lt;a href=&quot;#Date&quot; class=&quot;headerlink&quot; title=&quot;Date&quot;&gt;&lt;/a&gt;Date&lt;/h2&gt;&lt;p&gt;Date 表示时间，能够精确到毫秒。Date 类中的大部分方法都已经被 Calendar 类中的方法所取代。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(六)</title>
    <link href="http://guest997.tk/2022/03/18/javase-advanced06/"/>
    <id>http://guest997.tk/2022/03/18/javase-advanced06/</id>
    <published>2022-03-18T03:39:24.000Z</published>
    <updated>2022-04-05T13:54:02.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h2><ul><li>  字符串是常量，创建之后不可改变。</li><li>  字符串的字面值存储在字符串常量池中，便于共享。</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符串</span></span><br><span class="line">        <span class="keyword">String</span> s1 = <span class="string">&quot;guest&quot;</span>;</span><br><span class="line">        <span class="keyword">String</span> s2 = <span class="string">&quot;guest&quot;</span>;</span><br><span class="line">        System.out.<span class="built_in">println</span>(s1 == s2);</span><br><span class="line">        <span class="comment">//对 s1 重新赋值</span></span><br><span class="line">        s1 = <span class="string">&quot;guest997&quot;</span>;</span><br><span class="line">        System.out.<span class="built_in">println</span>(s1);</span><br><span class="line">        <span class="comment">//创建字符串</span></span><br><span class="line">        <span class="keyword">String</span> s3 = <span class="keyword">new</span> <span class="built_in"><span class="keyword">String</span></span>(<span class="string">&quot;Guest&quot;</span>);</span><br><span class="line">        <span class="keyword">String</span> s4 = <span class="keyword">new</span> <span class="built_in"><span class="keyword">String</span></span>(<span class="string">&quot;Guest&quot;</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(s3 == s4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">guest997</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>为了理解上面的代码，需要了解一下 JVM 的结构。如下图。</p><p><img data-src="/images/javase-advanced06.md-0.png"></p><p>堆：</p><ul><li>  存储的是对象，每个对象都包含一个与之对应的 class。</li><li>  JVM 只有一个堆区（heap）被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身。</li><li>  对象由垃圾回收器负责回收，因此大小和生命周期不需要确定。</li></ul><p>栈：</p><ul><li>  每个线程包含一个栈区，栈中只保存基础数据类型对象和自定义对象的引用。</li><li>  每个栈中的数据都是私有的。</li><li>  栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区（存放操作指令）。</li><li>  数据大小和生命周期是可以确定的，当没有引用指向数据时，这个数据就会自动消失。</li></ul><p>方法区：</p><ul><li>  静态区跟堆一样，被所有的线程共享。</li><li>  方法区中包含的都是在整个程序中永远唯一的元素，如 class、static 变量。</li></ul><p>根据上面的代码来看，当字符串常量池中已经有了 guest 这个字符串常量，那么之后的字符串字面值为 guest 的字符串，都会指向同一个字符串常量池中的地址。至于为什么能重新赋值？只是因为在字符串常量池中新开辟了一块空间，重新指向了新开辟的空间地址。</p><p>至于使用构造方法创建字符串，为什么就不会这样呢？那是因为在栈中存放的是两个不同对象的引用地址，只不过在堆中的这两个对象却都指向了同一个字符串常量池中的地址。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> CommonMethods &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        String s1 = <span class="string">&quot;Guest997 - 一个在互联网下的小小 Coder&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s1.length<span class="literal">()</span>);     <span class="comment">//获取长度</span></span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s1.<span class="built_in">char</span><span class="constructor">At(16)</span>);   <span class="comment">//获取指定位置的字符</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s1.<span class="built_in">char</span><span class="constructor">At(<span class="params">s1</span>.<span class="params">length</span>()</span> - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s1.contains(<span class="string">&quot;guest&quot;</span>));    <span class="comment">//是否包含指定字符</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s1.contains(<span class="string">&quot; - &quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">s1</span>.<span class="params">toCharArray</span>()</span>));   <span class="comment">//转成数组</span></span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s1.index<span class="constructor">Of(<span class="string">&quot; &quot;</span>)</span>);     <span class="comment">//首次出现指定字符的位置</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s1.index<span class="constructor">Of(<span class="string">&quot; &quot;</span>, 10)</span>);     <span class="comment">//从指定位置开始寻找出现指定字符的位置</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s1.last<span class="constructor">IndexOf(<span class="string">&quot; &quot;</span>)</span>);     <span class="comment">//最后出现指定字符的位置</span></span><br><span class="line"></span><br><span class="line">        String s2 = <span class="string">&quot;  HTTPS://guest 997.ml  &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s2.trim<span class="literal">()</span>);      <span class="comment">//去掉字符串前后的空格</span></span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s2.<span class="keyword">to</span><span class="constructor">UpperCase()</span>);       <span class="comment">//将字母全部转为大写</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s2.<span class="keyword">to</span><span class="constructor">LowerCase()</span>);       <span class="comment">//将字母全部转为小写</span></span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s1.starts<span class="constructor">With(<span class="string">&quot;Guest&quot;</span>)</span>);     <span class="comment">//字符串是否以指定字符开始</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s1.ends<span class="constructor">With(<span class="string">&quot;coder&quot;</span>)</span>);       <span class="comment">//字符串是否以指定字符结束</span></span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s1.replace(<span class="string">&quot;小&quot;</span>, <span class="string">&quot;大&quot;</span>));   <span class="comment">//替换指定字符</span></span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">s2</span>.<span class="params">split</span>(<span class="string">&quot; &quot;</span>)</span>));     <span class="comment">//以指定字符分割字符串</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">s2</span>.<span class="params">split</span>(<span class="string">&quot;[ .]&quot;</span>)</span>));     <span class="comment">//以多个指定字符分割字符串</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">s2</span>.<span class="params">split</span>(<span class="string">&quot;[ .]+&quot;</span>)</span>));     <span class="comment">//以多个指定可重复字符分割字符串</span></span><br><span class="line"></span><br><span class="line">        String s3 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        String s4 = <span class="string">&quot;HELLO&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s3.equals(s4));      <span class="comment">//字符串内容是否相同</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s3.equals<span class="constructor">IgnoreCase(<span class="params">s4</span>)</span>);    <span class="comment">//忽略大小写判断字符串内容是否相同</span></span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s3.compare<span class="constructor">To(<span class="params">s4</span>)</span>);       <span class="comment">//比较字符串在 ASCII 码中位置的差值，先比较第一个字符，如果第一个字符不同则返回差值，如果相同则比较第二个字符位置差值，依此类推。</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s3.compare<span class="constructor">To(<span class="string">&quot;hello world&quot;</span>)</span>);    <span class="comment">//如果两个字符串一长一短且两个字符串前面的字符一样，则返回长度差值。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">27</span></span><br><span class="line"><span class="comment">网</span></span><br><span class="line"><span class="comment">r</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">[G, u, e, s, t, 9, 9, 7,  , -,  , 一, 个, 在, 互, 联, 网, 下, 的, 小, 小,  , C, o, d, e, r]</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">21</span></span><br><span class="line"><span class="comment">HTTPS://guest 997.ml</span></span><br><span class="line"><span class="comment">  HTTPS://GUEST 997.ML  </span></span><br><span class="line"><span class="comment">  https://guest 997.ml  </span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">Guest997 - 一个在互联网下的大大 Coder</span></span><br><span class="line"><span class="comment">[, , HTTPS://guest, 997.ml]</span></span><br><span class="line"><span class="comment">[, , HTTPS://guest, 997, ml]</span></span><br><span class="line"><span class="comment">[, HTTPS://guest, 997, ml]</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">32</span></span><br><span class="line"><span class="comment">-6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="常用方法练习"><a href="#常用方法练习" class="headerlink" title="常用方法练习"></a>常用方法练习</h3><p>已知一个字符串：this is a text</p><ul><li>  将每个单词抽取出来</li><li>  将 text 替换成 practice</li><li>  在 text 前面插入一个字符串 easy</li><li>  将每个单词的首字母改为大写</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> CMPractice &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        String s1 = <span class="string">&quot;this is a text&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将每个单词抽取出来</span></span><br><span class="line">        <span class="keyword">for</span> (String s : s1.split(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将 text 替换成 practice</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s1.replace(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;practice&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在 text 前面插入一个字符串 easy</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s1.replace(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;easy text&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将每个单词的首字母改为大写</span></span><br><span class="line">        <span class="keyword">for</span> (String s : s1.split(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">            <span class="built_in">char</span> c = s.<span class="built_in">char</span><span class="constructor">At(0)</span>;</span><br><span class="line">            <span class="built_in">char</span> upperCase = <span class="module-access"><span class="module"><span class="identifier">Character</span>.</span></span><span class="keyword">to</span><span class="constructor">UpperCase(<span class="params">c</span>)</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(upperCase + s.substring(<span class="number">1</span>) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">this</span></span><br><span class="line"><span class="comment">is</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">text</span></span><br><span class="line"><span class="comment">this is a practice</span></span><br><span class="line"><span class="comment">this is a easy text</span></span><br><span class="line"><span class="comment">This Is A Text </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="StringBuffer-和-StringBuilder"><a href="#StringBuffer-和-StringBuilder" class="headerlink" title="StringBuffer 和 StringBuilder"></a>StringBuffer 和 StringBuilder</h2><p>运行效率都比 String 高且节省内存。两个类的用法一致。</p><ul><li>  StringBuffer：可变长字符串，运行效率慢、线程安全。（使用了 synchronized 关键字）</li><li>  StringBuilder : 可变长字符串、运行效率快、线程不安全。（代码非原子性）</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> SB &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        //方法测试</span><br><span class="line">        StringBuilder sb = <span class="built_in">new</span> StringBuilder(&quot;Guest&quot;);</span><br><span class="line">        sb.append(&quot;997&quot;);       //字符添加</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.<span class="keyword">insert</span>(<span class="number">0</span>, &quot;Hello&quot;);  //将字符插入到指定位置</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.replace(<span class="number">0</span>,<span class="number">5</span>, &quot;Goodbye&quot;);     //替换从开始位置到结束位置的字符为指定字符（左开右闭）</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.replace(<span class="number">0</span>,<span class="number">0</span>,&quot;No&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.<span class="keyword">delete</span>(<span class="number">0</span>,<span class="number">6</span>);     //删除从开始位置到结束位置的字符（左闭右开）</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line"></span><br><span class="line">        //效率测试</span><br><span class="line">        long st1 = <span class="keyword">System</span>.currentTimeMillis();</span><br><span class="line">        String s = &quot;&quot;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">23333</span>; i++) &#123;</span><br><span class="line">            s += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">System</span>.currentTimeMillis() - st1);</span><br><span class="line"></span><br><span class="line">        long st2 = <span class="keyword">System</span>.currentTimeMillis();</span><br><span class="line">        StringBuffer stringBuffer = <span class="built_in">new</span> StringBuffer(&quot;&quot;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">23333</span>; i++) &#123;</span><br><span class="line">            stringBuffer.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">System</span>.currentTimeMillis() - st2);</span><br><span class="line"></span><br><span class="line">        long st3 = <span class="keyword">System</span>.currentTimeMillis();</span><br><span class="line">        StringBuilder stringBuilder = <span class="built_in">new</span> StringBuilder(&quot;&quot;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">23333</span>; i++) &#123;</span><br><span class="line">            stringBuilder.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">System</span>.currentTimeMillis() - st3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">Guest997</span></span><br><span class="line"><span class="comment">HelloGuest997</span></span><br><span class="line"><span class="comment">GoodbyeGuest997</span></span><br><span class="line"><span class="comment">NoGoodbyeGuest997</span></span><br><span class="line"><span class="comment">byeGuest997</span></span><br><span class="line"><span class="comment">4263</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>其实对于效率来说，数据量小的时候，StringBuffer 反而会快。这是因为 StringBuffer 有缓存机制，而 StringBuilder 每次都是直接复制。这样 StringBuffer 相对 StringBuilder 来说其实是做了一个性能上的优化。所有只有当数据量足够大，StringBuffer 的缓冲区填补不了加锁影响的性能时，StringBuilder 才在性能上展现出了它的优势。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;String-类&quot;&gt;&lt;a href=&quot;#String-类&quot; class=&quot;headerlink&quot; title=&quot;String 类&quot;&gt;&lt;/a&gt;String 类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;  字符串是常量，创建之后不可改变。&lt;/li&gt;
&lt;li&gt;  字符串的字面值存储在字符串常量池中，便于共享。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package ml.guest997;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StringTest&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt;[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//创建字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; s1 = &lt;span class=&quot;string&quot;&gt;&amp;quot;guest&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; s2 = &lt;span class=&quot;string&quot;&gt;&amp;quot;guest&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(s1 == s2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//对 s1 重新赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s1 = &lt;span class=&quot;string&quot;&gt;&amp;quot;guest997&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(s1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//创建字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; s3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Guest&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; s4 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Guest&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(s3 == s4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*结果为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;guest997&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;为了理解上面的代码，需要了解一下 JVM 的结构。如下图。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/images/javase-advanced06.md-0.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(五)</title>
    <link href="http://guest997.tk/2022/03/17/javase-advanced05/"/>
    <id>http://guest997.tk/2022/03/17/javase-advanced05/</id>
    <published>2022-03-17T03:30:56.000Z</published>
    <updated>2022-04-05T13:54:02.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>基本数据类型所对应的引用数据类型。</p><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类型</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr></tbody></table><h3 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h3><p>装箱是将值类型转换为引用类型，拆箱则是将引用类型转换为值类型 。利用装箱和拆箱功能，可通过允许值类型的任何值与 Object 类型的值相互转换，将值类型与引用类型链接起来。</p><h4 id="为什么要有装箱与拆箱"><a href="#为什么要有装箱与拆箱" class="headerlink" title="为什么要有装箱与拆箱"></a>为什么要有装箱与拆箱</h4><ul><li>  基本类型包装成一个类之后能有很多可以调用的方法。</li><li>  基本类型是不可以做泛型参数的。</li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Pack &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="comment">//手动装箱和拆箱</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;-----手动装箱-----&quot;</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="keyword">new</span> <span class="constructor">Integer(6)</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>value<span class="constructor">Of(7)</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;-----手动拆箱-----&quot;</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="keyword">new</span> <span class="constructor">Integer(8)</span>.<span class="built_in">int</span><span class="constructor">Value()</span>);</span><br><span class="line">        <span class="comment">//自动装箱和拆箱</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;-----自动装箱-----&quot;</span>);</span><br><span class="line">        Integer integer1 = <span class="number">5</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(integer1);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;-----自动拆箱-----&quot;</span>);</span><br><span class="line">        <span class="built_in">int</span> num = <span class="keyword">new</span> <span class="constructor">Integer(4)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">-----手动装箱-----</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">-----手动拆箱-----</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">-----自动装箱-----</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">-----自动拆箱-----</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>通过将上面生成的 class 文件进行反编译，会发现自动装箱和拆箱其实就是调用 valueOf 和 intValue 方法，只不过这是编译器自动帮我们做了。</p><h3 id="基本类型与字符串互转"><a href="#基本类型与字符串互转" class="headerlink" title="基本类型与字符串互转"></a>基本类型与字符串互转</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> ClassChange &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="comment">//基本类型转字符串：包装类.toString()</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;-----基本类型转字符串-----&quot;</span>);</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">1</span>;</span><br><span class="line">        boolean b = <span class="literal">true</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">i</span>)</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Boolean</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">b</span>)</span>);</span><br><span class="line">        <span class="comment">//字符串转基本类型：包装类.parseXXX()</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;-----字符串转基本类型-----&quot;</span>);</span><br><span class="line">        String s1 = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;true&quot;</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">s1</span>)</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Boolean</span>.</span></span>parse<span class="constructor">Boolean(<span class="params">s1</span>)</span>);   <span class="comment">//字符串为非 true 则全部转为 false</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Boolean</span>.</span></span>parse<span class="constructor">Boolean(<span class="params">s2</span>)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">-----基本类型转字符串-----</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">-----字符串转基本类型-----</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>基本类型转字符串还能使用 String.valueOf 方法，但是它不是全部都能转换的，只能转换下面6种。</p><p><img data-src="/images/javase-advanced05.md-0.png"></p><p>字符串转基本类型时要注意保证类型兼容，否则会抛出 NumberFormatException 异常。</p><h3 id="整数缓冲区"><a href="#整数缓冲区" class="headerlink" title="整数缓冲区"></a>整数缓冲区</h3><ul><li>  Java 预先创建了256个常用的整数包装类对象。</li><li>  为了在实际开发当中，对这些频繁使用的数据对象进行复用。</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> IntegerCache &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">Integer</span> i1 = <span class="built_in">new</span> <span class="type">Integer</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="type">Integer</span> i2 = <span class="built_in">new</span> <span class="type">Integer</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(i1 == i2);</span><br><span class="line"></span><br><span class="line">        //自动装箱调用了 <span class="type">Integer</span>.valueOf()</span><br><span class="line">        <span class="type">Integer</span> i3 = <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> i4 = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(i3 == i4);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> i5 = <span class="number">200</span>;</span><br><span class="line">        <span class="type">Integer</span> i6 = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(i5 == i6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以看到使用构造函数创建的对象进行地址比较，会发现结果为 false，这是正常的。但是为什么在使用自动装箱的对象进行比较时却会是 true，自动装箱调用的是 Integer.valueOf 方法，那问题自然就出在这里。下面是方法源码。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static Integer value<span class="constructor">Of(<span class="params">int</span> <span class="params">i</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="module-access"><span class="module"><span class="identifier">IntegerCache</span>.</span></span>low<span class="operator"> &amp;&amp; </span>i &lt;= <span class="module-access"><span class="module"><span class="identifier">IntegerCache</span>.</span></span>high)</span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">IntegerCache</span>.</span></span>cache<span class="literal">[<span class="identifier">i</span> + (-I<span class="identifier">ntegerCache</span>.<span class="identifier">low</span>)]</span>;</span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">Integer(<span class="params">i</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到源码中涉及到了三个常量，分别是 IntegerCache.low、IntegerCache.high 和 IntegerCache.cache[]，而这三个常量的初始化又是怎么样的呢？看下面的源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line"><span class="built_in">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line"><span class="built_in">static</span> <span class="keyword">final</span> <span class="keyword">Integer</span> cache[];</span><br><span class="line"></span><br><span class="line"><span class="built_in">static</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">String</span> integerCacheHighPropValue =</span><br><span class="line">        sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (integerCacheHighPropValue != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">            i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">            h = Math.min(i, <span class="keyword">Integer</span>.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    high = h;</span><br><span class="line"></span><br><span class="line">    cache = <span class="keyword">new</span> <span class="keyword">Integer</span>[(high - low) + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> j = low;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">        cache[k] = <span class="keyword">new</span> <span class="keyword">Integer</span>(j++);</span><br><span class="line"></span><br><span class="line">    assert IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以从上面的源码看出，只有在缓存区数组[-128, 127]区间中的数据会直接使用相同的地址，否则就会使用构造函数创建新对象。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;包装类&quot;&gt;&lt;a href=&quot;#包装类&quot; class=&quot;headerlink&quot; title=&quot;包装类&quot;&gt;&lt;/a&gt;包装类&lt;/h2&gt;&lt;p&gt;基本数据类型所对应的引用数据类型。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;基本数据类型&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;包装类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;byte&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Byte&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;short&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Short&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;int&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;long&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;float&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Float&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;double&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;boolean&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Boolean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;char&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;装箱与拆箱&quot;&gt;&lt;a href=&quot;#装箱与拆箱&quot; class=&quot;headerlink&quot; title=&quot;装箱与拆箱&quot;&gt;&lt;/a&gt;装箱与拆箱&lt;/h3&gt;&lt;p&gt;装箱是将值类型转换为引用类型，拆箱则是将引用类型转换为值类型 。利用装箱和拆箱功能，可通过允许值类型的任何值与 Object 类型的值相互转换，将值类型与引用类型链接起来。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(四)</title>
    <link href="http://guest997.tk/2022/03/16/javase-advanced04/"/>
    <id>http://guest997.tk/2022/03/16/javase-advanced04/</id>
    <published>2022-03-16T07:32:18.000Z</published>
    <updated>2022-04-05T13:54:02.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object-类"><a href="#Object-类" class="headerlink" title="Object 类"></a>Object 类</h2><ul><li>  任何类都继承了 Object 类。</li><li>  Object 类中所定义的方法，是所有对象都具备的方法。</li><li>  Object 类型可以存储任何对象</li><li>  作为参数，可接收任何对象。</li><li>  作为返回值，可返回任何对象。</li></ul><h3 id="getClass"><a href="#getClass" class="headerlink" title="getClass()"></a>getClass()</h3><ul><li>  返回引用中存储的实际对象类型。</li><li>  通常用于判断两个引用中实际存储对象类型是否一致。</li></ul><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h3><ul><li>  返回该对象的哈希值。</li><li>  哈希值根据对象的<strong>地址</strong>或<strong>字符串</strong>或<strong>数字</strong>使用 hash 算法计算出来的 int 类型的值。</li><li>  一般情况下相同对象返回相同哈希值。</li></ul><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><ul><li>  返回该对象的字符串表示。</li><li>  可以根据程序需求重写该方法。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToString</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ToString&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="built_in">Object</span>());   <span class="comment">//原生的 toString 方法</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> ToString()); <span class="comment">//重写后的 toString 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">java.lang.Object@16d3586</span></span><br><span class="line"><span class="comment">ToString&#123;name=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h3><ul><li>  默认实现为：(this == obj)，比较两个对象地址是否相同。</li><li>  平常的业务需求可以通过重写此方法来比较两个对象的内容是否相同。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Equals</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="function"><span class="keyword">null</span>  <span class="title">getClass</span><span class="params">()</span> !</span>= o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Equals equals = (Equals) o;</span><br><span class="line">        <span class="keyword">return</span> name.equals(equals.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于为什么重写 equals 方法要重写 hashCode 方法，可以查看这篇文章：<a href="https://baijiahao.baidu.com/s?id=1664183772462382553&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1664183772462382553&amp;wfr=spider&amp;for=pc</a>。</p><h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h3><ul><li>  当对象被判定为垃圾对象时，由 JVM 自动调用此方法，用以标记垃圾对象，进入回收队列。</li><li>  垃圾对象：没有有效引用指向此对象时，即为垃圾对象。</li><li>  垃圾回收：由 gc 销毁垃圾对象，释放数据存储空间。</li><li>  自动回收机制：JVM 的内存耗尽，一次性回收所有垃圾对象。</li><li>  手动回收机制：使用 System.gc() 通知 JVM 执行垃圾回收。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Object-类&quot;&gt;&lt;a href=&quot;#Object-类&quot; class=&quot;headerlink&quot; title=&quot;Object 类&quot;&gt;&lt;/a&gt;Object 类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;  任何类都继承了 Object 类。&lt;/li&gt;
&lt;li&gt;  Object 类中所定义的方法，是所有对象都具备的方法。&lt;/li&gt;
&lt;li&gt;  Object 类型可以存储任何对象&lt;/li&gt;
&lt;li&gt;  作为参数，可接收任何对象。&lt;/li&gt;
&lt;li&gt;  作为返回值，可返回任何对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;getClass&quot;&gt;&lt;a href=&quot;#getClass&quot; class=&quot;headerlink&quot; title=&quot;getClass()&quot;&gt;&lt;/a&gt;getClass()&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;  返回引用中存储的实际对象类型。&lt;/li&gt;
&lt;li&gt;  通常用于判断两个引用中实际存储对象类型是否一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;hashCode&quot;&gt;&lt;a href=&quot;#hashCode&quot; class=&quot;headerlink&quot; title=&quot;hashCode()&quot;&gt;&lt;/a&gt;hashCode()&lt;/h3&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(三)</title>
    <link href="http://guest997.tk/2022/03/15/javase-advanced03/"/>
    <id>http://guest997.tk/2022/03/15/javase-advanced03/</id>
    <published>2022-03-15T03:43:23.000Z</published>
    <updated>2022-04-05T13:54:02.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义异常（实际中不常用）"><a href="#自定义异常（实际中不常用）" class="headerlink" title="自定义异常（实际中不常用）"></a>自定义异常（实际中不常用）</h2><p>使用 Java 内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需继承 Exception 类即可。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>  创建自定义异常类。</li><li>  在方法中通过 throw 关键字抛出异常对象。</li><li>  如果在当前抛出异常的方法中处理异常，可以使用 try- catch 语句捕获并处理；否则在方法的声明处通过 throws 关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li><li>  在出现异常方法的调用者中捕获并处理异常。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;   <span class="comment">//继承 Exception 类</span></span><br><span class="line">    <span class="keyword">private</span> int detail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//a &gt; 10 就抛出异常</span></span><br><span class="line">    public <span class="type">MyException</span>(int a)&#123;</span><br><span class="line">        <span class="keyword">this</span>.detail = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toString:异常的打印信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">String</span> toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyException&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;detail=&quot;</span> + detail +</span><br><span class="line">            &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> throws MyException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">MyException</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;无异常。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">test</span>(<span class="number">11</span>);</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (MyException e) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 MyException&#123;detail=11&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;自定义异常（实际中不常用）&quot;&gt;&lt;a href=&quot;#自定义异常（实际中不常用）&quot; class=&quot;headerlink&quot; title=&quot;自定义异常（实际中不常用）&quot;&gt;&lt;/a&gt;自定义异常（实际中不常用）&lt;/h2&gt;&lt;p&gt;使用 Java 内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需继承 Exception 类即可。&lt;/p&gt;
&lt;h3 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;  创建自定义异常类。&lt;/li&gt;
&lt;li&gt;  在方法中通过 throw 关键字抛出异常对象。&lt;/li&gt;
&lt;li&gt;  如果在当前抛出异常的方法中处理异常，可以使用 try- catch 语句捕获并处理；否则在方法的声明处通过 throws 关键字指明要抛出给方法调用者的异常，继续进行下一步操作。&lt;/li&gt;
&lt;li&gt;  在出现异常方法的调用者中捕获并处理异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(二)</title>
    <link href="http://guest997.tk/2022/03/14/javase-advanced02/"/>
    <id>http://guest997.tk/2022/03/14/javase-advanced02/</id>
    <published>2022-03-14T04:51:28.000Z</published>
    <updated>2022-04-05T13:54:02.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="捕获和抛出异常"><a href="#捕获和抛出异常" class="headerlink" title="捕获和抛出异常"></a>捕获和抛出异常</h2><h3 id="try、catch、finally-关键字"><a href="#try、catch、finally-关键字" class="headerlink" title="try、catch、finally 关键字"></a>try、catch、finally 关键字</h3><p>try：监控区域；catch(想要捕获的异常类型)：捕获异常；finally：处理善后工作（可以不要），不管有没有捕获到异常，都会走 finally。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo28</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;     </span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//new Demo28().a();     //前一个异常检测到，这里就检测不到了。</span></span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (Exception e) &#123;         </span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;被除数不能为0！&quot;</span>);</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (Error e)&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;栈溢出！&quot;</span>);</span><br><span class="line">        &#125; finally &#123;         </span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">Demo28</span>().<span class="built_in">a</span>();</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (Exception e) &#123;      <span class="comment">//catch 能写多个，最高为 Throwable，而后是 Error 和 Exception；由于类似于 if-else 语句，所以最高的要放在最下面。</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;被除数不能为0！&quot;</span>);</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (Error e)&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;栈溢出！&quot;</span>);</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (Throwable t)&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;Throwable&quot;</span>);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//相互调用，栈溢出异常。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">b</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">a</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 被除数不能为0！finally 栈溢出！finally</span></span><br></pre></td></tr></table></figure><h3 id="throw、throws"><a href="#throw、throws" class="headerlink" title="throw、throws"></a>throw、throws</h3><p>throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw 则是抛出了异常，执行 throw 则一定抛出了某种异常。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo29</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//new Demo29().test(1,0);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//new Demo29().test02();//因为接收的是 uncheck 异常，在运行时才会发生的，因此不用显式地捕获。</span></span><br><span class="line">        <span class="comment">//但是推荐使用 try-catch 来捕获和处理异常，这样在 catch 中处理了异常，程序就能够继续往下走，而上面那种则会遇到异常就停止整个程序。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">Demo29</span>().<span class="built_in">test02</span>();</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;catch!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;        <span class="comment">//使用 throw 主动抛出异常，一般在方法中使用。</span></span><br><span class="line">            <span class="comment">//throw new Exception();  //会报错，因为抛出了异常而并没有捕获处理，这需要上一层去捕获这个异常，因此我们要在函数加上 throws Exception；又或者是直接用 try-catch 包裹着捕获处理。</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ArithmeticException</span>();  <span class="comment">//不会报错，因为 Exception 是 check 异常，也就是必须在代码层面直接捕获处理的；而 ArithmeticException 是 uncheck 异常，在运行时才会发生的，因此不用显式地捕获。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设方法中处理不了这个异常，就用 throws 在方法上抛出异常。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> throws ArithmeticException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ArithmeticException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 catch!</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;捕获和抛出异常&quot;&gt;&lt;a href=&quot;#捕获和抛出异常&quot; class=&quot;headerlink&quot; title=&quot;捕获和抛出异常&quot;&gt;&lt;/a&gt;捕获和抛出异常&lt;/h2&gt;&lt;h3 id=&quot;try、catch、finally-关键字&quot;&gt;&lt;a href=&quot;#try、catch、finally-关键字&quot; class=&quot;headerlink&quot; title=&quot;try、catch、finally 关键字&quot;&gt;&lt;/a&gt;try、catch、finally 关键字&lt;/h3&gt;&lt;p&gt;try：监控区域；catch(想要捕获的异常类型)：捕获异常；finally：处理善后工作（可以不要），不管有没有捕获到异常，都会走 finally。&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Demo28&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt;[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//new Demo28().a();     //前一个异常检测到，这里就检测不到了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;built_in&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/span&gt; (Exception e) &amp;#123;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;被除数不能为0！&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;built_in&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/span&gt; (Error e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;栈溢出！&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; finally &amp;#123;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;finally&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Demo28&lt;/span&gt;().&lt;span class=&quot;built_in&quot;&gt;a&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;built_in&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/span&gt; (Exception e) &amp;#123;      &lt;span class=&quot;comment&quot;&gt;//catch 能写多个，最高为 Throwable，而后是 Error 和 Exception；由于类似于 if-else 语句，所以最高的要放在最下面。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;被除数不能为0！&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;built_in&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/span&gt; (Error e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;栈溢出！&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;built_in&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/span&gt; (Throwable t)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Throwable&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;finally&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//相互调用，栈溢出异常。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;b&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;a&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//结果为 被除数不能为0！finally 栈溢出！finally&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;throw、throws&quot;&gt;&lt;a href=&quot;#throw、throws&quot; class=&quot;headerlink&quot; title=&quot;throw、throws&quot;&gt;&lt;/a&gt;throw、throws&lt;/h3&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE 进阶(一)</title>
    <link href="http://guest997.tk/2022/03/13/javase-advanced01/"/>
    <id>http://guest997.tk/2022/03/13/javase-advanced01/</id>
    <published>2022-03-13T01:40:25.000Z</published>
    <updated>2022-04-05T13:54:02.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>要理解 Java 异常处理是如何工作的，需要掌握以下三种类型的异常：</p><ul><li>  检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li><li>  运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li><li>  错误：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也是检查不到的。</li></ul><h2 id="异常体系架构"><a href="#异常体系架构" class="headerlink" title="异常体系架构"></a>异常体系架构</h2><p>Java 把异常当作对象来处理，并定义一个基类 java.lang.Throwable 作为所有异常的超类。在 Java API 中已经定义了许多异常类，这些异常类分为两大类，错误 Error 和异常 Exception。</p><p><img data-src="/images/javase-advanced01.md-0.png"></p><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><ul><li>  Error 类对象由 Java 虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li><li>  Java 虚拟机运行错误(Virtual MachineError)，当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java 虚拟机(JVM)一般会选择线程终止。</li><li>  还有发生在虚拟机试图执行应用时，如类定义错误(NoClassDefFoundError)、链接错误(LinkageError)。这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li></ul><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p>在 Exception 分支中有一个重要的子类 RuntimeException（运行时异常）</p><ul><li>  ArrayIndexOutOfBoundsException（数组下标越界）</li><li>  NullPointerException（空指针异常）</li><li>  ArithmeticException（算术异常）</li><li>  MissingResourceException（丢失资源）</li><li>  ClassNotFoundException（找不到类）</li></ul><p>这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p><h3 id="Error-和-Exception-的区别："><a href="#Error-和-Exception-的区别：" class="headerlink" title="Error 和 Exception 的区别："></a>Error 和 Exception 的区别：</h3><p>Error 通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java 虚拟机(JVM)一般会选择终止线程； Exception 通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</p><h2 id="实际应用中的经验总结"><a href="#实际应用中的经验总结" class="headerlink" title="实际应用中的经验总结"></a>实际应用中的经验总结</h2><ul><li>  处理运行时异常时，采用逻辑去合理规避同时辅助 try- catch 处理。</li><li>  在多重 catch 块后面，可以加一个 catch( Exception) 来处理可能会被遗漏的异常。</li><li>  对于不确定的代码，也可以加上try- catch 处理潜在的异常。</li><li>  尽量去处理异常，切忌只是简单地调用 printStackTrace() 去打印输出。</li><li>  具体如何处理异常，要根据不同的业务需求和异常类型去决定。</li><li>  尽量添加 finally 语句块去释放占用的资源。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;p&gt;要理解 Java 异常处理是如何工作的，需要掌握以下三种类型的异常：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。&lt;/li&gt;
&lt;li&gt;  运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。&lt;/li&gt;
&lt;li&gt;  错误：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也是检查不到的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;异常体系架构&quot;&gt;&lt;a href=&quot;#异常体系架构&quot; class=&quot;headerlink&quot; title=&quot;异常体系架构&quot;&gt;&lt;/a&gt;异常体系架构&lt;/h2&gt;&lt;p&gt;Java 把异常当作对象来处理，并定义一个基类 java.lang.Throwable 作为所有异常的超类。在 Java API 中已经定义了许多异常类，这些异常类分为两大类，错误 Error 和异常 Exception。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="javase" scheme="http://guest997.tk/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>vps 刷 warp+ 流量</title>
    <link href="http://guest997.tk/2022/02/21/vps-warp-data/"/>
    <id>http://guest997.tk/2022/02/21/vps-warp-data/</id>
    <published>2022-02-21T03:40:54.000Z</published>
    <updated>2022-04-05T13:54:21.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>之前就有很多种方式刷 warp+ 流量，比如网页在线运行 python 脚本刷，或是本地设备运行 python 脚本刷，还有甚者放到 Github Workflow 上刷。（这样做是会被 github 封禁的，所以千万不要这样做！）我认为最靠谱和稳定的还是放到自己的服务器上刷。</p><p><strong>注意：由于脚本是基于 1.1.1.1 的客户端的邀请机制进行刷流量的，所以刷了流量之后，你是不能将设备上的客户端卸载的，更新是可以的，否则流量就失效了。</strong></p><h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul><li>  服务器上运行下面的命令安装并运行脚本。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N https:<span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>kkkyg<span class="regexp">/CFwarp/</span>CFwarp.sh &amp;&amp; bash CFwarp.sh</span><br></pre></td></tr></table></figure><ul><li>  选择第五个。</li></ul><p><img data-src="/images/vps-warp-data.md-0.png"></p><ul><li>  之后再选择第四个。</li></ul><p><img data-src="/images/vps-warp-data.md-1.png"></p><ul><li>  这时会提示你输入 id。而 id 是需要在你的设备上下载 1.1.1.1 客户端才能看到的。在 <strong>设置 - 高级 - 诊断</strong> 中就能看见一项 <strong>ID</strong> 配置。</li></ul><p><img data-src="/images/vps-warp-data.md-2.png"></p><ul><li>  把得到的 id 输入进去，一直回车就能开始刷流量了。</li><li>  如果不知道到底有没有在运行，输入下面的命令查看是否存在相应的 screen 进程。</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">screen -ls</span></span><br></pre></td></tr></table></figure><ul><li>  如果成功刷到，只要在你的设备上连接一下1.1.1.1，等一会就会有通知一直蹦出来，提示你获得了 1GB 的流量。或者是按照上图那样刷新下流量值就能知道成功没有。</li></ul><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>不知为何，windows 版本的客户端一直无法自动注册账户，所以就放弃了。目前就只在安卓手机和 ipad mini 上用，感觉效果还是可以的。如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;p&gt;之前就有很多种方式刷 warp+ 流量，比如网页在线运行 python 脚本刷，或是本地设备运行 python 脚本刷，还有甚者放到 Github Workflow 上刷。（这样做是会被 github 封禁的，所以千万不要这样做！）我认为最靠谱和稳定的还是放到自己的服务器上刷。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：由于脚本是基于 1.1.1.1 的客户端的邀请机制进行刷流量的，所以刷了流量之后，你是不能将设备上的客户端卸载的，更新是可以的，否则流量就失效了。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;正文：&quot;&gt;&lt;a href=&quot;#正文：&quot; class=&quot;headerlink&quot; title=&quot;正文：&quot;&gt;&lt;/a&gt;正文：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;  服务器上运行下面的命令安装并运行脚本。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="实用" scheme="http://guest997.tk/categories/%E5%AE%9E%E7%94%A8/"/>
    
    
    <category term="实用" scheme="http://guest997.tk/tags/%E5%AE%9E%E7%94%A8/"/>
    
    <category term="脚本" scheme="http://guest997.tk/tags/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="vps" scheme="http://guest997.tk/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>Typora 破解教程</title>
    <link href="http://guest997.tk/2022/02/21/typora-crack/"/>
    <id>http://guest997.tk/2022/02/21/typora-crack/</id>
    <published>2022-02-21T03:16:26.000Z</published>
    <updated>2022-04-05T13:54:12.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>最近 typora 收费了，不过还好有大佬做了个项目能够继续白嫖。</p><h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul><li>点击下面的链接进入 typoraCracker 项目。<br>  <a href="https://github.com/Mas0nShi/typoraCracker">https://github.com/Mas0nShi/typoraCracker</a></li><li>  下载项目源码到本地。</li><li>  在项目目录下运行下面的命令安装依赖。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -r requirements.txt</span><br></pre></td></tr></table></figure><ul><li>  找到 Typora 安装目录下的 resources 目录下的 app.asar 文件位置。</li><li>  运行下面的命令进行解包。</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python typora.py <span class="keyword">app</span>.asar文件位置 workstation\<span class="keyword">outfile</span>\</span><br></pre></td></tr></table></figure><ul><li>  将 <strong>example\patch\License.js</strong> 文件替换掉 <strong>workstation\outfile\dec_app\License.js</strong> 文件。</li><li>  在 workstation 目录下创建 outappasar 文件夹。</li><li>  输入下面的命令重新打包为 app.asar 文件。</li></ul><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python typora.py -u workstation<span class="symbol">\o</span>utfile<span class="symbol">\d</span>ec_app workstation<span class="symbol">\o</span>utappasar</span><br></pre></td></tr></table></figure><ul><li>  将 workstation\outappasar 目录下新生成的 app.asar 文件替换掉 Typora 安装目录下的 resources 目录下的 app.asar 文件。</li><li>  输入下面的命令生成授权码。</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">example</span>/keygen.js</span><br></pre></td></tr></table></figure><ul><li>  最后打开 Typora，邮箱随意，输入刚刚生成的授权码即可成功激活。</li></ul><p><img data-src="/images/typora-crack.md-0.png"></p><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;p&gt;最近 typora 收费了，不过还好有大佬做了个项目能够继续白嫖。&lt;/p&gt;
&lt;h2 id=&quot;正文：&quot;&gt;&lt;a href=&quot;#正文：&quot; class=&quot;headerlink&quot; title=&quot;正文：&quot;&gt;&lt;/a&gt;正文：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;点击下面的链接进入 typoraCracker 项目。&lt;br&gt;  &lt;a href=&quot;https://github.com/Mas0nShi/typoraCracker&quot;&gt;https://github.com/Mas0nShi/typoraCracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  下载项目源码到本地。&lt;/li&gt;
&lt;li&gt;  在项目目录下运行下面的命令安装依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; -r requirements.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="实用" scheme="http://guest997.tk/categories/%E5%AE%9E%E7%94%A8/"/>
    
    
    <category term="实用" scheme="http://guest997.tk/tags/%E5%AE%9E%E7%94%A8/"/>
    
    <category term="脚本" scheme="http://guest997.tk/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
</feed>
