<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guest997</title>
  
  <subtitle>一个在互联网下的小小 Coder</subtitle>
  <link href="http://guest997.tk/atom.xml" rel="self"/>
  
  <link href="http://guest997.tk/"/>
  <updated>2022-02-17T16:18:29.526Z</updated>
  <id>http://guest997.tk/</id>
  
  <author>
    <name>Guest997</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>POI 和 EasyExcel 基础(二)</title>
    <link href="http://guest997.tk/2021/12/09/poi-easyexcel-basis02/"/>
    <id>http://guest997.tk/2021/12/09/poi-easyexcel-basis02/</id>
    <published>2021-12-09T12:35:00.000Z</published>
    <updated>2022-02-17T16:18:29.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EasyExcel"><a href="#EasyExcel" class="headerlink" title="EasyExcel"></a>EasyExcel</h2><p>EasyExcel 是阿里巴巴开源的一个 Excel 处理框架，以使用简单和节约内存著称。EasyExcel 能大量减少占用内存的主要原因是在解析 Excel 时没有将文件数据一次性全部加载到内存中，而是从一个磁盘上一行行读取数据，逐个解析。</p><p>官方文档地址：<a href="https://www.yuque.com/easyexcel/doc/easyexcel">https://www.yuque.com/easyexcel/doc/easyexcel</a></p><h3 id="Excel-写操作"><a href="#Excel-写操作" class="headerlink" title="Excel 写操作"></a>Excel 写操作</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于 EasyExcel 依赖中已经包含 POI 相关依赖，有可能发生冲突，所以需要注释掉之前的 POI 依赖。</p><h4 id="POJO-层"><a href="#POJO-层" class="headerlink" title="POJO 层"></a>POJO 层</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.<span class="keyword">annotation</span>.ExcelIgnore;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.<span class="keyword">annotation</span>.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoData</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(<span class="meta-string">&quot;字符串标题&quot;</span>)</span></span><br><span class="line">    <span class="keyword">private</span> String string;</span><br><span class="line">    <span class="meta">@ExcelProperty(<span class="meta-string">&quot;日期标题&quot;</span>)</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">    <span class="meta">@ExcelProperty(<span class="meta-string">&quot;数字标题&quot;</span>)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Double</span> doubleData;</span><br><span class="line">    <span class="comment">//忽略字段</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String ignore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.DemoData;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasyWriteTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String PATH = <span class="string">&quot;E:\\DEMO\\POI+EasyExcel\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟写入数据</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;DemoData&gt; <span class="title">data</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;DemoData&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            DemoData data = <span class="keyword">new</span> DemoData();</span><br><span class="line">            data.setString(<span class="string">&quot;字符串&quot;</span> + i);</span><br><span class="line">            data.setDate(<span class="keyword">new</span> Date());</span><br><span class="line">            data.setDoubleData(<span class="number">0.56</span>);</span><br><span class="line">            list.add(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleWrite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String fileName = PATH + <span class="string">&quot;EasyTest.xlsx&quot;</span>;</span><br><span class="line">        <span class="comment">//这里需要指定写用哪个实体类去写，然后写到第一个表中，名字为模板。最后文件流会自动关闭。</span></span><br><span class="line">        EasyExcel.write(fileName, DemoData.class).sheet(<span class="string">&quot;模板&quot;</span>).doWrite(data());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/poi-easyexcel-basis02.md-0.png"></p><h3 id="Excel-读操作"><a href="#Excel-读操作" class="headerlink" title="Excel 读操作"></a>Excel 读操作</h3><h4 id="DAO-层"><a href="#DAO-层" class="headerlink" title="DAO 层"></a>DAO 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.DemoData;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假设这个是 DAO 存储。当然还要这个类让 spring 管理，如果你不用存储，也就不需要这个类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoDAO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(List&lt;DemoData&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果是 mybatis，尽量别直接调用多次 insert，自己写一个 mapper 里面新增一个方法 batchInsert，所有数据一次性插入。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.listener;</span><br><span class="line"></span><br><span class="line">import com.alibaba.excel.context.AnalysisContext;</span><br><span class="line">import com.alibaba.excel.read.listener.ReadListener;</span><br><span class="line">import com.alibaba.excel.util.ListUtils;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import ml.guest997.dao.DemoDAO;</span><br><span class="line">import ml.guest997.pojo.DemoData;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：DemoDataListener 不能被 spring 管理，每次读取 excel 都要 new，用到 spring 时可以使用构造方法实现依赖注入。</span></span><br><span class="line">public <span class="keyword">class</span> DemoDataListener implements ReadListener&lt;DemoData&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每隔5条存储数据库，实际使用中可以100条，然后清理list，方便内存回收。</span></span><br><span class="line">    <span class="keyword">private</span> static final <span class="built_in">int</span> BATCH_COUNT = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存的数据</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;DemoData&gt; cachedDataList = <span class="module-access"><span class="module"><span class="identifier">ListUtils</span>.</span></span><span class="keyword">new</span><span class="constructor">ArrayListWithExpectedSize(BATCH_COUNT)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设这个是一个 DAO，当然有业务逻辑这个也可以是一个 Service。当然如果不用存储，这个对象就没用。</span></span><br><span class="line">    <span class="keyword">private</span> DemoDAO demoDAO;</span><br><span class="line"></span><br><span class="line">    public <span class="constructor">DemoDataListener()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里是 demo，所以随便 new 一个。实际使用如果到了 spring，请使用下面的有参构造函数。</span></span><br><span class="line">        demoDAO = <span class="keyword">new</span> <span class="constructor">DemoDAO()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="constructor">DemoDataListener(DemoDAO <span class="params">demoDAO</span>)</span> &#123;</span><br><span class="line">        this.demoDAO = demoDAO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个每一条数据解析都会来调用</span></span><br><span class="line">    @Override</span><br><span class="line">    public void invoke(DemoData data, AnalysisContext context) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;解析到一条数据：&quot;</span> + <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">data</span>)</span>);</span><br><span class="line">        cachedDataList.add(data);</span><br><span class="line">        <span class="comment">//达到 BATCH_COUNT 了，需要去存储一次数据库，防止数据几万条数据在内存，容易 OOM。</span></span><br><span class="line">        <span class="keyword">if</span> (cachedDataList.size<span class="literal">()</span> &gt;= BATCH_COUNT) &#123;</span><br><span class="line">            save<span class="constructor">Data()</span>;</span><br><span class="line">            <span class="comment">//存储完成清理 list</span></span><br><span class="line">            cachedDataList = <span class="module-access"><span class="module"><span class="identifier">ListUtils</span>.</span></span><span class="keyword">new</span><span class="constructor">ArrayListWithExpectedSize(BATCH_COUNT)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有数据解析完成了都会来调用这个方法。</span></span><br><span class="line">    @Override</span><br><span class="line">    public void <span class="keyword">do</span><span class="constructor">AfterAllAnalysed(AnalysisContext <span class="params">context</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//这里也要保存数据，确保最后遗留的数据也存储到数据库。</span></span><br><span class="line">        save<span class="constructor">Data()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;所有数据解析完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加上存储数据库</span></span><br><span class="line">    <span class="keyword">private</span> void save<span class="constructor">Data()</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(cachedDataList.size<span class="literal">()</span> + <span class="string">&quot;条数据，开始存储数据库！&quot;</span>);</span><br><span class="line">        demoDAO.save(cachedDataList);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;存储数据库成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.listener.DemoDataListener;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.DemoData;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class EasyReadTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span> PATH = <span class="string">&quot;E:\\DEMO\\POI+EasyExcel\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    public void simpleRead() &#123;</span><br><span class="line">        <span class="built_in">String</span> fileName = PATH + <span class="string">&quot;EasyTest.xlsx&quot;</span>;</span><br><span class="line">        //这里需要指定读用哪个实体类去读，然后读取第一个表中。最后文件流会自动关闭。</span><br><span class="line">        EasyExcel.read(fileName, DemoData.class, new DemoDataListener()).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/*结果为</span><br><span class="line">解析到一条数据：&#123;<span class="string">&quot;date&quot;</span>:<span class="number">1636531468400</span>,<span class="string">&quot;doubleData&quot;</span>:<span class="number">0.56</span>,<span class="string">&quot;string&quot;</span>:<span class="string">&quot;字符串0&quot;</span>&#125;</span><br><span class="line">解析到一条数据：&#123;<span class="string">&quot;date&quot;</span>:<span class="number">1636531468400</span>,<span class="string">&quot;doubleData&quot;</span>:<span class="number">0.56</span>,<span class="string">&quot;string&quot;</span>:<span class="string">&quot;字符串1&quot;</span>&#125;</span><br><span class="line">解析到一条数据：&#123;<span class="string">&quot;date&quot;</span>:<span class="number">1636531468400</span>,<span class="string">&quot;doubleData&quot;</span>:<span class="number">0.56</span>,<span class="string">&quot;string&quot;</span>:<span class="string">&quot;字符串2&quot;</span>&#125;</span><br><span class="line">解析到一条数据：&#123;<span class="string">&quot;date&quot;</span>:<span class="number">1636531468400</span>,<span class="string">&quot;doubleData&quot;</span>:<span class="number">0.56</span>,<span class="string">&quot;string&quot;</span>:<span class="string">&quot;字符串3&quot;</span>&#125;</span><br><span class="line">解析到一条数据：&#123;<span class="string">&quot;date&quot;</span>:<span class="number">1636531468400</span>,<span class="string">&quot;doubleData&quot;</span>:<span class="number">0.56</span>,<span class="string">&quot;string&quot;</span>:<span class="string">&quot;字符串4&quot;</span>&#125;</span><br><span class="line">解析到一条数据：&#123;<span class="string">&quot;date&quot;</span>:<span class="number">1636531468400</span>,<span class="string">&quot;doubleData&quot;</span>:<span class="number">0.56</span>,<span class="string">&quot;string&quot;</span>:<span class="string">&quot;字符串5&quot;</span>&#125;</span><br><span class="line">解析到一条数据：&#123;<span class="string">&quot;date&quot;</span>:<span class="number">1636531468400</span>,<span class="string">&quot;doubleData&quot;</span>:<span class="number">0.56</span>,<span class="string">&quot;string&quot;</span>:<span class="string">&quot;字符串6&quot;</span>&#125;</span><br><span class="line">解析到一条数据：&#123;<span class="string">&quot;date&quot;</span>:<span class="number">1636531468400</span>,<span class="string">&quot;doubleData&quot;</span>:<span class="number">0.56</span>,<span class="string">&quot;string&quot;</span>:<span class="string">&quot;字符串7&quot;</span>&#125;</span><br><span class="line">解析到一条数据：&#123;<span class="string">&quot;date&quot;</span>:<span class="number">1636531468400</span>,<span class="string">&quot;doubleData&quot;</span>:<span class="number">0.56</span>,<span class="string">&quot;string&quot;</span>:<span class="string">&quot;字符串8&quot;</span>&#125;</span><br><span class="line">解析到一条数据：&#123;<span class="string">&quot;date&quot;</span>:<span class="number">1636531468400</span>,<span class="string">&quot;doubleData&quot;</span>:<span class="number">0.56</span>,<span class="string">&quot;string&quot;</span>:<span class="string">&quot;字符串9&quot;</span>&#125;</span><br><span class="line"><span class="number">10</span>条数据，开始存储数据库！</span><br><span class="line">存储数据库成功！</span><br><span class="line">所有数据解析完成！</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;EasyExcel&quot;&gt;&lt;a href=&quot;#EasyExcel&quot; class=&quot;headerlink&quot; title=&quot;EasyExcel&quot;&gt;&lt;/a&gt;EasyExcel&lt;/h2&gt;&lt;p&gt;EasyExcel 是阿里巴巴开源的一个 Excel 处理框架，以使用简单和节约内存著称。EasyExcel 能大量减少占用内存的主要原因是在解析 Excel 时没有将文件数据一次性全部加载到内存中，而是从一个磁盘上一行行读取数据，逐个解析。&lt;/p&gt;
&lt;p&gt;官方文档地址：&lt;a href=&quot;https://www.yuque.com/easyexcel/doc/easyexcel&quot;&gt;https://www.yuque.com/easyexcel/doc/easyexcel&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Excel-写操作&quot;&gt;&lt;a href=&quot;#Excel-写操作&quot; class=&quot;headerlink&quot; title=&quot;Excel 写操作&quot;&gt;&lt;/a&gt;Excel 写操作&lt;/h3&gt;&lt;h4 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h4&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="easyexcel" scheme="http://guest997.tk/tags/easyexcel/"/>
    
    <category term="poi" scheme="http://guest997.tk/tags/poi/"/>
    
  </entry>
  
  <entry>
    <title>POI 和 EasyExcel 基础(一)</title>
    <link href="http://guest997.tk/2021/12/02/poi-easyexcel-basis01/"/>
    <id>http://guest997.tk/2021/12/02/poi-easyexcel-basis01/</id>
    <published>2021-12-02T10:22:36.000Z</published>
    <updated>2022-02-17T16:18:29.522Z</updated>
    
    <content type="html"><![CDATA[<p>开发中经常会设计到 Excel 的处理，如导出 Excel 到数据库中。操作 Excel 目前比较流行的就是 Apache POI 和阿里巴巴的 EasyExcel。</p><h2 id="Apache-POI"><a href="#Apache-POI" class="headerlink" title="Apache POI"></a>Apache POI</h2><p>Apache POI 提供 API 给 Java 程式对 Microsoft Office 格式档案读和写的功能。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li>  HSSF： 提供读写 Microsoft Excel XLS 格式档案的功能。（03版本）</li><li>  XSSF：提供读写 Microsoft Excel OOXML XLSX 格式档案的功能。（07版本）</li><li>  HWPF：提供读写 Microsoft Word DOC 格式档案的功能。</li><li>  HSLF： 提供读写 Microsoft PowerPoint 格式档案的功能。</li></ul><p><strong>03版本最多65536行，07版本行数没有限制。</strong></p><h3 id="Excel-写操作"><a href="#Excel-写操作" class="headerlink" title="Excel 写操作"></a>Excel 写操作</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>新建 Maven 项目，导入下面的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--xls(03版本)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--xlsx(07版本)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日期格式化工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">POIExcelWriteTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String PATH = <span class="string">&quot;E:\\DEMO\\POI+EasyExcel\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write03Test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个工作簿</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">        <span class="comment">//创建一张工作表</span></span><br><span class="line">        Sheet sheet = workbook.createSheet(<span class="string">&quot;03统计表&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一行</span></span><br><span class="line">        Row row1 = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//创建一个单元格（1,1）</span></span><br><span class="line">        Cell cell11 = row1.createCell(<span class="number">0</span>);</span><br><span class="line">        cell11.setCellValue(<span class="string">&quot;访问人数&quot;</span>);</span><br><span class="line">        <span class="comment">//（1,2）</span></span><br><span class="line">        Cell cell12 = row1.createCell(<span class="number">1</span>);</span><br><span class="line">        cell12.setCellValue(<span class="number">666</span>);</span><br><span class="line">        <span class="comment">//（2,1）</span></span><br><span class="line">        Row row2 = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">        Cell cell21 = row2.createCell(<span class="number">0</span>);</span><br><span class="line">        cell21.setCellValue(<span class="string">&quot;截至时间&quot;</span>);</span><br><span class="line">        <span class="comment">//（2,2）</span></span><br><span class="line">        Cell cell22 = row2.createCell(<span class="number">1</span>);</span><br><span class="line">        cell22.setCellValue(<span class="keyword">new</span> DateTime().toString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//IO 流生成一张表，03版本使用 xls 文件后缀。</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(PATH + <span class="string">&quot;03版本测试.xls&quot;</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        workbook.write(fileOutputStream);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;03版本文件写出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的是03版本的 Excel 文件生成，07版本的几乎是一样的，也就变了如下两行代码，故不再赘述了。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Workbook workbook</span> = new XSSFWorkbook();</span><br><span class="line"><span class="attribute">FileOutputStream fos</span> = new FileOutputStream(PATH + <span class="string">&quot;07版本测试.xlsx&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="速度测试"><a href="#速度测试" class="headerlink" title="速度测试"></a>速度测试</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void write03<span class="constructor">SpeedTest()</span> throws IOException &#123;</span><br><span class="line">    <span class="comment">//开始时间</span></span><br><span class="line">    long <span class="keyword">begin</span> = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line"></span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> <span class="constructor">HSSFWorkbook()</span>;</span><br><span class="line">    Sheet sheet = workbook.create<span class="constructor">Sheet()</span>;</span><br><span class="line">    <span class="comment">//写入数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> rowNum = <span class="number">0</span>; rowNum &lt; <span class="number">65536</span>; rowNum++) &#123;</span><br><span class="line">        Row row = sheet.create<span class="constructor">Row(<span class="params">rowNum</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> cellNum = <span class="number">0</span>; cellNum &lt; <span class="number">10</span>; cellNum++) &#123;</span><br><span class="line">            Cell cell = row.create<span class="constructor">Cell(<span class="params">cellNum</span>)</span>;</span><br><span class="line">            cell.set<span class="constructor">CellValue(<span class="params">cellNum</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> <span class="constructor">FileOutputStream(PATH + <span class="string">&quot;03版本速度测试.xls&quot;</span>)</span>;</span><br><span class="line">    workbook.write(fos);</span><br><span class="line">    fos.close<span class="literal">()</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">    <span class="comment">//结束时间</span></span><br><span class="line">    long <span class="keyword">end</span> = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;耗时：&quot;</span> + (double) (<span class="keyword">end</span> - <span class="keyword">begin</span>)<span class="operator"> / </span><span class="number">1000</span> + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">over</span></span><br><span class="line"><span class="comment">耗时：2.114s</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void write07<span class="constructor">SpeedTest()</span> throws IOException &#123;</span><br><span class="line">    <span class="comment">//开始时间</span></span><br><span class="line">    long <span class="keyword">begin</span> = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line"></span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> <span class="constructor">XSSFWorkbook()</span>;</span><br><span class="line">    Sheet sheet = workbook.create<span class="constructor">Sheet()</span>;</span><br><span class="line">    <span class="comment">//写入数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> rowNum = <span class="number">0</span>; rowNum &lt; <span class="number">30000</span>; rowNum++) &#123;        <span class="comment">//由于65536行数据会提示内存溢出，所以改成30000行。</span></span><br><span class="line">        Row row = sheet.create<span class="constructor">Row(<span class="params">rowNum</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> cellNum = <span class="number">0</span>; cellNum &lt; <span class="number">10</span>; cellNum++) &#123;</span><br><span class="line">            Cell cell = row.create<span class="constructor">Cell(<span class="params">cellNum</span>)</span>;</span><br><span class="line">            cell.set<span class="constructor">CellValue(<span class="params">cellNum</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> <span class="constructor">FileOutputStream(PATH + <span class="string">&quot;07版本速度测试.xlsx&quot;</span>)</span>;</span><br><span class="line">    workbook.write(fos);</span><br><span class="line">    fos.close<span class="literal">()</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">    <span class="comment">//结束时间</span></span><br><span class="line">    long <span class="keyword">end</span> = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;耗时：&quot;</span> + (double) (<span class="keyword">end</span> - <span class="keyword">begin</span>)<span class="operator"> / </span><span class="number">1000</span> + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">over</span></span><br><span class="line"><span class="comment">耗时：6.063s</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以看到即使少了一半多的数据量，07版本的对象写入数据十分耗内存且速度慢，优点就是能够写比03版本更多的数据。</p><p>但是想要存更多的数据又想速度快该怎么办？POI 提供了另一个对象 SXSSFWorkbook 用以解决这个问题。但是过程中会产生临时文件，需要记得清理掉临时文件。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void write<span class="constructor">SXSSFSpeedTest()</span> throws IOException &#123;</span><br><span class="line">    <span class="comment">//开始时间</span></span><br><span class="line">    long <span class="keyword">begin</span> = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认有100条记录被保存在内存中，如果超出这数量，则最前面的数据被写入临时文件。如果想自定义内存中数据的数量，可以使用 new SXSSFWorkbook(数值)。</span></span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> <span class="constructor">SXSSFWorkbook()</span>;</span><br><span class="line">    Sheet sheet = workbook.create<span class="constructor">Sheet()</span>;</span><br><span class="line">    <span class="comment">//写入数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> rowNum = <span class="number">0</span>; rowNum &lt; <span class="number">100000</span>; rowNum++) &#123;</span><br><span class="line">        Row row = sheet.create<span class="constructor">Row(<span class="params">rowNum</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> cellNum = <span class="number">0</span>; cellNum &lt; <span class="number">10</span>; cellNum++) &#123;</span><br><span class="line">            Cell cell = row.create<span class="constructor">Cell(<span class="params">cellNum</span>)</span>;</span><br><span class="line">            cell.set<span class="constructor">CellValue(<span class="params">cellNum</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> <span class="constructor">FileOutputStream(PATH + <span class="string">&quot;SXSSF速度测试.xls&quot;</span>)</span>;</span><br><span class="line">    workbook.write(fos);</span><br><span class="line">    fos.close<span class="literal">()</span>;</span><br><span class="line">    <span class="comment">//清除临时缓存</span></span><br><span class="line">    ((SXSSFWorkbook) workbook).dispose<span class="literal">()</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">    <span class="comment">//结束时间</span></span><br><span class="line">    long <span class="keyword">end</span> = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;耗时：&quot;</span> + (double) (<span class="keyword">end</span> - <span class="keyword">begin</span>)<span class="operator"> / </span><span class="number">1000</span> + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">over</span></span><br><span class="line"><span class="comment">耗时：3.12s</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以从结果看到存100000行数据，也是跟03版本的速度差不多。</p><h3 id="Excel-读操作"><a href="#Excel-读操作" class="headerlink" title="Excel 读操作"></a>Excel 读操作</h3><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">POIExcelReadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String PATH = <span class="string">&quot;E:\\DEMO\\POI+EasyExcel\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read03Test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取文件流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(PATH + <span class="string">&quot;03版本测试.xls&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个工作簿</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook(fis);</span><br><span class="line">        <span class="comment">//得到一张工作表</span></span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//得到一行</span></span><br><span class="line">        Row row = sheet.getRow(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//得到一个单元格</span></span><br><span class="line">        Cell cell = row.getCell(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取值的时候，一定要注意数据类型。</span></span><br><span class="line">        System.out.println(cell.getNumericCellValue());</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 666.0</span></span><br></pre></td></tr></table></figure><p>上面的是03版本的 Excel 文件生成，07版本的几乎是一样的，也就变了如下两行代码，故不再赘述了。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">new</span> <span class="constructor">FileInputStream(PATH + <span class="string">&quot;07版本测试.xlsx&quot;</span>)</span>;</span><br><span class="line">Workbook workbook = <span class="keyword">new</span> <span class="constructor">XSSFWorkbook(<span class="params">fis</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="完整测试"><a href="#完整测试" class="headerlink" title="完整测试"></a>完整测试</h4><p><img data-src="/images/poi-easyexcel-basis01.md-0.png"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void read<span class="constructor">CellTypeTest()</span> throws Exception &#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> <span class="constructor">FileInputStream(PATH + <span class="string">&quot;学生信息表.xlsx&quot;</span>)</span>;</span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> <span class="constructor">XSSFWorkbook(<span class="params">fis</span>)</span>;</span><br><span class="line">    Sheet sheet = workbook.get<span class="constructor">SheetAt(0)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取第一行标题内容</span></span><br><span class="line">    Row rowTitle = sheet.get<span class="constructor">Row(0)</span>;</span><br><span class="line">    <span class="keyword">if</span> (rowTitle != null) &#123;</span><br><span class="line">        <span class="comment">//打印第一行数据</span></span><br><span class="line">        <span class="built_in">int</span> cellCount = rowTitle.get<span class="constructor">PhysicalNumberOfCells()</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> cellNum = <span class="number">0</span>; cellNum &lt; cellCount; cellNum++) &#123;</span><br><span class="line">            Cell cell = rowTitle.get<span class="constructor">Cell(<span class="params">cellNum</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (cell != null) &#123;</span><br><span class="line">                CellType cellType = cell.get<span class="constructor">CellType()</span>;</span><br><span class="line">                String cellValue = cell.get<span class="constructor">StringCellValue()</span>;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(cellValue + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印从第二行开始的数据</span></span><br><span class="line">    <span class="built_in">int</span> rowCount = sheet.get<span class="constructor">PhysicalNumberOfRows()</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> rowNum = <span class="number">1</span>; rowNum &lt; rowCount; rowNum++) &#123;</span><br><span class="line">        Row rowData = sheet.get<span class="constructor">Row(<span class="params">rowNum</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (rowData != null) &#123;</span><br><span class="line">            <span class="built_in">int</span> cellCount = rowTitle.get<span class="constructor">PhysicalNumberOfCells()</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> cellNum = <span class="number">0</span>; cellNum &lt; cellCount; cellNum++) &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;[&quot;</span> + (rowNum + <span class="number">1</span>) + <span class="string">&quot;-&quot;</span> + (cellNum + <span class="number">1</span>) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                Cell cell = rowData.get<span class="constructor">Cell(<span class="params">cellNum</span>)</span>;</span><br><span class="line">                <span class="comment">//匹配单元格的数据类型</span></span><br><span class="line">                <span class="keyword">if</span> (cell != null) &#123;</span><br><span class="line">                    CellType cellType = cell.get<span class="constructor">CellType()</span>;</span><br><span class="line">                    String cellValue = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    switch (cellType) &#123;</span><br><span class="line">                        case STRING:</span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;【字符串】&quot;</span>);</span><br><span class="line">                            cellValue = cell.get<span class="constructor">StringCellValue()</span>;</span><br><span class="line">                            break;</span><br><span class="line">                        case BOOLEAN:</span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;【布尔型】&quot;</span>);</span><br><span class="line">                            cellValue = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">cell</span>.<span class="params">getBooleanCellValue</span>()</span>);</span><br><span class="line">                            break;</span><br><span class="line">                        case BLANK:</span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;【空】&quot;</span>);</span><br><span class="line">                            break;</span><br><span class="line">                        case NUMERIC:</span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;【数字】&quot;</span>);</span><br><span class="line">                            <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>is<span class="constructor">CellDateFormatted(<span class="params">cell</span>)</span>) &#123;</span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;--【日期】&quot;</span>);</span><br><span class="line">                                Date date = cell.get<span class="constructor">DateCellValue()</span>;</span><br><span class="line">                                cellValue = <span class="keyword">new</span> <span class="constructor">DateTime(<span class="params">date</span>)</span>.<span class="keyword">to</span><span class="constructor">String(<span class="string">&quot;yyyy-MM-dd&quot;</span>)</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;--【数字转换为字符串输出】&quot;</span>);     <span class="comment">//防止数字长度过长</span></span><br><span class="line">                                cellValue = cell.<span class="keyword">to</span><span class="constructor">String()</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            break;</span><br><span class="line">                        case ERROR:</span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;【数据类型错误】&quot;</span>);</span><br><span class="line">                            break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(cellValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fis.close<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="公式计算"><a href="#公式计算" class="headerlink" title="公式计算"></a>公式计算</h4><p><img data-src="/images/poi-easyexcel-basis01.md-1.png"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void formula<span class="constructor">Test()</span> throws Exception &#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> <span class="constructor">FileInputStream(PATH + <span class="string">&quot;公式.xls&quot;</span>)</span>;</span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> <span class="constructor">HSSFWorkbook(<span class="params">fis</span>)</span>;</span><br><span class="line">    Sheet sheet = workbook.get<span class="constructor">SheetAt(0)</span>;</span><br><span class="line">    Row row = sheet.get<span class="constructor">Row(4)</span>;</span><br><span class="line">    Cell cell = row.get<span class="constructor">Cell(0)</span>;</span><br><span class="line">    <span class="comment">//拿到计算公式</span></span><br><span class="line">    FormulaEvaluator FormulaEvaluator = <span class="keyword">new</span> <span class="constructor">HSSFFormulaEvaluator((HSSFWorkbook)</span> workbook);</span><br><span class="line">    <span class="comment">//输出单元格的内容</span></span><br><span class="line">    CellType cellType = cell.get<span class="constructor">CellType()</span>;</span><br><span class="line">    <span class="keyword">if</span> (cellType<span class="operator"> == </span>CellType.FORMULA) &#123;</span><br><span class="line">        <span class="comment">//打印计算公式</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(cell.get<span class="constructor">CellFormula()</span>);</span><br><span class="line">        <span class="comment">//计算</span></span><br><span class="line">        CellValue evaluate = <span class="module-access"><span class="module"><span class="identifier">FormulaEvaluator</span>.</span></span>evaluate(cell);</span><br><span class="line">        <span class="comment">//打印计算结果</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(evaluate.format<span class="constructor">AsString()</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">SUM(A2:A4)</span></span><br><span class="line"><span class="comment">600.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;开发中经常会设计到 Excel 的处理，如导出 Excel 到数据库中。操作 Excel 目前比较流行的就是 Apache POI 和阿里巴巴的 EasyExcel。&lt;/p&gt;
&lt;h2 id=&quot;Apache-POI&quot;&gt;&lt;a href=&quot;#Apache-POI&quot; class=&quot;headerlink&quot; title=&quot;Apache POI&quot;&gt;&lt;/a&gt;Apache POI&lt;/h2&gt;&lt;p&gt;Apache POI 提供 API 给 Java 程式对 Microsoft Office 格式档案读和写的功能。&lt;/p&gt;
&lt;h3 id=&quot;结构&quot;&gt;&lt;a href=&quot;#结构&quot; class=&quot;headerlink&quot; title=&quot;结构&quot;&gt;&lt;/a&gt;结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;  HSSF： 提供读写 Microsoft Excel XLS 格式档案的功能。（03版本）&lt;/li&gt;
&lt;li&gt;  XSSF：提供读写 Microsoft Excel OOXML XLSX 格式档案的功能。（07版本）&lt;/li&gt;
&lt;li&gt;  HWPF：提供读写 Microsoft Word DOC 格式档案的功能。&lt;/li&gt;
&lt;li&gt;  HSLF： 提供读写 Microsoft PowerPoint 格式档案的功能。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="easyexcel" scheme="http://guest997.tk/tags/easyexcel/"/>
    
    <category term="poi" scheme="http://guest997.tk/tags/poi/"/>
    
  </entry>
  
  <entry>
    <title>Sharding-JDBC 基础(三)</title>
    <link href="http://guest997.tk/2021/11/28/sharding-jdbc-basis03/"/>
    <id>http://guest997.tk/2021/11/28/sharding-jdbc-basis03/</id>
    <published>2021-11-28T04:37:39.000Z</published>
    <updated>2022-02-17T16:20:25.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>数据库事务需要满足 ACID（原子性、一致性、隔离性、持久性）四个特性。</p><ul><li>  原子性（Atomicity）指事务作为整体来执行，要么全部执行，要么全不执行。</li><li>  一致性（Consistency）指事务应确保数据从一个一致的状态转变为另一个一致的状态。</li><li>  隔离性（Isolation）指多个事务并发执行时，一个事务的执行不应影响其他事务的执行。</li><li>  持久性（Durability）指已提交的事务修改数据会被持久保存。</li></ul><p>在单一数据节点中，事务仅限于对单一数据库资源的访问控制，称之为本地事务。几乎所有的成熟的关系型数据库都提供了对本地事务的原生支持。 但是在基于微服务的分布式应用环境下，越来越多的应用场景要求对多个服务的访问及其相对应的多个数据库资源能纳入到同一个事务当中，分布式事务应运而生。</p><p>关系型数据库虽然对本地事务提供了完美的 ACID 原生支持。 但在分布式的场景下，它却成为系统性能的桎梏。如何让数据库在分布式场景下满足 ACID 的特性或找寻相应的替代方案，是分布式事务的重点工作。</p><h3 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h3><p>在不开启任何分布式事务管理器的前提下，让每个数据节点各自管理自己的事务。 它们之间没有协调以及通信的能力，也并不互相知晓其他数据节点事务的成功与否。 本地事务在性能方面无任何损耗，但在强一致性以及最终一致性方面则力不从心。</p><h3 id="两（三）阶段事务"><a href="#两（三）阶段事务" class="headerlink" title="两（三）阶段事务"></a>两（三）阶段事务</h3><p>XA 协议最早的分布式事务模型是由 X/Open 国际联盟提出的 X/Open Distributed Transaction Processing（DTP）模型，简称 XA 协议。</p><p>基于 XA 协议实现的分布式事务对业务侵入很小。 它最大的优势就是对使用方透明，用户可以像使用本地事务一样使用基于 XA 协议的分布式事务。 XA协议能够严格保障事务 ACID 特性。</p><p>严格保障事务 ACID 特性是一把双刃剑。 事务执行在过程中需要将所需资源全部锁定，它更加适用于执行时间确定的短事务。 对于长事务来说，整个事务进行期间对数据的独占，将导致对热点数据依赖的业务系统并发性能衰退明显。 因此，在高并发的性能至上场景中，基于 XA 协议的分布式事务并不是最佳选择。</p><h3 id="柔性事务"><a href="#柔性事务" class="headerlink" title="柔性事务"></a>柔性事务</h3><p>如果将实现了 ACID 的事务要素的事务称为刚性事务的话，那么基于 BASE 事务要素的事务则称为柔性事务。 BASE 是基本可用、柔性状态和最终一致性这三个要素的缩写。</p><ul><li>  基本可用（Basically Available）保证分布式事务参与方不一定同时在线。</li><li>  柔性状态（Soft state）则允许系统状态更新有一定的延时，这个延时对客户来说不一定能够察觉。</li><li>  最终一致性（Eventually consistent）通常是通过消息传递的方式保证系统的最终一致性。</li></ul><p>在 ACID 事务中对隔离性的要求很高，在事务执行过程中，必须将所有的资源锁定。 柔性事务的理念则是通过业务逻辑将互斥锁操作从资源层面上移至业务层面。通过放宽对强一致性要求，来换取系统吞吐量的提升。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><h4 id="本地事务-1"><a href="#本地事务-1" class="headerlink" title="本地事务"></a>本地事务</h4><ul><li>  完全支持非跨库事务，例如：仅分表，或分库但是路由的结果在单库中。</li><li>  完全支持因逻辑异常导致的跨库事务。例如：同一事务中，跨两个库更新。更新完毕后，抛出空指针，则两个库的内容都能回滚。</li><li>  不支持因网络、硬件异常导致的跨库事务。例如：同一事务中，跨两个库更新，更新完毕后、未提交之前，第一个库宕机，则只有第二个库数据提交。</li></ul><h4 id="两阶段-XA-事务"><a href="#两阶段-XA-事务" class="headerlink" title="两阶段 XA 事务"></a>两阶段 XA 事务</h4><ul><li>  支持数据分片后的跨库 XA 事务</li><li>  两阶段提交保证操作的原子性和数据的强一致性</li><li>  服务宕机重启后，提交/回滚中的事务可自动恢复</li><li>  SPI 机制整合主流的 XA 事务管理器，默认 Atomikos，可以选择使用 Narayana 和 Bitronix。</li><li>  同时支持 XA 和非 XA 的连接池</li><li>  提供 SpringBoot 和 namespace 的接入端</li></ul><p>不支持：服务宕机后，在其它机器上恢复提交/回滚中的数据。</p><h4 id="Seata-柔性事务"><a href="#Seata-柔性事务" class="headerlink" title="Seata 柔性事务"></a>Seata 柔性事务</h4><ul><li>  完全支持跨库分布式事务</li><li>  支持 RC 隔离级别</li><li>  通过 undo 快照进行事务回滚</li><li>  支持服务宕机后的，自动恢复提交中的事务</li></ul><p>依赖：需要额外部署 Seata-server 服务进行分支事务的协调。</p><p>待优化项：ShardingSphere 和 Seata 会对 SQL 进行重复解析。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p><img data-src="/images/sharding-jdbc-basis03.md-0.png"></p><h2 id="分布式事务依赖"><a href="#分布式事务依赖" class="headerlink" title="分布式事务依赖"></a>分布式事务依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-transaction-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@ShardingTransactionType</span>(TransactionType.XA)</span><br><span class="line"><span class="variable">@Transactional</span>(rollbackFor = Exception.class)</span><br></pre></td></tr></table></figure><h2 id="数据库拓展"><a href="#数据库拓展" class="headerlink" title="数据库拓展"></a>数据库拓展</h2><h3 id="基础规范"><a href="#基础规范" class="headerlink" title="基础规范"></a>基础规范</h3><ul><li>  表必须有主键，建议使用整型作为主键。</li><li>  禁止使用外键，表之间的关联性和完整性通过应用层来控制。</li><li>  表在设计之初，应该考虑到大致的数据级，若表记录小于1000W，尽量使用单表，不建议分表。</li><li>  建议将大字段，访问频率低，或者不需要作为筛选条件的字段拆分到拓展表中。（即做好表垂直拆分）</li><li>  控制单实例表的总数，单个表分表数控制在1024以内。</li></ul><h3 id="列设计规范"><a href="#列设计规范" class="headerlink" title="列设计规范"></a>列设计规范</h3><ul><li>  使用 varchar(20) 存储手机号，不要使用整数。</li><li>  使用 int 存储 ipv4，不要使用 char(15)。</li><li>  涉及金额使用 decimal/varchar，并制定精度。</li><li>  不要设计为 null 的字段，而是用空字符，因为 null 需要更多的空间，并且使得索引和统计变得更复杂。</li></ul><h3 id="索引规范"><a href="#索引规范" class="headerlink" title="索引规范"></a>索引规范</h3><ul><li>  唯一索引使用 uniq_[字段名] 来命名</li><li>  非唯一索引使用 idx_[字段名] 来命名</li><li>  不建议在频繁更新的字段上建立索引</li><li>  非必要不要进行 join，如果要进行 join 查询，被 join 的字段必须类型相同，并建立索引。</li><li>  单张表的索引数量建议控制在5个以内，索引过多，不仅会导致插入更新性能下降，还可能导致 MYSQL 的索引出错和性能下降。</li><li>组合索引字段数量不建议超过5个，理解组合索引的最左匹配原则，避免重复建设索引。比如你建立了<br>  (x,y,z)相当于你建立了(x),(x,y),(x,y,z)</li></ul><h3 id="SQL规范"><a href="#SQL规范" class="headerlink" title="SQL规范"></a>SQL规范</h3><ul><li>  禁止使用 select *，只获取必要字段，select *会增加 cpu、io、内存、带宽的消耗。</li><li>  insert 必须指定字段插入，在表结果变更时，能保证对应应用程序无影响。</li><li>  隐私类型转换会使索引失效，导致全表扫描。（比如：手机号码搜索时未转换成字符串）</li><li>  禁止在 where 后面查询列使用内置函数或者表达式，导致不能命中索引，导致全表扫描。</li><li>  禁止负向查询（!=,not like ,no in 等）以及%开头的模糊查询，造成不能命中索引，导致全表扫描。</li><li>  避免直接返回大结果集造成内存溢出，可采用分段和游标方式。</li><li>  返回结果集时尽量使用 limit 分页显示。</li><li>  尽量在 order by/group by 的列上创建索引。</li><li>  大表扫描尽量放在镜像库上去做</li><li>  禁止大表 join 查询和子查询</li><li>  尽量避免数据库内置函数作为查询条件</li><li>  应用程序尽量捕获 SQL 异常</li></ul><h3 id="平滑添加字段"><a href="#平滑添加字段" class="headerlink" title="平滑添加字段"></a>平滑添加字段</h3><p>场景：在开发时，有时需要给表加字段，在大数据量且分表的情况下，怎么样平滑添加字段。</p><ul><li>  直接 alter table add column，数据量大时不建议。（会产生写锁）</li><li>  提前预留字段（不优雅：造成空间浪费，预留多少很难控制，拓展性差）</li><li>  复制表并增加字段，迁移原表数据，再重新命名新表作为原表。</li><li>  放入拓展表中（无法使用索引）</li><li>  提前设计，使用 key/value 方法存储，新增字段时，直接加一个 key 就好了（优雅）</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;事务管理&quot;&gt;&lt;a href=&quot;#事务管理&quot; class=&quot;headerlink&quot; title=&quot;事务管理&quot;&gt;&lt;/a&gt;事务管理&lt;/h2&gt;&lt;p&gt;数据库事务需要满足 ACID（原子性、一致性、隔离性、持久性）四个特性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  原子性（Atomicity）指事务作为整体来执行，要么全部执行，要么全不执行。&lt;/li&gt;
&lt;li&gt;  一致性（Consistency）指事务应确保数据从一个一致的状态转变为另一个一致的状态。&lt;/li&gt;
&lt;li&gt;  隔离性（Isolation）指多个事务并发执行时，一个事务的执行不应影响其他事务的执行。&lt;/li&gt;
&lt;li&gt;  持久性（Durability）指已提交的事务修改数据会被持久保存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在单一数据节点中，事务仅限于对单一数据库资源的访问控制，称之为本地事务。几乎所有的成熟的关系型数据库都提供了对本地事务的原生支持。 但是在基于微服务的分布式应用环境下，越来越多的应用场景要求对多个服务的访问及其相对应的多个数据库资源能纳入到同一个事务当中，分布式事务应运而生。&lt;/p&gt;
&lt;p&gt;关系型数据库虽然对本地事务提供了完美的 ACID 原生支持。 但在分布式的场景下，它却成为系统性能的桎梏。如何让数据库在分布式场景下满足 ACID 的特性或找寻相应的替代方案，是分布式事务的重点工作。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="sharding-jdbc" scheme="http://guest997.tk/tags/sharding-jdbc/"/>
    
  </entry>
  
  <entry>
    <title>Sharding-JDBC 基础(二)</title>
    <link href="http://guest997.tk/2021/11/27/sharding-jdbc-basis02/"/>
    <id>http://guest997.tk/2021/11/27/sharding-jdbc-basis02/</id>
    <published>2021-11-27T02:14:01.000Z</published>
    <updated>2022-02-17T16:20:22.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整合-SpringBoot-框架"><a href="#整合-SpringBoot-框架" class="headerlink" title="整合 SpringBoot 框架"></a>整合 SpringBoot 框架</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>新建 SpringBoot 项目，导入 Spring Web、Lombok、MySQL Driver 和 MyBatis Framework 依赖。最后再手动添加 Druid 和 Sharding-JDBC 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-core-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="symbol">`sharding-jdbc`</span>;</span><br><span class="line">USE `sharding-jdbc`;</span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`user`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> bigint(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`nickname`</span> varchar(<span class="number">20</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`password`</span> varchar(<span class="number">20</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`sex`</span> int(<span class="number">1</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`birthday`</span> date DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`age`</span> int(<span class="number">3</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="comment">#参数配置，显示 sql。</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#配置数据源</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment">#给每个数据源取别名</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0,ds1</span></span><br><span class="line">      <span class="comment">#给 ds0 数据源配置数据库连接信息</span></span><br><span class="line">      <span class="attr">ds0:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.64.129:3301/sharding-jdbc?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">maxPoolSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">minPoolSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment">#给 ds1 数据源配置数据库连接信息</span></span><br><span class="line">      <span class="attr">ds1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.64.129:3302/sharding-jdbc?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">maxPoolSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">minPoolSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment">#配置默认数据源 ds0</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment">#默认数据源主要用于写，注意一定要配置读写分离，如果不配置，就会把三个节点都当做 slave 节点，增删改会报错。</span></span><br><span class="line">      <span class="attr">default-data-source-name:</span> <span class="string">ds0</span></span><br><span class="line">    <span class="comment">#配置数据源的读写分离，数据库一定要做主从复制。</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment">#配置主从别名</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ms</span></span><br><span class="line">      <span class="comment">#配置主库 master 节点，负责数据的写入。</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">ds0</span></span><br><span class="line">      <span class="comment">#配置从库 slave节点，负责数据的查询。</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">ds1</span></span><br><span class="line">      <span class="comment">#配置 slave 节点的负载均衡均衡策略，采用轮询机制。</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span></span><br></pre></td></tr></table></figure><h3 id="POJO-层"><a href="#POJO-层" class="headerlink" title="POJO 层"></a>POJO 层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mapper-层"><a href="#Mapper-层" class="headerlink" title="Mapper 层"></a>Mapper 层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(nickname,password,sex,birthday,age) values(#&#123;nickname&#125;,#&#123;password&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;age&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller-层"><a href="#Controller-层" class="headerlink" title="Controller 层"></a>Controller 层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setNickname(<span class="string">&quot;guest997&quot;</span> + <span class="keyword">new</span> Random().nextInt());</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user.setSex((<span class="keyword">int</span>) (<span class="number">2</span> * Math.random()));        <span class="comment">//随机生成0或1</span></span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        user.setAge((<span class="keyword">int</span>) (Math.random() * <span class="number">100</span> + <span class="number">1</span>));       <span class="comment">//随机生成1到100的整数</span></span><br><span class="line">        userMapper.addUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/find&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动 SpringBoot 项目，浏览器访问：127.0.0.1:8080/user/save，页面会出现 success。再次访问：127.0.0.1:8080/user/find，页面会出现刚刚插入的数据。控制台则输出了如下内容。</p><p><img data-src="/images/sharding-jdbc-basis02.md-0.png"></p><p>一般来说主从复制使用的是一主二从，查询使用轮询机制，就是会在两个从库中进行轮流查询。</p><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><p>分库分表的目的：解决高并发和数据量大的问题。分库分表在之前的 Redis 的文章就讲过了，这里就不赘述了。</p><h3 id="逻辑表"><a href="#逻辑表" class="headerlink" title="逻辑表"></a>逻辑表</h3><p>逻辑表是指：水平拆分的数据库或者数据表的相同路基和数据结构表的总称。比如用户数据根据用户 id%2 拆分为2个表，分别是：user0 和 user1。它们的逻辑表名是：user。</p><h3 id="数据节点"><a href="#数据节点" class="headerlink" title="数据节点"></a>数据节点</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据节点：多数据源$-&gt;&#123;0..N&#125;，逻辑表名$-&gt;&#123;0..N&#125; 相同表</span></span><br><span class="line"><span class="attribute">actual</span>-data-nodes: ds$-&gt;&#123;<span class="number">0</span>..<span class="number">2</span>&#125;.user$-&gt;&#123;<span class="number">0</span>..<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">#数据节点：多数据源$-&gt;&#123;0..N&#125;，逻辑表名$-&gt;&#123;0..N&#125; 不同表</span></span><br><span class="line"><span class="attribute">actual</span>-data-nodes: ds<span class="number">0</span>.user$-&gt;&#123;<span class="number">0</span>..<span class="number">1</span>&#125;, ds<span class="number">1</span>.user$-&gt;&#123;<span class="number">2</span>..<span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">#指定单数据源的配置方式</span></span><br><span class="line"><span class="attribute">actual</span>-data-nodes: ds<span class="number">0</span>.user$-&gt;&#123;<span class="number">0</span>..<span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">#全部手动指定</span></span><br><span class="line"><span class="attribute">actual</span>-data-nodes: ds<span class="number">0</span>.user<span class="number">0</span>, ds<span class="number">1</span>.user<span class="number">0</span>, ds<span class="number">0</span>.user<span class="number">1</span>, ds<span class="number">1</span>.user<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/sharding-jdbc-basis02.md-1.png"></p><h3 id="分片策略"><a href="#分片策略" class="headerlink" title="分片策略"></a>分片策略</h3><p>下面只讲解经常用到的两种策略。</p><h4 id="行表达式分片策略"><a href="#行表达式分片策略" class="headerlink" title="行表达式分片策略"></a>行表达式分片策略</h4><p><img data-src="/images/sharding-jdbc-basis02.md-2.png"></p><p>上图的分片策略：根据 user_id 作为数据源分片键，当 user_id 为偶数时，对2取余数就为0，所以就到 ds0 数据源进行数据操作。根据 order_id 作为表分片键，当 order_id 为奇数时，对2取余数就为1，所以就到 t_order1 表进行数据操作。</p><h5 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="comment">#参数配置，显示 sql。</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#配置数据源</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment">#给每个数据源取别名</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0,ds1</span></span><br><span class="line">      <span class="comment">#给 ds0 数据源配置数据库连接信息</span></span><br><span class="line">      <span class="attr">ds0:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.64.129:3301/sharding-jdbc?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">maxPoolSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">minPoolSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment">#给 ds1 数据源配置数据库连接信息</span></span><br><span class="line">      <span class="attr">ds1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.64.129:3302/sharding-jdbc?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">maxPoolSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">minPoolSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment">#配置分库分表策略</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">user:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;0..1&#125;.user$-&gt;&#123;0..1&#125;</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">sex</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">ds$-&gt;&#123;sex</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">age</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">user$-&gt;&#123;age</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果配置了读写分离只会到逻辑表中进行数据操作，具体原因未知，如果知道原因，请到评论区告诉我，谢谢。</strong></p><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p><strong>注意：需要先将 user 表复制两份为 user0 和 user1。</strong></p><p>启动 SpringBoot 项目，浏览器多次访问：127.0.0.1:8080/user/save，页面会出现 success。再次访问：127.0.0.1:8080/user/find，页面会出现刚刚插入的数据。控制台则输出了如下内容。</p><p><img data-src="/images/sharding-jdbc-basis02.md-3.png"></p><h4 id="标准分片策略"><a href="#标准分片策略" class="headerlink" title="标准分片策略"></a>标准分片策略</h4><p>具体的配置讲解可以去看一下后面的网址。<a href="https://blog.csdn.net/womenyiqilalala/article/details/106113983">https://blog.csdn.net/womenyiqilalala/article/details/106113983</a></p><h5 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="comment">#参数配置，显示 sql。</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#配置数据源</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment">#给每个数据源取别名</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0,ds1</span></span><br><span class="line">      <span class="comment">#给 ds0 数据源配置数据库连接信息</span></span><br><span class="line">      <span class="attr">ds0:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.64.129:3301/sharding-jdbc?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">maxPoolSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">minPoolSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment">#给 ds1 数据源配置数据库连接信息</span></span><br><span class="line">      <span class="attr">ds1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.64.129:3302/sharding-jdbc?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">maxPoolSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">minPoolSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment">#配置分库分表策略</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">user:</span></span><br><span class="line">          <span class="comment">#collect 是用来处理月份的，当月份小于两位数时，就在月份前面自动补个0。</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;0..1&#125;.user$-&gt;&#123;2020..2022&#125;$&#123;(9..11).collect&#123;t</span> <span class="string">-&gt;t.toString().padLeft(2,&#x27;0&#x27;)&#125;</span> <span class="string">&#125;</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">sex</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">ds$-&gt;&#123;sex</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">              <span class="comment">#标准分片策略</span></span><br><span class="line">            <span class="attr">standard:</span></span><br><span class="line">              <span class="attr">shardingColumn:</span> <span class="string">birthday</span></span><br><span class="line">              <span class="attr">preciseAlgorithmClassName:</span> <span class="string">ml.guest997.algorithm.BirthdayAlgorithm</span></span><br></pre></td></tr></table></figure><h5 id="策略类"><a href="#策略类" class="headerlink" title="策略类"></a>策略类</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shardingsphere.api.sharding.standard.PreciseShardingAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> BirthdayAlgorithm implements PreciseShardingAlgorithm&lt;<span class="type">Date</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;<span class="type">Date</span>&gt; dateList = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        //数据库表名有九个，应该是要设置九个日期用以下面的 doSharding 方法规则判断，但测试时的时间就只是在当前<span class="number">2021</span>年，故在这我就只写三个，其它的是类似的。</span><br><span class="line">        Calendar calendar1 = Calendar.getInstance();</span><br><span class="line">        calendar1.<span class="keyword">set</span>(<span class="number">2021</span>, Calendar.OCTOBER, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Calendar calendar2 = Calendar.getInstance();</span><br><span class="line">        calendar2.<span class="keyword">set</span>(<span class="number">2021</span>, Calendar.NOVEMBER, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Calendar calendar3 = Calendar.getInstance();</span><br><span class="line">        calendar3.<span class="keyword">set</span>(<span class="number">2021</span>, Calendar.DECEMBER, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        dateList.<span class="keyword">add</span>(calendar1.getTime());</span><br><span class="line">        dateList.<span class="keyword">add</span>(calendar2.getTime());</span><br><span class="line">        dateList.<span class="keyword">add</span>(calendar3.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> String doSharding(Collection&lt;String&gt; collection, PreciseShardingValue&lt;<span class="type">Date</span>&gt; preciseShardingValue) &#123;</span><br><span class="line">        //获取逻辑表名</span><br><span class="line">        String logicTableName = preciseShardingValue.getLogicTableName();</span><br><span class="line">        //获取数据库属性值</span><br><span class="line">        <span class="type">Date</span> <span class="type">date</span> = preciseShardingValue.getValue();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">date</span>);</span><br><span class="line">        String dateString = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Date</span> s : dateList) &#123;</span><br><span class="line">            //如果数据晚于上面指定的日期就结束循环</span><br><span class="line">            <span class="keyword">if</span> (<span class="type">date</span>.<span class="keyword">before</span>(s)) &#123;</span><br><span class="line">                dateString = <span class="built_in">new</span> SimpleDateFormat(&quot;yyyyMM&quot;).format(<span class="type">date</span>);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> logicTableName + dateString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h5><p><strong>注意：需要先将 user 表复制九份为 user202009、user202010、user202011，2021和2022年的表类似。</strong></p><p>启动 SpringBoot 项目，浏览器访问：127.0.0.1:8080/user/save，页面会出现 success。再次访问：127.0.0.1:8080/user/find，页面会出现刚刚插入的数据。控制台则输出了如下内容。</p><p><img data-src="/images/sharding-jdbc-basis02.md-4.png"></p><h2 id="分布式主键"><a href="#分布式主键" class="headerlink" title="分布式主键"></a>分布式主键</h2><p>其实从上面的查询数据就可以看出一个问题，数据存在不同的数据库或表中，就有可能发生自增 id 主键相同的问题。所以需要一个全局的唯一 id，而 Sharding-JDBC 提供了两种主键生成策略，分别是 SNOWFLAKE 和 UUID。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">user:</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">id</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;整合-SpringBoot-框架&quot;&gt;&lt;a href=&quot;#整合-SpringBoot-框架&quot; class=&quot;headerlink&quot; title=&quot;整合 SpringBoot 框架&quot;&gt;&lt;/a&gt;整合 SpringBoot 框架&lt;/h2&gt;&lt;h3 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h3&gt;&lt;p&gt;新建 SpringBoot 项目，导入 Spring Web、Lombok、MySQL Driver 和 MyBatis Framework 依赖。最后再手动添加 Druid 和 Sharding-JDBC 依赖。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;druid&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.shardingsphere&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;sharding-jdbc-spring-boot-starter&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.1.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.shardingsphere&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;sharding-core-common&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.1.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="sharding-jdbc" scheme="http://guest997.tk/tags/sharding-jdbc/"/>
    
  </entry>
  
  <entry>
    <title>Sharding-JDBC 基础(一)</title>
    <link href="http://guest997.tk/2021/11/25/sharding-jdbc-basis01/"/>
    <id>http://guest997.tk/2021/11/25/sharding-jdbc-basis01/</id>
    <published>2021-11-25T13:31:19.000Z</published>
    <updated>2022-02-17T16:20:05.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Apache ShardingSphere 是一套开源的分布式数据库解决方案组成的生态圈，它由 <strong>JDBC、Proxy 和 Sidecar</strong>（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的数据水平扩展、分布式事务和分布式治理等功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。</p><p>Apache ShardingSphere 5.x 版本开始致力于可插拔架构，项目的功能组件能够灵活的以可插拔的方式进行扩展。 目前，数据分片、读写分离、数据加密、影子库压测等功能，以及 MySQL、PostgreSQL、SQLServer、Oracle 等 SQL 与协议的支持，均通过插件的方式织入项目。 开发者能够像使用积木一样定制属于自己的独特系统。</p><h2 id="ShardingShpere-的功能清单"><a href="#ShardingShpere-的功能清单" class="headerlink" title="ShardingShpere 的功能清单"></a>ShardingShpere 的功能清单</h2><ul><li>  功能列表</li><li>  数据分片</li><li>  分库 &amp; 分表</li><li>  读写分离</li><li>  分片策略定制化</li><li>  无中心化分布式主键</li><li>  分布式事务</li><li>  标准化事务接口</li><li>  XA 强一致事务</li><li>  柔性事务</li><li>  数据库治理</li><li>  分布式治理</li><li>  弹性伸缩</li><li>  可视化链路追踪</li><li>  数据加密</li></ul><h2 id="Docker-搭建-MySQL-主从复制"><a href="#Docker-搭建-MySQL-主从复制" class="headerlink" title="Docker 搭建 MySQL 主从复制"></a>Docker 搭建 MySQL 主从复制</h2><h3 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建两个容器</span></span><br><span class="line">docker <span class="builtin-name">run</span> -p 3301:3306 --name mysql-master -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=root -d mysql:5.7</span><br><span class="line">docker <span class="builtin-name">run</span> -p 3302:3306 --name mysql-slave -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=root -d mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入到 master 容器修改配置文件</span></span><br><span class="line">docker exec -it mysql-master /bin/bash</span><br><span class="line">apt-<span class="builtin-name">get</span> update</span><br><span class="line">apt-<span class="builtin-name">get</span> install vim</span><br><span class="line">vim /etc/mysql/my.cnf</span><br><span class="line"><span class="comment">#添加如下配置到文件中</span></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="attribute">server-id</span>=1</span><br><span class="line"><span class="attribute">log-bin</span>=master-bin</span><br><span class="line"><span class="attribute">binlog-format</span>=ROW</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出并重启容器</span></span><br><span class="line">exit</span><br><span class="line">docker restart mysql-master</span><br></pre></td></tr></table></figure><p>到 Windows 上使用工具连接到远程 MySQL 主库，使用下面的命令创建数据同步用户并且授权用于在主从库之间同步数据。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">replication</span> slave, <span class="keyword">replication</span> client <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;root&#x27;</span></span><br><span class="line">flush <span class="keyword">privileges</span></span><br></pre></td></tr></table></figure><p>至此主库配置完毕，使用下面的命令查询主库的 binlog 文件名和位置。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show <span class="keyword">master</span> <span class="title">status</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/sharding-jdbc-basis01.md-0.png"></p><h3 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入到 slave 容器修改配置文件</span></span><br><span class="line">docker exec -it mysql-slave <span class="regexp">/bin/</span>bash</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install vim</span><br><span class="line">vim <span class="regexp">/etc/my</span>sql/my.cnf</span><br><span class="line"><span class="comment">#添加如下配置到文件中</span></span><br><span class="line">[mysqld]</span><br><span class="line">server-id=<span class="number">2</span></span><br><span class="line">log-bin=mysql-slave-bin   </span><br><span class="line">relay_log=mysql-relay-bin  </span><br><span class="line">read_only=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#退出并重启容器</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">docker restart mysql-slave</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询主库容器的 ip 地址，需要记住，下面会用到。</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27;</span> mysql-master</span><br></pre></td></tr></table></figure><p>到 Windows 上使用工具连接到远程 MySQL 从库，使用下面的命令绑定主库。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> <span class="attribute">master_host</span>=<span class="string">&#x27;上面查询到的主库容器的 ip 地址&#x27;</span>, <span class="attribute">master_user</span>=<span class="string">&#x27;slave&#x27;</span>, <span class="attribute">master_password</span>=<span class="string">&#x27;root&#x27;</span>, <span class="attribute">master_port</span>=3306, <span class="attribute">master_log_file</span>=<span class="string">&#x27;上面查询到的主库的 binlog 文件名&#x27;</span>, <span class="attribute">master_log_pos</span>=上面查询到的主库的 binlog 位置, <span class="attribute">master_connect_retry</span>=30;</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启主从复制</span></span><br><span class="line">start slave</span><br><span class="line"><span class="comment">#查看主从同步状态</span></span><br><span class="line">show slave status</span><br></pre></td></tr></table></figure><p><img data-src="/images/sharding-jdbc-basis01.md-1.png"></p><p>要想试下是否真的成功了，只要在主库上新建一个数据库看下从库是否同步过去就知道了。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Apache ShardingSphere 是一套开源的分布式数据库解决方案组成的生态圈，它由 &lt;strong&gt;JDBC、Proxy 和 Sidecar&lt;/strong&gt;（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的数据水平扩展、分布式事务和分布式治理等功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。&lt;/p&gt;
&lt;p&gt;Apache ShardingSphere 5.x 版本开始致力于可插拔架构，项目的功能组件能够灵活的以可插拔的方式进行扩展。 目前，数据分片、读写分离、数据加密、影子库压测等功能，以及 MySQL、PostgreSQL、SQLServer、Oracle 等 SQL 与协议的支持，均通过插件的方式织入项目。 开发者能够像使用积木一样定制属于自己的独特系统。&lt;/p&gt;
&lt;h2 id=&quot;ShardingShpere-的功能清单&quot;&gt;&lt;a href=&quot;#ShardingShpere-的功能清单&quot; class=&quot;headerlink&quot; title=&quot;ShardingShpere 的功能清单&quot;&gt;&lt;/a&gt;ShardingShpere 的功能清单&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;  功能列表&lt;/li&gt;
&lt;li&gt;  数据分片&lt;/li&gt;
&lt;li&gt;  分库 &amp;amp; 分表&lt;/li&gt;
&lt;li&gt;  读写分离&lt;/li&gt;
&lt;li&gt;  分片策略定制化&lt;/li&gt;
&lt;li&gt;  无中心化分布式主键&lt;/li&gt;
&lt;li&gt;  分布式事务&lt;/li&gt;
&lt;li&gt;  标准化事务接口&lt;/li&gt;
&lt;li&gt;  XA 强一致事务&lt;/li&gt;
&lt;li&gt;  柔性事务&lt;/li&gt;
&lt;li&gt;  数据库治理&lt;/li&gt;
&lt;li&gt;  分布式治理&lt;/li&gt;
&lt;li&gt;  弹性伸缩&lt;/li&gt;
&lt;li&gt;  可视化链路追踪&lt;/li&gt;
&lt;li&gt;  数据加密&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="sharding-jdbc" scheme="http://guest997.tk/tags/sharding-jdbc/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 进阶(二)</title>
    <link href="http://guest997.tk/2021/11/20/rabbitmq-advanced02/"/>
    <id>http://guest997.tk/2021/11/20/rabbitmq-advanced02/</id>
    <published>2021-11-20T15:17:05.000Z</published>
    <updated>2022-02-17T16:19:00.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-搭建-RabbitMQ-集群"><a href="#Docker-搭建-RabbitMQ-集群" class="headerlink" title="Docker 搭建 RabbitMQ 集群"></a>Docker 搭建 RabbitMQ 集群</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建三个 rabbitmq 目录，存储三个节点配置信息。（root 目录下创建的）</span></span><br><span class="line">mkdir rabbitmq01 rabbitmq02 rabbitmq03</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建 rabbitmq01 节点容器</span></span><br><span class="line">docker run -d --hostname rabbitmq01 --name rabbitmq01 -v ~<span class="regexp">/rabbitmq01:/</span>var<span class="regexp">/lib/</span>rabbitmq -p <span class="number">15672</span>:<span class="number">15672</span> -p <span class="number">5672</span>:<span class="number">5672</span> -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;rabbitcookie&#x27;</span> rabbitmq:management</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建 rabbitmq02 节点容器</span></span><br><span class="line">docker run -d --hostname rabbitmq02 --name rabbitmq02 -v ~<span class="regexp">/rabbitmq02:/</span>var<span class="regexp">/lib/</span>rabbitmq -p <span class="number">15673</span>:<span class="number">15672</span> -p <span class="number">5673</span>:<span class="number">5672</span> --link rabbitmq01:rabbitmq01 -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;rabbitcookie&#x27;</span> rabbitmq:management</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建 rabbitmq03 节点容器</span></span><br><span class="line">docker run -d --hostname rabbitmq03 --name rabbitmq03 -v ~<span class="regexp">/rabbitmq03:/</span>var<span class="regexp">/lib/</span>rabbitmq -p <span class="number">15674</span>:<span class="number">15672</span> -p <span class="number">5674</span>:<span class="number">5672</span> --link rabbitmq01:rabbitmq01 --link rabbitmq02:rabbitmq02 -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;rabbitcookie&#x27;</span> rabbitmq:management</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入 rabbitmq02 容器，将02节点加入到集群中。</span></span><br><span class="line">docker exec -it rabbitmq02 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbitmq01</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入 rabbitmq03 容器，将03节点加入到集群中。</span></span><br><span class="line">docker exec -it rabbitmq03 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbitmq01</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p>浏览器访问 ip:15672，出现如下页面就说明成功了。</p><p><img data-src="/images/rabbitmq-advanced02.md-0.png"></p><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>分布式事务指事务的操作位于不同的节点上，需要保证事务的 ACID 原则。</p><p><img data-src="/images/rabbitmq-advanced02.md-1.png"></p><p>如上图所示，两个服务位于不同的节点上，使用的是不同的数据库，如果其中一个服务出现了问题，虽然是能实现当前数据的回滚，但是另一个服务的数据就无法回滚了。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="symbol">`order_distribution`</span>;</span><br><span class="line">USE `order_distribution`;</span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`order_service`</span> (</span><br><span class="line">    <span class="symbol">`order_id`</span> int(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">    <span class="symbol">`user_id`</span> int(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">    <span class="symbol">`order_content`</span> varchar(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">    <span class="symbol">`create_time`</span> varchar(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin DEFAULT <span class="literal">NULL</span></span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 <span class="keyword">COLLATE</span>=utf8_bin;</span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dispacher_service`</span> (</span><br><span class="line">    <span class="symbol">`dispacher_id`</span> int(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">    <span class="symbol">`order_id`</span> int(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">    <span class="symbol">`order_content`</span> varchar(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">    <span class="symbol">`create_time`</span> varchar(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">    <span class="symbol">`user_id`</span> int(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span></span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 <span class="keyword">COLLATE</span>=utf8_bin;</span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`order_service_message`</span> (</span><br><span class="line">    <span class="symbol">`order_id`</span> int(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">    <span class="symbol">`status`</span> int(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">    <span class="symbol">`order_content`</span> varchar(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">    <span class="symbol">`unique_id`</span> int(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span></span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 <span class="keyword">COLLATE</span>=utf8_bin;</span><br></pre></td></tr></table></figure><h3 id="可靠生产"><a href="#可靠生产" class="headerlink" title="可靠生产"></a>可靠生产</h3><p><img data-src="/images/rabbitmq-advanced02.md-2.png"></p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>新建 SpringBoot 项目，导入 Spring Web、Lombok、MySQL Driver、MyBatis Framework 和 Spring for RabbitMQ 依赖。最后再手动添加 fastjson 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="number">8080</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=com.mysql.cj.jdbc.Driver</span><br><span class="line"><span class="attr">spring.datasource.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/order_distribution?characterEncoding=utf8&amp;useSSL=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=root</span><br><span class="line"><span class="attr">spring.datasource.password</span>=root</span><br><span class="line"><span class="attr">spring.rabbitmq.host</span>=<span class="number">192.168</span>.<span class="number">64.128</span></span><br><span class="line"><span class="attr">spring.rabbitmq.port</span>=<span class="number">5672</span></span><br><span class="line"><span class="attr">spring.rabbitmq.username</span>=guest</span><br><span class="line"><span class="attr">spring.rabbitmq.password</span>=guest</span><br><span class="line"><span class="attr">spring.rabbitmq.virtual-host</span>=/</span><br><span class="line"><span class="comment">#开启 confirmCallBack 确认模式</span></span><br><span class="line"><span class="attr">spring.rabbitmq.publisher-confirm-type</span>=correlated</span><br></pre></td></tr></table></figure><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="function"><span class="title">deadExchange</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">&quot;dead_order_fanout_exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="function"><span class="title">deadOrderQueue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;dead.order.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="function"><span class="title">bindDeadOrder</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deadOrderQueue()).to(deadExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="function"><span class="title">fanoutExchange</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">&quot;order_fanout_exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="function"><span class="title">orderQueue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, <span class="string">&quot;dead_order_fanout_exchange&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;order.queue&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="function"><span class="title">bindorder</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(orderQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="POJO-层"><a href="#POJO-层" class="headerlink" title="POJO 层"></a>POJO 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> orderId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String orderContent;</span><br><span class="line">    <span class="keyword">private</span> String createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageOrder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> orderId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> String orderContent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uniqueId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper-层"><a href="#Mapper-层" class="headerlink" title="Mapper 层"></a>Mapper 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.MessageOrder;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into order_service values(#&#123;orderId&#125;,#&#123;userId&#125;,#&#123;orderContent&#125;,#&#123;createTime&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">saveOrder</span><span class="params">(Order order)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into order_service_message values(#&#123;orderId&#125;,#&#123;status&#125;,#&#123;orderContent&#125;,#&#123;uniqueId&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">saveOrderMessage</span><span class="params">(MessageOrder order)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update order_service_message set status = 1 where order_id=#&#123;orderId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateStatus</span><span class="params">(<span class="keyword">int</span> orderId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.MessageOrder;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDataBaseService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveOrder</span><span class="params">(Order orderInfo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = orderMapper.saveOrder(orderInfo);</span><br><span class="line">        <span class="comment">//消息冗余表记录订单的发送状态</span></span><br><span class="line">        orderMapper.saveOrderMessage(<span class="keyword">new</span> MessageOrder(orderInfo.getOrderId(), <span class="number">0</span>, orderInfo.getOrderContent(), orderInfo.getUserId()));</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;保存订单失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateStatus</span><span class="params">(<span class="keyword">int</span> orderId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = orderMapper.updateStatus(orderId);</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;更新订单状态失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.service;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import ml.guest997.mapper.OrderMapper;</span><br><span class="line">import ml.guest997.pojo.Order;</span><br><span class="line">import org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line">import org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public <span class="keyword">class</span> OrderMQService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    OrderMapper orderMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> OrderDataBaseService orderDataBaseService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数执行完成之后执行的方法</span></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void reg<span class="constructor">Callback()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 为容器创建好的 rabbitTemplate 注册 confirmCallback，消息由生产者投递到 Broker/Exchange 回调。</span></span><br><span class="line"><span class="comment">         * @param correlationData 发送消息时指定的唯一关联数据（消息 id）</span></span><br><span class="line"><span class="comment">         * @param ack 这个消息是否成功投递到 Exchange</span></span><br><span class="line"><span class="comment">         * @param cause 失败的原因</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rabbitTemplate.set<span class="constructor">ConfirmCallback((<span class="params">correlationData</span>, <span class="params">ack</span>, <span class="params">cause</span>)</span> -&gt; &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;cause：&quot;</span> + cause);</span><br><span class="line">            String id = correlationData.get<span class="constructor">Id()</span>;</span><br><span class="line">            <span class="built_in">int</span> orderId = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">id</span>)</span>;</span><br><span class="line">            <span class="comment">//如果 ack 为 true 表示消息已收到</span></span><br><span class="line">            <span class="keyword">if</span> (!ack) &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;订单信息投递到 mq 失败&quot;</span>);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//更改订单状态</span></span><br><span class="line">                <span class="built_in">int</span> i = orderDataBaseService.update<span class="constructor">Status(<span class="params">orderId</span>)</span>;</span><br><span class="line">                <span class="keyword">if</span> (i<span class="operator"> == </span><span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;修改状态成功，成功投递到 mq。&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;本地消息状态修改异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在调用这个方法之前就会调用上面的方法。</span></span><br><span class="line">    public void send<span class="constructor">Message(Order <span class="params">orderInfo</span>)</span> &#123;</span><br><span class="line">        String userJson = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">orderInfo</span>)</span>;</span><br><span class="line">        <span class="built_in">int</span> orderId = orderInfo.get<span class="constructor">OrderId()</span>;</span><br><span class="line">        String s = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">orderId</span>)</span>;</span><br><span class="line">        rabbitTemplate.convert<span class="constructor">AndSend(<span class="string">&quot;order_fanout_exchange&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="params">userJson</span>, <span class="params">new</span> CorrelationData(<span class="params">s</span>)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQOrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDataBaseService orderDataBaseService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMQService orderMQService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOrder</span><span class="params">(Order orderInfo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//正常来说还会有个循环重试的任务类，毕竟消息投递到 mq 不一定一次就成功了，可能会有网络波动。</span></span><br><span class="line">        orderDataBaseService.saveOrder(orderInfo);</span><br><span class="line">        orderMQService.sendMessage(orderInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.service.MQOrderService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderserviceApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MQOrderService mqOrderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Order orderInfo = <span class="keyword">new</span> Order();</span><br><span class="line">        orderInfo.setOrderId(<span class="number">1000001</span>);</span><br><span class="line">        orderInfo.setUserId(<span class="number">1</span>);</span><br><span class="line">        orderInfo.setOrderContent(<span class="string">&quot;买了一盒方便面&quot;</span>);</span><br><span class="line">        mqOrderService.createOrder(orderInfo);</span><br><span class="line">        System.out.println(<span class="string">&quot;订单创建成功.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/rabbitmq-advanced02.md-3.png"></p><h3 id="可靠消费"><a href="#可靠消费" class="headerlink" title="可靠消费"></a>可靠消费</h3><p><img data-src="/images/rabbitmq-advanced02.md-4.png"></p><h4 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>新建 SpringBoot 项目，导入 Spring Web、Lombok、MySQL Driver、MyBatis Framework 和 Spring for RabbitMQ 依赖。最后再手动添加 fastjson 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="number">8081</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=com.mysql.cj.jdbc.Driver</span><br><span class="line"><span class="attr">spring.datasource.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/order_distribution?characterEncoding=utf8&amp;useSSL=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=root</span><br><span class="line"><span class="attr">spring.datasource.password</span>=root</span><br><span class="line"><span class="attr">spring.rabbitmq.host</span>=<span class="number">192.168</span>.<span class="number">64.128</span></span><br><span class="line"><span class="attr">spring.rabbitmq.port</span>=<span class="number">5672</span></span><br><span class="line"><span class="attr">spring.rabbitmq.username</span>=guest</span><br><span class="line"><span class="attr">spring.rabbitmq.password</span>=guest</span><br><span class="line"><span class="attr">spring.rabbitmq.virtual-host</span>=/</span><br><span class="line"><span class="comment">#开启手动 ack</span></span><br><span class="line"><span class="attr">spring.rabbitmq.listener.simple.acknowledge-mode</span>=manual</span><br><span class="line"><span class="comment">#开启重试</span></span><br><span class="line"><span class="attr">spring.rabbitmq.listener.simple.retry.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#最大重试次数</span></span><br><span class="line"><span class="attr">spring.rabbitmq.listener.simple.retry.max-attempts</span>=<span class="number">3</span></span><br><span class="line"><span class="comment">#重试间隔时间</span></span><br><span class="line"><span class="attr">spring.rabbitmq.listener.simple.retry.initial-interval</span>=<span class="number">2000</span>ms</span><br></pre></td></tr></table></figure><h4 id="POJO-层-1"><a href="#POJO-层-1" class="headerlink" title="POJO 层"></a>POJO 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> orderId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String orderContent;</span><br><span class="line">    <span class="keyword">private</span> String createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispacher</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> dispacherId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> orderId;</span><br><span class="line">    <span class="keyword">private</span> String orderContent;</span><br><span class="line">    <span class="keyword">private</span> String createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper-层-1"><a href="#Mapper-层-1" class="headerlink" title="Mapper 层"></a>Mapper 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Dispacher;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DispatcherMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into dispacher_service values(#&#123;dispacherId&#125;,#&#123;orderId&#125;,#&#123;orderContent&#125;,#&#123;createTime&#125;,#&#123;userId&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(Dispacher dispacher)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Service-层-1"><a href="#Service-层-1" class="headerlink" title="Service 层"></a>Service 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.mapper.DispatcherMapper;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Dispacher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DispatcherMapper dispatcherMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatcher</span><span class="params">(<span class="keyword">int</span> orderId,String orderContent)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Dispacher dispacher = <span class="keyword">new</span> Dispacher();</span><br><span class="line">        dispacher.setOrderId(orderId);</span><br><span class="line">        dispacher.setDispacherId(orderId);</span><br><span class="line">        dispacher.setOrderContent(orderContent);</span><br><span class="line">        dispacher.setUserId(orderId);</span><br><span class="line">        <span class="keyword">int</span> i = dispatcherMapper.insertUser(dispacher);</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;配送订单创建失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.AmqpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Header;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DispatcherService dispatcherService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;order.queue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageConsumer</span><span class="params">(String orderMsg, Channel channel, CorrelationData correlationData, <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="keyword">long</span> tag)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收到 mq 的消息是:&quot;</span> + orderMsg + <span class="string">&quot;,count = &quot;</span> + count++);</span><br><span class="line">            Order order = JSONObject.parseObject(orderMsg, Order.class);</span><br><span class="line">            <span class="keyword">int</span> orderId = order.getOrderId();</span><br><span class="line">            String orderContent = order.getOrderContent();</span><br><span class="line">            dispatcherService.dispatcher(orderId, orderContent);</span><br><span class="line">            System.out.println(<span class="number">1</span> / <span class="number">0</span>);              <span class="comment">//出现异常</span></span><br><span class="line">            channel.basicAck(tag, <span class="keyword">false</span>);           <span class="comment">//手动 ack 告诉 mq 消息已经正常消费</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * tag      消息的 tag</span></span><br><span class="line"><span class="comment">             * false    不会重发，会把消息打入到死信队列。死信队列的处理逻辑跟这个类是一样的。</span></span><br><span class="line"><span class="comment">             * requeue  true 会一直重发，如果使用 true 的话，就不要 try/catch，否则会造成死循环。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicNack(tag, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>启动 SpringBoot 项目，访问 ip:15672 下的 Queues 页面会发现死信队列出现了新的消息。</p><p><img data-src="/images/rabbitmq-advanced02.md-5.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Docker-搭建-RabbitMQ-集群&quot;&gt;&lt;a href=&quot;#Docker-搭建-RabbitMQ-集群&quot; class=&quot;headerlink&quot; title=&quot;Docker 搭建 RabbitMQ 集群&quot;&gt;&lt;/a&gt;Docker 搭建 RabbitMQ 集群&lt;/h2&gt;&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#创建三个 rabbitmq 目录，存储三个节点配置信息。（root 目录下创建的）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir rabbitmq01 rabbitmq02 rabbitmq03&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#创建 rabbitmq01 节点容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -d --hostname rabbitmq01 --name rabbitmq01 -v ~&lt;span class=&quot;regexp&quot;&gt;/rabbitmq01:/&lt;/span&gt;var&lt;span class=&quot;regexp&quot;&gt;/lib/&lt;/span&gt;rabbitmq -p &lt;span class=&quot;number&quot;&gt;15672&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;15672&lt;/span&gt; -p &lt;span class=&quot;number&quot;&gt;5672&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5672&lt;/span&gt; -e RABBITMQ_ERLANG_COOKIE=&lt;span class=&quot;string&quot;&gt;&amp;#x27;rabbitcookie&amp;#x27;&lt;/span&gt; rabbitmq:management&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#创建 rabbitmq02 节点容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -d --hostname rabbitmq02 --name rabbitmq02 -v ~&lt;span class=&quot;regexp&quot;&gt;/rabbitmq02:/&lt;/span&gt;var&lt;span class=&quot;regexp&quot;&gt;/lib/&lt;/span&gt;rabbitmq -p &lt;span class=&quot;number&quot;&gt;15673&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;15672&lt;/span&gt; -p &lt;span class=&quot;number&quot;&gt;5673&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5672&lt;/span&gt; --link rabbitmq01:rabbitmq01 -e RABBITMQ_ERLANG_COOKIE=&lt;span class=&quot;string&quot;&gt;&amp;#x27;rabbitcookie&amp;#x27;&lt;/span&gt; rabbitmq:management&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#创建 rabbitmq03 节点容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -d --hostname rabbitmq03 --name rabbitmq03 -v ~&lt;span class=&quot;regexp&quot;&gt;/rabbitmq03:/&lt;/span&gt;var&lt;span class=&quot;regexp&quot;&gt;/lib/&lt;/span&gt;rabbitmq -p &lt;span class=&quot;number&quot;&gt;15674&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;15672&lt;/span&gt; -p &lt;span class=&quot;number&quot;&gt;5674&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5672&lt;/span&gt; --link rabbitmq01:rabbitmq01 --link rabbitmq02:rabbitmq02 -e RABBITMQ_ERLANG_COOKIE=&lt;span class=&quot;string&quot;&gt;&amp;#x27;rabbitcookie&amp;#x27;&lt;/span&gt; rabbitmq:management&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#进入 rabbitmq02 容器，将02节点加入到集群中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker exec -it rabbitmq02 bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rabbitmqctl stop_app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rabbitmqctl join_cluster --ram rabbit@rabbitmq01&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rabbitmqctl start_app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#进入 rabbitmq03 容器，将03节点加入到集群中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker exec -it rabbitmq03 bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rabbitmqctl stop_app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rabbitmqctl join_cluster --ram rabbit@rabbitmq01&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rabbitmqctl start_app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;浏览器访问 ip:15672，出现如下页面就说明成功了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/images/rabbitmq-advanced02.md-0.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;分布式事务&quot;&gt;&lt;a href=&quot;#分布式事务&quot; class=&quot;headerlink&quot; title=&quot;分布式事务&quot;&gt;&lt;/a&gt;分布式事务&lt;/h2&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="rabbitmq" scheme="http://guest997.tk/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 进阶(一)</title>
    <link href="http://guest997.tk/2021/11/19/rabbitmq-advanced01/"/>
    <id>http://guest997.tk/2021/11/19/rabbitmq-advanced01/</id>
    <published>2021-11-19T09:04:50.000Z</published>
    <updated>2022-02-17T16:18:29.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TTL（Time-To-Live）"><a href="#TTL（Time-To-Live）" class="headerlink" title="TTL（Time To Live）"></a>TTL（Time To Live）</h2><p>TTL 表示可以对消息设置预期的时间，在这个时间内可以被消费者接收获取，过了之后消息将自动被删除。RabbitMQ 目前有两种方法可以设置。</p><ul><li>  通过队列属性设置，队列中所有消息都有相同的过期时间。</li><li>  对消息进行单独设置，每条消息 TTL 可以不同。</li></ul><h3 id="队列-TTL-配置类"><a href="#队列-TTL-配置类" class="headerlink" title="队列 TTL 配置类"></a>队列 TTL 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TtlConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">ttlExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;ttl_direct_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">ttlQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;ttl.direct.queue&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">ttlBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(ttlQueue()).to(ttlExchange()).with(<span class="string">&quot;ttl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于发送消息类以及测试类跟之前的几乎一样，就不在这赘述了。可以从界面看到不用编写消费者，5秒之后队列中的消息就消失了。</p><p><img data-src="/images/rabbitmq-advanced01.md-0.png"></p><h3 id="设置消息-TTL"><a href="#设置消息-TTL" class="headerlink" title="设置消息 TTL"></a>设置消息 TTL</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.MessagePostProcessor;</span><br><span class="line">import org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public <span class="keyword">class</span> TtlMessageOrderService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    public void make<span class="constructor">Order(String <span class="params">userId</span>, String <span class="params">productId</span>, <span class="params">int</span> <span class="params">num</span>)</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;保存订单成功，用户 id 是：&quot;</span> + userId + <span class="string">&quot;，订单 id 是：&quot;</span> + productId + <span class="string">&quot;,产品数量是：&quot;</span> + num);</span><br><span class="line">        String exchangeName = <span class="string">&quot;ttlMessage_direct_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;ttlMessage&quot;</span>;</span><br><span class="line">        MessagePostProcessor messagePostProcessor = message -&gt; &#123;</span><br><span class="line">            message.get<span class="constructor">MessageProperties()</span>.set<span class="constructor">Expiration(<span class="string">&quot;5000&quot;</span>)</span>;</span><br><span class="line">            message.get<span class="constructor">MessageProperties()</span>.set<span class="constructor">ContentEncoding(<span class="string">&quot;UTF-8&quot;</span>)</span>;</span><br><span class="line">            return message;</span><br><span class="line">        &#125;;</span><br><span class="line">        rabbitTemplate.convert<span class="constructor">AndSend(<span class="params">exchangeName</span>, <span class="params">routingKey</span>, <span class="params">productId</span>, <span class="params">messagePostProcessor</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于配置类以及测试类跟之前的几乎一样，就不在这赘述了。可以从界面看到不用编写消费者，5秒之后队列中的消息就消失了。</p><p><img data-src="/images/rabbitmq-advanced01.md-1.png"></p><h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><p>DLX 全称 Dead-Letter-Exchange，称之为死信交换机。当消息在一个队列中变成死信之后，它能被重新发送到另一个交换机中，这个交换机就是 DLX，绑定 DLX 的队列就称之为死信队列。消息变成死信，可能是由于以下原因：</p><ul><li>  消息被拒绝</li><li>  消息过期</li><li>  队列达到最大长度</li></ul><p>DLX 也是一个普通的交换机，和一般的交换机没有区别，它能在任何的队列上被指定，实际上就是设置某一个队列的属性，当这个队列中存在死信时，RabbitMQ 就会自动地将这个消息重新发布到设置的 DLX 上去，进而被路由到另一个队列，即死信队列。</p><h3 id="死信队列配置类"><a href="#死信队列配置类" class="headerlink" title="死信队列配置类"></a>死信队列配置类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadQueueConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="function"><span class="title">deadExchange</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;dead_direct_exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="function"><span class="title">deadQueue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;dead.direct.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="function"><span class="title">deadBinding</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deadQueue()).to(deadExchange()).with(<span class="string">&quot;dead&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其它队列配置类"><a href="#其它队列配置类" class="headerlink" title="其它队列配置类"></a>其它队列配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TtlConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">ttlExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;ttl_direct_exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">ttlQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,<span class="string">&quot;dead_direct_exchange&quot;</span>);</span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;dead&quot;</span>);</span><br><span class="line">        <span class="comment">//注意：由于与之前的队列名一样，但是参数不一样，而 RabbitMQ 不会覆盖之前的队列，所有需要手动删除同名队列，否则会报错。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;ttl.direct.queue&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">ttlBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(ttlQueue()).to(ttlExchange()).with(<span class="string">&quot;ttl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于发送消息类以及测试类跟之前的几乎一样，就不在这赘述了。可以从界面看到5秒之后其它队列中的消息消失，而死信队列中的消息则加了一条。</p><h2 id="内存与磁盘监控"><a href="#内存与磁盘监控" class="headerlink" title="内存与磁盘监控"></a>内存与磁盘监控</h2><p><img data-src="/images/rabbitmq-advanced01.md-2.png"></p><p>当 RabbitMQ 的使用内存超过给定的内存阈值或磁盘剩余空间低于给定的阈值时，就会报红并且会阻塞所有连接。</p><h3 id="内存调整"><a href="#内存调整" class="headerlink" title="内存调整"></a>内存调整</h3><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl <span class="keyword">set</span>_vm_memory_high_watermark &lt;fraction&gt;</span><br><span class="line">rabbitmqctl <span class="keyword">set</span>_vm_memory_high_watermark absolute 1GB        <span class="comment">#绝对值</span></span><br></pre></td></tr></table></figure><p>fraction/value 为内存阈值。默认情况是：0.4/物理内存，代表的含义是：当 RabbitMQ 的内存超过物理内存的40%时，就会报红并且会阻塞所有连接。通过命令修改阈值在 Broker 重启以后将会失效。</p><h4 id="配置文件（rabbitmq-conf）"><a href="#配置文件（rabbitmq-conf）" class="headerlink" title="配置文件（rabbitmq.conf）"></a>配置文件（rabbitmq.conf）</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vm_memory_high_watermark</span>.relative = <span class="number">0</span>.<span class="number">4</span>        #建议不要超过<span class="number">0</span>.<span class="number">7</span></span><br><span class="line"><span class="attribute">vm_memory_high_watermark</span>.absolute = <span class="number">1</span>GB</span><br></pre></td></tr></table></figure><p>通过修改配置文件设置的阈值不会随着重启而消失，但修改了配置文件一样要重启 Broker 才会生效。</p><h3 id="磁盘调整"><a href="#磁盘调整" class="headerlink" title="磁盘调整"></a>磁盘调整</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl <span class="keyword">set</span>_disk_free_limit 100MB        <span class="comment">#绝对值</span></span><br><span class="line">rabbitmqctl <span class="keyword">set</span>_disk_free_limit memory_limit &lt;fraction&gt;</span><br></pre></td></tr></table></figure><h3 id="内存换页"><a href="#内存换页" class="headerlink" title="内存换页"></a>内存换页</h3><p>在某个 Broker 节点及内存阻塞生产者之前，它会尝试将队列中的消息换页到磁盘以释放内存空间。持久化和非持久化的消息都会被转储到磁盘中，其中持久化的消息本身就在磁盘中有一份副本，这里会将持久化的消息从内存中清除掉。</p><p>默认情况下，在内存到达内存阈值的50%时会进行换页动作。也就是说，在默认的内存阈值为0.4的情况下,当内存超过0.4x0.5=0.2时会进行换页操作。</p><p>可以通过在配置文件中配置 <strong>vm_memory_high_watermark_paging_ratio</strong> 项来修改此值。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TTL（Time-To-Live）&quot;&gt;&lt;a href=&quot;#TTL（Time-To-Live）&quot; class=&quot;headerlink&quot; title=&quot;TTL（Time To Live）&quot;&gt;&lt;/a&gt;TTL（Time To Live）&lt;/h2&gt;&lt;p&gt;TTL 表示可以对消息设置预期的时间，在这个时间内可以被消费者接收获取，过了之后消息将自动被删除。RabbitMQ 目前有两种方法可以设置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  通过队列属性设置，队列中所有消息都有相同的过期时间。&lt;/li&gt;
&lt;li&gt;  对消息进行单独设置，每条消息 TTL 可以不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;队列-TTL-配置类&quot;&gt;&lt;a href=&quot;#队列-TTL-配置类&quot; class=&quot;headerlink&quot; title=&quot;队列 TTL 配置类&quot;&gt;&lt;/a&gt;队列 TTL 配置类&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; ml.guest997.config;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.Binding;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.BindingBuilder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.DirectExchange;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.Queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TtlConfiguration&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DirectExchange &lt;span class=&quot;title&quot;&gt;ttlExchange&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DirectExchange(&lt;span class=&quot;string&quot;&gt;&amp;quot;ttl_direct_exchange&amp;quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Queue &lt;span class=&quot;title&quot;&gt;ttlQueue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Map&amp;lt;String, Object&amp;gt; args = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        args.put(&lt;span class=&quot;string&quot;&gt;&amp;quot;x-message-ttl&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Queue(&lt;span class=&quot;string&quot;&gt;&amp;quot;ttl.direct.queue&amp;quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Binding &lt;span class=&quot;title&quot;&gt;ttlBinding&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; BindingBuilder.bind(ttlQueue()).to(ttlExchange()).with(&lt;span class=&quot;string&quot;&gt;&amp;quot;ttl&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="rabbitmq" scheme="http://guest997.tk/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 基础(三)</title>
    <link href="http://guest997.tk/2021/11/14/rabbitmq-basis03/"/>
    <id>http://guest997.tk/2021/11/14/rabbitmq-basis03/</id>
    <published>2021-11-14T09:01:45.000Z</published>
    <updated>2022-02-17T16:19:54.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整合-SpringBoot-框架"><a href="#整合-SpringBoot-框架" class="headerlink" title="整合 SpringBoot 框架"></a>整合 SpringBoot 框架</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>新建 SpringBoot 项目，导入 Spring Web 和 Spring for RabbitMQ 依赖。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.64</span><span class="number">.136</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br></pre></td></tr></table></figure><h3 id="模拟订单业务（发布订阅模式）"><a href="#模拟订单业务（发布订阅模式）" class="headerlink" title="模拟订单业务（发布订阅模式）"></a>模拟订单业务（发布订阅模式）</h3><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="function"><span class="title">fanoutExchange</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">&quot;fanout_order_exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="function"><span class="title">smsQueue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;sms.fanout.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="function"><span class="title">emailQueue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;email.fanout.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//确定绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="function"><span class="title">bindSms</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(smsQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//确定绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="function"><span class="title">bindEmail</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">makeOrder</span>(<span class="params"><span class="built_in">String</span> userId, <span class="built_in">String</span> productId, int num</span>)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存订单成功，用户 id 是：&quot;</span> + userId + <span class="string">&quot;，订单 id 是：&quot;</span> + productId + <span class="string">&quot;,产品数量是：&quot;</span> + num);</span><br><span class="line">        <span class="built_in">String</span> exchangeName = <span class="string">&quot;fanout_order_exchange&quot;</span>;</span><br><span class="line">        <span class="built_in">String</span> routingKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, routingKey, productId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.<span class="keyword">annotation</span>.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.<span class="keyword">annotation</span>.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(queues =&#123;<span class="meta-string">&quot;email.fanout.queue&quot;</span>&#125;)</span>     <span class="comment">//消费者监听相应的队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> void reviceMessage(String message)&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;email 接收到了订单消息，订单 id 是: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.<span class="keyword">annotation</span>.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.<span class="keyword">annotation</span>.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(queues =&#123;<span class="meta-string">&quot;sms.fanout.queue&quot;</span>&#125;)</span>     <span class="comment">//消费者监听相应的队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> void reviceMessage(String message)&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;sms 接收到了订单消息，订单 id 是: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送订单"><a href="#发送订单" class="headerlink" title="发送订单"></a>发送订单</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RabbitmqSpringbootApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.makeOrder(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 保存订单成功，用户 id 是：1，订单 id 是：2,产品数量是：3</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>启动 SpringBoot 项目，发现控制台输出了下面的结果。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">email</span> 接收到了订单消息，订单 id 是: <span class="number">2</span></span><br><span class="line"><span class="attribute">sms</span> 接收到了订单消息，订单 id 是: <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>由于其它模式与上面的代码大部分一样，就不再赘述了。</strong></p><h3 id="注解实现"><a href="#注解实现" class="headerlink" title="注解实现"></a>注解实现</h3><p><strong>将上面的配置类删掉，使用注解实现上面的业务。与上面不同的是，就消费者的代码改变了。</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">ml</span><span class="selector-class">.guest997</span><span class="selector-class">.service</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.amqp</span><span class="selector-class">.rabbit</span><span class="selector-class">.annotation</span>.*;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Service</span>;</span><br><span class="line"></span><br><span class="line">@<span class="selector-tag">Service</span></span><br><span class="line">@<span class="selector-tag">RabbitListener</span>(bindings = <span class="variable">@QueueBinding</span>(</span><br><span class="line">        value = <span class="variable">@Queue</span>(value = <span class="string">&quot;email.fanout.queue&quot;</span>,durable = <span class="string">&quot;true&quot;</span>,autoDelete = <span class="string">&quot;false&quot;</span>),</span><br><span class="line">        exchange = <span class="variable">@Exchange</span>(value = <span class="string">&quot;fanout_order_exchange&quot;</span>,type = <span class="string">&quot;ExchangeTypes.FANOUT&quot;</span>)</span><br><span class="line">))</span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">EmailConsumer</span> &#123;</span><br><span class="line">    <span class="variable">@RabbitHandler</span></span><br><span class="line">    public void reviceMessage(String message)&#123;</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">&quot;email 接收到了订单消息，订单 id 是: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">ml</span><span class="selector-class">.guest997</span><span class="selector-class">.service</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.amqp</span><span class="selector-class">.rabbit</span><span class="selector-class">.annotation</span>.*;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Service</span>;</span><br><span class="line"></span><br><span class="line">@<span class="selector-tag">Service</span></span><br><span class="line">@<span class="selector-tag">RabbitListener</span>(bindings = <span class="variable">@QueueBinding</span>(</span><br><span class="line">        value = <span class="variable">@Queue</span>(value = <span class="string">&quot;sms.fanout.queue&quot;</span>,durable = <span class="string">&quot;true&quot;</span>,autoDelete = <span class="string">&quot;false&quot;</span>),</span><br><span class="line">        exchange = <span class="variable">@Exchange</span>(value = <span class="string">&quot;fanout_order_exchange&quot;</span>,type = <span class="string">&quot;ExchangeTypes.FANOUT&quot;</span>)</span><br><span class="line">))</span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">SmsConsumer</span> &#123;</span><br><span class="line">    <span class="variable">@RabbitHandler</span></span><br><span class="line">    public void reviceMessage(String message)&#123;</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">&quot;sms 接收到了订单消息，订单 id 是: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;整合-SpringBoot-框架&quot;&gt;&lt;a href=&quot;#整合-SpringBoot-框架&quot; class=&quot;headerlink&quot; title=&quot;整合 SpringBoot 框架&quot;&gt;&lt;/a&gt;整合 SpringBoot 框架&lt;/h2&gt;&lt;h3 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h3&gt;&lt;p&gt;新建 SpringBoot 项目，导入 Spring Web 和 Spring for RabbitMQ 依赖。&lt;/p&gt;
&lt;h3 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h3&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;server:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;rabbitmq:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;username:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;admin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;password:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;admin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;virtual-host:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;host:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.64&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.136&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5672&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="rabbitmq" scheme="http://guest997.tk/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 基础(二)</title>
    <link href="http://guest997.tk/2021/11/09/rabbitmq-basis02/"/>
    <id>http://guest997.tk/2021/11/09/rabbitmq-basis02/</id>
    <published>2021-11-09T01:21:24.000Z</published>
    <updated>2022-02-17T16:19:54.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="核心组成部分"><a href="#核心组成部分" class="headerlink" title="核心组成部分"></a>核心组成部分</h2><p><img data-src="/images/rabbitmq-basis02.md-0.png"></p><ul><li>  server：又称 broker，接受客户端连接，实现 AMQP 实体服务。</li><li>  connection：连接和具体 broker 网络连接。</li><li>  channel：网络信道，几乎所有操作都在 channel 中进行，channel 是消息读写的通道。客户端可以建立多个 channel，每个 channel 表示一个会话任务。</li><li>  message：消息，服务器和应用程序之间传递的数据，由 properties 和 body 组成。properties 可以对消息进行修饰，比如消息的优先级，延迟等高级特性；body 是消息实体内容。</li><li>  Virtual host：虚拟主机，用于逻辑隔离，最上层消息的路由。一个 Virtual host 可以若干个 Exchange 和 Queue，同一个 Virtual host 不能有同名的 Exchange 或 Queue。</li><li>  Exchange：交换机，接受消息，根据路由键转发消息到绑定的队列上。</li><li>  binding：Exchange 和 Queue 之间的虚拟连接，binding 中可以包括 routing key。</li><li>  routing key：一个路由规则，虚拟机根据他来确定如何路由一条消息。</li><li>  Queue：消息队列，用来存放消息的队列。</li></ul><h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h2><p><img data-src="/images/rabbitmq-basis02.md-1.png"></p><h2 id="支持的消息模型"><a href="#支持的消息模型" class="headerlink" title="支持的消息模型"></a>支持的消息模型</h2><ul><li>简单模式<br>  <img data-src="/images/rabbitmq-basis02.md-2.png"></li><li>工作模式<br>  <img data-src="/images/rabbitmq-basis02.md-3.png"></li><li>发布订阅模式<br>  <img data-src="/images/rabbitmq-basis02.md-4.png"></li><li>路由模式<br>  <img data-src="/images/rabbitmq-basis02.md-5.png"></li><li>主题模式<br>  <img data-src="/images/rabbitmq-basis02.md-6.png"></li></ul><h2 id="简单模式案例"><a href="#简单模式案例" class="headerlink" title="简单模式案例"></a>简单模式案例</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>新建 Maven 项目，导入 rabbitmq 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.simple;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">//连接服务</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.64.136&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        Connection connection = <span class="literal">null</span>;</span><br><span class="line">        Channel channel = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建连接</span></span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">            <span class="comment">//通过连接创建通道，所有的操作都是基于通道的，至于为什么不用连接，因为通道是长连接。</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//通过通道创建消息队列</span></span><br><span class="line">            <span class="keyword">String</span> queueName = <span class="string">&quot;queue1&quot;</span>;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@params</span>1 队列的名称</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@params</span>2 是否持久化，rabbitmq 非持久化会存盘，但是会随着重启服务会丢失。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@params</span>3 排它性，是否是独占队列。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@params</span>4 是否自动删除，消费完毕消息以后是否把队列自动删除。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@params</span>5 附属参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//消息内容</span></span><br><span class="line">            <span class="keyword">String</span> message = <span class="string">&quot;Hello RabbitMQ!&quot;</span>;</span><br><span class="line">            <span class="comment">//发送消息给队列</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@params</span>1: 交换机</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@params</span>2 队列、路由 key</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@params</span>3 消息的状态控制</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@params</span>4 消息主体</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//虽然这里没有设置交换机，但是是有默认的交换机的。</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送成功!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送失败!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="literal">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span> &amp;&amp; connection.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码后，访问 ip:15672 下的 Queues 页面会发现出现了新的消息。</p><p><img data-src="/images/rabbitmq-basis02.md-7.png"></p><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> &#123;</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="literal">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        <span class="regexp">//连接服务</span></span><br><span class="line"><span class="regexp">        ConnectionFactory connectionFactory = new ConnectionFactory();</span></span><br><span class="line"><span class="regexp">        connectionFactory.setHost(&quot;192.168.64.136&quot;);</span></span><br><span class="line"><span class="regexp">        connectionFactory.setPort(5672);</span></span><br><span class="line"><span class="regexp">        connectionFactory.setUsername(&quot;admin&quot;);</span></span><br><span class="line"><span class="regexp">        connectionFactory.setPassword(&quot;admin&quot;);</span></span><br><span class="line"><span class="regexp">        connectionFactory.setVirtualHost(&quot;/&quot;);</span></span><br><span class="line"><span class="regexp">        Connection connection = null;</span></span><br><span class="line"><span class="regexp">        Channel channel = null;</span></span><br><span class="line"><span class="regexp">        try &#123;</span></span><br><span class="line"><span class="regexp">            //</span>创建连接</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">&quot;消费者&quot;</span>);</span><br><span class="line">            <span class="regexp">//通过连接创建通道，所有的操作都是基于通道的，至于为什么不用连接，因为通道是长连接。</span></span><br><span class="line"><span class="regexp">            channel = connection.createChannel();</span></span><br><span class="line"><span class="regexp">            final Channel channel2 = channel;       //</span>为什么要重新定义一个通道为 final，是因为 lambda 函数只能访问 final 修饰的局部变量。</span><br><span class="line">            channel2.basicConsume<span class="function"><span class="params">(<span class="string">&quot;queue1&quot;</span>, <span class="literal">false</span>, (consumerTag, message) -&gt; &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                    System.out.println(<span class="string">&quot;收到的消息是：&quot;</span> + <span class="keyword">new</span> <span class="built_in">String</span>(message.getBody(), StandardCharsets.UTF_8));</span></span></span><br><span class="line"><span class="params"><span class="function">                    channel2.basicAck(message.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                    ex.printStackTrace();</span></span></span><br><span class="line"><span class="params"><span class="function">                &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">            &#125;, consumerTag -&gt; System.out.println(<span class="string">&quot;接收消息失败...&quot;</span>))</span>;</span></span><br><span class="line"><span class="function">            <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;开始接收消息...&quot;</span>)</span>;</span></span><br><span class="line"><span class="function">            <span class="title">System</span>.<span class="title">in</span>.<span class="title">read</span><span class="params">()</span>;       //这行代码是为了防止 <span class="title">channel</span> 和 <span class="title">connection</span> 提前被关闭。</span></span><br><span class="line"><span class="function">        &#125; <span class="title">catch</span> <span class="params">(Exception ex)</span> &#123;</span></span><br><span class="line"><span class="function">            <span class="title">ex</span>.<span class="title">printStackTrace</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        &#125; <span class="title">finally</span> &#123;</span></span><br><span class="line"><span class="function">            //关闭通道</span></span><br><span class="line"><span class="function">            <span class="title">if</span> <span class="params">(channel != <span class="literal">null</span> &amp;&amp; channel.isOpen())</span> &#123;</span></span><br><span class="line"><span class="function">                <span class="title">try</span> &#123;</span></span><br><span class="line"><span class="function">                    <span class="title">channel</span>.<span class="title">close</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">                &#125; <span class="title">catch</span> <span class="params">(Exception ex)</span> &#123;</span></span><br><span class="line"><span class="function">                    <span class="title">ex</span>.<span class="title">printStackTrace</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">                &#125;</span></span><br><span class="line"><span class="function">            &#125;</span></span><br><span class="line"><span class="function">            //关闭连接</span></span><br><span class="line"><span class="function">            <span class="title">if</span> <span class="params">(connection != <span class="literal">null</span> &amp;&amp; connection.isOpen())</span> &#123;</span></span><br><span class="line"><span class="function">                <span class="title">try</span> &#123;</span></span><br><span class="line"><span class="function">                    <span class="title">connection</span>.<span class="title">close</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">                &#125; <span class="title">catch</span> <span class="params">(Exception ex)</span> &#123;</span></span><br><span class="line"><span class="function">                    <span class="title">ex</span>.<span class="title">printStackTrace</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">                &#125;</span></span><br><span class="line"><span class="function">            &#125;</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>运行上面的代码后，访问 ip:15672 下的 Queues 页面会发现消息被消费完了。</p><p><img data-src="/images/rabbitmq-basis02.md-8.png"></p><h2 id="发布订阅模式案例"><a href="#发布订阅模式案例" class="headerlink" title="发布订阅模式案例"></a>发布订阅模式案例</h2><h3 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.fanout;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Producer &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> <span class="constructor">ConnectionFactory()</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Host(<span class="string">&quot;192.168.64.136&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Port(5672)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Username(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Password(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">VirtualHost(<span class="string">&quot;/&quot;</span>)</span>;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        Channel channel = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.<span class="keyword">new</span><span class="constructor">Connection(<span class="string">&quot;生产者&quot;</span>)</span>;</span><br><span class="line">            channel = connection.create<span class="constructor">Channel()</span>;</span><br><span class="line">            String message = <span class="string">&quot;Hello RabbitMQ!&quot;</span>;</span><br><span class="line">            <span class="comment">//创建交换机</span></span><br><span class="line">            String exchangeName = <span class="string">&quot;fanout_message_exchange&quot;</span>;</span><br><span class="line">            String exchangeType = <span class="string">&quot;fanout&quot;</span>;</span><br><span class="line">            channel.exchange<span class="constructor">Declare(<span class="params">exchangeName</span>, <span class="params">exchangeType</span>, <span class="params">true</span>)</span>;</span><br><span class="line">            <span class="comment">//创建队列</span></span><br><span class="line">            channel.queue<span class="constructor">Declare(<span class="string">&quot;queue2&quot;</span>, <span class="params">true</span>, <span class="params">false</span>, <span class="params">false</span>, <span class="params">null</span>)</span>;</span><br><span class="line">            channel.queue<span class="constructor">Declare(<span class="string">&quot;queue3&quot;</span>, <span class="params">true</span>, <span class="params">false</span>, <span class="params">false</span>, <span class="params">null</span>)</span>;</span><br><span class="line">            <span class="comment">//绑定队列和交换机的关系</span></span><br><span class="line">            channel.queue<span class="constructor">Bind(<span class="string">&quot;queue2&quot;</span>, <span class="params">exchangeName</span>, <span class="string">&quot;&quot;</span>)</span>;</span><br><span class="line">            channel.queue<span class="constructor">Bind(<span class="string">&quot;queue3&quot;</span>, <span class="params">exchangeName</span>, <span class="string">&quot;&quot;</span>)</span>;</span><br><span class="line">            channel.basic<span class="constructor">Publish(<span class="params">exchangeName</span>, <span class="string">&quot;&quot;</span>, <span class="params">null</span>, <span class="params">message</span>.<span class="params">getBytes</span>()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消息发送成功!&quot;</span>);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消息发送失败!&quot;</span>);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="comment">//关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != null<span class="operator"> &amp;&amp; </span>channel.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (connection != null<span class="operator"> &amp;&amp; </span>connection.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/rabbitmq-basis02.md-9.png"></p><h3 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.fanout;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Consumer &#123;</span><br><span class="line">    <span class="keyword">private</span> static Runnable runnable = <span class="literal">()</span> -&gt; &#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> <span class="constructor">ConnectionFactory()</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Host(<span class="string">&quot;192.168.64.136&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Port(5672)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Username(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Password(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">VirtualHost(<span class="string">&quot;/&quot;</span>)</span>;</span><br><span class="line">        final String queueName = <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>;      <span class="comment">//获取线程队列名</span></span><br><span class="line">        Connection connection = null;</span><br><span class="line">        Channel channel = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.<span class="keyword">new</span><span class="constructor">Connection(<span class="string">&quot;消费者&quot;</span>)</span>;</span><br><span class="line">            channel = connection.create<span class="constructor">Channel()</span>;</span><br><span class="line">            final Channel channel2 = channel;</span><br><span class="line">            channel2.basic<span class="constructor">Consume(<span class="params">queueName</span>, <span class="params">false</span>, (<span class="params">consumerTag</span>, <span class="params">message</span>)</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(queueName + <span class="string">&quot;收到的消息是：&quot;</span> + <span class="keyword">new</span> <span class="constructor">String(<span class="params">message</span>.<span class="params">getBody</span>()</span>, StandardCharsets.UTF_8));</span><br><span class="line">                    channel2.basic<span class="constructor">Ack(<span class="params">message</span>.<span class="params">getEnvelope</span>()</span>.get<span class="constructor">DeliveryTag()</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, consumerTag -&gt; <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;接收消息失败...&quot;</span>));</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(queueName + <span class="string">&quot;开始接收消息...&quot;</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span><span class="keyword">in</span>.read<span class="literal">()</span>;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="comment">//关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != null<span class="operator"> &amp;&amp; </span>channel.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (connection != null<span class="operator"> &amp;&amp; </span>connection.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="comment">//启动多个线程创建多个队列</span></span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">runnable</span>, <span class="string">&quot;queue2&quot;</span>)</span>.start<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">runnable</span>, <span class="string">&quot;queue3&quot;</span>)</span>.start<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">queue2开始接收消息...</span></span><br><span class="line"><span class="comment">queue3开始接收消息...</span></span><br><span class="line"><span class="comment">queue3收到的消息是：Hello RabbitMQ!</span></span><br><span class="line"><span class="comment">queue2收到的消息是：Hello RabbitMQ!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="路由模式案例"><a href="#路由模式案例" class="headerlink" title="路由模式案例"></a>路由模式案例</h2><h3 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.direct;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Producer &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> <span class="constructor">ConnectionFactory()</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Host(<span class="string">&quot;192.168.64.136&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Port(5672)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Username(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Password(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">VirtualHost(<span class="string">&quot;/&quot;</span>)</span>;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        Channel channel = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.<span class="keyword">new</span><span class="constructor">Connection(<span class="string">&quot;生产者&quot;</span>)</span>;</span><br><span class="line">            channel = connection.create<span class="constructor">Channel()</span>;</span><br><span class="line">            String message = <span class="string">&quot;Hello RabbitMQ!&quot;</span>;</span><br><span class="line">            <span class="comment">//创建交换机</span></span><br><span class="line">            String exchangeName = <span class="string">&quot;direct_message_exchange&quot;</span>;</span><br><span class="line">            String exchangeType = <span class="string">&quot;direct&quot;</span>;</span><br><span class="line">            channel.exchange<span class="constructor">Declare(<span class="params">exchangeName</span>, <span class="params">exchangeType</span>, <span class="params">true</span>)</span>;</span><br><span class="line">            <span class="comment">//创建队列</span></span><br><span class="line">            channel.queue<span class="constructor">Declare(<span class="string">&quot;queue4&quot;</span>, <span class="params">true</span>, <span class="params">false</span>, <span class="params">false</span>, <span class="params">null</span>)</span>;</span><br><span class="line">            channel.queue<span class="constructor">Declare(<span class="string">&quot;queue5&quot;</span>, <span class="params">true</span>, <span class="params">false</span>, <span class="params">false</span>, <span class="params">null</span>)</span>;</span><br><span class="line">            channel.queue<span class="constructor">Declare(<span class="string">&quot;queue6&quot;</span>, <span class="params">true</span>, <span class="params">false</span>, <span class="params">false</span>, <span class="params">null</span>)</span>;</span><br><span class="line">            <span class="comment">//绑定队列和交换机的关系</span></span><br><span class="line">            channel.queue<span class="constructor">Bind(<span class="string">&quot;queue4&quot;</span>, <span class="params">exchangeName</span>, <span class="string">&quot;email&quot;</span>)</span>;     <span class="comment">//指定路由 key</span></span><br><span class="line">            channel.queue<span class="constructor">Bind(<span class="string">&quot;queue5&quot;</span>, <span class="params">exchangeName</span>, <span class="string">&quot;wechat&quot;</span>)</span>;</span><br><span class="line">            channel.queue<span class="constructor">Bind(<span class="string">&quot;queue6&quot;</span>, <span class="params">exchangeName</span>, <span class="string">&quot;email&quot;</span>)</span>;</span><br><span class="line">            channel.basic<span class="constructor">Publish(<span class="params">exchangeName</span>, <span class="string">&quot;email&quot;</span>, <span class="params">null</span>, <span class="params">message</span>.<span class="params">getBytes</span>()</span>);      <span class="comment">//往指定的路由 key 队列发送消息</span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消息发送成功!&quot;</span>);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消息发送失败!&quot;</span>);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="comment">//关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != null<span class="operator"> &amp;&amp; </span>channel.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (connection != null<span class="operator"> &amp;&amp; </span>connection.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/rabbitmq-basis02.md-10.png"></p><h3 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h3><p>由于几乎与发布订阅模式中的消费者代码几乎一样，只不过改了线程名和线程数量，故不再放代码在这了。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*结果为</span><br><span class="line">queue5开始接收消息<span class="string">...</span></span><br><span class="line">queue4开始接收消息<span class="string">...</span></span><br><span class="line">queue6开始接收消息<span class="string">...</span></span><br><span class="line">queue4收到的消息是：Hello RabbitMQ!</span><br><span class="line">queue6收到的消息是：Hello RabbitMQ!</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>可以从结果看出，只有符合指定路由 key 的队列才能接收到消息。</p><h2 id="主题模式案例"><a href="#主题模式案例" class="headerlink" title="主题模式案例"></a>主题模式案例</h2><h3 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.topic;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Producer &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> <span class="constructor">ConnectionFactory()</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Host(<span class="string">&quot;192.168.64.136&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Port(5672)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Username(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Password(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">VirtualHost(<span class="string">&quot;/&quot;</span>)</span>;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        Channel channel = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.<span class="keyword">new</span><span class="constructor">Connection(<span class="string">&quot;生产者&quot;</span>)</span>;</span><br><span class="line">            channel = connection.create<span class="constructor">Channel()</span>;</span><br><span class="line">            String message = <span class="string">&quot;Hello RabbitMQ!&quot;</span>;</span><br><span class="line">            <span class="comment">//创建交换机</span></span><br><span class="line">            String exchangeName = <span class="string">&quot;topic_message_exchange&quot;</span>;</span><br><span class="line">            String exchangeType = <span class="string">&quot;topic&quot;</span>;</span><br><span class="line">            channel.exchange<span class="constructor">Declare(<span class="params">exchangeName</span>, <span class="params">exchangeType</span>, <span class="params">true</span>)</span>;</span><br><span class="line">            <span class="comment">//创建队列</span></span><br><span class="line">            channel.queue<span class="constructor">Declare(<span class="string">&quot;queue7&quot;</span>, <span class="params">true</span>, <span class="params">false</span>, <span class="params">false</span>, <span class="params">null</span>)</span>;</span><br><span class="line">            channel.queue<span class="constructor">Declare(<span class="string">&quot;queue8&quot;</span>, <span class="params">true</span>, <span class="params">false</span>, <span class="params">false</span>, <span class="params">null</span>)</span>;</span><br><span class="line">            channel.queue<span class="constructor">Declare(<span class="string">&quot;queue9&quot;</span>, <span class="params">true</span>, <span class="params">false</span>, <span class="params">false</span>, <span class="params">null</span>)</span>;</span><br><span class="line">            <span class="comment">//绑定队列和交换机的关系</span></span><br><span class="line">            channel.queue<span class="constructor">Bind(<span class="string">&quot;queue7&quot;</span>, <span class="params">exchangeName</span>, <span class="string">&quot;guest997.#&quot;</span>)</span>;     <span class="comment">//指定路由 key</span></span><br><span class="line">            channel.queue<span class="constructor">Bind(<span class="string">&quot;queue8&quot;</span>, <span class="params">exchangeName</span>, <span class="string">&quot;*.course.*&quot;</span>)</span>;</span><br><span class="line">            channel.queue<span class="constructor">Bind(<span class="string">&quot;queue9&quot;</span>, <span class="params">exchangeName</span>, <span class="string">&quot;*.order&quot;</span>)</span>;</span><br><span class="line">            channel.basic<span class="constructor">Publish(<span class="params">exchangeName</span>, <span class="string">&quot;guest997.course.order&quot;</span>, <span class="params">null</span>, <span class="params">message</span>.<span class="params">getBytes</span>()</span>);      <span class="comment">//往指定的路由 key 队列发送消息</span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消息发送成功!&quot;</span>);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消息发送失败!&quot;</span>);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="comment">//关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != null<span class="operator"> &amp;&amp; </span>channel.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (connection != null<span class="operator"> &amp;&amp; </span>connection.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/rabbitmq-basis02.md-11.png"></p><h3 id="消费者-3"><a href="#消费者-3" class="headerlink" title="消费者"></a>消费者</h3><p>由于几乎与发布订阅模式中的消费者代码几乎一样，只不过改了线程名和线程数量，故不再放代码在这了。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**结果为</span><br><span class="line">queue8开始接收消息<span class="string">...</span></span><br><span class="line">queue9开始接收消息<span class="string">...</span></span><br><span class="line">queue7开始接收消息<span class="string">...</span></span><br><span class="line">queue7收到的消息是：Hello RabbitMQ!</span><br><span class="line">queue8收到的消息是：Hello RabbitMQ!</span><br><span class="line">/</span><br></pre></td></tr></table></figure><p>可以从结果看出，只有符合路由 key 规则的队列才能接收到消息。<strong># 表示可以有零级、一级或多级，* 则表示必须有且只能有一级。</strong></p><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><p>主要有两种模式：</p><ul><li>  轮询分发：一个消费者一条，<strong>按均分配</strong>。</li><li>  公平分发：根据消费者的消费能力进行分发，处理快的处理的多，处理慢的处理的少，<strong>按劳分配</strong>。</li></ul><h3 id="轮询模式案例"><a href="#轮询模式案例" class="headerlink" title="轮询模式案例"></a>轮询模式案例</h3><p><strong>注意：需要先运行消费者的代码！</strong></p><h4 id="生产者-4"><a href="#生产者-4" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.<span class="keyword">work</span>.polling;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.<span class="keyword">Connection</span>;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Producer &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        //连接服务</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="built_in">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(&quot;192.168.64.136&quot;);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(&quot;admin&quot;);</span><br><span class="line">        connectionFactory.setPassword(&quot;admin&quot;);</span><br><span class="line">        connectionFactory.setVirtualHost(&quot;/&quot;);</span><br><span class="line">        <span class="keyword">Connection</span> <span class="keyword">connection</span> = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="keyword">connection</span> = connectionFactory.newConnection(&quot;生产者&quot;);</span><br><span class="line">            channel = <span class="keyword">connection</span>.createChannel();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">                String msg = &quot;Hello RabbitMQ!:&quot; + i;</span><br><span class="line">                channel.basicPublish(&quot;&quot;, &quot;queue1&quot;, <span class="keyword">null</span>, msg.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;消息发送成功!&quot;);</span><br><span class="line">        &#125; catch (<span class="keyword">Exception</span> ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;消息发送失败!&quot;);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //关闭通道</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    channel.<span class="keyword">close</span>();</span><br><span class="line">                &#125; catch (<span class="keyword">Exception</span> ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //关闭连接</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">connection</span> != <span class="keyword">null</span> &amp;&amp; <span class="keyword">connection</span>.isOpen()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    <span class="keyword">connection</span>.<span class="keyword">close</span>();</span><br><span class="line">                &#125; catch (<span class="keyword">Exception</span> ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者1"><a href="#消费者1" class="headerlink" title="消费者1"></a>消费者1</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.work.polling;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> ConsumerOne &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="comment">//连接服务</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> <span class="constructor">ConnectionFactory()</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Host(<span class="string">&quot;192.168.64.136&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Port(5672)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Username(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Password(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">VirtualHost(<span class="string">&quot;/&quot;</span>)</span>;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        Channel channel = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.<span class="keyword">new</span><span class="constructor">Connection(<span class="string">&quot;消费者1&quot;</span>)</span>;</span><br><span class="line">            channel = connection.create<span class="constructor">Channel()</span>;</span><br><span class="line">            final Channel channel2 = channel;</span><br><span class="line">            channel2.basic<span class="constructor">Consume(<span class="string">&quot;queue1&quot;</span>, <span class="params">false</span>, (<span class="params">consumerTag</span>, <span class="params">message</span>)</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消费者1收到的消息是：&quot;</span> + <span class="keyword">new</span> <span class="constructor">String(<span class="params">message</span>.<span class="params">getBody</span>()</span>, StandardCharsets.UTF_8));</span><br><span class="line">                    channel2.basic<span class="constructor">Ack(<span class="params">message</span>.<span class="params">getEnvelope</span>()</span>.get<span class="constructor">DeliveryTag()</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, consumerTag -&gt; <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消费者1接收消息失败...&quot;</span>));</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消费者1开始接收消息...&quot;</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span><span class="keyword">in</span>.read<span class="literal">()</span>;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="comment">//关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != null<span class="operator"> &amp;&amp; </span>channel.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (connection != null<span class="operator"> &amp;&amp; </span>connection.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">消费者1开始接收消息...</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:1</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:3</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:5</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:7</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:9</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:11</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:13</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:15</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:17</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:19</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="消费者2"><a href="#消费者2" class="headerlink" title="消费者2"></a>消费者2</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.work.polling;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> ConsumerTwo &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="comment">//连接服务</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> <span class="constructor">ConnectionFactory()</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Host(<span class="string">&quot;192.168.64.136&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Port(5672)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Username(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Password(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">VirtualHost(<span class="string">&quot;/&quot;</span>)</span>;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        Channel channel = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.<span class="keyword">new</span><span class="constructor">Connection(<span class="string">&quot;消费者2&quot;</span>)</span>;</span><br><span class="line">            channel = connection.create<span class="constructor">Channel()</span>;</span><br><span class="line">            final Channel channel2 = channel;</span><br><span class="line">            channel2.basic<span class="constructor">Consume(<span class="string">&quot;queue1&quot;</span>, <span class="params">false</span>, (<span class="params">consumerTag</span>, <span class="params">message</span>)</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消费者2收到的消息是：&quot;</span> + <span class="keyword">new</span> <span class="constructor">String(<span class="params">message</span>.<span class="params">getBody</span>()</span>, StandardCharsets.UTF_8));</span><br><span class="line">                    channel2.basic<span class="constructor">Ack(<span class="params">message</span>.<span class="params">getEnvelope</span>()</span>.get<span class="constructor">DeliveryTag()</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, consumerTag -&gt; <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消费者2接收消息失败...&quot;</span>));</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消费者2开始接收消息...&quot;</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span><span class="keyword">in</span>.read<span class="literal">()</span>;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="comment">//关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != null<span class="operator"> &amp;&amp; </span>channel.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (connection != null<span class="operator"> &amp;&amp; </span>connection.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">消费者2开始接收消息...</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:2</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:4</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:6</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:8</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:10</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:12</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:14</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:16</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:18</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以从结果看出，消费者1和消费者2收到的消息都是十条，是按均分配的。但如果是消息并不能均分，自然就会是其中一个消费者多收到一条消息。</p><h3 id="公平模式案例"><a href="#公平模式案例" class="headerlink" title="公平模式案例"></a>公平模式案例</h3><h4 id="生产者-5"><a href="#生产者-5" class="headerlink" title="生产者"></a>生产者</h4><p>由于几乎与轮询模式中的生产者代码一样，故不再放代码在这了。</p><h4 id="消费者1-1"><a href="#消费者1-1" class="headerlink" title="消费者1"></a>消费者1</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.work.fair;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> ConsumerOne &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="comment">//连接服务</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> <span class="constructor">ConnectionFactory()</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Host(<span class="string">&quot;192.168.64.136&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Port(5672)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Username(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Password(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">VirtualHost(<span class="string">&quot;/&quot;</span>)</span>;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        Channel channel = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.<span class="keyword">new</span><span class="constructor">Connection(<span class="string">&quot;消费者1&quot;</span>)</span>;</span><br><span class="line">            channel = connection.create<span class="constructor">Channel()</span>;</span><br><span class="line">            final Channel channel2 = channel;</span><br><span class="line">            channel2.basic<span class="constructor">Qos(1)</span>;       <span class="comment">// 同一时刻，服务器只会推送一条消息给消费者。</span></span><br><span class="line">            channel2.basic<span class="constructor">Consume(<span class="string">&quot;queue1&quot;</span>, <span class="params">false</span>, (<span class="params">consumerTag</span>, <span class="params">message</span>)</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消费者1收到的消息是：&quot;</span> + <span class="keyword">new</span> <span class="constructor">String(<span class="params">message</span>.<span class="params">getBody</span>()</span>, StandardCharsets.UTF_8));</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">200</span>);</span><br><span class="line">                    channel2.basic<span class="constructor">Ack(<span class="params">message</span>.<span class="params">getEnvelope</span>()</span>.get<span class="constructor">DeliveryTag()</span>, <span class="literal">false</span>);       <span class="comment">//一定要使用手动应答</span></span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, consumerTag -&gt; <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消费者1接收消息失败...&quot;</span>));</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消费者1开始接收消息...&quot;</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span><span class="keyword">in</span>.read<span class="literal">()</span>;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="comment">//关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != null<span class="operator"> &amp;&amp; </span>channel.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (connection != null<span class="operator"> &amp;&amp; </span>connection.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">消费者1开始接收消息...</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:1</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:3</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:4</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:5</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:6</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:8</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:9</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:10</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:11</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:12</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:14</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:15</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:16</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:17</span></span><br><span class="line"><span class="comment">消费者1收到的消息是：Hello RabbitMQ!:18</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="消费者2-1"><a href="#消费者2-1" class="headerlink" title="消费者2"></a>消费者2</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.work.fair;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> ConsumerTwo &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="comment">//连接服务</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> <span class="constructor">ConnectionFactory()</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Host(<span class="string">&quot;192.168.64.136&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Port(5672)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Username(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">Password(<span class="string">&quot;admin&quot;</span>)</span>;</span><br><span class="line">        connectionFactory.set<span class="constructor">VirtualHost(<span class="string">&quot;/&quot;</span>)</span>;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        Channel channel = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.<span class="keyword">new</span><span class="constructor">Connection(<span class="string">&quot;消费者2&quot;</span>)</span>;</span><br><span class="line">            channel = connection.create<span class="constructor">Channel()</span>;</span><br><span class="line">            final Channel channel2 = channel;</span><br><span class="line">            channel2.basic<span class="constructor">Qos(1)</span>;       <span class="comment">// 同一时刻，服务器只会推送一条消息给消费者。</span></span><br><span class="line">            channel2.basic<span class="constructor">Consume(<span class="string">&quot;queue1&quot;</span>, <span class="params">false</span>, (<span class="params">consumerTag</span>, <span class="params">message</span>)</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消费者2收到的消息是：&quot;</span> + <span class="keyword">new</span> <span class="constructor">String(<span class="params">message</span>.<span class="params">getBody</span>()</span>, StandardCharsets.UTF_8));</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">1000</span>);</span><br><span class="line">                    channel2.basic<span class="constructor">Ack(<span class="params">message</span>.<span class="params">getEnvelope</span>()</span>.get<span class="constructor">DeliveryTag()</span>, <span class="literal">false</span>);       <span class="comment">//一定要使用手动应答</span></span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, consumerTag -&gt; <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消费者2接收消息失败...&quot;</span>));</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;消费者2开始接收消息...&quot;</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span><span class="keyword">in</span>.read<span class="literal">()</span>;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="comment">//关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != null<span class="operator"> &amp;&amp; </span>channel.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (connection != null<span class="operator"> &amp;&amp; </span>connection.is<span class="constructor">Open()</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close<span class="literal">()</span>;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">消费者2开始接收消息...</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:2</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:7</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:13</span></span><br><span class="line"><span class="comment">消费者2收到的消息是：Hello RabbitMQ!:19</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以从结果看出，由于消费者1的线程休眠时间较短，也就是应答时间较快，就使得其消费的消息更多，是按劳分配的。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;核心组成部分&quot;&gt;&lt;a href=&quot;#核心组成部分&quot; class=&quot;headerlink&quot; title=&quot;核心组成部分&quot;&gt;&lt;/a&gt;核心组成部分&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&quot;/images/rabbitmq-basis02.md-0.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  server：又称 broker，接受客户端连接，实现 AMQP 实体服务。&lt;/li&gt;
&lt;li&gt;  connection：连接和具体 broker 网络连接。&lt;/li&gt;
&lt;li&gt;  channel：网络信道，几乎所有操作都在 channel 中进行，channel 是消息读写的通道。客户端可以建立多个 channel，每个 channel 表示一个会话任务。&lt;/li&gt;
&lt;li&gt;  message：消息，服务器和应用程序之间传递的数据，由 properties 和 body 组成。properties 可以对消息进行修饰，比如消息的优先级，延迟等高级特性；body 是消息实体内容。&lt;/li&gt;
&lt;li&gt;  Virtual host：虚拟主机，用于逻辑隔离，最上层消息的路由。一个 Virtual host 可以若干个 Exchange 和 Queue，同一个 Virtual host 不能有同名的 Exchange 或 Queue。&lt;/li&gt;
&lt;li&gt;  Exchange：交换机，接受消息，根据路由键转发消息到绑定的队列上。&lt;/li&gt;
&lt;li&gt;  binding：Exchange 和 Queue 之间的虚拟连接，binding 中可以包括 routing key。&lt;/li&gt;
&lt;li&gt;  routing key：一个路由规则，虚拟机根据他来确定如何路由一条消息。&lt;/li&gt;
&lt;li&gt;  Queue：消息队列，用来存放消息的队列。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;运行流程&quot;&gt;&lt;a href=&quot;#运行流程&quot; class=&quot;headerlink&quot; title=&quot;运行流程&quot;&gt;&lt;/a&gt;运行流程&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&quot;/images/rabbitmq-basis02.md-1.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="rabbitmq" scheme="http://guest997.tk/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 基础(一)</title>
    <link href="http://guest997.tk/2021/11/08/rabbitmq-basis01/"/>
    <id>http://guest997.tk/2021/11/08/rabbitmq-basis01/</id>
    <published>2021-11-08T14:12:44.000Z</published>
    <updated>2022-02-17T16:22:29.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>一个企业可能同时运行着多个不同的业务系统，这些系统可能基于不同的操作系统、不同的数据库、异构的网络环境。现在的问题是，如何把这些信息系统结合成一个有机地协同工作的整体，真正实现企业跨平台、分布式应用。中间件便是解决之道，它用自己的复杂换取了企业应用的简单。</p><p>具体地说，中间件屏蔽了底层操作系统的复杂性，使程序开发人员面对一个简单而统一的开发环境，减少程序设计的复杂性，将注意力集中在自己的业务上，不必再为程序在不同系统软件上的移植而重复工作，从而大大减少了技术上的负担，中间件带给应用系统的，不只是开发的简便、开发周期的缩短，也减少了系统的维护、运行和管理的工作量，还减少了计算机总体费用的投入。</p><h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><p>消息中间件是一种接受数据、接受请求、存储数据、发送数据等功能的技术服务。其核心组成部分包括：消息的协议、消息的持久化机制、消息的分发策略、消息的高可用、高可靠和消息的容错机制。</p><h2 id="消息队列协议"><a href="#消息队列协议" class="headerlink" title="消息队列协议"></a>消息队列协议</h2><p>所谓协议是指：</p><ul><li>  计算机底层操作系统和应用程序通讯时共同遵守的一组约定，只有遵循共同的约定和规范，系统和底层操作系统之间才能相互交流。</li><li>  和一般的网络应用程序的不同它主要负责数据的接受和传递，所以性能比较高。</li><li>  协议对数据格式和计算机之间交换数据都必须严格遵守规范。</li></ul><p>消息中间件不采用 http 协议，所有的中间件技术都是基于 tcp/ip 协议基础之上构建新型的协议规范。而常见的消息中间件协议有：OpenWire、AMQP、MQTT、Kafka 和 OpenMessage 协议。</p><p><strong>为什么消息中间件不直接使用 http 协议？</strong></p><ul><li>  http 请求报文头和响应报文头是比较复杂的，包含了 Cookie、数据的加密解密、状态码和响应码等附加的功能，但是对于一个消息而言，我们并不需要这么复杂，也没有这个必要性，它其实就是负责数据传递，存储，分发就行，要追求的是高性能。</li><li>  大部分情况下 http 都是短连接，在实际的交互过程中，一个请求到响应可能会中断，中断以后就不会执行持久化，就会造成请求的丢失。这样就不利于消息中间件的业务场景，消息中间件可能是一个长期的获取信息的过程，为了保证消息和数据的高可靠和稳健的运行。</li></ul><h2 id="消息分发策略的机制和对比"><a href="#消息分发策略的机制和对比" class="headerlink" title="消息分发策略的机制和对比"></a>消息分发策略的机制和对比</h2><table><thead><tr><th></th><th>ActiveMQ</th><th>RabbitMQ</th><th>Kafka</th><th>RocketMQ</th></tr></thead><tbody><tr><td>发布订阅</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>轮询分发</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>公平分发</td><td>×</td><td>√</td><td>√</td><td>×</td></tr><tr><td>重发</td><td>√</td><td>√</td><td>×</td><td>√</td></tr><tr><td>消息拉取</td><td>×</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ 是一个开源的遵循 AMQP 协议实现的基于 Erlang 语言编写，支持多种客户端（语言），用于在分布式系统中存储和转发消息，具有高可用、高可扩和易用性等特征。</p><h3 id="Docker-安装并运行"><a href="#Docker-安装并运行" class="headerlink" title="Docker 安装并运行"></a>Docker 安装并运行</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用户名和密码都是 a</span></span><br><span class="line"><span class="attribute">docker</span> run -itd --name rabbit<span class="number">01</span> --hostname myrabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p <span class="number">15672</span>:<span class="number">15672</span> -p  <span class="number">5672</span>:<span class="number">5672</span> -p <span class="number">25672</span>:<span class="number">25672</span> rabbitmq:management</span><br></pre></td></tr></table></figure><p>浏览器访问 ip:15672，出现如下页面就说明成功了。</p><p><img data-src="/images/rabbitmq-basis01.md-0.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;中间件&quot;&gt;&lt;a href=&quot;#中间件&quot; class=&quot;headerlink&quot; title=&quot;中间件&quot;&gt;&lt;/a&gt;中间件&lt;/h2&gt;&lt;p&gt;一个企业可能同时运行着多个不同的业务系统，这些系统可能基于不同的操作系统、不同的数据库、异构的网络环境。现在的问题是，如何把这些信息系统结合成一个有机地协同工作的整体，真正实现企业跨平台、分布式应用。中间件便是解决之道，它用自己的复杂换取了企业应用的简单。&lt;/p&gt;
&lt;p&gt;具体地说，中间件屏蔽了底层操作系统的复杂性，使程序开发人员面对一个简单而统一的开发环境，减少程序设计的复杂性，将注意力集中在自己的业务上，不必再为程序在不同系统软件上的移植而重复工作，从而大大减少了技术上的负担，中间件带给应用系统的，不只是开发的简便、开发周期的缩短，也减少了系统的维护、运行和管理的工作量，还减少了计算机总体费用的投入。&lt;/p&gt;
&lt;h2 id=&quot;消息中间件&quot;&gt;&lt;a href=&quot;#消息中间件&quot; class=&quot;headerlink&quot; title=&quot;消息中间件&quot;&gt;&lt;/a&gt;消息中间件&lt;/h2&gt;&lt;p&gt;消息中间件是一种接受数据、接受请求、存储数据、发送数据等功能的技术服务。其核心组成部分包括：消息的协议、消息的持久化机制、消息的分发策略、消息的高可用、高可靠和消息的容错机制。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="rabbitmq" scheme="http://guest997.tk/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 详解(五)</title>
    <link href="http://guest997.tk/2021/10/25/es-expound05/"/>
    <id>http://guest997.tk/2021/10/25/es-expound05/</id>
    <published>2021-10-25T08:36:18.000Z</published>
    <updated>2021-11-09T03:18:59.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="京东搜索实战"><a href="#京东搜索实战" class="headerlink" title="京东搜索实战"></a>京东搜索实战</h2><p>项目源码会放在我的网盘 <strong>学习-ElasticSearch</strong> 目录下的 <strong>es-jingdong</strong> 压缩包。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>新建 SpringBoot 项目，导入 Spring Boot DevTools、Lombok、Spring Configuration Processor、SpringWeb、Thymeleaf 和 Spring Data ElasticSearch 依赖。最后再手动添加 fastjson 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面跳转控制器"><a href="#页面跳转控制器" class="headerlink" title="页面跳转控制器"></a>页面跳转控制器</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;<span class="meta-string">&quot;/&quot;</span>, <span class="meta-string">&quot;/index&quot;</span>&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String index() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES-配置类"><a href="#ES-配置类" class="headerlink" title="ES 配置类"></a>ES 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchClientConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h3><h4 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.14.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="POJO-层"><a href="#POJO-层" class="headerlink" title="POJO 层"></a>POJO 层</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> img;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写爬虫工具类"><a href="#编写爬虫工具类" class="headerlink" title="编写爬虫工具类"></a>编写爬虫工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Content;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlParseUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Content&gt; <span class="title">parseJD</span><span class="params">(String keyword)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;https://search.jd.com/Search?keyword=&quot;</span> + keyword + <span class="string">&quot;&amp;enc=utf-8&quot;</span>;</span><br><span class="line">        <span class="comment">//解析网页，这里的 Document 对象就是 js 中讲到的浏览器文档对象。</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> URL(url), <span class="number">30000</span>);</span><br><span class="line">        <span class="comment">//下面的方法都是为了获取搜索页面的标签中的数据并封装成 Content 对象，再将所有的对象放入 List 中。</span></span><br><span class="line">        Element element = document.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line">        Elements elements = element.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        List&lt;Content&gt; contents = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Element el : elements) &#123;</span><br><span class="line">            String img = el.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;data-lazy-img&quot;</span>);    <span class="comment">//获取标签属性值</span></span><br><span class="line">            String price = el.getElementsByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();       <span class="comment">//获取标签文本值</span></span><br><span class="line">            String title = el.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            contents.add(<span class="keyword">new</span> Content(img, price, title));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> contents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试是否能正常爬取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HtmlParseUtil().parseJD(<span class="string">&quot;java&quot;</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Content;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.utils.HtmlParseUtil;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">parseContent</span><span class="params">(String keyword)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//记得先在 kibana 创建索引：PUT /jd_goods</span></span><br><span class="line">        List&lt;Content&gt; contents = <span class="keyword">new</span> HtmlParseUtil().parseJD(keyword);</span><br><span class="line">        <span class="comment">//把查询到的多条数据放入 es 中</span></span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">&quot;2m&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Content content : contents) &#123;</span><br><span class="line">            bulkRequest.add(<span class="keyword">new</span> IndexRequest(<span class="string">&quot;jd_goods&quot;</span>).source(JSON.toJSONString(content), XContentType.JSON));</span><br><span class="line">        &#125;</span><br><span class="line">        BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> !bulk.hasFailures();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller-层"><a href="#Controller-层" class="headerlink" title="Controller 层"></a>Controller 层</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.service.ContentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.<span class="keyword">annotation</span>.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ContentService contentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">&quot;/parse/&#123;keyword&#125;&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Boolean</span> parse(<span class="meta">@PathVariable(<span class="meta-string">&quot;keyword&quot;</span>)</span> String keyword) throws Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> contentService.parseContent(keyword);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>访问 localhost:9090/parse/java，发现页面出现了 <strong>true</strong>。然后在 kibana 中查看是否成功添加了数据。（post /jd_goods/_doc/_search）</p><h3 id="分页实现"><a href="#分页实现" class="headerlink" title="分页实现"></a>分页实现</h3><p>前提是 es 中已经有足够多的数据了。</p><h4 id="Service-层-1"><a href="#Service-层-1" class="headerlink" title="Service 层"></a>Service 层</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Map&lt;String, Object&gt;&gt; search<span class="constructor">Page(String <span class="params">keyword</span>, <span class="params">int</span> <span class="params">pageNo</span>, <span class="params">int</span> <span class="params">pageSize</span>)</span> throws IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (pageNo &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        pageNo = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//条件搜索</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> <span class="constructor">SearchRequest(<span class="string">&quot;jd_goods&quot;</span>)</span>;</span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> <span class="constructor">SearchSourceBuilder()</span>;</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    sourceBuilder.from(pageNo);</span><br><span class="line">    sourceBuilder.size(pageSize);</span><br><span class="line">    <span class="comment">//精准匹配</span></span><br><span class="line">    TermQueryBuilder termQueryBuilder = <span class="module-access"><span class="module"><span class="identifier">QueryBuilders</span>.</span></span>term<span class="constructor">Query(<span class="string">&quot;title&quot;</span>, <span class="params">keyword</span>)</span>;</span><br><span class="line">    sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(<span class="keyword">new</span> <span class="constructor">TimeValue(60, TimeUnit.SECONDS)</span>);</span><br><span class="line">    <span class="comment">//执行搜索</span></span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//解析结果</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : searchResponse.get<span class="constructor">Hits()</span>) &#123;</span><br><span class="line">        <span class="built_in">list</span>.add(documentFields.get<span class="constructor">SourceAsMap()</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller-层-1"><a href="#Controller-层-1" class="headerlink" title="Controller 层"></a>Controller 层</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@GetMapping</span>(<span class="string">&quot;/search/&#123;keyword&#125;/&#123;pageNo&#125;/&#123;pageSize&#125;&quot;</span>)</span><br><span class="line">public List&lt;Map&lt;String, Object&gt;&gt; search(<span class="variable">@PathVariable</span>(<span class="string">&quot;keyword&quot;</span>) String keyword, <span class="variable">@PathVariable</span>(<span class="string">&quot;pageNo&quot;</span>) int pageNo, <span class="variable">@PathVariable</span>(<span class="string">&quot;pageSize&quot;</span>) int pageSize) throws IOException &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">contentService</span><span class="selector-class">.searchPage</span>(keyword, pageNo, pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>访问 localhost:9090/search/java/1/20，发现页面出现了很多条数据，说明成功了。</p><h3 id="搜索高亮实现"><a href="#搜索高亮实现" class="headerlink" title="搜索高亮实现"></a>搜索高亮实现</h3><h4 id="Service-层-2"><a href="#Service-层-2" class="headerlink" title="Service 层"></a>Service 层</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;&gt; searchPageHighlight(<span class="keyword">String</span> keyword, <span class="built_in">int</span> pageNo, <span class="built_in">int</span> pageSize) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (pageNo &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        pageNo = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//条件搜索</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;jd_goods&quot;</span>);</span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    sourceBuilder.from(pageNo);</span><br><span class="line">    sourceBuilder.<span class="built_in">size</span>(pageSize);</span><br><span class="line">    <span class="comment">//精准匹配</span></span><br><span class="line">    TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, keyword);</span><br><span class="line">    sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">    <span class="comment">//高亮</span></span><br><span class="line">    HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">    highlightBuilder.field(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">    highlightBuilder.requireFieldMatch(<span class="keyword">false</span>);      <span class="comment">//是否多个关键词高亮显示</span></span><br><span class="line">    highlightBuilder.preTags(<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>);</span><br><span class="line">    highlightBuilder.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">    sourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">    <span class="comment">//执行搜索</span></span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//解析结果</span></span><br><span class="line">    ArrayList&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">        HighlightField title = highlightFields.<span class="built_in">get</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; sourceAsMap = hit.getSourceAsMap();     <span class="comment">//原来的结果</span></span><br><span class="line">        <span class="comment">//解析高亮的字段，将原来的字段换为高亮的字段。</span></span><br><span class="line">        <span class="keyword">if</span> (title != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Text[] fragments = title.fragments();</span><br><span class="line">            <span class="keyword">String</span> n_title = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (Text <span class="built_in">text</span> : fragments) &#123;</span><br><span class="line">                n_title += <span class="built_in">text</span>;</span><br><span class="line">                sourceAsMap.put(<span class="string">&quot;title&quot;</span>, n_title);</span><br><span class="line">            &#125;</span><br><span class="line">            list.<span class="built_in">add</span>(sourceAsMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller-层-2"><a href="#Controller-层-2" class="headerlink" title="Controller 层"></a>Controller 层</h4><p>直接将分页中的修改一下即可。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@GetMapping</span>(<span class="string">&quot;/search/&#123;keyword&#125;/&#123;pageNo&#125;/&#123;pageSize&#125;&quot;</span>)</span><br><span class="line">public List&lt;Map&lt;String, Object&gt;&gt; search(<span class="variable">@PathVariable</span>(<span class="string">&quot;keyword&quot;</span>) String keyword, <span class="variable">@PathVariable</span>(<span class="string">&quot;pageNo&quot;</span>) int pageNo, <span class="variable">@PathVariable</span>(<span class="string">&quot;pageSize&quot;</span>) int pageSize) throws IOException &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">contentService</span><span class="selector-class">.searchPageHighlight</span>(keyword, pageNo, pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><p>访问 localhost:9090/search/java/1/20，发现页面出现了很多条数据，并且 java 的字样都加了 span 标签，就说明成功了。</p><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>使用了 vue 和 axios，具体的代码可以到源码中去看。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;京东搜索实战&quot;&gt;&lt;a href=&quot;#京东搜索实战&quot; class=&quot;headerlink&quot; title=&quot;京东搜索实战&quot;&gt;&lt;/a&gt;京东搜索实战&lt;/h2&gt;&lt;p&gt;项目源码会放在我的网盘 &lt;strong&gt;学习-ElasticSearch&lt;/strong&gt; 目录下的 &lt;strong&gt;es-jingdong&lt;/strong&gt; 压缩包。&lt;/p&gt;
&lt;h3 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h3&gt;&lt;p&gt;新建 SpringBoot 项目，导入 Spring Boot DevTools、Lombok、Spring Configuration Processor、SpringWeb、Thymeleaf 和 Spring Data ElasticSearch 依赖。最后再手动添加 fastjson 依赖。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.78&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="elasticsearch" scheme="http://guest997.tk/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 详解(四)</title>
    <link href="http://guest997.tk/2021/10/23/es-expound04/"/>
    <id>http://guest997.tk/2021/10/23/es-expound04/</id>
    <published>2021-10-23T09:09:33.000Z</published>
    <updated>2021-11-09T03:18:59.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整合-SpringBoot-框架"><a href="#整合-SpringBoot-框架" class="headerlink" title="整合 SpringBoot 框架"></a>整合 SpringBoot 框架</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>新建 SpringBoot 项目，导入 Spring Boot DevTools、Lombok、Spring Configuration Processor、SpringWeb 和 Spring Data ElasticSearch 依赖。最后再手动添加 fastjson 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ES-配置类"><a href="#ES-配置类" class="headerlink" title="ES 配置类"></a>ES 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchClientConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootEsApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建索引请求</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;guest997&quot;</span>);</span><br><span class="line">        <span class="comment">//客户端执行请求，请求后获得响应。</span></span><br><span class="line">        CreateIndexResponse createIndexResponse = restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(createIndexResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/es-expound04.md-0.png"></p><h4 id="判断索引是否存在"><a href="#判断索引是否存在" class="headerlink" title="判断索引是否存在"></a>判断索引是否存在</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">existsIndex</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取索引请求</span></span><br><span class="line">    GetIndexRequest request = <span class="keyword">new</span> <span class="built_in">GetIndexRequest</span>(<span class="string">&quot;guest997&quot;</span>);</span><br><span class="line">    <span class="comment">//客户端执行请求，请求后获得响应。</span></span><br><span class="line">    <span class="keyword">boolean</span> exists = restHighLevelClient.<span class="built_in">indices</span>().<span class="built_in">exists</span>(request, RequestOptions.<span class="literal">DEFAULT</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(exists);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 true</span></span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">    <span class="comment">//删除索引请求</span></span><br><span class="line">    DeleteIndexRequest request = <span class="keyword">new</span> <span class="built_in">DeleteIndexRequest</span>(<span class="string">&quot;guest997&quot;</span>);</span><br><span class="line">    <span class="comment">//客户端执行请求，请求后获得响应。</span></span><br><span class="line">    AcknowledgedResponse <span class="keyword">delete</span> = restHighLevelClient.<span class="built_in">indices</span>().<span class="built_in"><span class="keyword">delete</span></span>(request, RequestOptions.<span class="literal">DEFAULT</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">delete</span>.<span class="built_in">isAcknowledged</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 true</span></span><br></pre></td></tr></table></figure><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><h4 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void add<span class="constructor">Document()</span> throws IOException &#123;</span><br><span class="line">    User user = <span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest997&quot;</span>, 18)</span>;</span><br><span class="line">    IndexRequest indexRequest = <span class="keyword">new</span> <span class="constructor">IndexRequest(<span class="string">&quot;guest997_index&quot;</span>)</span>;</span><br><span class="line">    <span class="comment">//PUT /guest997_index/_doc/1</span></span><br><span class="line">    indexRequest.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    indexRequest.timeout(<span class="module-access"><span class="module"><span class="identifier">TimeValue</span>.</span></span>time<span class="constructor">ValueSeconds(1)</span>);</span><br><span class="line">    indexRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    <span class="comment">//将数据放入请求</span></span><br><span class="line">    indexRequest.source(<span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">user</span>)</span>, XContentType.JSON);</span><br><span class="line">    <span class="comment">//客户端执行请求，请求后获得响应。</span></span><br><span class="line">    IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//打印响应信息</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(indexResponse.<span class="keyword">to</span><span class="constructor">String()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(indexResponse.status<span class="literal">()</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">IndexResponse[index=guest997_index,type=_doc,id=1,version=1,result=created,seqNo=0,primaryTerm=1,shards=&#123;&quot;total&quot;:2,&quot;successful&quot;:1,&quot;failed&quot;:0&#125;]</span></span><br><span class="line"><span class="comment">CREATED</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="判断文档是否存在"><a href="#判断文档是否存在" class="headerlink" title="判断文档是否存在"></a>判断文档是否存在</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">existsDocument</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">    <span class="comment">//GET /guest997_index/_doc/1</span></span><br><span class="line">    GetRequest getRequest = <span class="keyword">new</span> <span class="built_in">GetRequest</span>(<span class="string">&quot;guest997_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">//关闭检索_source 和存储的字段，只需要判断是否存在，这样就提高了效率。</span></span><br><span class="line">    getRequest.<span class="built_in">fetchSourceContext</span>(<span class="keyword">new</span> <span class="built_in">FetchSourceContext</span>(<span class="literal">false</span>));</span><br><span class="line">    getRequest.<span class="built_in">storedFields</span>(<span class="string">&quot;_none_&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> exists = restHighLevelClient.<span class="built_in">exists</span>(getRequest, RequestOptions.<span class="literal">DEFAULT</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(exists);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 true</span></span><br></pre></td></tr></table></figure><h4 id="获取文档"><a href="#获取文档" class="headerlink" title="获取文档"></a>获取文档</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="type">void</span> getDocument() throws IOException &#123;</span><br><span class="line">    GetRequest getRequest = <span class="built_in">new</span> GetRequest(&quot;guest997_index&quot;, &quot;1&quot;);</span><br><span class="line">    GetResponse getResponse = restHighLevelClient.<span class="keyword">get</span>(getRequest, RequestOptions.<span class="keyword">DEFAULT</span>);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(getResponse.getSourceAsString());</span><br><span class="line">&#125;</span><br><span class="line">//结果为 &#123;&quot;age&quot;:<span class="number">18</span>,&quot;name&quot;:&quot;guest997&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void update<span class="constructor">Request()</span> throws IOException &#123;</span><br><span class="line">    <span class="comment">//POST /guest997_index/_doc/1/_update</span></span><br><span class="line">    UpdateRequest updateRequest = <span class="keyword">new</span> <span class="constructor">UpdateRequest(<span class="string">&quot;guest997_index&quot;</span>, <span class="string">&quot;1&quot;</span>)</span>;</span><br><span class="line">    updateRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest997&quot;</span>, 66)</span>;</span><br><span class="line">    <span class="comment">//将数据放入 doc 中，跟之前是一样的。</span></span><br><span class="line">    updateRequest.doc(<span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">user</span>)</span>, XContentType.JSON);</span><br><span class="line">    UpdateResponse updateResponse = restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(updateResponse.status<span class="literal">()</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 OK</span></span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteRequest</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">    <span class="comment">//DELETE /guest997_index/_doc/1</span></span><br><span class="line">    DeleteRequest deleteRequest = <span class="keyword">new</span> <span class="built_in">DeleteRequest</span>(<span class="string">&quot;guest997_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    deleteRequest.<span class="built_in">timeout</span>(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    DeleteResponse deleteResponse = restHighLevelClient.<span class="built_in"><span class="keyword">delete</span></span>(deleteRequest, RequestOptions.<span class="literal">DEFAULT</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(deleteResponse.<span class="built_in">status</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 OK</span></span><br></pre></td></tr></table></figure><h4 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void test<span class="constructor">BulkRequest()</span> throws IOException &#123;</span><br><span class="line">    BulkRequest bulkRequest = <span class="keyword">new</span> <span class="constructor">BulkRequest()</span>;</span><br><span class="line">    bulkRequest.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest99701&quot;</span>, 18)</span>);</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest99702&quot;</span>, 19)</span>);</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest99703&quot;</span>, 20)</span>);</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest99704&quot;</span>, 21)</span>);</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest99705&quot;</span>, 22)</span>);</span><br><span class="line">    <span class="comment">//批量处理数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; userList.size<span class="literal">()</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//批量删除或修改也是能够在这实现的</span></span><br><span class="line">        bulkRequest.add(<span class="keyword">new</span> <span class="constructor">IndexRequest(<span class="string">&quot;guest997_index&quot;</span>)</span></span><br><span class="line">                .id(<span class="string">&quot;&quot;</span> + (i + <span class="number">1</span>))</span><br><span class="line">                .source(<span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">userList</span>.<span class="params">get</span>(<span class="params">i</span>)</span>), XContentType.JSON)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(bulk.has<span class="constructor">Failures()</span>);     <span class="comment">//是否执行失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 false</span></span><br></pre></td></tr></table></figure><h4 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Test</span></span><br><span class="line">void testSearch() throws IOException &#123;</span><br><span class="line">    SearchRequest searchRequest = new SearchRequest(<span class="string">&quot;guest997_index&quot;</span>);</span><br><span class="line">    <span class="regexp">//</span>查询条件可以使用 SearchSourceBuilder 来实现</span><br><span class="line">    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">    <span class="regexp">//</span>精确匹配</span><br><span class="line">    TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest99701&quot;</span>);</span><br><span class="line">    <span class="regexp">//</span>将 TermQueryBuilder 传给 SearchSourceBuilder，其它类似的还有 HighlightBuilder 和 MatchAllQueryBuilder 等，都是之前进行操作的命令。 </span><br><span class="line">    sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(new TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">    <span class="regexp">//</span>将数据放入请求</span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    <span class="regexp">//</span>客户端执行请求，请求后获得响应。</span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(JSON.toJSONString(searchResponse));</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : searchResponse.getHits()) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*结果为</span><br><span class="line">&#123;<span class="string">&quot;clusters&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;fragment&quot;</span><span class="symbol">:true</span>,<span class="string">&quot;skipped&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;successful&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;total&quot;</span><span class="symbol">:</span>0&#125;,<span class="string">&quot;failedShards&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;fragment&quot;</span><span class="symbol">:false</span>,<span class="string">&quot;hits&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;fragment&quot;</span><span class="symbol">:true</span>,<span class="string">&quot;hits&quot;</span><span class="symbol">:</span>[&#123;<span class="string">&quot;fields&quot;</span><span class="symbol">:</span>&#123;&#125;,<span class="string">&quot;fragment&quot;</span><span class="symbol">:false</span>,<span class="string">&quot;highlightFields&quot;</span><span class="symbol">:</span>&#123;&#125;,<span class="string">&quot;id&quot;</span><span class="symbol">:<span class="string">&quot;1&quot;</span></span>,<span class="string">&quot;matchedQueries&quot;</span><span class="symbol">:[]</span>,<span class="string">&quot;primaryTerm&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;rawSortValues&quot;</span><span class="symbol">:[]</span>,<span class="string">&quot;score&quot;</span><span class="symbol">:</span><span class="number">1.3862942</span>,<span class="string">&quot;seqNo&quot;</span><span class="symbol">:-</span><span class="number">2</span>,<span class="string">&quot;sortValues&quot;</span><span class="symbol">:[]</span>,<span class="string">&quot;sourceAsMap&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;name&quot;</span><span class="symbol">:<span class="string">&quot;guest99701&quot;</span></span>,<span class="string">&quot;age&quot;</span><span class="symbol">:</span><span class="number">18</span>&#125;,<span class="string">&quot;sourceAsString&quot;</span><span class="symbol">:<span class="string">&quot;&#123;\&quot;age\&quot;:18,\&quot;name\&quot;:\&quot;guest99701\&quot;&#125;&quot;</span></span>,<span class="string">&quot;sourceRef&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;fragment&quot;</span><span class="symbol">:true</span>&#125;,<span class="string">&quot;type&quot;</span><span class="symbol">:<span class="string">&quot;_doc&quot;</span></span>,<span class="string">&quot;version&quot;</span><span class="symbol">:-</span><span class="number">1</span>&#125;],<span class="string">&quot;maxScore&quot;</span><span class="symbol">:</span><span class="number">1.3862942</span>,<span class="string">&quot;totalHits&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;relation&quot;</span><span class="symbol">:<span class="string">&quot;EQUAL_TO&quot;</span></span>,<span class="string">&quot;value&quot;</span><span class="symbol">:</span><span class="number">1</span>&#125;&#125;,<span class="string">&quot;internalResponse&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;fragment&quot;</span><span class="symbol">:true</span>,<span class="string">&quot;numReducePhases&quot;</span><span class="symbol">:</span><span class="number">1</span>&#125;,<span class="string">&quot;numReducePhases&quot;</span><span class="symbol">:</span><span class="number">1</span>,<span class="string">&quot;profileResults&quot;</span><span class="symbol">:</span>&#123;&#125;,<span class="string">&quot;shardFailures&quot;</span><span class="symbol">:[]</span>,<span class="string">&quot;skippedShards&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;successfulShards&quot;</span><span class="symbol">:</span><span class="number">1</span>,<span class="string">&quot;timedOut&quot;</span><span class="symbol">:false</span>,<span class="string">&quot;took&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;days&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;daysFrac&quot;</span><span class="symbol">:</span><span class="number">6.944444444444444E-8</span>,<span class="string">&quot;hours&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;hoursFrac&quot;</span><span class="symbol">:</span><span class="number">1.6666666666666667E-6</span>,<span class="string">&quot;micros&quot;</span><span class="symbol">:</span><span class="number">6000</span>,<span class="string">&quot;microsFrac&quot;</span><span class="symbol">:</span><span class="number">6000.0</span>,<span class="string">&quot;millis&quot;</span><span class="symbol">:</span><span class="number">6</span>,<span class="string">&quot;millisFrac&quot;</span><span class="symbol">:</span><span class="number">6.0</span>,<span class="string">&quot;minutes&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;minutesFrac&quot;</span><span class="symbol">:</span><span class="number">1.0E-4</span>,<span class="string">&quot;nanos&quot;</span><span class="symbol">:</span><span class="number">6000000</span>,<span class="string">&quot;seconds&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;secondsFrac&quot;</span><span class="symbol">:</span>0.006,<span class="string">&quot;stringRep&quot;</span><span class="symbol">:<span class="string">&quot;6ms&quot;</span></span>&#125;,<span class="string">&quot;totalShards&quot;</span><span class="symbol">:</span><span class="number">1</span>&#125;</span><br><span class="line">&#123;name=guest99701, age=<span class="number">18</span>&#125;</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;整合-SpringBoot-框架&quot;&gt;&lt;a href=&quot;#整合-SpringBoot-框架&quot; class=&quot;headerlink&quot; title=&quot;整合 SpringBoot 框架&quot;&gt;&lt;/a&gt;整合 SpringBoot 框架&lt;/h2&gt;&lt;h3 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h3&gt;&lt;p&gt;新建 SpringBoot 项目，导入 Spring Boot DevTools、Lombok、Spring Configuration Processor、SpringWeb 和 Spring Data ElasticSearch 依赖。最后再手动添加 fastjson 依赖。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.78&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;ES-配置类&quot;&gt;&lt;a href=&quot;#ES-配置类&quot; class=&quot;headerlink&quot; title=&quot;ES 配置类&quot;&gt;&lt;/a&gt;ES 配置类&lt;/h3&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="elasticsearch" scheme="http://guest997.tk/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 详解(三)</title>
    <link href="http://guest997.tk/2021/10/19/es-expound03/"/>
    <id>http://guest997.tk/2021/10/19/es-expound03/</id>
    <published>2021-10-19T04:09:36.000Z</published>
    <updated>2022-02-15T12:28:42.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本-RESTful-命令"><a href="#基本-RESTful-命令" class="headerlink" title="基本 RESTful 命令"></a>基本 RESTful 命令</h2><table><thead><tr><th>method</th><th>url 地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>localhost:9200/索引名/类型/文档 id</td><td>创建文档（指定文档 id）</td></tr><tr><td>POST</td><td>localhost:9200/索引名/类型</td><td>创建文档（随机文档 id）</td></tr><tr><td>POST</td><td>localhost:9200/索引名/类型/文档 id/_update</td><td>修改文档</td></tr><tr><td>DELETE</td><td>localhost:9200/索引名/类型/文档 id</td><td>删除文档</td></tr><tr><td>GET</td><td>localhost:9200/索引名/类型/文档 id</td><td>查询文档通过文档 id</td></tr><tr><td>POST</td><td>localhost:9200/索引名/类型/_search</td><td>查询所有数据</td></tr></tbody></table><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p><img data-src="/images/es-expound03.md-0.png"></p><p><img data-src="/images/es-expound03.md-1.png"></p><h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><p><img data-src="/images/es-expound03.md-2.png"></p><p><img data-src="/images/es-expound03.md-3.png"></p><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><p><img data-src="/images/es-expound03.md-4.png"></p><h2 id="创建并查看文档"><a href="#创建并查看文档" class="headerlink" title="创建并查看文档"></a>创建并查看文档</h2><p><img data-src="/images/es-expound03.md-5.png"></p><h2 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h2><p><img data-src="/images/es-expound03.md-6.png"></p><p><img data-src="/images/es-expound03.md-7.png"></p><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><p><img data-src="/images/es-expound03.md-8.png"></p><h2 id="简单的条件查询"><a href="#简单的条件查询" class="headerlink" title="简单的条件查询"></a>简单的条件查询</h2><p><img data-src="/images/es-expound03.md-9.png"></p><h2 id="复杂的查询操作"><a href="#复杂的查询操作" class="headerlink" title="复杂的查询操作"></a>复杂的查询操作</h2><h3 id="query-match"><a href="#query-match" class="headerlink" title="query-match"></a>query-match</h3><p><img data-src="/images/es-expound03.md-10.png"></p><p><img data-src="/images/es-expound03.md-11.png"></p><h3 id="query-term"><a href="#query-term" class="headerlink" title="query-term"></a>query-term</h3><p>match 在匹配时会对所查找的关键词进行分词，然后按分词匹配查找，而 term 会直接对关键词进行查找。一般模糊查找的时候多用 match，而精确查找时可以使用 term。</p><p><img data-src="/images/es-expound03.md-12.png"></p><h3 id="source"><a href="#source" class="headerlink" title="_source"></a>_source</h3><p><img data-src="/images/es-expound03.md-13.png"></p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p><img data-src="/images/es-expound03.md-14.png"></p><h3 id="from-size"><a href="#from-size" class="headerlink" title="from size"></a>from size</h3><p><img data-src="/images/es-expound03.md-15.png"></p><h3 id="query-bool-must"><a href="#query-bool-must" class="headerlink" title="query-bool-must"></a>query-bool-must</h3><p><img data-src="/images/es-expound03.md-16.png"></p><p>还有个 must_not 属性，与 must 条件想法，它是查询不符合条件的结果。</p><h3 id="query-bool-should"><a href="#query-bool-should" class="headerlink" title="query-bool-should"></a>query-bool-should</h3><p><img data-src="/images/es-expound03.md-17.png"></p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><img data-src="/images/es-expound03.md-18.png"></p><h3 id="highlight-fields"><a href="#highlight-fields" class="headerlink" title="highlight-fields"></a>highlight-fields</h3><p><img data-src="/images/es-expound03.md-19.png"></p><p><img data-src="/images/es-expound03.md-20.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基本-RESTful-命令&quot;&gt;&lt;a href=&quot;#基本-RESTful-命令&quot; class=&quot;headerlink&quot; title=&quot;基本 RESTful 命令&quot;&gt;&lt;/a&gt;基本 RESTful 命令&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;method&lt;/th&gt;
&lt;th&gt;url 地址&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;localhost:9200/索引名/类型/文档 id&lt;/td&gt;
&lt;td&gt;创建文档（指定文档 id）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;localhost:9200/索引名/类型&lt;/td&gt;
&lt;td&gt;创建文档（随机文档 id）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;localhost:9200/索引名/类型/文档 id/_update&lt;/td&gt;
&lt;td&gt;修改文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;localhost:9200/索引名/类型/文档 id&lt;/td&gt;
&lt;td&gt;删除文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;localhost:9200/索引名/类型/文档 id&lt;/td&gt;
&lt;td&gt;查询文档通过文档 id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;localhost:9200/索引名/类型/_search&lt;/td&gt;
&lt;td&gt;查询所有数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;创建索引&quot;&gt;&lt;a href=&quot;#创建索引&quot; class=&quot;headerlink&quot; title=&quot;创建索引&quot;&gt;&lt;/a&gt;创建索引&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&quot;/images/es-expound03.md-0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/images/es-expound03.md-1.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="elasticsearch" scheme="http://guest997.tk/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 详解(二)</title>
    <link href="http://guest997.tk/2021/10/17/es-expound02/"/>
    <id>http://guest997.tk/2021/10/17/es-expound02/</id>
    <published>2021-10-17T02:10:02.000Z</published>
    <updated>2022-02-15T12:30:37.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>elasticsearch 是面向文档的关系行数据库，在 elasticsearch 中一切都是 JSON。elasticsearch（集群）中可以包含多个索引（数据库），每个索引中可以包含多个类型（表），每个类型下又包含多个文档（行），每个文档中又包含多个字段（列）。</p><table><thead><tr><th><strong>Relational DB</strong></th><th><strong>Elasticsearch</strong></th></tr></thead><tbody><tr><td>数据库（database）</td><td>索引（indexes）</td></tr><tr><td>表（tables）</td><td>文档类型（types）</td></tr><tr><td>行（rows）</td><td>文档（documents）</td></tr><tr><td>列（columns）</td><td>字段（fields）</td></tr></tbody></table><h3 id="物理设计"><a href="#物理设计" class="headerlink" title="物理设计"></a>物理设计</h3><p>elasticsearch 在后台把每个索引划分成多个分片，每个分片可以在集群中的不同服务器间迁移。</p><h3 id="逻辑设计"><a href="#逻辑设计" class="headerlink" title="逻辑设计"></a>逻辑设计</h3><p>一个索引类型中，包含多个文档，比如说文档1和文档2。 当我们索引一个文档时，可以通过这样的一个顺序找到它：索引 -&gt; 类型 -&gt; 文档 ID，通过这个组合我们就能索引到某个具体的文档。注意：ID 不必是整数，实际上它是个字符串。</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>索引数据的最小单位是文档，elasticsearch 中的文档有几个特点：</p><ul><li>  一个文档中同时包含字段和对应的值，也就是同时包含 key:value。</li><li>  一个文档中能够包含自文档，复杂的逻辑实体就是这么来的。</li><li>  文档不依赖预先定义的模型。关系型数据库中，需要提前定义字段才能使用。在 elasticsearch 中，对于字段是非常灵活的，有时候我们可以忽略该字段或者动态地添加一个新的字段。尽管我们可以随意地新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符串也可以是整形。elasticsearch 会保存字段和类型之间的映射及其它的设置。</li></ul><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>类型是文档的逻辑容器。类型中对于字段的定义称为映射，比如 name 映射为字符串类型。文档是无模型的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，elasticsearch 会自动得将新字段加入映射，但是这个字段不确定它是什么类型， 所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了。</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引是映射类型的容器，elasticsearch 中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其它设置，然后它们被存储到各个分片上。</p><p>一个集群至少有一个节点，而一个节点就是一个 elasricsearch 进程，节点可以有多个索引。默认的，如果你创建索引，将会有5个分片（primary shard，又称主分片）构成的，每一个主分片会有一个副本（replica shard，又称复制分片）。</p><p><img data-src="/images/es-expound02.md-0.png"></p><p>上图是一个有3个节点的集群，可以看到主分片和对应的复制分片分布在多个节点内，这样有利于某个节点挂掉了，数据也不至于丢失。实际上，一个分片是一个 Lucene 索引，一个包含倒排索引的文件目录，倒排索引的结构使得 elasticsearch 在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字。<strong>一个 elasticsearch 索引是由多个 Lucene 索引组成的。</strong></p><h4 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h4><p>倒排索引适用于快速的全文搜索，一个索引由文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。 例如，现在有两个文档，每个文档包含如下内容：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Study <span class="keyword">every</span> <span class="built_in">day</span>, good good up <span class="keyword">to</span> forever  <span class="comment">#文档1的内容</span></span><br><span class="line">To forever, study <span class="keyword">every</span> <span class="built_in">day</span>, good good up <span class="comment">#文档2的内容</span></span><br></pre></td></tr></table></figure><p>为了创建倒排索引，我们首先要将每个文档拆分成独立的词或称为词条或者 tokens，然后创建一个包含所有不重复的词条的排序列表，然后列出每个词条出现在哪个文档。</p><table><thead><tr><th>term</th><th>doc_1</th><th>doc_2</th></tr></thead><tbody><tr><td>Study</td><td>√</td><td>×</td></tr><tr><td>To</td><td>x</td><td>×</td></tr><tr><td>every</td><td>√</td><td>√</td></tr><tr><td>forever</td><td>√</td><td>√</td></tr><tr><td>day</td><td>√</td><td>√</td></tr><tr><td>study</td><td>×</td><td>√</td></tr><tr><td>good</td><td>√</td><td>√</td></tr><tr><td>to</td><td>√</td><td>×</td></tr><tr><td>up</td><td>√</td><td>√</td></tr></tbody></table><p>现在，我们试图搜索 to forever，只需要查看包含每个词条的文档 score。</p><table><thead><tr><th>term</th><th>doc_1</th><th>doc_2</th></tr></thead><tbody><tr><td>to</td><td>√</td><td>×</td></tr><tr><td>forever</td><td>√</td><td>√</td></tr><tr><td>total</td><td>2</td><td>1</td></tr></tbody></table><p>两个文档都匹配，但是第一个文档比第二个匹配程度更高。如果没有别的条件，现在，这两个包含关键字的文档都将返回。相对于查找所有原始数据而言，查找倒排索引后的数据将会快的多。完全过滤掉无关的所有数据，提高效率。</p><h2 id="IK-分词器插件"><a href="#IK-分词器插件" class="headerlink" title="IK 分词器插件"></a>IK 分词器插件</h2><p>分词：即把一段文字划分成一个个的关键字，在搜索时会把信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个词，这显然是不符合我们的要求的，所以我们需要安装中文分词器 IK 来解决这个问题。IK 提供了两个分词算法：ik_smart 和 ik_max_word，其中 ik_smart 为最少切分，ik_max_word 为最细粒度切分。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>只需要下载并解压到 es 的 plugins 目录下，就会跟随 es 一起加载启动了。（可以查看 es 的启动过程，会有提示信息；也可以通过命令 elasticsearch-plugin list 查看加载的插件）</p><h3 id="测试两种分词算法"><a href="#测试两种分词算法" class="headerlink" title="测试两种分词算法"></a>测试两种分词算法</h3><h4 id="最少切分"><a href="#最少切分" class="headerlink" title="最少切分"></a>最少切分</h4><p><img data-src="/images/es-expound02.md-1.png"></p><h4 id="最细粒度切分"><a href="#最细粒度切分" class="headerlink" title="最细粒度切分"></a>最细粒度切分</h4><p><img data-src="/images/es-expound02.md-2.png"></p><h4 id="自定义词条"><a href="#自定义词条" class="headerlink" title="自定义词条"></a>自定义词条</h4><p>假如我们使用一个自定的词条：郑亿朋，看下效果如何。</p><p><img data-src="/images/es-expound02.md-3.png"></p><p>可以从结果看出，<strong>郑亿朋</strong> 被拆分开来了，这就需要我们自己添加词条到分词器的字典中。新建 myword.dic 文件到 ik 分词器目录下的 config 文件夹下。文件内容如下：（以后想加自定的词条只需要在下一行继续加即可）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">郑亿朋</span><br></pre></td></tr></table></figure><p>然后就是在 IKAnalyzer.cfg.xml 配置文件中加入自己的字典。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">entry</span> key=<span class="string">&quot;ext_dict&quot;</span>&gt;myword.dic&lt;/<span class="keyword">entry</span>&gt;</span><br></pre></td></tr></table></figure><p>最后重启 es 和 kibana 再进行测试。（可以查看 es 的启动过程，会有提示信息）</p><p><img data-src="/images/es-expound02.md-4.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;核心概念&quot;&gt;&lt;a href=&quot;#核心概念&quot; class=&quot;headerlink&quot; title=&quot;核心概念&quot;&gt;&lt;/a&gt;核心概念&lt;/h2&gt;&lt;p&gt;elasticsearch 是面向文档的关系行数据库，在 elasticsearch 中一切都是 JSON。elasticsearch（集群）中可以包含多个索引（数据库），每个索引中可以包含多个类型（表），每个类型下又包含多个文档（行），每个文档中又包含多个字段（列）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Relational DB&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Elasticsearch&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;数据库（database）&lt;/td&gt;
&lt;td&gt;索引（indexes）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表（tables）&lt;/td&gt;
&lt;td&gt;文档类型（types）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;行（rows）&lt;/td&gt;
&lt;td&gt;文档（documents）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;列（columns）&lt;/td&gt;
&lt;td&gt;字段（fields）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;物理设计&quot;&gt;&lt;a href=&quot;#物理设计&quot; class=&quot;headerlink&quot; title=&quot;物理设计&quot;&gt;&lt;/a&gt;物理设计&lt;/h3&gt;&lt;p&gt;elasticsearch 在后台把每个索引划分成多个分片，每个分片可以在集群中的不同服务器间迁移。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="elasticsearch" scheme="http://guest997.tk/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 详解(一)</title>
    <link href="http://guest997.tk/2021/10/16/es-expound01/"/>
    <id>http://guest997.tk/2021/10/16/es-expound01/</id>
    <published>2021-10-16T02:36:50.000Z</published>
    <updated>2021-11-09T03:17:45.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h2><p>Lucene 是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎。Lucene 提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。</p><p>Lucene 是一个全文检索引擎的架构。那什么是全文搜索引擎？</p><p>全文搜索引擎是名副其实的搜索引擎，国外具代表性的有 Google、Fast/AllTheWeb、AltaVista、Inktomi、Teoma、WiseNut 等，国内著名的有百度（Baidu）。它们都是通过从互联网上提取的各个网站的信息（以网页文字为主）而建立的数据库中，检索与用户查询条件匹配的相关记录，然后按一定的排列顺序将结果返回给用户，因此他们是真正的搜索引擎。</p><p>从搜索结果来源的角度，全文搜索引擎又可细分为两种，一种是拥有自己的检索程序（Indexer），俗称“蜘蛛”（Spider）程序或“机器人”（Robot）程序，并自建网页数据库，搜索结果直接从自身的数据库中调用，如上面提到的 7 家引擎；另一种则是租用其他引擎的数据库，并按自定的格式排列搜索结果，如 Lycos 引擎。</p><h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><p>Elaticsearch 简称为 es，es 是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。es 使用 Java 开发并使用 Lucene 作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的 RESTful API 来隐藏 Lucene 的复杂性，从而让全文搜索变得简单。</p><h2 id="安装-ElasticSearch"><a href="#安装-ElasticSearch" class="headerlink" title="安装 ElasticSearch"></a>安装 ElasticSearch</h2><p>下载并解压完压缩包，运行 bin 目录下的 elasticsearch.bat 文件就能用了。<strong>注意：如果内存较小，需要到 config 目录下的 jvm.options 文件中根据电脑的配置修改下面的配置。</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#记得把配置前面的 # 去掉，要不然会作为注释是不生效的。</span><br><span class="line">-Xms4g        #最小运行内存</span><br><span class="line">-Xmx4g        #最大运行内存</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问 localhost:9200，出现如下页面就是成功了。</p><p><img data-src="/images/es-expound01.md-0.png"></p><h2 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h2><p>ELK 是 Elasticsearch、Logstash、Kibana 三大开源框架首字母大写简称。市面上也被称为 ElasticStack。Logstash 是 ELK 的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/elasticsearch/kafka 等）。Kibana 可以将 elasticsearch 的数据通过友好的页面展示出来，提供实时分析的功能。</p><p><img data-src="/images/es-expound01.md-1.png"></p><h2 id="安装-Kibana"><a href="#安装-Kibana" class="headerlink" title="安装 Kibana"></a>安装 Kibana</h2><p>同样的下载并解压完压缩包，运行 bin 目录下的 kibana.bat 文件就能用了。<strong>注意：Kibana 要和 es 版本一致。由于 Kibana 默认是英文语言，可以配置国际化改为中文，将 config 目录下的 kibana.yml 文件的最后一行改为 zh-CN。</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#记得把配置前面的 # 去掉，要不然会作为注释是不生效的。</span></span><br><span class="line"><span class="symbol">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>访问 localhost:5601，出现如下页面就是成功了。</p><p><img data-src="/images/es-expound01.md-2.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Lucene&quot;&gt;&lt;a href=&quot;#Lucene&quot; class=&quot;headerlink&quot; title=&quot;Lucene&quot;&gt;&lt;/a&gt;Lucene&lt;/h2&gt;&lt;p&gt;Lucene 是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎。Lucene 提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。&lt;/p&gt;
&lt;p&gt;Lucene 是一个全文检索引擎的架构。那什么是全文搜索引擎？&lt;/p&gt;
&lt;p&gt;全文搜索引擎是名副其实的搜索引擎，国外具代表性的有 Google、Fast/AllTheWeb、AltaVista、Inktomi、Teoma、WiseNut 等，国内著名的有百度（Baidu）。它们都是通过从互联网上提取的各个网站的信息（以网页文字为主）而建立的数据库中，检索与用户查询条件匹配的相关记录，然后按一定的排列顺序将结果返回给用户，因此他们是真正的搜索引擎。&lt;/p&gt;
&lt;p&gt;从搜索结果来源的角度，全文搜索引擎又可细分为两种，一种是拥有自己的检索程序（Indexer），俗称“蜘蛛”（Spider）程序或“机器人”（Robot）程序，并自建网页数据库，搜索结果直接从自身的数据库中调用，如上面提到的 7 家引擎；另一种则是租用其他引擎的数据库，并按自定的格式排列搜索结果，如 Lycos 引擎。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="elasticsearch" scheme="http://guest997.tk/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(九)</title>
    <link href="http://guest997.tk/2021/10/05/redis-expound09/"/>
    <id>http://guest997.tk/2021/10/05/redis-expound09/</id>
    <published>2021-10-05T01:35:09.000Z</published>
    <updated>2021-11-09T03:21:02.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哨兵模式（重点）"><a href="#哨兵模式（重点）" class="headerlink" title="哨兵模式（重点）"></a>哨兵模式（重点）</h2><h3 id="单哨兵模式"><a href="#单哨兵模式" class="headerlink" title="单哨兵模式"></a>单哨兵模式</h3><p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费时费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候应优先考虑哨兵模式。</p><p><img data-src="/images/redis-expound09.md-0.png"></p><p>哨兵模式是一种特殊的模式，Redis 提供了哨兵的命令，哨兵是一个进程，它会独立运行。其原理是哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行中的多个 Redis 实例。它能够后台监控主机是否故障，<strong>如果故障了根据投票数自动将从库转换为主库。</strong></p><p>哨兵有两个作用：</p><ul><li>  通过发送命令，让 Redis 服务器返回其运行状态，包括主服务器和从服务器。</li><li>  当哨兵监测到 master 宕机，会自动将 slave 切换成 master，然后通过发布订阅模式通知其它的从服务器，修改配置文件，让它们切换主机。</li></ul><h3 id="多哨兵模式"><a href="#多哨兵模式" class="headerlink" title="多哨兵模式"></a>多哨兵模式</h3><p>然而一个哨兵进程对 Redis 服务器进行监控，可能会出现问题。为此，可以使用多个哨兵进行监控，各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p><p><img data-src="/images/redis-expound09.md-1.png"></p><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover（故障转移） 过程，仅仅是哨兵1主观地认为主服务器不可用，这个现象称为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由其中一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器切换主机，这个过程称为<strong>客观下线</strong>。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>新建 <strong>sentinel.conf</strong> 配置文件。（下面的是 windows 的配置）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前 Sentinel 服务运行的端口</span></span><br><span class="line"><span class="attribute">port</span> <span class="number">26379</span></span><br><span class="line"><span class="attribute">bind</span> <span class="number">127.0.0.1</span></span><br><span class="line"><span class="comment">#哨兵监听的主服务器，后面的1表示主机挂掉以后进行投票，只需要1票就可以将从机变成主机。</span></span><br><span class="line"><span class="attribute">sentinel</span> monitor mymaster <span class="number">127.0.0.1</span> <span class="number">6379</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#3s 内 mymaster 无响应，则认为 mymaster 宕机了。</span></span><br><span class="line"><span class="attribute">sentinel</span> down-after-milliseconds mymaster <span class="number">3000</span></span><br><span class="line"><span class="comment">#如果10s 后，mysater 仍没启动过来，则启动 failover。</span></span><br><span class="line"><span class="attribute">sentinel</span> failover-timeout mymaster <span class="number">10000</span>  </span><br><span class="line"><span class="comment">#执行故障转移时， 最多有1个从服务器同时对新的主服务器进行同步。</span></span><br><span class="line"><span class="attribute">sentinel</span> parallel-syncs mymaster <span class="number">1</span></span><br></pre></td></tr></table></figure><p>启动哨兵。</p><p><img data-src="/images/redis-expound09.md-2.png"></p><p>将 6379 主机关机，查看哨兵反应和从机状态。</p><p><img data-src="/images/redis-expound09.md-3.png"></p><p><img data-src="/images/redis-expound09.md-4.png"></p><p><img data-src="/images/redis-expound09.md-5.png"></p><p>如果6379主机又连了回来，查看哨兵反应和6379以及主机状态。</p><p><img data-src="/images/redis-expound09.md-6.png"></p><p><img data-src="/images/redis-expound09.md-7.png"></p><p><img data-src="/images/redis-expound09.md-8.png"></p><h3 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h3><p>优点：</p><ul><li>  哨兵集群基于主从复制模式，所有的主从配置优点它全有。</li><li>  主从可以自动切换，故障可以转移，系统的可用性更好。</li></ul><p>缺点：</p><ul><li>  Redis 不好在线扩容，集群容量一旦到达上限，在线扩容就十分麻烦。</li><li>  实现哨兵模式的配置其实很麻烦。</li></ul><h2 id="缓存问题（重点）"><a href="#缓存问题（重点）" class="headerlink" title="缓存问题（重点）"></a>缓存问题（重点）</h2><p>Redis 缓存的使用，极大地提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求，这时的用户很可能是攻击者，攻击会导致数据库压力过大。</p><p><img data-src="/images/redis-expound09.md-9.png"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p><strong>布隆过滤器</strong>：布隆过滤器是一种数据结构，对所有可能查询的参数以 hash 形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力。</p><p><img data-src="/images/redis-expound09.md-10.jpg"></p><p><strong>缓存空对象</strong>：当存储层没命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源。</p><p><img data-src="/images/redis-expound09.md-11.png"></p><p>但是这种方法会存在两个问题：</p><ul><li>  如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键。</li><li>  即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿是指缓存中没有但数据库中有的一条热点数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p><strong>设置热点数据永不过期</strong>：从缓存层面来看，没有设置过期时间，就不会出现热点 key 过期后产生的问题。</p><p><strong>加互斥锁</strong>：分布式锁保证对于每个 key 同时只有一个线程去查询后端服务，其它线程没有获得分布式锁的权限，因此需要进行等待。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至宕机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><p><img data-src="/images/redis-expound09.md-12.jpg"></p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p><strong>集群搭建</strong>：多增设几台 redis，这样一台挂掉之后其它的还可以继续工作。</p><p><strong>限流降级</strong>：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。</p><p><strong>数据预热</strong>：先把可能的数据预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的 key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;哨兵模式（重点）&quot;&gt;&lt;a href=&quot;#哨兵模式（重点）&quot; class=&quot;headerlink&quot; title=&quot;哨兵模式（重点）&quot;&gt;&lt;/a&gt;哨兵模式（重点）&lt;/h2&gt;&lt;h3 id=&quot;单哨兵模式&quot;&gt;&lt;a href=&quot;#单哨兵模式&quot; class=&quot;headerlink&quot; title=&quot;单哨兵模式&quot;&gt;&lt;/a&gt;单哨兵模式&lt;/h3&gt;&lt;p&gt;主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费时费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候应优先考虑哨兵模式。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/images/redis-expound09.md-0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;哨兵模式是一种特殊的模式，Redis 提供了哨兵的命令，哨兵是一个进程，它会独立运行。其原理是哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行中的多个 Redis 实例。它能够后台监控主机是否故障，&lt;strong&gt;如果故障了根据投票数自动将从库转换为主库。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(八)</title>
    <link href="http://guest997.tk/2021/10/04/redis-expound08/"/>
    <id>http://guest997.tk/2021/10/04/redis-expound08/</id>
    <published>2021-10-04T02:16:41.000Z</published>
    <updated>2021-11-09T03:20:32.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><p><img data-src="/images/redis-expound08.md-0.jpg"></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">publish channel 信息                    <span class="comment">#将信息发送到指定的频道。</span></span><br><span class="line">subscribe 频道1 [频道2 <span class="string">...</span>]               <span class="comment">#订阅给定的一个或多个频道的信息。</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="订阅者"><a href="#订阅者" class="headerlink" title="订阅者"></a>订阅者</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">subscribe</span> Guest<span class="number">997</span>      #订阅一个频道 Guest<span class="number">997</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound08.md-1.png"></p><h4 id="发布者"><a href="#发布者" class="headerlink" title="发布者"></a>发布者</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">publish</span> Guest<span class="number">997</span> <span class="string">&quot;hello,Guest997&quot;</span>   #发布者发布消息到频道</span><br><span class="line"><span class="attribute">publish</span> Guest<span class="number">997</span> <span class="string">&quot;hello,redis&quot;</span></span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过 subscribe 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个频道，而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。subscribe 命令的关键，就是将客户端添加到给定 channel 的订阅链表中。</p><p>通过 publish 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>  消息通知系统</li><li>  实时聊天系统（频道当做聊天室，将信息回显给所有人）</li><li>  订阅、关注系统</li></ul><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>将一台 Redis 服务器的数据，复制到其它的 Redis 服务器。前者称为主节点（master/leader），后者称为从节点（slave/follower）。数据的复制是单向的，只能由主节点到从节点。Master 以写为主，Slave 以读为主。且一个主节点可以有多个从节点，但一个从节点只能有一个主节点。</p><p>一般来说，要将 Redis 运用于工程项目中，只使用一台 Redis 是万万不能的（宕机），原因如下：</p><ul><li>  从结构上，单个 Redis 服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大。</li><li>  从容量上，单个 Redis 服务器内存容量有限，就算一台 Redis 服务器内存容量为256G，也不能将所有内存用作 Redis 存储内存。<strong>一般来说，单台 Redis 最大使用内存不应该超过20G。</strong></li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>  热备份：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li>  故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复，实际上是一种服务的冗余。</li><li>  负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务，分担服务器负载。尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。</li><li>  高可用基石：主从复制是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础。</li></ul><h3 id="环境搭建（一主二从）"><a href="#环境搭建（一主二从）" class="headerlink" title="环境搭建（一主二从）"></a>环境搭建（一主二从）</h3><p>为了在一台机器上实现一主二从的环境，需要拷贝并修改三份配置文件，根据这三份不同的配置文件启动 Redis。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一份配置文件（redis79.conf）</span></span><br><span class="line"><span class="attribute">port</span> <span class="number">6379</span></span><br><span class="line"><span class="attribute">pidfile</span> /var/run/redis_<span class="number">6379</span>.pid</span><br><span class="line"><span class="attribute">logfile</span> <span class="string">&quot;6379.log&quot;</span></span><br><span class="line"><span class="attribute">dbfilename</span> dump<span class="number">6379</span>.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二份配置文件（redis80.conf）</span></span><br><span class="line"><span class="attribute">port</span> <span class="number">6380</span></span><br><span class="line"><span class="attribute">pidfile</span> /var/run/redis_<span class="number">6380</span>.pid</span><br><span class="line"><span class="attribute">logfile</span> <span class="string">&quot;6380.log&quot;</span></span><br><span class="line"><span class="attribute">dbfilename</span> dump<span class="number">6380</span>.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment">#第三份配置文件（redis81.conf）</span></span><br><span class="line"><span class="attribute">port</span> <span class="number">6381</span></span><br><span class="line"><span class="attribute">pidfile</span> /var/run/redis_<span class="number">6381</span>.pid</span><br><span class="line"><span class="attribute">logfile</span> <span class="string">&quot;6381.log&quot;</span></span><br><span class="line"><span class="attribute">dbfilename</span> dump<span class="number">6381</span>.rdb</span><br></pre></td></tr></table></figure><p><strong>默认情况下，每台 Redis 服务器都是主节点。 一般情况下只用配置从机就好了。6379为主节点，6380和6381为从节点。</strong></p><p><img data-src="/images/redis-expound08.md-2.png"></p><p><img data-src="/images/redis-expound08.md-3.png"></p><p><strong>真实的主从复制实现应该在配置文件中进行配置，这样的话才是永久实现的，这里使用的是命令是暂时实现的！想要永久生效就需要如下图添加主机信息。</strong></p><p><img data-src="/images/redis-expound08.md-4.png"></p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p><strong>主机可以写，从机只能读。主机中的所有数据会自动被从机保存。</strong></p><p><img data-src="/images/redis-expound08.md-5.png"></p><p><img data-src="/images/redis-expound08.md-6.png"></p><p><strong>主机断开连接，从机依旧是连接到主机的，依旧有主机之前写的数据。主机如果重新连接了，从机依旧可以获取到主机新写的数据。</strong></p><h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><ul><li>  全量复制：slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。只要是重新连接 master，一次全量复制将被自动执行。</li><li>  增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave。</li></ul><h3 id="层层链路"><a href="#层层链路" class="headerlink" title="层层链路"></a>层层链路</h3><p>在上面的基础上，可以将6380从机作为6381的主机。但此时，6380依旧是从机，依旧只能进行读操作。</p><p><img data-src="/images/redis-expound08.md-7.png"></p><p>可以使用 slaveof no one 命令让自己变成主机。之前是其从机依旧保持这样的状态。</p><p><img data-src="/images/redis-expound08.md-8.png"></p><p><img data-src="/images/redis-expound08.md-9.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;发布订阅&quot;&gt;&lt;a href=&quot;#发布订阅&quot; class=&quot;headerlink&quot; title=&quot;发布订阅&quot;&gt;&lt;/a&gt;发布订阅&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&quot;/images/redis-expound08.md-0.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;figure class=&quot;highlight jboss-cli&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;publish channel 信息                    &lt;span class=&quot;comment&quot;&gt;#将信息发送到指定的频道。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subscribe 频道1 [频道2 &lt;span class=&quot;string&quot;&gt;...&lt;/span&gt;]               &lt;span class=&quot;comment&quot;&gt;#订阅给定的一个或多个频道的信息。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h3&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(七)</title>
    <link href="http://guest997.tk/2021/10/03/redis-expound07/"/>
    <id>http://guest997.tk/2021/10/03/redis-expound07/</id>
    <published>2021-10-03T02:02:49.000Z</published>
    <updated>2021-11-09T03:20:06.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><p><img data-src="/images/redis-expound07.md-0.png"></p><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><p><img data-src="/images/redis-expound07.md-1.png"></p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p><img data-src="/images/redis-expound07.md-2.png"></p><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><p><img data-src="/images/redis-expound07.md-3.png"></p><p><img data-src="/images/redis-expound07.md-4.png"></p><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p><img data-src="/images/redis-expound07.md-5.png"></p><p><img data-src="/images/redis-expound07.md-6.png"></p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>redis 默认是没有密码的。</p><p><img data-src="/images/redis-expound07.md-7.png"></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p><img data-src="/images/redis-expound07.md-8.png"></p><p><img data-src="/images/redis-expound07.md-9.png"></p><ul><li>  volatile-lru：只对设置了过期时间的 key 进行 LRU（默认值）</li><li>  allkeys-lru：删除 lru 算法的 key</li><li>  volatile-random：随机删除即将过期 key</li><li>  allkeys-random：随机删除</li><li>  volatile-ttl：删除即将过期的</li><li>  noeviction：永不过期，返回错误。</li></ul><h3 id="aof"><a href="#aof" class="headerlink" title="aof"></a>aof</h3><p><img data-src="/images/redis-expound07.md-10.png"></p><h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><p><img data-src="/images/redis-expound07.md-11.png"></p><p><strong>Redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何 IO 操作的。这就确保了极高的性能。如果需要进行大规模的数据恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。RDB 的缺点是最后一次持久化后的数据可能丢失；fork进程的时候，会占用一定的内存空间。</strong></p><p>默认使用的就是 RDB，一般情况下不需要修改这个配置。有时候在生产环境中会将这个文件进行备份。</p><h3 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h3><ul><li>  满足 save 的规则</li><li>  执行 ﬂushall 命令</li><li>  退出 redis</li></ul><p><img data-src="/images/redis-expound07.md-12.png"></p><p>当满足触发机制时就会自动生成 dump.rdb 文件。（配置文件中的默认配置）</p><h3 id="恢复-rdb-文件"><a href="#恢复-rdb-文件" class="headerlink" title="恢复 rdb 文件"></a>恢复 rdb 文件</h3><p>只需要将 rdb 文件放在 redis 启动目录就可以，redis 启动的时候会自动检测 dump.rdb 文件并恢复其中的数据。运行 config get dir 命令可以查看 rdb 文件需要存在的位置。</p><p><img data-src="/images/redis-expound07.md-13.png"></p><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><p><img data-src="/images/redis-expound07.md-14.png"></p><p>以日志的形式来记录每个写操作，将 redis 执行过的所有写指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><h3 id="触发机制-1"><a href="#触发机制-1" class="headerlink" title="触发机制"></a>触发机制</h3><p>在上面的 <strong>配置-aof</strong> 中就看到了，其是默认不开启的，需要手动改为 yes。并且默认是每秒执行一次同步。</p><p><img data-src="/images/redis-expound07.md-15.png"></p><p><img data-src="/images/redis-expound07.md-16.png"></p><p><img data-src="/images/redis-expound07.md-17.png"></p><h3 id="重写规则说明"><a href="#重写规则说明" class="headerlink" title="重写规则说明"></a>重写规则说明</h3><p><img data-src="/images/redis-expound07.md-18.png"></p><p>no-appendfsync-on-rewrite 参数设置为 no，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。如果设置为 yes 就相当于将 appendfsync 设置为no，这说明并没有执行磁盘操作，只是写入了缓冲区，因此这样并不会造成阻塞（因为没有竞争磁盘），但是如果这个时候 redis 挂掉，就会丢失数据。丢失多少数据呢？在 linux 的操作系统的默认设置下，最多会丢失30s 的数据。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>  RDB 持久化方式能够在指定的时间间隔内对数据进行快照存储。</li><li>  AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF 命令以 Redis 协议追加保存每次写的操作到文件末尾，Redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大。</li><li>  <strong>只做缓存：如果只希望数据在服务器运行的时候存在，可以不使用任何持久化。</strong></li><li>同时开启两种持久化方式。<ul><li>  在这种情况下，当 Redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。</li><li>  RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件，那要不要只使用 AOF 呢？作者建议不要，因为 RDB 更适合用于备份数据库（AOF 在不断变化不好备份），能够快速重启，而且不会有 AOF 可能潜在的 Bug，留着作为一个万一的手段。</li></ul></li><li>性能建议<ul><li>  因为 RDB 文件只用作后备用途，建议只在 Slave 上持久化 RDB 文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。</li><li>  如果 Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只加载自己的 AOF 文件就可以了，代价一是带来了持续的 IO，二是 AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少 AOF rewrite 的频率，AOF 重写的基础大小默认值64mb 太小了，可以设到5G 以上，默认超过原大小100%大小重写可以改到适当的数值。</li><li>  如果不 Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔 IO，也减少了 rewrite 时带来的系统波动。代价是如果 Master/Slave 同时宕机，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB 文件，载入较新的那个，微博就是这种架构。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;h3 id=&quot;单位&quot;&gt;&lt;a href=&quot;#单位&quot; class=&quot;headerlink&quot; title=&quot;单位&quot;&gt;&lt;/a&gt;单位&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&quot;/images/redis-expound07.md-0.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;包含&quot;&gt;&lt;a href=&quot;#包含&quot; class=&quot;headerlink&quot; title=&quot;包含&quot;&gt;&lt;/a&gt;包含&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&quot;/images/redis-expound07.md-1.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(六)</title>
    <link href="http://guest997.tk/2021/10/02/redis-expound06/"/>
    <id>http://guest997.tk/2021/10/02/redis-expound06/</id>
    <published>2021-10-02T02:09:09.000Z</published>
    <updated>2021-11-09T03:19:15.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>Jedis 是 Redis 官方推荐的 Java 连接开发工具，使用 Java 操作 Redis 的中间件。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jedis 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--fastjson 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：需要先在 Windows 下载 Redis，并运行 redis-server.exe 文件。当然也能进行远程连接服务器。</strong></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>由于 Java 中所有的方法就是对应之前学习的命令，一个都没有变化。故下面就只进行连接测试和事务讲解。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> <span class="built_in">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(jedis.<span class="built_in">ping</span>());</span><br><span class="line">        jedis.<span class="built_in">flushDB</span>();    <span class="comment">//进行多次测试时，使用这行代码清空数据。</span></span><br><span class="line"></span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> <span class="built_in">JSONObject</span>();</span><br><span class="line">        jsonObject.<span class="built_in">put</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;redis&quot;</span>);</span><br><span class="line">        jsonObject.<span class="built_in">put</span>(<span class="string">&quot;hello2&quot;</span>, <span class="string">&quot;redis&quot;</span>);</span><br><span class="line">        <span class="keyword">String</span> jsonString = jsonObject.<span class="built_in">toJSONString</span>();</span><br><span class="line"></span><br><span class="line">        Transaction transaction = jedis.<span class="built_in">multi</span>();    <span class="comment">//开启事务</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            transaction.<span class="built_in">set</span>(<span class="string">&quot;hello&quot;</span>, jsonString);</span><br><span class="line">            <span class="comment">//int i = 1/0;      //错误代码测试</span></span><br><span class="line">            transaction.<span class="built_in">exec</span>();</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (Exception e) &#123;</span><br><span class="line">            transaction.<span class="built_in">discard</span>();      <span class="comment">//放弃事务</span></span><br><span class="line">            e.<span class="built_in">printStackTrace</span>();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(jedis.<span class="built_in">get</span>(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">            jedis.<span class="built_in">close</span>();      <span class="comment">//关闭连接</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">PONG</span></span><br><span class="line"><span class="comment">&#123;&quot;hello2&quot;:&quot;redis&quot;,&quot;hello&quot;:&quot;redis&quot;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="整合-SpringBoot-框架"><a href="#整合-SpringBoot-框架" class="headerlink" title="整合 SpringBoot 框架"></a>整合 SpringBoot 框架</h2><p>在 SpringBoot 2.x 之后，原来使用的 Jedis 被替换为了 Lettuce。</p><p>Jedis：采用直连的方式，多个线程的操作是不安全的，如果想要避免，就使用 jedis pool 连接池。<br>Lettuce：使用 netty，实例可以在多个线程中进行共享，不存在线程不安全的情况。可以减少线程数据。</p><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>新建 SpringBoot 项目，导入 Spring Boot DevTools、Lombok、Spring Configuration Processor、SpringWeb 和 Spring Data Redis 依赖。</p><h3 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h3><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@Bean</span></span><br><span class="line"><span class="keyword">@ConditionalOnMissingBean</span>(        <span class="comment">//可以自己定义一个 redisTemplate 来替换默认的。</span></span><br><span class="line">    name = &#123;<span class="string">&quot;redisTemplate&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">//注意：默认的 RedisTemplate 没有进行过多的设置，redis 对象是一定要进行序列化的。</span></span><br><span class="line"><span class="comment">//两个泛型都是 Object 的类型，需要强制转换为 &lt;String, Object&gt;</span></span><br><span class="line"><span class="keyword">@ConditionalOnSingleCandidate</span>(RedisConnectionFactory.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;</span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; <span class="keyword">template</span> = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">    <span class="keyword">template</span>.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">template</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于 String 是 redis 中最常用的类型，所以单独配置一个 bean。</span></span><br><span class="line"><span class="keyword">@Bean</span></span><br><span class="line"><span class="keyword">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">@ConditionalOnSingleCandidate</span>(RedisConnectionFactory.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> StringRedisTemplate stringRedisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;</span><br><span class="line">    StringRedisTemplate <span class="keyword">template</span> = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">    <span class="keyword">template</span>.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">template</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.<span class="keyword">annotation</span>.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBootRedisApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">        <span class="comment">//常用的方法可以直接通过 redisTemplate 对象操作，比如事务和 CRUD。</span></span><br><span class="line">        <span class="comment">//获取 redis 的连接对象</span></span><br><span class="line">        RedisConnection redisConnection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">        redisConnection.flushDb();</span><br><span class="line">        <span class="comment">//opsForValue：操作 String 类型</span></span><br><span class="line">        <span class="comment">//opsForList：操作 List 类型</span></span><br><span class="line">        <span class="comment">//其它数据类型类似就不多说了</span></span><br><span class="line">        redisTemplate.opsForValue().<span class="keyword">set</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;redis&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().<span class="keyword">set</span>(<span class="string">&quot;hello2&quot;</span>, <span class="string">&quot;世界&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(redisTemplate.opsForValue().<span class="keyword">get</span>(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">        System.<span class="keyword">out</span>.println(redisTemplate.opsForValue().<span class="keyword">get</span>(<span class="string">&quot;hello2&quot;</span>)); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 redis 世界</span></span><br></pre></td></tr></table></figure><p>可以从结果看出，在 IDEA 中显示是正常的，我们去连接一个 redis 的客户端进行查看。<img data-src="/images/redis-expound06.md-0.png"></p><p>可以从上图看出，实际存储在 redis 中的是进行编码后的数据。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RedisTemplate 类</span></span><br><span class="line"><span class="keyword">public</span> void afterPropertiesSet() &#123;</span><br><span class="line">    <span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line">    boolean defaultUsed = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.defaultSerializer == <span class="literal">null</span>) &#123;        <span class="comment">//当未配置序列化时，默认使用的是 jdk 序列化。开发中可能会使用到 json 序列化。</span></span><br><span class="line">        <span class="keyword">this</span>.defaultSerializer = new JdkSerializationRedisSerializer(<span class="keyword">this</span>.classLoader != <span class="literal">null</span> ? <span class="keyword">this</span>.classLoader : <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面是键和值、hash 键和值的序列化</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.enableDefaultSerializer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.keySerializer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.keySerializer = <span class="keyword">this</span>.defaultSerializer;</span><br><span class="line">            defaultUsed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.valueSerializer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.valueSerializer = <span class="keyword">this</span>.defaultSerializer;</span><br><span class="line">            defaultUsed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.hashKeySerializer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hashKeySerializer = <span class="keyword">this</span>.defaultSerializer;</span><br><span class="line">            defaultUsed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.hashValueSerializer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hashValueSerializer = <span class="keyword">this</span>.defaultSerializer;</span><br><span class="line">            defaultUsed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写自己的-RedisTemplete"><a href="#编写自己的-RedisTemplete" class="headerlink" title="编写自己的 RedisTemplete"></a>编写自己的 RedisTemplete</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.<span class="keyword">Configuration</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.<span class="keyword">connection</span>.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Configuration</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> RedisConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="built_in">public</span> RedisTemplate&lt;String, <span class="keyword">Object</span>&gt; redisTemplate(RedisConnectionFactory factory) &#123;</span><br><span class="line">        //为了自己开发方便，一般直接使用&lt;String, <span class="keyword">Object</span>&gt;</span><br><span class="line">        RedisTemplate&lt;String, <span class="keyword">Object</span>&gt; template = <span class="built_in">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="keyword">template</span>.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        //jackson 的序列化方式</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="built_in">new</span> Jackson2JsonRedisSerializer(<span class="keyword">Object</span>.<span class="keyword">class</span>);</span><br><span class="line">        ObjectMapper om = <span class="built_in">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.<span class="keyword">ALL</span>, JsonAutoDetect.Visibility.<span class="keyword">ANY</span>);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.<span class="keyword">As</span>.WRAPPER_ARRAY);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        //String 的序列化方式</span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="built_in">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        //键值使用 String 的序列化方式</span><br><span class="line">        <span class="keyword">template</span>.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="keyword">template</span>.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        //hash 的键值使用 jackson 的序列化方式</span><br><span class="line">        <span class="keyword">template</span>.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="keyword">template</span>.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">template</span>.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">template</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二次测试"><a href="#二次测试" class="headerlink" title="二次测试"></a>二次测试</h3><p>再运行一次上面的测试方法。然后在 redis 客户端中查看结果。<img data-src="/images/redis-expound06.md-1.png"></p><h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> final <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">expire</span>(<span class="params"><span class="built_in">String</span> key, long time</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键 不能为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">getExpire</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 存在 false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">hasKey</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 可以传一个或多个值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">&quot;unchecked&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">del</span>(<span class="params"><span class="built_in">String</span>... key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(Arrays.asList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Object</span> <span class="function"><span class="title">get</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">set</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span> value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time  时间(秒) time 要大于0 如果 time 小于等于0将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">set</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span> value, long time</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">incr</span>(<span class="params"><span class="built_in">String</span> key, long delta</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">decr</span>(<span class="params"><span class="built_in">String</span> key, long delta</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键 不能为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item 项 不能为 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Object</span> <span class="function"><span class="title">hget</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">String</span> item</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 hashKey 对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Map</span>&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt; <span class="function"><span class="title">hmget</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">hmset</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; map</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">hmset</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; map, long time</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张 hash 表中放入数据，如果不存在将创建。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">hset</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">String</span> item, <span class="built_in">Object</span> value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张 hash 表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time  时间(秒) 注意:如果已存在的 hash 表有时间,这里将会替换原有的时间。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">hset</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">String</span> item, <span class="built_in">Object</span> value, long time</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 hash 表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键 不能为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item 项 可以使多个 不能为 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">hdel</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span>... item</span>)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断 hash 表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键 不能为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item 项 不能为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 存在 false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">hHasKey</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">String</span> item</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash 递增 如果不存在，就会创建一个，并把新增后的值返回。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> double <span class="function"><span class="title">hincr</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">String</span> item, double by</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> double <span class="function"><span class="title">hdecr</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">String</span> item, double by</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 key 获取 Set 中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Set</span>&lt;<span class="built_in">Object</span>&gt; <span class="function"><span class="title">sGet</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 value 从一个 set 中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 存在 false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">sHasKey</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span> value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入 set 缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">sSet</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span>... values</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 set 数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">sSetAndTime</span>(<span class="params"><span class="built_in">String</span> key, long time, <span class="built_in">Object</span>... values</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 set 缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">sGetSetSize</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为 value 的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">setRemove</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span>... values</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 list 缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>end   结束0到-1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">Object</span>&gt; <span class="function"><span class="title">lGet</span>(<span class="params"><span class="built_in">String</span> key, long start, long end</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 list 缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">lGetListSize</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引获取 list 中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Object</span> <span class="function"><span class="title">lGetIndex</span>(<span class="params"><span class="built_in">String</span> key, long index</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 list 放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">lSet</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span> value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 list 放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">lSet</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span> value, long time</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 list 放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">lSet</span>(<span class="params"><span class="built_in">String</span> key, List&lt;<span class="built_in">Object</span>&gt; value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 list 放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">lSet</span>(<span class="params"><span class="built_in">String</span> key, List&lt;<span class="built_in">Object</span>&gt; value, long time</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改 list 中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">lUpdateIndex</span>(<span class="params"><span class="built_in">String</span> key, long index, <span class="built_in">Object</span> value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除 N 个值为 value 的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">lRemove</span>(<span class="params"><span class="built_in">String</span> key, long count, <span class="built_in">Object</span> value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Jedis&quot;&gt;&lt;a href=&quot;#Jedis&quot; class=&quot;headerlink&quot; title=&quot;Jedis&quot;&gt;&lt;/a&gt;Jedis&lt;/h2&gt;&lt;p&gt;Jedis 是 Redis 官方推荐的 Java 连接开发工具，使用 Java 操作 Redis 的中间件。&lt;/p&gt;
&lt;h3 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--jedis 依赖--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;redis.clients&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jedis&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.6.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--fastjson 依赖--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.76&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;注意：需要先在 Windows 下载 Redis，并运行 redis-server.exe 文件。当然也能进行远程连接服务器。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(五)</title>
    <link href="http://guest997.tk/2021/10/01/redis-expound05/"/>
    <id>http://guest997.tk/2021/10/01/redis-expound05/</id>
    <published>2021-10-01T02:03:01.000Z</published>
    <updated>2021-11-09T03:19:11.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>事务本质：一组命令的集合。Redis 事务不具有隔离性和原子性，其具有的是一次性、顺序性和排它性。</strong></p><p>Redis 执行事务步骤：</p><ul><li>  开启事务（multi）</li><li>  命令入队</li><li>  执行事务（exec）</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">multi </span>            <span class="comment">#开启事务</span></span><br><span class="line"><span class="keyword">discard </span>           <span class="comment">#取消事务，之前的命令全都不会执行。</span></span><br><span class="line">exec            <span class="comment">#执行事务</span></span><br></pre></td></tr></table></figure><h3 id="正常事务"><a href="#正常事务" class="headerlink" title="正常事务"></a>正常事务</h3><p><img data-src="/images/redis-expound05.md-0.png"></p><h3 id="事务编译时异常（事务中所有的命令都不会被执行）"><a href="#事务编译时异常（事务中所有的命令都不会被执行）" class="headerlink" title="事务编译时异常（事务中所有的命令都不会被执行）"></a>事务编译时异常（事务中所有的命令都不会被执行）</h3><p><img data-src="/images/redis-expound05.md-1.png"></p><h3 id="事务运行时异常（错误命令抛出异常，其它命令正常执行）"><a href="#事务运行时异常（错误命令抛出异常，其它命令正常执行）" class="headerlink" title="事务运行时异常（错误命令抛出异常，其它命令正常执行）"></a>事务运行时异常（错误命令抛出异常，其它命令正常执行）</h3><p><img data-src="/images/redis-expound05.md-2.png"></p><h2 id="实现乐观锁"><a href="#实现乐观锁" class="headerlink" title="实现乐观锁"></a>实现乐观锁</h2><p>举例：一个线程去操作同步资源的时候，不需要提前获取到锁，而是可以直接去读取同步资源，并且在自己的线程内进行计算。当它计算完毕之后，准备更新同步资源之前，会先判断这个资源是否已经被其他线程所修改过。如果这个时候同步资源没有被其他线程修改更新，也就是说此时的数据和线程 A 最开始拿到的数据是一致的话，那么此时线程 A 就会去更新同步资源，完成修改的过程。而假设此时的同步资源已经被其它线程修改更新了，线程 A 会发现此时的数据已经和最开始拿到的数据不一致了，那么线程 A 不会继续修改该同步资源，而是会根据不同的业务逻辑去选择报错或者重试。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#模拟支付</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#模拟第一个线程</span></span><br><span class="line"><span class="keyword">set</span> money <span class="number">100</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">out</span> <span class="number">0</span></span><br><span class="line">watch money            <span class="meta">#监视 money 属性（使用 watch 就可以当做是 redis 的乐观锁操作）</span></span><br><span class="line">multi</span><br><span class="line">decrby money <span class="number">10</span></span><br><span class="line">incrby <span class="keyword">out</span> <span class="number">10</span>        <span class="meta">#到这为止，先不执行 exec 命令。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#开启一个新的客户端模拟第二个线程</span></span><br><span class="line">redis-<span class="keyword">cli</span> -p <span class="number">6379</span></span><br><span class="line"><span class="keyword">set</span> money <span class="number">200</span>        <span class="meta">#将 money 属性值进行了修改</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#返回第一个线程</span></span><br><span class="line">exec        <span class="meta">#另外一个线程在之前已经修改了 money 属性值。这个时候再执行 exec 命令，就会导致事务执行失败。</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound05.md-3.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;事务本质：一组命令的集合。Redis 事务不具有隔离性和原子性，其具有的是一次性、顺序性和排它性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redis 执行事务步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  开启事务（multi）&lt;/li&gt;
&lt;li&gt;  命令入队&lt;/li&gt;
&lt;li&gt;  执行事务（exec）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;multi &lt;/span&gt;            &lt;span class=&quot;comment&quot;&gt;#开启事务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;discard &lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;#取消事务，之前的命令全都不会执行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exec            &lt;span class=&quot;comment&quot;&gt;#执行事务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
</feed>
