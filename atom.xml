<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guest997</title>
  
  <subtitle>一个在互联网下的小小 Coder</subtitle>
  <link href="http://guest997.tk/atom.xml" rel="self"/>
  
  <link href="http://guest997.tk/"/>
  <updated>2021-11-09T03:18:59.989Z</updated>
  <id>http://guest997.tk/</id>
  
  <author>
    <name>Guest997</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticSearch 详解(五)</title>
    <link href="http://guest997.tk/2021/10/25/es-expound05/"/>
    <id>http://guest997.tk/2021/10/25/es-expound05/</id>
    <published>2021-10-25T08:36:18.000Z</published>
    <updated>2021-11-09T03:18:59.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="京东搜索实战"><a href="#京东搜索实战" class="headerlink" title="京东搜索实战"></a>京东搜索实战</h2><p>项目源码会放在我的网盘 <strong>学习-ElasticSearch</strong> 目录下的 <strong>es-jingdong</strong> 压缩包。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>新建 SpringBoot 项目，导入 Spring Boot DevTools、Lombok、Spring Configuration Processor、SpringWeb、Thymeleaf 和 Spring Data ElasticSearch 依赖。最后再手动添加 fastjson 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面跳转控制器"><a href="#页面跳转控制器" class="headerlink" title="页面跳转控制器"></a>页面跳转控制器</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;<span class="meta-string">&quot;/&quot;</span>, <span class="meta-string">&quot;/index&quot;</span>&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String index() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES-配置类"><a href="#ES-配置类" class="headerlink" title="ES 配置类"></a>ES 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchClientConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h3><h4 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.14.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="POJO-层"><a href="#POJO-层" class="headerlink" title="POJO 层"></a>POJO 层</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> img;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写爬虫工具类"><a href="#编写爬虫工具类" class="headerlink" title="编写爬虫工具类"></a>编写爬虫工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Content;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlParseUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Content&gt; <span class="title">parseJD</span><span class="params">(String keyword)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;https://search.jd.com/Search?keyword=&quot;</span> + keyword + <span class="string">&quot;&amp;enc=utf-8&quot;</span>;</span><br><span class="line">        <span class="comment">//解析网页，这里的 Document 对象就是 js 中讲到的浏览器文档对象。</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> URL(url), <span class="number">30000</span>);</span><br><span class="line">        <span class="comment">//下面的方法都是为了获取搜索页面的标签中的数据并封装成 Content 对象，再将所有的对象放入 List 中。</span></span><br><span class="line">        Element element = document.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line">        Elements elements = element.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        List&lt;Content&gt; contents = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Element el : elements) &#123;</span><br><span class="line">            String img = el.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;data-lazy-img&quot;</span>);    <span class="comment">//获取标签属性值</span></span><br><span class="line">            String price = el.getElementsByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();       <span class="comment">//获取标签文本值</span></span><br><span class="line">            String title = el.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            contents.add(<span class="keyword">new</span> Content(img, price, title));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> contents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试是否能正常爬取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HtmlParseUtil().parseJD(<span class="string">&quot;java&quot;</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Content;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.utils.HtmlParseUtil;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">parseContent</span><span class="params">(String keyword)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//记得先在 kibana 创建索引：PUT /jd_goods</span></span><br><span class="line">        List&lt;Content&gt; contents = <span class="keyword">new</span> HtmlParseUtil().parseJD(keyword);</span><br><span class="line">        <span class="comment">//把查询到的多条数据放入 es 中</span></span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">&quot;2m&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Content content : contents) &#123;</span><br><span class="line">            bulkRequest.add(<span class="keyword">new</span> IndexRequest(<span class="string">&quot;jd_goods&quot;</span>).source(JSON.toJSONString(content), XContentType.JSON));</span><br><span class="line">        &#125;</span><br><span class="line">        BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> !bulk.hasFailures();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller-层"><a href="#Controller-层" class="headerlink" title="Controller 层"></a>Controller 层</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.service.ContentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.<span class="keyword">annotation</span>.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ContentService contentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">&quot;/parse/&#123;keyword&#125;&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Boolean</span> parse(<span class="meta">@PathVariable(<span class="meta-string">&quot;keyword&quot;</span>)</span> String keyword) throws Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> contentService.parseContent(keyword);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>访问 localhost:9090/parse/java，发现页面出现了 <strong>true</strong>。然后在 kibana 中查看是否成功添加了数据。（post /jd_goods/_doc/_search）</p><h3 id="分页实现"><a href="#分页实现" class="headerlink" title="分页实现"></a>分页实现</h3><p>前提是 es 中已经有足够多的数据了。</p><h4 id="Service-层-1"><a href="#Service-层-1" class="headerlink" title="Service 层"></a>Service 层</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Map&lt;String, Object&gt;&gt; search<span class="constructor">Page(String <span class="params">keyword</span>, <span class="params">int</span> <span class="params">pageNo</span>, <span class="params">int</span> <span class="params">pageSize</span>)</span> throws IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (pageNo &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        pageNo = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//条件搜索</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> <span class="constructor">SearchRequest(<span class="string">&quot;jd_goods&quot;</span>)</span>;</span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> <span class="constructor">SearchSourceBuilder()</span>;</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    sourceBuilder.from(pageNo);</span><br><span class="line">    sourceBuilder.size(pageSize);</span><br><span class="line">    <span class="comment">//精准匹配</span></span><br><span class="line">    TermQueryBuilder termQueryBuilder = <span class="module-access"><span class="module"><span class="identifier">QueryBuilders</span>.</span></span>term<span class="constructor">Query(<span class="string">&quot;title&quot;</span>, <span class="params">keyword</span>)</span>;</span><br><span class="line">    sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(<span class="keyword">new</span> <span class="constructor">TimeValue(60, TimeUnit.SECONDS)</span>);</span><br><span class="line">    <span class="comment">//执行搜索</span></span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//解析结果</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : searchResponse.get<span class="constructor">Hits()</span>) &#123;</span><br><span class="line">        <span class="built_in">list</span>.add(documentFields.get<span class="constructor">SourceAsMap()</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller-层-1"><a href="#Controller-层-1" class="headerlink" title="Controller 层"></a>Controller 层</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@GetMapping</span>(<span class="string">&quot;/search/&#123;keyword&#125;/&#123;pageNo&#125;/&#123;pageSize&#125;&quot;</span>)</span><br><span class="line">public List&lt;Map&lt;String, Object&gt;&gt; search(<span class="variable">@PathVariable</span>(<span class="string">&quot;keyword&quot;</span>) String keyword, <span class="variable">@PathVariable</span>(<span class="string">&quot;pageNo&quot;</span>) int pageNo, <span class="variable">@PathVariable</span>(<span class="string">&quot;pageSize&quot;</span>) int pageSize) throws IOException &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">contentService</span><span class="selector-class">.searchPage</span>(keyword, pageNo, pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>访问 localhost:9090/search/java/1/20，发现页面出现了很多条数据，说明成功了。</p><h3 id="搜索高亮实现"><a href="#搜索高亮实现" class="headerlink" title="搜索高亮实现"></a>搜索高亮实现</h3><h4 id="Service-层-2"><a href="#Service-层-2" class="headerlink" title="Service 层"></a>Service 层</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;&gt; searchPageHighlight(<span class="keyword">String</span> keyword, <span class="built_in">int</span> pageNo, <span class="built_in">int</span> pageSize) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (pageNo &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        pageNo = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//条件搜索</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;jd_goods&quot;</span>);</span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    sourceBuilder.from(pageNo);</span><br><span class="line">    sourceBuilder.<span class="built_in">size</span>(pageSize);</span><br><span class="line">    <span class="comment">//精准匹配</span></span><br><span class="line">    TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, keyword);</span><br><span class="line">    sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">    <span class="comment">//高亮</span></span><br><span class="line">    HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">    highlightBuilder.field(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">    highlightBuilder.requireFieldMatch(<span class="keyword">false</span>);      <span class="comment">//是否多个关键词高亮显示</span></span><br><span class="line">    highlightBuilder.preTags(<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>);</span><br><span class="line">    highlightBuilder.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">    sourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">    <span class="comment">//执行搜索</span></span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//解析结果</span></span><br><span class="line">    ArrayList&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">        HighlightField title = highlightFields.<span class="built_in">get</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; sourceAsMap = hit.getSourceAsMap();     <span class="comment">//原来的结果</span></span><br><span class="line">        <span class="comment">//解析高亮的字段，将原来的字段换为高亮的字段。</span></span><br><span class="line">        <span class="keyword">if</span> (title != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Text[] fragments = title.fragments();</span><br><span class="line">            <span class="keyword">String</span> n_title = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (Text <span class="built_in">text</span> : fragments) &#123;</span><br><span class="line">                n_title += <span class="built_in">text</span>;</span><br><span class="line">                sourceAsMap.put(<span class="string">&quot;title&quot;</span>, n_title);</span><br><span class="line">            &#125;</span><br><span class="line">            list.<span class="built_in">add</span>(sourceAsMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller-层-2"><a href="#Controller-层-2" class="headerlink" title="Controller 层"></a>Controller 层</h4><p>直接将分页中的修改一下即可。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@GetMapping</span>(<span class="string">&quot;/search/&#123;keyword&#125;/&#123;pageNo&#125;/&#123;pageSize&#125;&quot;</span>)</span><br><span class="line">public List&lt;Map&lt;String, Object&gt;&gt; search(<span class="variable">@PathVariable</span>(<span class="string">&quot;keyword&quot;</span>) String keyword, <span class="variable">@PathVariable</span>(<span class="string">&quot;pageNo&quot;</span>) int pageNo, <span class="variable">@PathVariable</span>(<span class="string">&quot;pageSize&quot;</span>) int pageSize) throws IOException &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">contentService</span><span class="selector-class">.searchPageHighlight</span>(keyword, pageNo, pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><p>访问 localhost:9090/search/java/1/20，发现页面出现了很多条数据，并且 java 的字样都加了 span 标签，就说明成功了。</p><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>使用了 vue 和 axios，具体的代码可以到源码中去看。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;京东搜索实战&quot;&gt;&lt;a href=&quot;#京东搜索实战&quot; class=&quot;headerlink&quot; title=&quot;京东搜索实战&quot;&gt;&lt;/a&gt;京东搜索实战&lt;/h2&gt;&lt;p&gt;项目源码会放在我的网盘 &lt;strong&gt;学习-ElasticSearch&lt;/strong&gt; 目录下的 &lt;strong&gt;es-jingdong&lt;/strong&gt; 压缩包。&lt;/p&gt;
&lt;h3 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h3&gt;&lt;p&gt;新建 SpringBoot 项目，导入 Spring Boot DevTools、Lombok、Spring Configuration Processor、SpringWeb、Thymeleaf 和 Spring Data ElasticSearch 依赖。最后再手动添加 fastjson 依赖。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.78&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="elasticsearch" scheme="http://guest997.tk/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 详解(四)</title>
    <link href="http://guest997.tk/2021/10/23/es-expound04/"/>
    <id>http://guest997.tk/2021/10/23/es-expound04/</id>
    <published>2021-10-23T09:09:33.000Z</published>
    <updated>2021-11-09T03:18:59.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整合-SpringBoot-框架"><a href="#整合-SpringBoot-框架" class="headerlink" title="整合 SpringBoot 框架"></a>整合 SpringBoot 框架</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>新建 SpringBoot 项目，导入 Spring Boot DevTools、Lombok、Spring Configuration Processor、SpringWeb 和 Spring Data ElasticSearch 依赖。最后再手动添加 fastjson 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ES-配置类"><a href="#ES-配置类" class="headerlink" title="ES 配置类"></a>ES 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchClientConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootEsApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建索引请求</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;guest997&quot;</span>);</span><br><span class="line">        <span class="comment">//客户端执行请求，请求后获得响应。</span></span><br><span class="line">        CreateIndexResponse createIndexResponse = restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(createIndexResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/es-expound04.md-0.png"></p><h4 id="判断索引是否存在"><a href="#判断索引是否存在" class="headerlink" title="判断索引是否存在"></a>判断索引是否存在</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">existsIndex</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取索引请求</span></span><br><span class="line">    GetIndexRequest request = <span class="keyword">new</span> <span class="built_in">GetIndexRequest</span>(<span class="string">&quot;guest997&quot;</span>);</span><br><span class="line">    <span class="comment">//客户端执行请求，请求后获得响应。</span></span><br><span class="line">    <span class="keyword">boolean</span> exists = restHighLevelClient.<span class="built_in">indices</span>().<span class="built_in">exists</span>(request, RequestOptions.<span class="literal">DEFAULT</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(exists);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 true</span></span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">    <span class="comment">//删除索引请求</span></span><br><span class="line">    DeleteIndexRequest request = <span class="keyword">new</span> <span class="built_in">DeleteIndexRequest</span>(<span class="string">&quot;guest997&quot;</span>);</span><br><span class="line">    <span class="comment">//客户端执行请求，请求后获得响应。</span></span><br><span class="line">    AcknowledgedResponse <span class="keyword">delete</span> = restHighLevelClient.<span class="built_in">indices</span>().<span class="built_in"><span class="keyword">delete</span></span>(request, RequestOptions.<span class="literal">DEFAULT</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">delete</span>.<span class="built_in">isAcknowledged</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 true</span></span><br></pre></td></tr></table></figure><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><h4 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void add<span class="constructor">Document()</span> throws IOException &#123;</span><br><span class="line">    User user = <span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest997&quot;</span>, 18)</span>;</span><br><span class="line">    IndexRequest indexRequest = <span class="keyword">new</span> <span class="constructor">IndexRequest(<span class="string">&quot;guest997_index&quot;</span>)</span>;</span><br><span class="line">    <span class="comment">//PUT /guest997_index/_doc/1</span></span><br><span class="line">    indexRequest.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    indexRequest.timeout(<span class="module-access"><span class="module"><span class="identifier">TimeValue</span>.</span></span>time<span class="constructor">ValueSeconds(1)</span>);</span><br><span class="line">    indexRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    <span class="comment">//将数据放入请求</span></span><br><span class="line">    indexRequest.source(<span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">user</span>)</span>, XContentType.JSON);</span><br><span class="line">    <span class="comment">//客户端执行请求，请求后获得响应。</span></span><br><span class="line">    IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//打印响应信息</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(indexResponse.<span class="keyword">to</span><span class="constructor">String()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(indexResponse.status<span class="literal">()</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">IndexResponse[index=guest997_index,type=_doc,id=1,version=1,result=created,seqNo=0,primaryTerm=1,shards=&#123;&quot;total&quot;:2,&quot;successful&quot;:1,&quot;failed&quot;:0&#125;]</span></span><br><span class="line"><span class="comment">CREATED</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="判断文档是否存在"><a href="#判断文档是否存在" class="headerlink" title="判断文档是否存在"></a>判断文档是否存在</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">existsDocument</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">    <span class="comment">//GET /guest997_index/_doc/1</span></span><br><span class="line">    GetRequest getRequest = <span class="keyword">new</span> <span class="built_in">GetRequest</span>(<span class="string">&quot;guest997_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">//关闭检索_source 和存储的字段，只需要判断是否存在，这样就提高了效率。</span></span><br><span class="line">    getRequest.<span class="built_in">fetchSourceContext</span>(<span class="keyword">new</span> <span class="built_in">FetchSourceContext</span>(<span class="literal">false</span>));</span><br><span class="line">    getRequest.<span class="built_in">storedFields</span>(<span class="string">&quot;_none_&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> exists = restHighLevelClient.<span class="built_in">exists</span>(getRequest, RequestOptions.<span class="literal">DEFAULT</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(exists);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 true</span></span><br></pre></td></tr></table></figure><h4 id="获取文档"><a href="#获取文档" class="headerlink" title="获取文档"></a>获取文档</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="type">void</span> getDocument() throws IOException &#123;</span><br><span class="line">    GetRequest getRequest = <span class="built_in">new</span> GetRequest(&quot;guest997_index&quot;, &quot;1&quot;);</span><br><span class="line">    GetResponse getResponse = restHighLevelClient.<span class="keyword">get</span>(getRequest, RequestOptions.<span class="keyword">DEFAULT</span>);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(getResponse.getSourceAsString());</span><br><span class="line">&#125;</span><br><span class="line">//结果为 &#123;&quot;age&quot;:<span class="number">18</span>,&quot;name&quot;:&quot;guest997&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void update<span class="constructor">Request()</span> throws IOException &#123;</span><br><span class="line">    <span class="comment">//POST /guest997_index/_doc/1/_update</span></span><br><span class="line">    UpdateRequest updateRequest = <span class="keyword">new</span> <span class="constructor">UpdateRequest(<span class="string">&quot;guest997_index&quot;</span>, <span class="string">&quot;1&quot;</span>)</span>;</span><br><span class="line">    updateRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest997&quot;</span>, 66)</span>;</span><br><span class="line">    <span class="comment">//将数据放入 doc 中，跟之前是一样的。</span></span><br><span class="line">    updateRequest.doc(<span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">user</span>)</span>, XContentType.JSON);</span><br><span class="line">    UpdateResponse updateResponse = restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(updateResponse.status<span class="literal">()</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 OK</span></span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteRequest</span><span class="params">()</span> throws IOException </span>&#123;</span><br><span class="line">    <span class="comment">//DELETE /guest997_index/_doc/1</span></span><br><span class="line">    DeleteRequest deleteRequest = <span class="keyword">new</span> <span class="built_in">DeleteRequest</span>(<span class="string">&quot;guest997_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    deleteRequest.<span class="built_in">timeout</span>(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    DeleteResponse deleteResponse = restHighLevelClient.<span class="built_in"><span class="keyword">delete</span></span>(deleteRequest, RequestOptions.<span class="literal">DEFAULT</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(deleteResponse.<span class="built_in">status</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 OK</span></span><br></pre></td></tr></table></figure><h4 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void test<span class="constructor">BulkRequest()</span> throws IOException &#123;</span><br><span class="line">    BulkRequest bulkRequest = <span class="keyword">new</span> <span class="constructor">BulkRequest()</span>;</span><br><span class="line">    bulkRequest.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest99701&quot;</span>, 18)</span>);</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest99702&quot;</span>, 19)</span>);</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest99703&quot;</span>, 20)</span>);</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest99704&quot;</span>, 21)</span>);</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="constructor">User(<span class="string">&quot;guest99705&quot;</span>, 22)</span>);</span><br><span class="line">    <span class="comment">//批量处理数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; userList.size<span class="literal">()</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//批量删除或修改也是能够在这实现的</span></span><br><span class="line">        bulkRequest.add(<span class="keyword">new</span> <span class="constructor">IndexRequest(<span class="string">&quot;guest997_index&quot;</span>)</span></span><br><span class="line">                .id(<span class="string">&quot;&quot;</span> + (i + <span class="number">1</span>))</span><br><span class="line">                .source(<span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">userList</span>.<span class="params">get</span>(<span class="params">i</span>)</span>), XContentType.JSON)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(bulk.has<span class="constructor">Failures()</span>);     <span class="comment">//是否执行失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 false</span></span><br></pre></td></tr></table></figure><h4 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Test</span></span><br><span class="line">void testSearch() throws IOException &#123;</span><br><span class="line">    SearchRequest searchRequest = new SearchRequest(<span class="string">&quot;guest997_index&quot;</span>);</span><br><span class="line">    <span class="regexp">//</span>查询条件可以使用 SearchSourceBuilder 来实现</span><br><span class="line">    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">    <span class="regexp">//</span>精确匹配</span><br><span class="line">    TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest99701&quot;</span>);</span><br><span class="line">    <span class="regexp">//</span>将 TermQueryBuilder 传给 SearchSourceBuilder，其它类似的还有 HighlightBuilder 和 MatchAllQueryBuilder 等，都是之前进行操作的命令。 </span><br><span class="line">    sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(new TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">    <span class="regexp">//</span>将数据放入请求</span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    <span class="regexp">//</span>客户端执行请求，请求后获得响应。</span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(JSON.toJSONString(searchResponse));</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : searchResponse.getHits()) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*结果为</span><br><span class="line">&#123;<span class="string">&quot;clusters&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;fragment&quot;</span><span class="symbol">:true</span>,<span class="string">&quot;skipped&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;successful&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;total&quot;</span><span class="symbol">:</span>0&#125;,<span class="string">&quot;failedShards&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;fragment&quot;</span><span class="symbol">:false</span>,<span class="string">&quot;hits&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;fragment&quot;</span><span class="symbol">:true</span>,<span class="string">&quot;hits&quot;</span><span class="symbol">:</span>[&#123;<span class="string">&quot;fields&quot;</span><span class="symbol">:</span>&#123;&#125;,<span class="string">&quot;fragment&quot;</span><span class="symbol">:false</span>,<span class="string">&quot;highlightFields&quot;</span><span class="symbol">:</span>&#123;&#125;,<span class="string">&quot;id&quot;</span><span class="symbol">:<span class="string">&quot;1&quot;</span></span>,<span class="string">&quot;matchedQueries&quot;</span><span class="symbol">:[]</span>,<span class="string">&quot;primaryTerm&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;rawSortValues&quot;</span><span class="symbol">:[]</span>,<span class="string">&quot;score&quot;</span><span class="symbol">:</span><span class="number">1.3862942</span>,<span class="string">&quot;seqNo&quot;</span><span class="symbol">:-</span><span class="number">2</span>,<span class="string">&quot;sortValues&quot;</span><span class="symbol">:[]</span>,<span class="string">&quot;sourceAsMap&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;name&quot;</span><span class="symbol">:<span class="string">&quot;guest99701&quot;</span></span>,<span class="string">&quot;age&quot;</span><span class="symbol">:</span><span class="number">18</span>&#125;,<span class="string">&quot;sourceAsString&quot;</span><span class="symbol">:<span class="string">&quot;&#123;\&quot;age\&quot;:18,\&quot;name\&quot;:\&quot;guest99701\&quot;&#125;&quot;</span></span>,<span class="string">&quot;sourceRef&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;fragment&quot;</span><span class="symbol">:true</span>&#125;,<span class="string">&quot;type&quot;</span><span class="symbol">:<span class="string">&quot;_doc&quot;</span></span>,<span class="string">&quot;version&quot;</span><span class="symbol">:-</span><span class="number">1</span>&#125;],<span class="string">&quot;maxScore&quot;</span><span class="symbol">:</span><span class="number">1.3862942</span>,<span class="string">&quot;totalHits&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;relation&quot;</span><span class="symbol">:<span class="string">&quot;EQUAL_TO&quot;</span></span>,<span class="string">&quot;value&quot;</span><span class="symbol">:</span><span class="number">1</span>&#125;&#125;,<span class="string">&quot;internalResponse&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;fragment&quot;</span><span class="symbol">:true</span>,<span class="string">&quot;numReducePhases&quot;</span><span class="symbol">:</span><span class="number">1</span>&#125;,<span class="string">&quot;numReducePhases&quot;</span><span class="symbol">:</span><span class="number">1</span>,<span class="string">&quot;profileResults&quot;</span><span class="symbol">:</span>&#123;&#125;,<span class="string">&quot;shardFailures&quot;</span><span class="symbol">:[]</span>,<span class="string">&quot;skippedShards&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;successfulShards&quot;</span><span class="symbol">:</span><span class="number">1</span>,<span class="string">&quot;timedOut&quot;</span><span class="symbol">:false</span>,<span class="string">&quot;took&quot;</span><span class="symbol">:</span>&#123;<span class="string">&quot;days&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;daysFrac&quot;</span><span class="symbol">:</span><span class="number">6.944444444444444E-8</span>,<span class="string">&quot;hours&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;hoursFrac&quot;</span><span class="symbol">:</span><span class="number">1.6666666666666667E-6</span>,<span class="string">&quot;micros&quot;</span><span class="symbol">:</span><span class="number">6000</span>,<span class="string">&quot;microsFrac&quot;</span><span class="symbol">:</span><span class="number">6000.0</span>,<span class="string">&quot;millis&quot;</span><span class="symbol">:</span><span class="number">6</span>,<span class="string">&quot;millisFrac&quot;</span><span class="symbol">:</span><span class="number">6.0</span>,<span class="string">&quot;minutes&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;minutesFrac&quot;</span><span class="symbol">:</span><span class="number">1.0E-4</span>,<span class="string">&quot;nanos&quot;</span><span class="symbol">:</span><span class="number">6000000</span>,<span class="string">&quot;seconds&quot;</span><span class="symbol">:</span>0,<span class="string">&quot;secondsFrac&quot;</span><span class="symbol">:</span>0.006,<span class="string">&quot;stringRep&quot;</span><span class="symbol">:<span class="string">&quot;6ms&quot;</span></span>&#125;,<span class="string">&quot;totalShards&quot;</span><span class="symbol">:</span><span class="number">1</span>&#125;</span><br><span class="line">&#123;name=guest99701, age=<span class="number">18</span>&#125;</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;整合-SpringBoot-框架&quot;&gt;&lt;a href=&quot;#整合-SpringBoot-框架&quot; class=&quot;headerlink&quot; title=&quot;整合 SpringBoot 框架&quot;&gt;&lt;/a&gt;整合 SpringBoot 框架&lt;/h2&gt;&lt;h3 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h3&gt;&lt;p&gt;新建 SpringBoot 项目，导入 Spring Boot DevTools、Lombok、Spring Configuration Processor、SpringWeb 和 Spring Data ElasticSearch 依赖。最后再手动添加 fastjson 依赖。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.78&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;ES-配置类&quot;&gt;&lt;a href=&quot;#ES-配置类&quot; class=&quot;headerlink&quot; title=&quot;ES 配置类&quot;&gt;&lt;/a&gt;ES 配置类&lt;/h3&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="elasticsearch" scheme="http://guest997.tk/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 详解(三)</title>
    <link href="http://guest997.tk/2021/10/19/es-expound03/"/>
    <id>http://guest997.tk/2021/10/19/es-expound03/</id>
    <published>2021-10-19T04:09:36.000Z</published>
    <updated>2021-11-09T03:18:57.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本-RESTful-命令"><a href="#基本-RESTful-命令" class="headerlink" title="基本 RESTful 命令"></a>基本 RESTful 命令</h2><p>method</p><p>url 地址</p><p>描述</p><p>PUT</p><p>localhost:9200/索引名/类型/文档 id</p><p>创建文档（指定文档 id）</p><p>POST</p><p>localhost:9200/索引名/类型</p><p>创建文档（随机文档 id）</p><p>POST</p><p>localhost:9200/索引名/类型/文档 id/_update</p><p>修改文档</p><p>DELETE</p><p>localhost:9200/索引名/类型/文档 id</p><p>删除文档</p><p>GET</p><p>localhost:9200/索引名/类型/文档 id</p><p>查询文档通过文档 id</p><p>POST</p><p>localhost:9200/索引名/类型/_search</p><p>查询所有数据</p><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p><img data-src="/images/es-expound03.md-0.png"></p><p><img data-src="/images/es-expound03.md-1.png"></p><h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><p><img data-src="/images/es-expound03.md-2.png"></p><p><img data-src="/images/es-expound03.md-3.png"></p><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><p><img data-src="/images/es-expound03.md-4.png"></p><h2 id="创建并查看文档"><a href="#创建并查看文档" class="headerlink" title="创建并查看文档"></a>创建并查看文档</h2><p><img data-src="/images/es-expound03.md-5.png"></p><h2 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h2><p><img data-src="/images/es-expound03.md-6.png"></p><p><img data-src="/images/es-expound03.md-7.png"></p><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><p><img data-src="/images/es-expound03.md-8.png"></p><h2 id="简单的条件查询"><a href="#简单的条件查询" class="headerlink" title="简单的条件查询"></a>简单的条件查询</h2><p><img data-src="/images/es-expound03.md-9.png"></p><h2 id="复杂的查询操作"><a href="#复杂的查询操作" class="headerlink" title="复杂的查询操作"></a>复杂的查询操作</h2><h3 id="query-match"><a href="#query-match" class="headerlink" title="query-match"></a>query-match</h3><p><img data-src="/images/es-expound03.md-10.png"></p><p><img data-src="/images/es-expound03.md-11.png"></p><h3 id="query-term"><a href="#query-term" class="headerlink" title="query-term"></a>query-term</h3><p>match 在匹配时会对所查找的关键词进行分词，然后按分词匹配查找，而 term 会直接对关键词进行查找。一般模糊查找的时候多用 match，而精确查找时可以使用 term。</p><p><img data-src="/images/es-expound03.md-12.png"></p><h3 id="source"><a href="#source" class="headerlink" title="_source"></a>_source</h3><p><img data-src="/images/es-expound03.md-13.png"></p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p><img data-src="/images/es-expound03.md-14.png"></p><h3 id="from-size"><a href="#from-size" class="headerlink" title="from size"></a>from size</h3><p><img data-src="/images/es-expound03.md-15.png"></p><h3 id="query-bool-must"><a href="#query-bool-must" class="headerlink" title="query-bool-must"></a>query-bool-must</h3><p><img data-src="/images/es-expound03.md-16.png"></p><p>还有个 must_not 属性，与 must 条件想法，它是查询不符合条件的结果。</p><h3 id="query-bool-should"><a href="#query-bool-should" class="headerlink" title="query-bool-should"></a>query-bool-should</h3><p><img data-src="/images/es-expound03.md-17.png"></p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><img data-src="/images/es-expound03.md-18.png"></p><h3 id="highlight-fields"><a href="#highlight-fields" class="headerlink" title="highlight-fields"></a>highlight-fields</h3><p><img data-src="/images/es-expound03.md-19.png"></p><p><img data-src="/images/es-expound03.md-20.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基本-RESTful-命令&quot;&gt;&lt;a href=&quot;#基本-RESTful-命令&quot; class=&quot;headerlink&quot; title=&quot;基本 RESTful 命令&quot;&gt;&lt;/a&gt;基本 RESTful 命令&lt;/h2&gt;&lt;p&gt;method&lt;/p&gt;
&lt;p&gt;url 地址&lt;/p&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;p&gt;PUT&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="elasticsearch" scheme="http://guest997.tk/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 详解(二)</title>
    <link href="http://guest997.tk/2021/10/17/es-expound02/"/>
    <id>http://guest997.tk/2021/10/17/es-expound02/</id>
    <published>2021-10-17T02:10:02.000Z</published>
    <updated>2021-11-09T03:17:58.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>elasticsearch 是面向文档的关系行数据库，在 elasticsearch 中一切都是 JSON。elasticsearch（集群）中可以包含多个索引（数据库），每个索引中可以包含多个类型（表），每个类型下又包含多个文档（行），每个文档中又包含多个字段（列）。</p><p><strong>Relational DB</strong></p><p><strong>Elasticsearch</strong></p><p>数据库（database）</p><p>索引（indexes）</p><p>表（tables）</p><p>文档类型（types）</p><p>行（rows）</p><p>文档（documents）</p><p>列（columns）</p><p>字段（fields）</p><h3 id="物理设计"><a href="#物理设计" class="headerlink" title="物理设计"></a>物理设计</h3><p>elasticsearch 在后台把每个索引划分成多个分片，每个分片可以在集群中的不同服务器间迁移。</p><h3 id="逻辑设计"><a href="#逻辑设计" class="headerlink" title="逻辑设计"></a>逻辑设计</h3><p>一个索引类型中，包含多个文档，比如说文档1和文档2。 当我们索引一个文档时，可以通过这样的一个顺序找到它：索引 -&gt; 类型 -&gt; 文档 ID，通过这个组合我们就能索引到某个具体的文档。注意：ID 不必是整数，实际上它是个字符串。</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>索引数据的最小单位是文档，elasticsearch 中的文档有几个特点：</p><ul><li>  一个文档中同时包含字段和对应的值，也就是同时包含 key:value。</li><li>  一个文档中能够包含自文档，复杂的逻辑实体就是这么来的。</li><li>  文档不依赖预先定义的模型。关系型数据库中，需要提前定义字段才能使用。在 elasticsearch 中，对于字段是非常灵活的，有时候我们可以忽略该字段或者动态地添加一个新的字段。尽管我们可以随意地新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符串也可以是整形。elasticsearch 会保存字段和类型之间的映射及其它的设置。</li></ul><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>类型是文档的逻辑容器。类型中对于字段的定义称为映射，比如 name 映射为字符串类型。文档是无模型的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，elasticsearch 会自动得将新字段加入映射，但是这个字段不确定它是什么类型， 所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了。</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引是映射类型的容器，elasticsearch 中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其它设置，然后它们被存储到各个分片上。</p><p>一个集群至少有一个节点，而一个节点就是一个 elasricsearch 进程，节点可以有多个索引。默认的，如果你创建索引，将会有5个分片（primary shard，又称主分片）构成的，每一个主分片会有一个副本（replica shard，又称复制分片）。</p><p><img data-src="/images/es-expound02.md-0.png"></p><p>上图是一个有3个节点的集群，可以看到主分片和对应的复制分片分布在多个节点内，这样有利于某个节点挂掉了，数据也不至于丢失。实际上，一个分片是一个 Lucene 索引，一个包含倒排索引的文件目录，倒排索引的结构使得 elasticsearch 在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字。<strong>一个 elasticsearch 索引是由多个 Lucene 索引组成的。</strong></p><h4 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h4><p>倒排索引适用于快速的全文搜索，一个索引由文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。 例如，现在有两个文档，每个文档包含如下内容：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Study <span class="keyword">every</span> <span class="built_in">day</span>, good good up <span class="keyword">to</span> forever      <span class="comment">#文档1的内容</span></span><br><span class="line">To forever, study <span class="keyword">every</span> <span class="built_in">day</span>, good good up     <span class="comment">#文档2的内容</span></span><br></pre></td></tr></table></figure><p>为了创建倒排索引，我们首先要将每个文档拆分成独立的词或称为词条或者 tokens，然后创建一个包含所有不重复的词条的排序列表，然后列出每个词条出现在哪个文档。</p><p>term</p><p>doc_1</p><p>doc_2</p><p>Study</p><p>√</p><p>×</p><p>To</p><p>x</p><p>×</p><p>every</p><p>√</p><p>√</p><p>forever</p><p>√</p><p>√</p><p>day</p><p>√</p><p>√</p><p>study</p><p>×</p><p>√</p><p>good</p><p>√</p><p>√</p><p>to</p><p>√</p><p>×</p><p>up</p><p>√</p><p>√</p><p>现在，我们试图搜索 to forever，只需要查看包含每个词条的文档 score。</p><p>term</p><p>doc_1</p><p>doc_2</p><p>to</p><p>√</p><p>×</p><p>forever</p><p>√</p><p>√</p><p>total</p><p>2</p><p>1</p><p>两个文档都匹配，但是第一个文档比第二个匹配程度更高。如果没有别的条件，现在，这两个包含关键字的文档都将返回。相对于查找所有原始数据而言，查找倒排索引后的数据将会快的多。完全过滤掉无关的所有数据，提高效率。</p><h2 id="IK-分词器插件"><a href="#IK-分词器插件" class="headerlink" title="IK 分词器插件"></a>IK 分词器插件</h2><p>分词：即把一段文字划分成一个个的关键字，在搜索时会把信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个词，这显然是不符合我们的要求的，所以我们需要安装中文分词器 IK 来解决这个问题。IK 提供了两个分词算法：ik_smart 和 ik_max_word，其中 ik_smart 为最少切分，ik_max_word 为最细粒度切分。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>只需要下载并解压到 es 的 plugins 目录下，就会跟随 es 一起加载启动了。（可以查看 es 的启动过程，会有提示信息；也可以通过命令 elasticsearch-plugin list 查看加载的插件）</p><h3 id="测试两种分词算法"><a href="#测试两种分词算法" class="headerlink" title="测试两种分词算法"></a>测试两种分词算法</h3><h4 id="最少切分"><a href="#最少切分" class="headerlink" title="最少切分"></a>最少切分</h4><p><img data-src="/images/es-expound02.md-1.png"></p><h4 id="最细粒度切分"><a href="#最细粒度切分" class="headerlink" title="最细粒度切分"></a>最细粒度切分</h4><p><img data-src="/images/es-expound02.md-2.png"></p><h4 id="自定义词条"><a href="#自定义词条" class="headerlink" title="自定义词条"></a>自定义词条</h4><p>假如我们使用一个自定的词条：郑亿朋，看下效果如何。</p><p><img data-src="/images/es-expound02.md-3.png"></p><p>可以从结果看出，<strong>郑亿朋</strong> 被拆分开来了，这就需要我们自己添加词条到分词器的字典中。新建 myword.dic 文件到 ik 分词器目录下的 config 文件夹下。文件内容如下：（以后想加自定的词条只需要在下一行继续加即可）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">郑亿朋</span><br></pre></td></tr></table></figure><p>然后就是在 IKAnalyzer.cfg.xml 配置文件中加入自己的字典。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">entry</span> key=<span class="string">&quot;ext_dict&quot;</span>&gt;myword.dic&lt;/<span class="keyword">entry</span>&gt;</span><br></pre></td></tr></table></figure><p>最后重启 es 和 kibana 再进行测试。（可以查看 es 的启动过程，会有提示信息）</p><p><img data-src="/images/es-expound02.md-4.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;核心概念&quot;&gt;&lt;a href=&quot;#核心概念&quot; class=&quot;headerlink&quot; title=&quot;核心概念&quot;&gt;&lt;/a&gt;核心概念&lt;/h2&gt;&lt;p&gt;elasticsearch 是面向文档的关系行数据库，在 elasticsearch 中一切都是 JSON。elasticsearch（集群）中可以包含多个索引（数据库），每个索引中可以包含多个类型（表），每个类型下又包含多个文档（行），每个文档中又包含多个字段（列）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Relational DB&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Elasticsearch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库（database）&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="elasticsearch" scheme="http://guest997.tk/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 详解(一)</title>
    <link href="http://guest997.tk/2021/10/16/es-expound01/"/>
    <id>http://guest997.tk/2021/10/16/es-expound01/</id>
    <published>2021-10-16T02:36:50.000Z</published>
    <updated>2021-11-09T03:17:45.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h2><p>Lucene 是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎。Lucene 提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。</p><p>Lucene 是一个全文检索引擎的架构。那什么是全文搜索引擎？</p><p>全文搜索引擎是名副其实的搜索引擎，国外具代表性的有 Google、Fast/AllTheWeb、AltaVista、Inktomi、Teoma、WiseNut 等，国内著名的有百度（Baidu）。它们都是通过从互联网上提取的各个网站的信息（以网页文字为主）而建立的数据库中，检索与用户查询条件匹配的相关记录，然后按一定的排列顺序将结果返回给用户，因此他们是真正的搜索引擎。</p><p>从搜索结果来源的角度，全文搜索引擎又可细分为两种，一种是拥有自己的检索程序（Indexer），俗称“蜘蛛”（Spider）程序或“机器人”（Robot）程序，并自建网页数据库，搜索结果直接从自身的数据库中调用，如上面提到的 7 家引擎；另一种则是租用其他引擎的数据库，并按自定的格式排列搜索结果，如 Lycos 引擎。</p><h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><p>Elaticsearch 简称为 es，es 是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。es 使用 Java 开发并使用 Lucene 作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的 RESTful API 来隐藏 Lucene 的复杂性，从而让全文搜索变得简单。</p><h2 id="安装-ElasticSearch"><a href="#安装-ElasticSearch" class="headerlink" title="安装 ElasticSearch"></a>安装 ElasticSearch</h2><p>下载并解压完压缩包，运行 bin 目录下的 elasticsearch.bat 文件就能用了。<strong>注意：如果内存较小，需要到 config 目录下的 jvm.options 文件中根据电脑的配置修改下面的配置。</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#记得把配置前面的 # 去掉，要不然会作为注释是不生效的。</span><br><span class="line">-Xms4g        #最小运行内存</span><br><span class="line">-Xmx4g        #最大运行内存</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问 localhost:9200，出现如下页面就是成功了。</p><p><img data-src="/images/es-expound01.md-0.png"></p><h2 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h2><p>ELK 是 Elasticsearch、Logstash、Kibana 三大开源框架首字母大写简称。市面上也被称为 ElasticStack。Logstash 是 ELK 的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/elasticsearch/kafka 等）。Kibana 可以将 elasticsearch 的数据通过友好的页面展示出来，提供实时分析的功能。</p><p><img data-src="/images/es-expound01.md-1.png"></p><h2 id="安装-Kibana"><a href="#安装-Kibana" class="headerlink" title="安装 Kibana"></a>安装 Kibana</h2><p>同样的下载并解压完压缩包，运行 bin 目录下的 kibana.bat 文件就能用了。<strong>注意：Kibana 要和 es 版本一致。由于 Kibana 默认是英文语言，可以配置国际化改为中文，将 config 目录下的 kibana.yml 文件的最后一行改为 zh-CN。</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#记得把配置前面的 # 去掉，要不然会作为注释是不生效的。</span></span><br><span class="line"><span class="symbol">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>访问 localhost:5601，出现如下页面就是成功了。</p><p><img data-src="/images/es-expound01.md-2.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Lucene&quot;&gt;&lt;a href=&quot;#Lucene&quot; class=&quot;headerlink&quot; title=&quot;Lucene&quot;&gt;&lt;/a&gt;Lucene&lt;/h2&gt;&lt;p&gt;Lucene 是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎。Lucene 提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。&lt;/p&gt;
&lt;p&gt;Lucene 是一个全文检索引擎的架构。那什么是全文搜索引擎？&lt;/p&gt;
&lt;p&gt;全文搜索引擎是名副其实的搜索引擎，国外具代表性的有 Google、Fast/AllTheWeb、AltaVista、Inktomi、Teoma、WiseNut 等，国内著名的有百度（Baidu）。它们都是通过从互联网上提取的各个网站的信息（以网页文字为主）而建立的数据库中，检索与用户查询条件匹配的相关记录，然后按一定的排列顺序将结果返回给用户，因此他们是真正的搜索引擎。&lt;/p&gt;
&lt;p&gt;从搜索结果来源的角度，全文搜索引擎又可细分为两种，一种是拥有自己的检索程序（Indexer），俗称“蜘蛛”（Spider）程序或“机器人”（Robot）程序，并自建网页数据库，搜索结果直接从自身的数据库中调用，如上面提到的 7 家引擎；另一种则是租用其他引擎的数据库，并按自定的格式排列搜索结果，如 Lycos 引擎。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="elasticsearch" scheme="http://guest997.tk/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(九)</title>
    <link href="http://guest997.tk/2021/10/05/redis-expound09/"/>
    <id>http://guest997.tk/2021/10/05/redis-expound09/</id>
    <published>2021-10-05T01:35:09.000Z</published>
    <updated>2021-11-09T03:21:02.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哨兵模式（重点）"><a href="#哨兵模式（重点）" class="headerlink" title="哨兵模式（重点）"></a>哨兵模式（重点）</h2><h3 id="单哨兵模式"><a href="#单哨兵模式" class="headerlink" title="单哨兵模式"></a>单哨兵模式</h3><p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费时费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候应优先考虑哨兵模式。</p><p><img data-src="/images/redis-expound09.md-0.png"></p><p>哨兵模式是一种特殊的模式，Redis 提供了哨兵的命令，哨兵是一个进程，它会独立运行。其原理是哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行中的多个 Redis 实例。它能够后台监控主机是否故障，<strong>如果故障了根据投票数自动将从库转换为主库。</strong></p><p>哨兵有两个作用：</p><ul><li>  通过发送命令，让 Redis 服务器返回其运行状态，包括主服务器和从服务器。</li><li>  当哨兵监测到 master 宕机，会自动将 slave 切换成 master，然后通过发布订阅模式通知其它的从服务器，修改配置文件，让它们切换主机。</li></ul><h3 id="多哨兵模式"><a href="#多哨兵模式" class="headerlink" title="多哨兵模式"></a>多哨兵模式</h3><p>然而一个哨兵进程对 Redis 服务器进行监控，可能会出现问题。为此，可以使用多个哨兵进行监控，各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p><p><img data-src="/images/redis-expound09.md-1.png"></p><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover（故障转移） 过程，仅仅是哨兵1主观地认为主服务器不可用，这个现象称为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由其中一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器切换主机，这个过程称为<strong>客观下线</strong>。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>新建 <strong>sentinel.conf</strong> 配置文件。（下面的是 windows 的配置）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前 Sentinel 服务运行的端口</span></span><br><span class="line"><span class="attribute">port</span> <span class="number">26379</span></span><br><span class="line"><span class="attribute">bind</span> <span class="number">127.0.0.1</span></span><br><span class="line"><span class="comment">#哨兵监听的主服务器，后面的1表示主机挂掉以后进行投票，只需要1票就可以将从机变成主机。</span></span><br><span class="line"><span class="attribute">sentinel</span> monitor mymaster <span class="number">127.0.0.1</span> <span class="number">6379</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#3s 内 mymaster 无响应，则认为 mymaster 宕机了。</span></span><br><span class="line"><span class="attribute">sentinel</span> down-after-milliseconds mymaster <span class="number">3000</span></span><br><span class="line"><span class="comment">#如果10s 后，mysater 仍没启动过来，则启动 failover。</span></span><br><span class="line"><span class="attribute">sentinel</span> failover-timeout mymaster <span class="number">10000</span>  </span><br><span class="line"><span class="comment">#执行故障转移时， 最多有1个从服务器同时对新的主服务器进行同步。</span></span><br><span class="line"><span class="attribute">sentinel</span> parallel-syncs mymaster <span class="number">1</span></span><br></pre></td></tr></table></figure><p>启动哨兵。</p><p><img data-src="/images/redis-expound09.md-2.png"></p><p>将 6379 主机关机，查看哨兵反应和从机状态。</p><p><img data-src="/images/redis-expound09.md-3.png"></p><p><img data-src="/images/redis-expound09.md-4.png"></p><p><img data-src="/images/redis-expound09.md-5.png"></p><p>如果6379主机又连了回来，查看哨兵反应和6379以及主机状态。</p><p><img data-src="/images/redis-expound09.md-6.png"></p><p><img data-src="/images/redis-expound09.md-7.png"></p><p><img data-src="/images/redis-expound09.md-8.png"></p><h3 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h3><p>优点：</p><ul><li>  哨兵集群基于主从复制模式，所有的主从配置优点它全有。</li><li>  主从可以自动切换，故障可以转移，系统的可用性更好。</li></ul><p>缺点：</p><ul><li>  Redis 不好在线扩容，集群容量一旦到达上限，在线扩容就十分麻烦。</li><li>  实现哨兵模式的配置其实很麻烦。</li></ul><h2 id="缓存问题（重点）"><a href="#缓存问题（重点）" class="headerlink" title="缓存问题（重点）"></a>缓存问题（重点）</h2><p>Redis 缓存的使用，极大地提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求，这时的用户很可能是攻击者，攻击会导致数据库压力过大。</p><p><img data-src="/images/redis-expound09.md-9.png"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p><strong>布隆过滤器</strong>：布隆过滤器是一种数据结构，对所有可能查询的参数以 hash 形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力。</p><p><img data-src="/images/redis-expound09.md-10.jpg"></p><p><strong>缓存空对象</strong>：当存储层没命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源。</p><p><img data-src="/images/redis-expound09.md-11.png"></p><p>但是这种方法会存在两个问题：</p><ul><li>  如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键。</li><li>  即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿是指缓存中没有但数据库中有的一条热点数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p><strong>设置热点数据永不过期</strong>：从缓存层面来看，没有设置过期时间，就不会出现热点 key 过期后产生的问题。</p><p><strong>加互斥锁</strong>：分布式锁保证对于每个 key 同时只有一个线程去查询后端服务，其它线程没有获得分布式锁的权限，因此需要进行等待。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至宕机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><p><img data-src="/images/redis-expound09.md-12.jpg"></p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p><strong>集群搭建</strong>：多增设几台 redis，这样一台挂掉之后其它的还可以继续工作。</p><p><strong>限流降级</strong>：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。</p><p><strong>数据预热</strong>：先把可能的数据预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的 key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;哨兵模式（重点）&quot;&gt;&lt;a href=&quot;#哨兵模式（重点）&quot; class=&quot;headerlink&quot; title=&quot;哨兵模式（重点）&quot;&gt;&lt;/a&gt;哨兵模式（重点）&lt;/h2&gt;&lt;h3 id=&quot;单哨兵模式&quot;&gt;&lt;a href=&quot;#单哨兵模式&quot; class=&quot;headerlink&quot; title=&quot;单哨兵模式&quot;&gt;&lt;/a&gt;单哨兵模式&lt;/h3&gt;&lt;p&gt;主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费时费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候应优先考虑哨兵模式。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/images/redis-expound09.md-0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;哨兵模式是一种特殊的模式，Redis 提供了哨兵的命令，哨兵是一个进程，它会独立运行。其原理是哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行中的多个 Redis 实例。它能够后台监控主机是否故障，&lt;strong&gt;如果故障了根据投票数自动将从库转换为主库。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(八)</title>
    <link href="http://guest997.tk/2021/10/04/redis-expound08/"/>
    <id>http://guest997.tk/2021/10/04/redis-expound08/</id>
    <published>2021-10-04T02:16:41.000Z</published>
    <updated>2021-11-09T03:20:32.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><p><img data-src="/images/redis-expound08.md-0.jpg"></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">publish channel 信息                    <span class="comment">#将信息发送到指定的频道。</span></span><br><span class="line">subscribe 频道1 [频道2 <span class="string">...</span>]               <span class="comment">#订阅给定的一个或多个频道的信息。</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="订阅者"><a href="#订阅者" class="headerlink" title="订阅者"></a>订阅者</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">subscribe</span> Guest<span class="number">997</span>      #订阅一个频道 Guest<span class="number">997</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound08.md-1.png"></p><h4 id="发布者"><a href="#发布者" class="headerlink" title="发布者"></a>发布者</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">publish</span> Guest<span class="number">997</span> <span class="string">&quot;hello,Guest997&quot;</span>   #发布者发布消息到频道</span><br><span class="line"><span class="attribute">publish</span> Guest<span class="number">997</span> <span class="string">&quot;hello,redis&quot;</span></span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过 subscribe 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个频道，而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。subscribe 命令的关键，就是将客户端添加到给定 channel 的订阅链表中。</p><p>通过 publish 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>  消息通知系统</li><li>  实时聊天系统（频道当做聊天室，将信息回显给所有人）</li><li>  订阅、关注系统</li></ul><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>将一台 Redis 服务器的数据，复制到其它的 Redis 服务器。前者称为主节点（master/leader），后者称为从节点（slave/follower）。数据的复制是单向的，只能由主节点到从节点。Master 以写为主，Slave 以读为主。且一个主节点可以有多个从节点，但一个从节点只能有一个主节点。</p><p>一般来说，要将 Redis 运用于工程项目中，只使用一台 Redis 是万万不能的（宕机），原因如下：</p><ul><li>  从结构上，单个 Redis 服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大。</li><li>  从容量上，单个 Redis 服务器内存容量有限，就算一台 Redis 服务器内存容量为256G，也不能将所有内存用作 Redis 存储内存。<strong>一般来说，单台 Redis 最大使用内存不应该超过20G。</strong></li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>  热备份：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li>  故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复，实际上是一种服务的冗余。</li><li>  负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务，分担服务器负载。尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。</li><li>  高可用基石：主从复制是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础。</li></ul><h3 id="环境搭建（一主二从）"><a href="#环境搭建（一主二从）" class="headerlink" title="环境搭建（一主二从）"></a>环境搭建（一主二从）</h3><p>为了在一台机器上实现一主二从的环境，需要拷贝并修改三份配置文件，根据这三份不同的配置文件启动 Redis。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一份配置文件（redis79.conf）</span></span><br><span class="line"><span class="attribute">port</span> <span class="number">6379</span></span><br><span class="line"><span class="attribute">pidfile</span> /var/run/redis_<span class="number">6379</span>.pid</span><br><span class="line"><span class="attribute">logfile</span> <span class="string">&quot;6379.log&quot;</span></span><br><span class="line"><span class="attribute">dbfilename</span> dump<span class="number">6379</span>.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二份配置文件（redis80.conf）</span></span><br><span class="line"><span class="attribute">port</span> <span class="number">6380</span></span><br><span class="line"><span class="attribute">pidfile</span> /var/run/redis_<span class="number">6380</span>.pid</span><br><span class="line"><span class="attribute">logfile</span> <span class="string">&quot;6380.log&quot;</span></span><br><span class="line"><span class="attribute">dbfilename</span> dump<span class="number">6380</span>.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment">#第三份配置文件（redis81.conf）</span></span><br><span class="line"><span class="attribute">port</span> <span class="number">6381</span></span><br><span class="line"><span class="attribute">pidfile</span> /var/run/redis_<span class="number">6381</span>.pid</span><br><span class="line"><span class="attribute">logfile</span> <span class="string">&quot;6381.log&quot;</span></span><br><span class="line"><span class="attribute">dbfilename</span> dump<span class="number">6381</span>.rdb</span><br></pre></td></tr></table></figure><p><strong>默认情况下，每台 Redis 服务器都是主节点。 一般情况下只用配置从机就好了。6379为主节点，6380和6381为从节点。</strong></p><p><img data-src="/images/redis-expound08.md-2.png"></p><p><img data-src="/images/redis-expound08.md-3.png"></p><p><strong>真实的主从复制实现应该在配置文件中进行配置，这样的话才是永久实现的，这里使用的是命令是暂时实现的！想要永久生效就需要如下图添加主机信息。</strong></p><p><img data-src="/images/redis-expound08.md-4.png"></p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p><strong>主机可以写，从机只能读。主机中的所有数据会自动被从机保存。</strong></p><p><img data-src="/images/redis-expound08.md-5.png"></p><p><img data-src="/images/redis-expound08.md-6.png"></p><p><strong>主机断开连接，从机依旧是连接到主机的，依旧有主机之前写的数据。主机如果重新连接了，从机依旧可以获取到主机新写的数据。</strong></p><h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><ul><li>  全量复制：slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。只要是重新连接 master，一次全量复制将被自动执行。</li><li>  增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave。</li></ul><h3 id="层层链路"><a href="#层层链路" class="headerlink" title="层层链路"></a>层层链路</h3><p>在上面的基础上，可以将6380从机作为6381的主机。但此时，6380依旧是从机，依旧只能进行读操作。</p><p><img data-src="/images/redis-expound08.md-7.png"></p><p>可以使用 slaveof no one 命令让自己变成主机。之前是其从机依旧保持这样的状态。</p><p><img data-src="/images/redis-expound08.md-8.png"></p><p><img data-src="/images/redis-expound08.md-9.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;发布订阅&quot;&gt;&lt;a href=&quot;#发布订阅&quot; class=&quot;headerlink&quot; title=&quot;发布订阅&quot;&gt;&lt;/a&gt;发布订阅&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&quot;/images/redis-expound08.md-0.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;figure class=&quot;highlight jboss-cli&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;publish channel 信息                    &lt;span class=&quot;comment&quot;&gt;#将信息发送到指定的频道。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subscribe 频道1 [频道2 &lt;span class=&quot;string&quot;&gt;...&lt;/span&gt;]               &lt;span class=&quot;comment&quot;&gt;#订阅给定的一个或多个频道的信息。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h3&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(七)</title>
    <link href="http://guest997.tk/2021/10/03/redis-expound07/"/>
    <id>http://guest997.tk/2021/10/03/redis-expound07/</id>
    <published>2021-10-03T02:02:49.000Z</published>
    <updated>2021-11-09T03:20:06.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><p><img data-src="/images/redis-expound07.md-0.png"></p><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><p><img data-src="/images/redis-expound07.md-1.png"></p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p><img data-src="/images/redis-expound07.md-2.png"></p><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><p><img data-src="/images/redis-expound07.md-3.png"></p><p><img data-src="/images/redis-expound07.md-4.png"></p><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p><img data-src="/images/redis-expound07.md-5.png"></p><p><img data-src="/images/redis-expound07.md-6.png"></p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>redis 默认是没有密码的。</p><p><img data-src="/images/redis-expound07.md-7.png"></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p><img data-src="/images/redis-expound07.md-8.png"></p><p><img data-src="/images/redis-expound07.md-9.png"></p><ul><li>  volatile-lru：只对设置了过期时间的 key 进行 LRU（默认值）</li><li>  allkeys-lru：删除 lru 算法的 key</li><li>  volatile-random：随机删除即将过期 key</li><li>  allkeys-random：随机删除</li><li>  volatile-ttl：删除即将过期的</li><li>  noeviction：永不过期，返回错误。</li></ul><h3 id="aof"><a href="#aof" class="headerlink" title="aof"></a>aof</h3><p><img data-src="/images/redis-expound07.md-10.png"></p><h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><p><img data-src="/images/redis-expound07.md-11.png"></p><p><strong>Redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何 IO 操作的。这就确保了极高的性能。如果需要进行大规模的数据恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。RDB 的缺点是最后一次持久化后的数据可能丢失；fork进程的时候，会占用一定的内存空间。</strong></p><p>默认使用的就是 RDB，一般情况下不需要修改这个配置。有时候在生产环境中会将这个文件进行备份。</p><h3 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h3><ul><li>  满足 save 的规则</li><li>  执行 ﬂushall 命令</li><li>  退出 redis</li></ul><p><img data-src="/images/redis-expound07.md-12.png"></p><p>当满足触发机制时就会自动生成 dump.rdb 文件。（配置文件中的默认配置）</p><h3 id="恢复-rdb-文件"><a href="#恢复-rdb-文件" class="headerlink" title="恢复 rdb 文件"></a>恢复 rdb 文件</h3><p>只需要将 rdb 文件放在 redis 启动目录就可以，redis 启动的时候会自动检测 dump.rdb 文件并恢复其中的数据。运行 config get dir 命令可以查看 rdb 文件需要存在的位置。</p><p><img data-src="/images/redis-expound07.md-13.png"></p><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><p><img data-src="/images/redis-expound07.md-14.png"></p><p>以日志的形式来记录每个写操作，将 redis 执行过的所有写指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><h3 id="触发机制-1"><a href="#触发机制-1" class="headerlink" title="触发机制"></a>触发机制</h3><p>在上面的 <strong>配置-aof</strong> 中就看到了，其是默认不开启的，需要手动改为 yes。并且默认是每秒执行一次同步。</p><p><img data-src="/images/redis-expound07.md-15.png"></p><p><img data-src="/images/redis-expound07.md-16.png"></p><p><img data-src="/images/redis-expound07.md-17.png"></p><h3 id="重写规则说明"><a href="#重写规则说明" class="headerlink" title="重写规则说明"></a>重写规则说明</h3><p><img data-src="/images/redis-expound07.md-18.png"></p><p>no-appendfsync-on-rewrite 参数设置为 no，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。如果设置为 yes 就相当于将 appendfsync 设置为no，这说明并没有执行磁盘操作，只是写入了缓冲区，因此这样并不会造成阻塞（因为没有竞争磁盘），但是如果这个时候 redis 挂掉，就会丢失数据。丢失多少数据呢？在 linux 的操作系统的默认设置下，最多会丢失30s 的数据。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>  RDB 持久化方式能够在指定的时间间隔内对数据进行快照存储。</li><li>  AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF 命令以 Redis 协议追加保存每次写的操作到文件末尾，Redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大。</li><li>  <strong>只做缓存：如果只希望数据在服务器运行的时候存在，可以不使用任何持久化。</strong></li><li>同时开启两种持久化方式。<ul><li>  在这种情况下，当 Redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。</li><li>  RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件，那要不要只使用 AOF 呢？作者建议不要，因为 RDB 更适合用于备份数据库（AOF 在不断变化不好备份），能够快速重启，而且不会有 AOF 可能潜在的 Bug，留着作为一个万一的手段。</li></ul></li><li>性能建议<ul><li>  因为 RDB 文件只用作后备用途，建议只在 Slave 上持久化 RDB 文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。</li><li>  如果 Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只加载自己的 AOF 文件就可以了，代价一是带来了持续的 IO，二是 AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少 AOF rewrite 的频率，AOF 重写的基础大小默认值64mb 太小了，可以设到5G 以上，默认超过原大小100%大小重写可以改到适当的数值。</li><li>  如果不 Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔 IO，也减少了 rewrite 时带来的系统波动。代价是如果 Master/Slave 同时宕机，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB 文件，载入较新的那个，微博就是这种架构。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;h3 id=&quot;单位&quot;&gt;&lt;a href=&quot;#单位&quot; class=&quot;headerlink&quot; title=&quot;单位&quot;&gt;&lt;/a&gt;单位&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&quot;/images/redis-expound07.md-0.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;包含&quot;&gt;&lt;a href=&quot;#包含&quot; class=&quot;headerlink&quot; title=&quot;包含&quot;&gt;&lt;/a&gt;包含&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&quot;/images/redis-expound07.md-1.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(六)</title>
    <link href="http://guest997.tk/2021/10/02/redis-expound06/"/>
    <id>http://guest997.tk/2021/10/02/redis-expound06/</id>
    <published>2021-10-02T02:09:09.000Z</published>
    <updated>2021-11-09T03:19:15.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>Jedis 是 Redis 官方推荐的 Java 连接开发工具，使用 Java 操作 Redis 的中间件。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jedis 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--fastjson 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：需要先在 Windows 下载 Redis，并运行 redis-server.exe 文件。当然也能进行远程连接服务器。</strong></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>由于 Java 中所有的方法就是对应之前学习的命令，一个都没有变化。故下面就只进行连接测试和事务讲解。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> <span class="built_in">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(jedis.<span class="built_in">ping</span>());</span><br><span class="line">        jedis.<span class="built_in">flushDB</span>();    <span class="comment">//进行多次测试时，使用这行代码清空数据。</span></span><br><span class="line"></span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> <span class="built_in">JSONObject</span>();</span><br><span class="line">        jsonObject.<span class="built_in">put</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;redis&quot;</span>);</span><br><span class="line">        jsonObject.<span class="built_in">put</span>(<span class="string">&quot;hello2&quot;</span>, <span class="string">&quot;redis&quot;</span>);</span><br><span class="line">        <span class="keyword">String</span> jsonString = jsonObject.<span class="built_in">toJSONString</span>();</span><br><span class="line"></span><br><span class="line">        Transaction transaction = jedis.<span class="built_in">multi</span>();    <span class="comment">//开启事务</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            transaction.<span class="built_in">set</span>(<span class="string">&quot;hello&quot;</span>, jsonString);</span><br><span class="line">            <span class="comment">//int i = 1/0;      //错误代码测试</span></span><br><span class="line">            transaction.<span class="built_in">exec</span>();</span><br><span class="line">        &#125; <span class="built_in"><span class="keyword">catch</span></span> (Exception e) &#123;</span><br><span class="line">            transaction.<span class="built_in">discard</span>();      <span class="comment">//放弃事务</span></span><br><span class="line">            e.<span class="built_in">printStackTrace</span>();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(jedis.<span class="built_in">get</span>(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">            jedis.<span class="built_in">close</span>();      <span class="comment">//关闭连接</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">PONG</span></span><br><span class="line"><span class="comment">&#123;&quot;hello2&quot;:&quot;redis&quot;,&quot;hello&quot;:&quot;redis&quot;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="整合-SpringBoot-框架"><a href="#整合-SpringBoot-框架" class="headerlink" title="整合 SpringBoot 框架"></a>整合 SpringBoot 框架</h2><p>在 SpringBoot 2.x 之后，原来使用的 Jedis 被替换为了 Lettuce。</p><p>Jedis：采用直连的方式，多个线程的操作是不安全的，如果想要避免，就使用 jedis pool 连接池。<br>Lettuce：使用 netty，实例可以在多个线程中进行共享，不存在线程不安全的情况。可以减少线程数据。</p><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>新建 SpringBoot 项目，导入 Spring Boot DevTools、Lombok、Spring Configuration Processor、SpringWeb 和 Spring Data Redis 依赖。</p><h3 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h3><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@Bean</span></span><br><span class="line"><span class="keyword">@ConditionalOnMissingBean</span>(        <span class="comment">//可以自己定义一个 redisTemplate 来替换默认的。</span></span><br><span class="line">    name = &#123;<span class="string">&quot;redisTemplate&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">//注意：默认的 RedisTemplate 没有进行过多的设置，redis 对象是一定要进行序列化的。</span></span><br><span class="line"><span class="comment">//两个泛型都是 Object 的类型，需要强制转换为 &lt;String, Object&gt;</span></span><br><span class="line"><span class="keyword">@ConditionalOnSingleCandidate</span>(RedisConnectionFactory.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;</span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; <span class="keyword">template</span> = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">    <span class="keyword">template</span>.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">template</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于 String 是 redis 中最常用的类型，所以单独配置一个 bean。</span></span><br><span class="line"><span class="keyword">@Bean</span></span><br><span class="line"><span class="keyword">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">@ConditionalOnSingleCandidate</span>(RedisConnectionFactory.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> StringRedisTemplate stringRedisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;</span><br><span class="line">    StringRedisTemplate <span class="keyword">template</span> = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">    <span class="keyword">template</span>.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">template</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.<span class="keyword">annotation</span>.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBootRedisApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">        <span class="comment">//常用的方法可以直接通过 redisTemplate 对象操作，比如事务和 CRUD。</span></span><br><span class="line">        <span class="comment">//获取 redis 的连接对象</span></span><br><span class="line">        RedisConnection redisConnection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">        redisConnection.flushDb();</span><br><span class="line">        <span class="comment">//opsForValue：操作 String 类型</span></span><br><span class="line">        <span class="comment">//opsForList：操作 List 类型</span></span><br><span class="line">        <span class="comment">//其它数据类型类似就不多说了</span></span><br><span class="line">        redisTemplate.opsForValue().<span class="keyword">set</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;redis&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().<span class="keyword">set</span>(<span class="string">&quot;hello2&quot;</span>, <span class="string">&quot;世界&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(redisTemplate.opsForValue().<span class="keyword">get</span>(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">        System.<span class="keyword">out</span>.println(redisTemplate.opsForValue().<span class="keyword">get</span>(<span class="string">&quot;hello2&quot;</span>)); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 redis 世界</span></span><br></pre></td></tr></table></figure><p>可以从结果看出，在 IDEA 中显示是正常的，我们去连接一个 redis 的客户端进行查看。<img data-src="/images/redis-expound06.md-0.png"></p><p>可以从上图看出，实际存储在 redis 中的是进行编码后的数据。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RedisTemplate 类</span></span><br><span class="line"><span class="keyword">public</span> void afterPropertiesSet() &#123;</span><br><span class="line">    <span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line">    boolean defaultUsed = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.defaultSerializer == <span class="literal">null</span>) &#123;        <span class="comment">//当未配置序列化时，默认使用的是 jdk 序列化。开发中可能会使用到 json 序列化。</span></span><br><span class="line">        <span class="keyword">this</span>.defaultSerializer = new JdkSerializationRedisSerializer(<span class="keyword">this</span>.classLoader != <span class="literal">null</span> ? <span class="keyword">this</span>.classLoader : <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面是键和值、hash 键和值的序列化</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.enableDefaultSerializer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.keySerializer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.keySerializer = <span class="keyword">this</span>.defaultSerializer;</span><br><span class="line">            defaultUsed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.valueSerializer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.valueSerializer = <span class="keyword">this</span>.defaultSerializer;</span><br><span class="line">            defaultUsed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.hashKeySerializer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hashKeySerializer = <span class="keyword">this</span>.defaultSerializer;</span><br><span class="line">            defaultUsed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.hashValueSerializer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hashValueSerializer = <span class="keyword">this</span>.defaultSerializer;</span><br><span class="line">            defaultUsed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写自己的-RedisTemplete"><a href="#编写自己的-RedisTemplete" class="headerlink" title="编写自己的 RedisTemplete"></a>编写自己的 RedisTemplete</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.<span class="keyword">Configuration</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.<span class="keyword">connection</span>.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Configuration</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> RedisConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="built_in">public</span> RedisTemplate&lt;String, <span class="keyword">Object</span>&gt; redisTemplate(RedisConnectionFactory factory) &#123;</span><br><span class="line">        //为了自己开发方便，一般直接使用&lt;String, <span class="keyword">Object</span>&gt;</span><br><span class="line">        RedisTemplate&lt;String, <span class="keyword">Object</span>&gt; template = <span class="built_in">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="keyword">template</span>.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        //jackson 的序列化方式</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="built_in">new</span> Jackson2JsonRedisSerializer(<span class="keyword">Object</span>.<span class="keyword">class</span>);</span><br><span class="line">        ObjectMapper om = <span class="built_in">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.<span class="keyword">ALL</span>, JsonAutoDetect.Visibility.<span class="keyword">ANY</span>);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.<span class="keyword">As</span>.WRAPPER_ARRAY);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        //String 的序列化方式</span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="built_in">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        //键值使用 String 的序列化方式</span><br><span class="line">        <span class="keyword">template</span>.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="keyword">template</span>.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        //hash 的键值使用 jackson 的序列化方式</span><br><span class="line">        <span class="keyword">template</span>.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="keyword">template</span>.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">template</span>.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">template</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二次测试"><a href="#二次测试" class="headerlink" title="二次测试"></a>二次测试</h3><p>再运行一次上面的测试方法。然后在 redis 客户端中查看结果。<img data-src="/images/redis-expound06.md-1.png"></p><h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br></pre></td><td class="code"><pre><span class="line">package ml.guest997.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> final <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">expire</span>(<span class="params"><span class="built_in">String</span> key, long time</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键 不能为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">getExpire</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 存在 false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">hasKey</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 可以传一个或多个值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">&quot;unchecked&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">del</span>(<span class="params"><span class="built_in">String</span>... key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(Arrays.asList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Object</span> <span class="function"><span class="title">get</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">set</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span> value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time  时间(秒) time 要大于0 如果 time 小于等于0将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">set</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span> value, long time</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">incr</span>(<span class="params"><span class="built_in">String</span> key, long delta</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">decr</span>(<span class="params"><span class="built_in">String</span> key, long delta</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键 不能为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item 项 不能为 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Object</span> <span class="function"><span class="title">hget</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">String</span> item</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 hashKey 对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Map</span>&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt; <span class="function"><span class="title">hmget</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">hmset</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; map</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">hmset</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; map, long time</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张 hash 表中放入数据，如果不存在将创建。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">hset</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">String</span> item, <span class="built_in">Object</span> value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张 hash 表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time  时间(秒) 注意:如果已存在的 hash 表有时间,这里将会替换原有的时间。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">hset</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">String</span> item, <span class="built_in">Object</span> value, long time</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 hash 表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键 不能为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item 项 可以使多个 不能为 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">hdel</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span>... item</span>)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断 hash 表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键 不能为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item 项 不能为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 存在 false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">hHasKey</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">String</span> item</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash 递增 如果不存在，就会创建一个，并把新增后的值返回。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> double <span class="function"><span class="title">hincr</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">String</span> item, double by</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> double <span class="function"><span class="title">hdecr</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">String</span> item, double by</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 key 获取 Set 中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Set</span>&lt;<span class="built_in">Object</span>&gt; <span class="function"><span class="title">sGet</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 value 从一个 set 中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>true 存在 false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">sHasKey</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span> value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入 set 缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">sSet</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span>... values</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 set 数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">sSetAndTime</span>(<span class="params"><span class="built_in">String</span> key, long time, <span class="built_in">Object</span>... values</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 set 缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">sGetSetSize</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为 value 的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">setRemove</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span>... values</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 list 缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>end   结束0到-1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">Object</span>&gt; <span class="function"><span class="title">lGet</span>(<span class="params"><span class="built_in">String</span> key, long start, long end</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 list 缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">lGetListSize</span>(<span class="params"><span class="built_in">String</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引获取 list 中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Object</span> <span class="function"><span class="title">lGetIndex</span>(<span class="params"><span class="built_in">String</span> key, long index</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 list 放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">lSet</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span> value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 list 放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">lSet</span>(<span class="params"><span class="built_in">String</span> key, <span class="built_in">Object</span> value, long time</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 list 放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">lSet</span>(<span class="params"><span class="built_in">String</span> key, List&lt;<span class="built_in">Object</span>&gt; value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 list 放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">lSet</span>(<span class="params"><span class="built_in">String</span> key, List&lt;<span class="built_in">Object</span>&gt; value, long time</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改 list 中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="function"><span class="title">lUpdateIndex</span>(<span class="params"><span class="built_in">String</span> key, long index, <span class="built_in">Object</span> value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除 N 个值为 value 的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">lRemove</span>(<span class="params"><span class="built_in">String</span> key, long count, <span class="built_in">Object</span> value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Jedis&quot;&gt;&lt;a href=&quot;#Jedis&quot; class=&quot;headerlink&quot; title=&quot;Jedis&quot;&gt;&lt;/a&gt;Jedis&lt;/h2&gt;&lt;p&gt;Jedis 是 Redis 官方推荐的 Java 连接开发工具，使用 Java 操作 Redis 的中间件。&lt;/p&gt;
&lt;h3 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--jedis 依赖--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;redis.clients&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jedis&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.6.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--fastjson 依赖--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.76&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;注意：需要先在 Windows 下载 Redis，并运行 redis-server.exe 文件。当然也能进行远程连接服务器。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(五)</title>
    <link href="http://guest997.tk/2021/10/01/redis-expound05/"/>
    <id>http://guest997.tk/2021/10/01/redis-expound05/</id>
    <published>2021-10-01T02:03:01.000Z</published>
    <updated>2021-11-09T03:19:11.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>事务本质：一组命令的集合。Redis 事务不具有隔离性和原子性，其具有的是一次性、顺序性和排它性。</strong></p><p>Redis 执行事务步骤：</p><ul><li>  开启事务（multi）</li><li>  命令入队</li><li>  执行事务（exec）</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">multi </span>            <span class="comment">#开启事务</span></span><br><span class="line"><span class="keyword">discard </span>           <span class="comment">#取消事务，之前的命令全都不会执行。</span></span><br><span class="line">exec            <span class="comment">#执行事务</span></span><br></pre></td></tr></table></figure><h3 id="正常事务"><a href="#正常事务" class="headerlink" title="正常事务"></a>正常事务</h3><p><img data-src="/images/redis-expound05.md-0.png"></p><h3 id="事务编译时异常（事务中所有的命令都不会被执行）"><a href="#事务编译时异常（事务中所有的命令都不会被执行）" class="headerlink" title="事务编译时异常（事务中所有的命令都不会被执行）"></a>事务编译时异常（事务中所有的命令都不会被执行）</h3><p><img data-src="/images/redis-expound05.md-1.png"></p><h3 id="事务运行时异常（错误命令抛出异常，其它命令正常执行）"><a href="#事务运行时异常（错误命令抛出异常，其它命令正常执行）" class="headerlink" title="事务运行时异常（错误命令抛出异常，其它命令正常执行）"></a>事务运行时异常（错误命令抛出异常，其它命令正常执行）</h3><p><img data-src="/images/redis-expound05.md-2.png"></p><h2 id="实现乐观锁"><a href="#实现乐观锁" class="headerlink" title="实现乐观锁"></a>实现乐观锁</h2><p>举例：一个线程去操作同步资源的时候，不需要提前获取到锁，而是可以直接去读取同步资源，并且在自己的线程内进行计算。当它计算完毕之后，准备更新同步资源之前，会先判断这个资源是否已经被其他线程所修改过。如果这个时候同步资源没有被其他线程修改更新，也就是说此时的数据和线程 A 最开始拿到的数据是一致的话，那么此时线程 A 就会去更新同步资源，完成修改的过程。而假设此时的同步资源已经被其它线程修改更新了，线程 A 会发现此时的数据已经和最开始拿到的数据不一致了，那么线程 A 不会继续修改该同步资源，而是会根据不同的业务逻辑去选择报错或者重试。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#模拟支付</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#模拟第一个线程</span></span><br><span class="line"><span class="keyword">set</span> money <span class="number">100</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">out</span> <span class="number">0</span></span><br><span class="line">watch money            <span class="meta">#监视 money 属性（使用 watch 就可以当做是 redis 的乐观锁操作）</span></span><br><span class="line">multi</span><br><span class="line">decrby money <span class="number">10</span></span><br><span class="line">incrby <span class="keyword">out</span> <span class="number">10</span>        <span class="meta">#到这为止，先不执行 exec 命令。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#开启一个新的客户端模拟第二个线程</span></span><br><span class="line">redis-<span class="keyword">cli</span> -p <span class="number">6379</span></span><br><span class="line"><span class="keyword">set</span> money <span class="number">200</span>        <span class="meta">#将 money 属性值进行了修改</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#返回第一个线程</span></span><br><span class="line">exec        <span class="meta">#另外一个线程在之前已经修改了 money 属性值。这个时候再执行 exec 命令，就会导致事务执行失败。</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound05.md-3.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;事务本质：一组命令的集合。Redis 事务不具有隔离性和原子性，其具有的是一次性、顺序性和排它性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redis 执行事务步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  开启事务（multi）&lt;/li&gt;
&lt;li&gt;  命令入队&lt;/li&gt;
&lt;li&gt;  执行事务（exec）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;multi &lt;/span&gt;            &lt;span class=&quot;comment&quot;&gt;#开启事务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;discard &lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;#取消事务，之前的命令全都不会执行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exec            &lt;span class=&quot;comment&quot;&gt;#执行事务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(四)</title>
    <link href="http://guest997.tk/2021/09/30/redis-expound04/"/>
    <id>http://guest997.tk/2021/09/30/redis-expound04/</id>
    <published>2021-09-30T01:33:12.000Z</published>
    <updated>2021-10-04T04:13:25.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Geospatial（地理空间）"><a href="#Geospatial（地理空间）" class="headerlink" title="Geospatial（地理空间）"></a>Geospatial（地理空间）</h2><p><strong>Geospatial 底层的实现原理其实就是 Zset。我们可以使用 Zset 命令来操作 Geospatial。</strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">geoadd 键 经度<span class="number">1</span> 纬度<span class="number">1</span> 元素名<span class="number">1</span> [经度<span class="number">2</span> 纬度<span class="number">2</span> 元素名<span class="number">2</span> ...]        <span class="comment">#添加一个或多个地理位置元素到键中</span></span><br><span class="line">geopos 键 元素名<span class="number">1</span> [元素名<span class="number">2</span> ...]                   <span class="comment">#获取一个或多个元素的坐标值</span></span><br><span class="line">geodist 键 元素名<span class="number">1</span> 元素名<span class="number">2</span> [m<span class="regexp">/km/mi</span><span class="regexp">/ft]        #获取两个元素之前的距离，默认使用米做单位（米/</span>千米<span class="regexp">/英里/</span>英尺）</span><br><span class="line"></span><br><span class="line">georadius 键 经度 纬度 数值 m<span class="regexp">/km/mi</span>/ft [withdist] [withcoord] [count 数值]              <span class="comment">#以给定的经纬度为中心，找出指定数值半径内的其它元素。（withdist：中心距离 withcoord：其它元素定位信息 count：筛选出指定的数量）</span></span><br><span class="line">georadiusbymember 键 元素名 数值 m<span class="regexp">/km/mi</span>/ft [withdist] [withcoord] [count 数值]         <span class="comment">#以给定的元素位置为中心，找出指定数值半径内的所有元素（包括中心元素）</span></span><br><span class="line">geohash 键 元素名<span class="number">1</span> [元素名<span class="number">2</span> ...]        <span class="comment">#将会返回11个字符的 geohash 字符串。如果两个字符串越像，则距离越近。</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound04.md-0.png"></p><p><img data-src="/images/redis-expound04.md-1.png"></p><h2 id="Hyperloglog（基数统计）"><a href="#Hyperloglog（基数统计）" class="headerlink" title="Hyperloglog（基数统计）"></a>Hyperloglog（基数统计）</h2><p>优点：占用的内存是固定的，可以存放2^64个不同的元素，即只需要使用12 KB 内存。</p><p><strong>什么是基数？</strong></p><p>数据集：{1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为：{1, 3, 5 ,7, 8}，基数（不重复元素）为5。基数估计就是在误差可接受的范围内，快速计算基数。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pfadd 键 元素1 [元素2 元素3 <span class="string">...</span>]        <span class="comment">#添加一个或多个元素到键中</span></span><br><span class="line">pfcount 键            <span class="comment">#统计键的基数</span></span><br><span class="line">pfmerge 新键 键1 键2 [键3 <span class="string">...</span>]          <span class="comment">#合并两个或多个键为新键</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound04.md-2.png"></p><h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><p>可用于统计网站的 UV （一个人访问一个网站多次，但是还是算作一个人）</p><h2 id="Bitmaps（位图）"><a href="#Bitmaps（位图）" class="headerlink" title="Bitmaps（位图）"></a>Bitmaps（位图）</h2><p>通过操作二进制位数来进行记录，就只有0和1两个状态。由于不好直接进行语法描述，我就直接在下面以打卡为例进行描述。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">setbit</span> sign <span class="number">0</span> <span class="number">1</span>        #sign 是键，<span class="number">0</span>表示周一，<span class="number">1</span>表示已打卡。依此类推。注意：第一个数值只能大于<span class="number">0</span>，第二个数值只能是<span class="number">0</span>或<span class="number">1</span>。</span><br><span class="line"><span class="attribute">getbit</span> sign <span class="number">2</span>          #sign 是键，<span class="number">2</span>表示周三。</span><br><span class="line"><span class="attribute">bitcount</span> sign          #sign 是键。表示获取设置为 <span class="number">1</span> 的位的数量，即一周打卡次数。</span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound04.md-3.png"></p><h3 id="备注：-1"><a href="#备注：-1" class="headerlink" title="备注："></a>备注：</h3><p>可用于统计用户信息。活跃、登录和打卡等，这些具有两个状态的信息，都可以使用 Bitmaps。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Geospatial（地理空间）&quot;&gt;&lt;a href=&quot;#Geospatial（地理空间）&quot; class=&quot;headerlink&quot; title=&quot;Geospatial（地理空间）&quot;&gt;&lt;/a&gt;Geospatial（地理空间）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Geospatial 底层的实现原理其实就是 Zset。我们可以使用 Zset 命令来操作 Geospatial。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;geoadd 键 经度&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 纬度&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 元素名&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; [经度&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 纬度&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 元素名&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ...]        &lt;span class=&quot;comment&quot;&gt;#添加一个或多个地理位置元素到键中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;geopos 键 元素名&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; [元素名&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ...]                   &lt;span class=&quot;comment&quot;&gt;#获取一个或多个元素的坐标值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;geodist 键 元素名&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 元素名&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; [m&lt;span class=&quot;regexp&quot;&gt;/km/mi&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/ft]        #获取两个元素之前的距离，默认使用米做单位（米/&lt;/span&gt;千米&lt;span class=&quot;regexp&quot;&gt;/英里/&lt;/span&gt;英尺）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;georadius 键 经度 纬度 数值 m&lt;span class=&quot;regexp&quot;&gt;/km/mi&lt;/span&gt;/ft [withdist] [withcoord] [count 数值]              &lt;span class=&quot;comment&quot;&gt;#以给定的经纬度为中心，找出指定数值半径内的其它元素。（withdist：中心距离 withcoord：其它元素定位信息 count：筛选出指定的数量）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;georadiusbymember 键 元素名 数值 m&lt;span class=&quot;regexp&quot;&gt;/km/mi&lt;/span&gt;/ft [withdist] [withcoord] [count 数值]         &lt;span class=&quot;comment&quot;&gt;#以给定的元素位置为中心，找出指定数值半径内的所有元素（包括中心元素）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;geohash 键 元素名&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; [元素名&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ...]        &lt;span class=&quot;comment&quot;&gt;#将会返回11个字符的 geohash 字符串。如果两个字符串越像，则距离越近。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img data-src=&quot;/images/redis-expound04.md-0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/images/redis-expound04.md-1.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(三)</title>
    <link href="http://guest997.tk/2021/09/29/redis-expound03/"/>
    <id>http://guest997.tk/2021/09/29/redis-expound03/</id>
    <published>2021-09-29T02:54:27.000Z</published>
    <updated>2021-10-04T04:13:15.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Key-Value（键值对）"><a href="#Key-Value（键值对）" class="headerlink" title="Key-Value（键值对）"></a>Key-Value（键值对）</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> 键 值        <span class="comment">#设置键值对（能够直接覆盖存在键的值）</span></span><br><span class="line"><span class="built_in">get</span> 键        <span class="comment">#获取键相应的值</span></span><br><span class="line"><span class="built_in">keys</span> *         <span class="comment">#查看所有键</span></span><br><span class="line">exists 键    <span class="comment">#判断键是否存在</span></span><br><span class="line">move 数据库    <span class="comment">#移动键到别的数据库</span></span><br><span class="line">expire 键 秒数    <span class="comment">#设置键的过期时间</span></span><br><span class="line">ttl 键        <span class="comment">#查看键剩余时间</span></span><br><span class="line">type 键        <span class="comment">#查看键类型</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound03.md-0.png"></p><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">append 键 字符串  <span class="comment">#追加字符串，如果当前 key 不存在，就相当于设置键值对。</span></span><br><span class="line">strlen 键        <span class="comment">#获取字符串长度</span></span><br><span class="line">incr 键            <span class="comment">#值加一</span></span><br><span class="line">decr 键            <span class="comment">#值减一</span></span><br><span class="line">incrby 键 步长       <span class="comment">#指定值增量</span></span><br><span class="line">decrby 键 步长       <span class="comment">#指定值减量</span></span><br><span class="line"></span><br><span class="line">getrange 键 数值1 数值2     <span class="comment">#闭区间截取字符串。当数值2为-1时，表示从数值1的下标开始截取到最后一个值。</span></span><br><span class="line">setrange 键 数值 字符串    <span class="comment">#替换为指定位置开始的字符串</span></span><br><span class="line">setex 键 秒数 值   <span class="comment">#设置键值对，并会在指定秒数后过期。（set with expire）</span></span><br><span class="line">setnx 键 值        <span class="comment">#如果键不存在就创建（分布式锁中经常使用）(set if not exist)</span></span><br><span class="line"></span><br><span class="line">mset 键1 值1 [键2 值2 <span class="string">...</span>]   <span class="comment">#设置一个或多个键值对（能够直接覆盖存在键的值）</span></span><br><span class="line">mget 键1 键2 [键3 <span class="string">...</span>]         <span class="comment">#获取一个或多个键相应的值</span></span><br><span class="line">msetnx 键1 值1 [键2 值2 <span class="string">...</span>]        <span class="comment">#如果不存在就创建键值对。但是其具有原子性，就是其中一个键存在，其它键就都不会被创建。</span></span><br><span class="line">getset 键 值        <span class="comment">#先获取键相应的值，再设置键相应的值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对象创建的两种方式</span></span><br><span class="line"><span class="keyword">set</span> user<span class="function">:1</span> &#123;name<span class="function">:guest997</span>,age<span class="function">:18</span>&#125;  <span class="comment">#设置键为 user:1，值为 json 字符。</span></span><br><span class="line">mset user<span class="function">:1</span><span class="function">:name</span> guest997 user<span class="function">:1</span><span class="function">:age</span> 18      <span class="comment">#设置两个键分别为 user:1:name 和 user:1:age，值分别为 guest997 和 18。</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound03.md-1.png"></p><p><img data-src="/images/redis-expound03.md-2.png"></p><p><img data-src="/images/redis-expound03.md-3.png"></p><p><img data-src="/images/redis-expound03.md-4.png"></p><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>在 Redis 里，可以把 list 玩成栈、队列或阻塞队列。其中的元素是有序可重复的。为了方便理解，画个图。<img data-src="/images/redis-expound03.md-5.png"></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">lpush 列表名 值<span class="number">1</span> [值<span class="number">2</span> ...]      #将一个或者多个值插入到列表头部（左），当又有别的值插入时，之前的值就会往右移动。</span><br><span class="line"><span class="keyword">lrange</span> 列表名 数值<span class="number">1</span> 数值<span class="number">2</span>        #闭区间截取列表值。当数值<span class="number">2</span>为<span class="number">-1</span>时，表示从数值<span class="number">1</span>的下标开始截取到最后一个元素。</span><br><span class="line">rpush 列表名 值<span class="number">1</span> [值<span class="number">2</span> ...]      #将一个或者多个值插入到列表尾部（右），当又有别的值插入时，之前的值就会往左移动。</span><br><span class="line">lpop 列表名          #移除列表中的头部元素（左）</span><br><span class="line">rpop 列表名        #移除列表中的尾部元素（右）</span><br><span class="line"></span><br><span class="line"><span class="keyword">lindex</span> 列表名 下标  #通过下标获取列表中的值</span><br><span class="line">llen 列表名        #获取列表长度</span><br><span class="line">lrem 列表名 数值 指定元素       #移除列表中一个或多个指定元素</span><br><span class="line"></span><br><span class="line">ltrim 列表名 数值<span class="number">1</span> 数值<span class="number">2</span>        #闭区间修剪列表值。当数值<span class="number">2</span>为<span class="number">-1</span>时，表示从数值<span class="number">1</span>的下标开始修剪到最后一个元素。</span><br><span class="line">rpoplpush 列表名<span class="number">1</span> 列表名<span class="number">2</span>       #移动列表<span class="number">1</span>中的尾部元素（右）到列表<span class="number">2</span>中的头部（左）</span><br><span class="line"></span><br><span class="line">lest 列表名 下标 新值            #将列表中指定下标的值替换为新值</span><br><span class="line"><span class="keyword">linsert</span> 列表名 before/<span class="keyword">after</span> 值<span class="number">1</span> 值<span class="number">2</span>    #将值<span class="number">2</span>插入到值<span class="number">1</span>的前面或后面</span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound03.md-6.png"></p><p><img data-src="/images/redis-expound03.md-7.png"></p><p><img data-src="/images/redis-expound03.md-8.png"></p><p><img data-src="/images/redis-expound03.md-9.png"></p><h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><p>Redis 的 List 实际上是一个链表。如果移除了所有元素，即为空链表，就代表列表不存在。</p><p>在列表两边操作元素，效率是最高的，操作中间元素，相对来说效率会低一点。</p><h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><p>其中的元素是无序不可重复的。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sadd 集合名 值1 [值2 <span class="string">...</span>]    <span class="comment">#将一个或多个值添加到集合中</span></span><br><span class="line">smembers 集合名     <span class="comment">#查看集合中的所有值</span></span><br><span class="line">sismember 集合名 值        <span class="comment">#判断指定值是否在集合中</span></span><br><span class="line">scard 集合名          <span class="comment">#获取集合中的元素个数</span></span><br><span class="line">srem 集合名 值1 [值2 <span class="string">...</span>]    <span class="comment">#移除集合中的一个或多个指定元素</span></span><br><span class="line"></span><br><span class="line">srandmember 集合名    [数值]    <span class="comment">#随机抽取一个或指定数值个数的元素</span></span><br><span class="line">spop 集合名 [数值]            <span class="comment">#随机移除一个或指定数值个数的元素</span></span><br><span class="line">smove 集合名1 集合名2 值       <span class="comment">#将指定值从集合1移动到集合2中</span></span><br><span class="line"></span><br><span class="line">sdiff 集合名1 集合名2    [集合名3 <span class="string">...</span>]  <span class="comment">#获取集合1有而集合2没有的元素（差集）</span></span><br><span class="line">sinter 集合名1 集合名2 [集合名3 <span class="string">...</span>]    <span class="comment">#获取集合1、2都有的元素（交集）</span></span><br><span class="line">sunion 集合名1 集合名2 [集合名3 <span class="string">...</span>]    <span class="comment">#获取集合1、2中所有的元素（并集）</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound03.md-10.png"></p><p><img data-src="/images/redis-expound03.md-11.png"></p><p><img data-src="/images/redis-expound03.md-12.png"></p><h2 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h2><p>Hash 中存的也是键值对，只不过它的值是 Map 集合。就是像这样子的：Key -<code>&lt;Key-Value&gt;</code>。本质和 String 类型没有太大区别。（为了易于区分，Hash 中的键在下面就叫做哈希）</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hset 哈希名 键1 值1 [键2 值2 <span class="string">...</span>]        <span class="comment">#将一个或多个键值对添加到哈希中（能够直接覆盖存在键的值）</span></span><br><span class="line">hget 哈希名 键                         <span class="comment">#获取哈希中键相应的值</span></span><br><span class="line">hmset 哈希名 键1 值1 [键2 值2 <span class="string">...</span>]        <span class="comment">#将一个或多个键值对添加到哈希中（能够直接覆盖存在键的值）</span></span><br><span class="line">hmget 哈希名 键1 [键2 <span class="string">...</span>]             <span class="comment">#获取哈希中一个或多个键相应的值</span></span><br><span class="line">hgetall 哈希名                          <span class="comment">#获取全部的数据</span></span><br><span class="line"></span><br><span class="line">hdel 哈希名 键1 [键2 <span class="string">...</span>]             <span class="comment">#移除哈希中的一个或多个键值对</span></span><br><span class="line">hlen 哈希名                          <span class="comment">#获取哈希中的键数量</span></span><br><span class="line">hexists 哈希名 键                     <span class="comment">#判断哈希中指定键是否存在</span></span><br><span class="line"></span><br><span class="line">hkeys 哈希名                           <span class="comment">#获取哈希中所有的键</span></span><br><span class="line">hvals 哈希名                            <span class="comment">#获取哈希中所有的值</span></span><br><span class="line">hincrby 哈希名 键 数值                <span class="comment">#指定哈希值增量</span></span><br><span class="line">hsetnx 哈希名 键 值                     <span class="comment">#哈希中如果键不存在就创建</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound03.md-13.png"></p><p><img data-src="/images/redis-expound03.md-14.png"></p><p><img data-src="/images/redis-expound03.md-15.png"></p><h3 id="备注：-1"><a href="#备注：-1" class="headerlink" title="备注："></a>备注：</h3><p>哈希适合存储经常变动的信息，特别是对象的存储。</p><h2 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zadd 有序集合名 分数1 元素1 [分数2 元素2 <span class="string">...</span>]        <span class="comment">#添加一个或多个带分数的元素到有序集合中（能够直接覆盖存在元素的分数）</span></span><br><span class="line"><span class="comment">#下面命令中的 withscores 表示的是连同分数一起显示出来。并且下面命令中的数值1一定要大于数值2。</span></span><br><span class="line">zrange 有序集合名 数值1 数值2 [withscores]           <span class="comment">#闭区间截取有序集合，并且是按分数升序进行排序。</span></span><br><span class="line">zrevrange 有序集合名 数值1 数值2    [withscores]       <span class="comment">#闭区间截取有序集合，并且是按分数降序进行排序。</span></span><br><span class="line">zrangebyscore 有序集合名 数值1 数值2    [withscores]    <span class="comment">#闭区间截取有序集合，并且按照分数从数值1到数值2进行排序。数值1可以是 -inf，数值2可以是 +inf。</span></span><br><span class="line"></span><br><span class="line">zrem 有序集合名 元素1 [元素2 <span class="string">...</span>]            <span class="comment">#移除有序集合中一个或多个指定元素</span></span><br><span class="line">zcard 有序集合名                  <span class="comment">#获取有序集合中元素个数</span></span><br><span class="line">zcount 有序集合名 数值1 数值2    <span class="comment">#按分数闭区间获取有序集合中元素个数</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound03.md-16.png"></p><p><img data-src="/images/redis-expound03.md-17.png"></p><h3 id="备注：-2"><a href="#备注：-2" class="headerlink" title="备注："></a>备注：</h3><p>有序集合可用于成绩表或工资表排序。带权重进行判断是普通消息还是重要消息。排行榜实现。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Key-Value（键值对）&quot;&gt;&lt;a href=&quot;#Key-Value（键值对）&quot; class=&quot;headerlink&quot; title=&quot;Key-Value（键值对）&quot;&gt;&lt;/a&gt;Key-Value（键值对）&lt;/h2&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; 键 值        &lt;span class=&quot;comment&quot;&gt;#设置键值对（能够直接覆盖存在键的值）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt; 键        &lt;span class=&quot;comment&quot;&gt;#获取键相应的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;keys&lt;/span&gt; *         &lt;span class=&quot;comment&quot;&gt;#查看所有键&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exists 键    &lt;span class=&quot;comment&quot;&gt;#判断键是否存在&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;move 数据库    &lt;span class=&quot;comment&quot;&gt;#移动键到别的数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expire 键 秒数    &lt;span class=&quot;comment&quot;&gt;#设置键的过期时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ttl 键        &lt;span class=&quot;comment&quot;&gt;#查看键剩余时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type 键        &lt;span class=&quot;comment&quot;&gt;#查看键类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img data-src=&quot;/images/redis-expound03.md-0.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;String（字符串）&quot;&gt;&lt;a href=&quot;#String（字符串）&quot; class=&quot;headerlink&quot; title=&quot;String（字符串）&quot;&gt;&lt;/a&gt;String（字符串）&lt;/h2&gt;&lt;figure class=&quot;highlight jboss-cli&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;append 键 字符串  &lt;span class=&quot;comment&quot;&gt;#追加字符串，如果当前 key 不存在，就相当于设置键值对。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;strlen 键        &lt;span class=&quot;comment&quot;&gt;#获取字符串长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;incr 键            &lt;span class=&quot;comment&quot;&gt;#值加一&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;decr 键            &lt;span class=&quot;comment&quot;&gt;#值减一&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;incrby 键 步长       &lt;span class=&quot;comment&quot;&gt;#指定值增量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;decrby 键 步长       &lt;span class=&quot;comment&quot;&gt;#指定值减量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getrange 键 数值1 数值2     &lt;span class=&quot;comment&quot;&gt;#闭区间截取字符串。当数值2为-1时，表示从数值1的下标开始截取到最后一个值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setrange 键 数值 字符串    &lt;span class=&quot;comment&quot;&gt;#替换为指定位置开始的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setex 键 秒数 值   &lt;span class=&quot;comment&quot;&gt;#设置键值对，并会在指定秒数后过期。（set with expire）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setnx 键 值        &lt;span class=&quot;comment&quot;&gt;#如果键不存在就创建（分布式锁中经常使用）(set if not exist)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mset 键1 值1 [键2 值2 &lt;span class=&quot;string&quot;&gt;...&lt;/span&gt;]   &lt;span class=&quot;comment&quot;&gt;#设置一个或多个键值对（能够直接覆盖存在键的值）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mget 键1 键2 [键3 &lt;span class=&quot;string&quot;&gt;...&lt;/span&gt;]         &lt;span class=&quot;comment&quot;&gt;#获取一个或多个键相应的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msetnx 键1 值1 [键2 值2 &lt;span class=&quot;string&quot;&gt;...&lt;/span&gt;]        &lt;span class=&quot;comment&quot;&gt;#如果不存在就创建键值对。但是其具有原子性，就是其中一个键存在，其它键就都不会被创建。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getset 键 值        &lt;span class=&quot;comment&quot;&gt;#先获取键相应的值，再设置键相应的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#对象创建的两种方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; user&lt;span class=&quot;function&quot;&gt;:1&lt;/span&gt; &amp;#123;name&lt;span class=&quot;function&quot;&gt;:guest997&lt;/span&gt;,age&lt;span class=&quot;function&quot;&gt;:18&lt;/span&gt;&amp;#125;  &lt;span class=&quot;comment&quot;&gt;#设置键为 user:1，值为 json 字符。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mset user&lt;span class=&quot;function&quot;&gt;:1&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;:name&lt;/span&gt; guest997 user&lt;span class=&quot;function&quot;&gt;:1&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;:age&lt;/span&gt; 18      &lt;span class=&quot;comment&quot;&gt;#设置两个键分别为 user:1:name 和 user:1:age，值分别为 guest997 和 18。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(二)</title>
    <link href="http://guest997.tk/2021/09/28/redis-expound02/"/>
    <id>http://guest997.tk/2021/09/28/redis-expound02/</id>
    <published>2021-09-28T02:48:22.000Z</published>
    <updated>2021-10-04T04:12:26.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis（Remote-Dictionary-Server）"><a href="#Redis（Remote-Dictionary-Server）" class="headerlink" title="Redis（Remote Dictionary Server）"></a>Redis（Remote Dictionary Server）</h2><p>Redis 是一个开源的使用 C 语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库。它可以用作数据库、缓存和消息中间件。</p><ul><li>  内存存储、持久化</li><li>  高速缓存</li><li>  发布订阅系统</li><li>  地图信息分析</li><li>  计时器、计数器</li></ul><h2 id="安装并运行测试-Redis"><a href="#安装并运行测试-Redis" class="headerlink" title="安装并运行测试 Redis"></a>安装并运行测试 Redis</h2><p>下载并上传 Redis 压缩包到 Linux 服务器下的 /opt 目录下。（程序一般都放在这）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压压缩包</span></span><br><span class="line"><span class="attribute">tar</span> -zxvf redis-<span class="number">6</span>.<span class="number">2</span>.<span class="number">5</span>.tar.gz</span><br><span class="line"><span class="comment">#基本的环境安装和配置</span></span><br><span class="line"><span class="attribute">yum</span> install gcc-c++</span><br><span class="line"><span class="attribute">make</span></span><br><span class="line"><span class="attribute">make</span> install</span><br></pre></td></tr></table></figure><p>Redis 的默认安装路径：/usr/local/bin，将 /opt/redis-6.2.5/redis.conf 配置文件复制到 /usr/local/bin/myconfig 目录下。以后就使用这个复制过来的配置文件。（主要是为了有个备份，防止误操作）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="regexp">/usr/</span>local<span class="regexp">/bin/my</span>config</span><br><span class="line">cp <span class="regexp">/opt/</span>redis-<span class="number">6.2</span>.<span class="number">5</span><span class="regexp">/redis.conf /u</span>sr<span class="regexp">/local/</span>bin/myconfig</span><br></pre></td></tr></table></figure><p>Redis 默认不是后台启动的，需要修改配置文件。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/bin/my</span>config</span><br><span class="line">vim redis.conf    <span class="comment">#将 daemonize no 改为 daemonize yes</span></span><br></pre></td></tr></table></figure><p>运行并测试 Redis。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span></span><br><span class="line">redis-server myconfig/redis.conf    <span class="comment">#指定配置文件启动 redis</span></span><br><span class="line">redis-cli -p <span class="number">6379</span>        <span class="comment">#使用 redis 客户端连接</span></span><br><span class="line">ping</span><br><span class="line">shutdown    <span class="comment">#关闭 redis</span></span><br><span class="line"><span class="keyword">exit</span>        <span class="comment">#退出</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound02.md-0.png"></p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#100个并发连接，100000请求。</span></span><br><span class="line"><span class="attribute">redis</span>-benchmark -h localhost -p <span class="number">6379</span> -c <span class="number">100</span> -n <span class="number">100000</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound02.md-1.png"></p><h2 id="基础知识和命令"><a href="#基础知识和命令" class="headerlink" title="基础知识和命令"></a>基础知识和命令</h2><p>redis 默认有16个数据库，配置文件中有这样的一项配置。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">databases</span> <span class="number">16</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/redis-expound02.md-2.png"></p><p><strong>Redis 是单线程的。</strong></p><p>Redis 是基于内存操作，CPU 不是 Redis 的性能瓶颈，Redis 的性能瓶颈是机器的内存和网络带宽，既然可以使用单线程就能实现，那就使用单线程就完事了。</p><p><strong>那 Redis 为什么使用的是单线程还这么快？</strong></p><p>Redis 将所有的数据放在内存中，所以说使用单线程去操作效率就是最高的，多线程会涉及到 CPU 上下文会切换，而这是一个耗时的操作，对于内存系统而言，如果没有上下文切换效率就是最高的。多次读写都是在一个 CPU 上，在内存情况下，这个就是最佳的方案。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Redis（Remote-Dictionary-Server）&quot;&gt;&lt;a href=&quot;#Redis（Remote-Dictionary-Server）&quot; class=&quot;headerlink&quot; title=&quot;Redis（Remote Dictionary Server）&quot;&gt;&lt;/a&gt;Redis（Remote Dictionary Server）&lt;/h2&gt;&lt;p&gt;Redis 是一个开源的使用 C 语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库。它可以用作数据库、缓存和消息中间件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  内存存储、持久化&lt;/li&gt;
&lt;li&gt;  高速缓存&lt;/li&gt;
&lt;li&gt;  发布订阅系统&lt;/li&gt;
&lt;li&gt;  地图信息分析&lt;/li&gt;
&lt;li&gt;  计时器、计数器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装并运行测试-Redis&quot;&gt;&lt;a href=&quot;#安装并运行测试-Redis&quot; class=&quot;headerlink&quot; title=&quot;安装并运行测试 Redis&quot;&gt;&lt;/a&gt;安装并运行测试 Redis&lt;/h2&gt;&lt;p&gt;下载并上传 Redis 压缩包到 Linux 服务器下的 /opt 目录下。（程序一般都放在这）&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 详解(一)</title>
    <link href="http://guest997.tk/2021/09/27/redis-expound01/"/>
    <id>http://guest997.tk/2021/09/27/redis-expound01/</id>
    <published>2021-09-27T01:51:08.000Z</published>
    <updated>2021-10-04T04:12:16.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主从复制-读写分离"><a href="#主从复制-读写分离" class="headerlink" title="主从复制 + 读写分离"></a>主从复制 + 读写分离</h2><p><strong>在使用读写分离之前应该考虑使用缓存能不能解决问题。读写分离主要应对的是数据库读并发。</strong></p><p>读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。一般情况下，我们都会选择一主多从，也就是一台主数据库负责写，其它的从数据库负责读。主库和从库之间会进行数据同步，以保证从库中数据的准确性。这样的架构实现起来比较简单，并且也符合系统的写少读多的特点。<img data-src="/images/redis-expound01.md-0.png"></p><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><p>解决数据库存储压力的答案之一就是分库分表。</p><h3 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h3><p>分库就是对单库的数据进行拆分，可以是垂直拆分，也可以是水平拆分。<br>垂直拆分指的是按照业务对数据库中的表进行分组，同组的放到一个新的数据库（逻辑上，并非实例）中。需要从实际业务出发将大业务分割成小业务。<img data-src="/images/redis-expound01.md-1.png"></p><p>在数据库垂直拆分后遇到单机数据库性能瓶颈之后，就可以考虑数据库水平拆分了。之所以先垂直拆分才水平拆分，是因为垂直拆分后数据业务清晰而且单一，更加方便指定水平的标准。<img data-src="/images/redis-expound01.md-2.png"></p><h3 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h3><p>分表就是对单表的数据进行拆分，可以是垂直拆分，也可以是水平拆分。<br>垂直拆分是对数据表列的拆分，把一张列比较多的表拆分为多张表。<img data-src="/images/redis-expound01.md-3.png"></p><p>水平拆分是对数据表行的拆分，把一张行比较多的表拆分为多张表，表结构维持不变。也就是说拆分后数据集的并集等于拆分前的数据集。在这就不再赘述了。</p><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p><strong>随着时代变化，MySQL 等关系型数据库就不够用了，因为数据量很大，变化很快。一些比较大的文件和图片，如果有一种数据库来专门处理这些数据，MySQL 等关系型数据库压力就会变得很小。</strong></p><h2 id="一个基本的互联网项目"><a href="#一个基本的互联网项目" class="headerlink" title="一个基本的互联网项目"></a>一个基本的互联网项目</h2><p><img data-src="/images/redis-expound01.md-4.png"></p><h2 id="NoSQL（Not-Only-SQL）"><a href="#NoSQL（Not-Only-SQL）" class="headerlink" title="NoSQL（Not Only SQL）"></a>NoSQL（Not Only SQL）</h2><p>NoSQL，泛指非关系型的数据库。随着互联网 web2.0 网站的兴起，传统的关系数据库在处理 web2.0 网站，特别是超大规模和高并发的社交网络服务类型的 web2.0 纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL 数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。</p><p>特点：</p><ul><li>  方便扩展（因为数据之间没有关系）</li><li>  大数据量高性能（NoSQL 的缓存是记录级的，是一种细粒度的缓存，性能会比较高）</li><li>  数据类型多样（不需要事先设计数据库，随取随用）</li></ul><h2 id="RDBMS-和-NoSQL-的区别"><a href="#RDBMS-和-NoSQL-的区别" class="headerlink" title="RDBMS 和 NoSQL 的区别"></a>RDBMS 和 NoSQL 的区别</h2><p>RDBMS：</p><ul><li>  结构化组织</li><li>  SQL（结构化查询语言）</li><li>  数据和关系存储</li><li>  数据操作和定义语言</li><li>  严格的各种一致性</li><li>  基础的事务操作</li></ul><p>NoSQL：</p><ul><li>  不仅仅是数据</li><li>  没有固定的查询语言</li><li>  键值对存储、列存储、文档存储、图形存储</li><li>  最终一致性</li><li>  CAP 和 BASE 理论</li><li>  高性能、高可用、高可扩</li></ul><h2 id="3V-3高"><a href="#3V-3高" class="headerlink" title="3V + 3高"></a>3V + 3高</h2><p>大数据时代的3V：（主要是描述问题的）</p><ul><li>  海量（Volume）</li><li>  多样（Variety）</li><li>  实时（Velocity）</li></ul><p>互联网需求的3高：（主要是对程序的要求）</p><ul><li>  高并发</li><li>  高可扩</li><li>  高性能</li></ul><h2 id="NoSQL-的四大分类"><a href="#NoSQL-的四大分类" class="headerlink" title="NoSQL 的四大分类"></a>NoSQL 的四大分类</h2><h3 id="KV-键值对数据库"><a href="#KV-键值对数据库" class="headerlink" title="KV 键值对数据库"></a>KV 键值对数据库</h3><ul><li>  Redis</li><li>  Tair</li></ul><h3 id="文档型数据库"><a href="#文档型数据库" class="headerlink" title="文档型数据库"></a>文档型数据库</h3><ul><li>  MongoDB：是一个基于分布式文件存储的数据库，主要用来处理大量的文档。MongoDB 是一个介于关系型数据库和非关系型数据库中间的产品。MongoDB 是非关系型数据库中功能最丰富，最像关系型数据库的。</li><li>  ConthDB</li></ul><h3 id="列存储数据库"><a href="#列存储数据库" class="headerlink" title="列存储数据库"></a>列存储数据库</h3><ul><li>  HBase</li><li>  分布式文件系统</li></ul><h3 id="图关系数据库"><a href="#图关系数据库" class="headerlink" title="图关系数据库"></a>图关系数据库</h3><ul><li>  Neo4j</li><li>  InfoGrid</li></ul><h2 id="NoSQL-的四大分类对比"><a href="#NoSQL-的四大分类对比" class="headerlink" title="NoSQL 的四大分类对比"></a>NoSQL 的四大分类对比</h2><p><img data-src="/images/redis-expound01.md-5.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;主从复制-读写分离&quot;&gt;&lt;a href=&quot;#主从复制-读写分离&quot; class=&quot;headerlink&quot; title=&quot;主从复制 + 读写分离&quot;&gt;&lt;/a&gt;主从复制 + 读写分离&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;在使用读写分离之前应该考虑使用缓存能不能解决问题。读写分离主要应对的是数据库读并发。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。一般情况下，我们都会选择一主多从，也就是一台主数据库负责写，其它的从数据库负责读。主库和从库之间会进行数据同步，以保证从库中数据的准确性。这样的架构实现起来比较简单，并且也符合系统的写少读多的特点。&lt;img data-src=&quot;/images/redis-expound01.md-0.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;分库分表&quot;&gt;&lt;a href=&quot;#分库分表&quot; class=&quot;headerlink&quot; title=&quot;分库分表&quot;&gt;&lt;/a&gt;分库分表&lt;/h2&gt;&lt;p&gt;解决数据库存储压力的答案之一就是分库分表。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://guest997.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://guest997.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="http://guest997.tk/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>blog 从 WordPress 迁移到 Hexo（二）</title>
    <link href="http://guest997.tk/2021/09/21/blog-wordpress-hexo-02/"/>
    <id>http://guest997.tk/2021/09/21/blog-wordpress-hexo-02/</id>
    <published>2021-09-21T07:49:06.000Z</published>
    <updated>2021-10-04T04:07:56.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>使用插件迁移的话，图片会使用 wordpress 的链接，这显然是不符合我们的需求的，有些人可能会使用 cdn，这些倒是没有啥问题，但是如果是把图片存在服务器上的，服务器在的话还好，如果不在了，那这些图片就都全部失效了。所以这里我就讲下图片通过脚本迁移到本地并将文章中的外链进行更换。</p><h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>在运行下面的脚本前，需要保证所需依赖都安装完成了。具体缺少什么依赖，运行时都会有提示。为了保证能够正常访问到 wordpress 的博客，脚本中设置了本地代理，当然如果能直接正常访问是不需要设置代理的，注释掉即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mimetypes</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> regex</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;http_proxy&quot;</span>] = <span class="string">&quot;http://127.0.0.1:1081&quot;</span></span><br><span class="line">os.environ[<span class="string">&quot;https_proxy&quot;</span>] = <span class="string">&quot;http://127.0.0.1:1081&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = <span class="built_in">input</span>(<span class="string">&quot;输入 hexo 的 source 目录&quot;</span>)</span><br><span class="line">    <span class="comment"># 去尾</span></span><br><span class="line">    <span class="keyword">if</span> p.endswith(<span class="string">&quot;\\&quot;</span>):</span><br><span class="line">        p = p[:<span class="built_in">len</span>(p) - <span class="number">1</span>]</span><br><span class="line">    image_p = p + <span class="string">&quot;\\images&quot;</span></span><br><span class="line">    post_p = p + <span class="string">&quot;\\_posts&quot;</span></span><br><span class="line">    <span class="comment"># 查看博文目录是否存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(post_p):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;路径下没_posts路径，请重新输入&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.chmod(p, <span class="number">777</span>)</span><br><span class="line">    <span class="comment"># 查看图片目录是否存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(image_p):</span><br><span class="line">        os.makedirs(p + <span class="string">&quot;\\images&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.chmod(p, <span class="number">777</span>)</span><br><span class="line">    <span class="comment"># 循环目录下每一个.md 文件</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(post_p):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">&quot;.md&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(filename)</span><br><span class="line">            path = post_p + <span class="string">&quot;\\&quot;</span> + filename</span><br><span class="line">            <span class="comment"># 以utf8编码读取</span></span><br><span class="line">            f = <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            content = f.read()</span><br><span class="line">            f.close()</span><br><span class="line">            <span class="comment"># 匹配 markdown 中的图片 即 ![tag](url)</span></span><br><span class="line">            <span class="keyword">for</span> text <span class="keyword">in</span> regex.findall(<span class="string">r&quot;\!\[[^\s]*\]\([a-zA-z]+://[^\s]*\)&quot;</span>, content):</span><br><span class="line">                <span class="built_in">print</span>(text)</span><br><span class="line">                <span class="comment"># 提取 tag 内容</span></span><br><span class="line">                tag = regex.findall(<span class="string">r&quot;\!\[[^\s]*\](?=\([a-zA-z]+://[^\s]*\))&quot;</span>, text)[<span class="number">0</span>]</span><br><span class="line">                <span class="comment"># 提取 url 内容</span></span><br><span class="line">                urldata = regex.findall(<span class="string">r&quot;(?&lt;=\!\[[^\s]*\])\([a-zA-z]+://[^\s]*\)&quot;</span>, text)[<span class="number">0</span>]</span><br><span class="line">                <span class="comment"># 去掉括号</span></span><br><span class="line">                u = urldata[<span class="number">1</span>:<span class="built_in">len</span>(urldata) - <span class="number">1</span>]</span><br><span class="line">                <span class="comment"># 提取当前文章的名字加上编号即为图片名字</span></span><br><span class="line">                name = filename + <span class="string">&quot;-&quot;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">                <span class="comment"># 获取图片</span></span><br><span class="line">                response = requests.get(u)</span><br><span class="line">                <span class="comment"># 取请求头 content-type 属性获取扩展名如.png/.jpg</span></span><br><span class="line">                content_type = response.headers[<span class="string">&#x27;content-type&#x27;</span>]</span><br><span class="line">                extension = mimetypes.guess_extension(content_type)</span><br><span class="line">                <span class="comment"># 请求返回内容</span></span><br><span class="line">                img = response.content</span><br><span class="line">                <span class="comment"># 写入图片文件</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(image_p + <span class="string">&quot;\\&quot;</span> + name + extension, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(img)</span><br><span class="line">                f.close()</span><br><span class="line">                <span class="comment"># 新引用地址</span></span><br><span class="line">                new_u = <span class="string">&quot;/images/&quot;</span> + name + extension</span><br><span class="line">                <span class="comment"># 替换原文</span></span><br><span class="line">                content = content.replace(text, tag + <span class="string">&quot;(&quot;</span> + new_u + <span class="string">&quot;)&quot;</span>)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 写入文章文件</span></span><br><span class="line">            f = <span class="built_in">open</span>(path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">            f.write(content)</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure><p>运行上面的脚本时会提示输入 hexo 的 source 目录，输入绝对路径即可。迁移到本地的图片会放在 source/images 目录下。<strong>注意：有些图片可能会爬取失败，具体表现为图片格式为 html，这些图片都需要手动下载并进行替换，文章中的链接记得也要替换，不过文章中的图片链接是显示不出来的，这是没问题的，因为将项目 push 到服务器或 Github 上时，项目结构大致如下图所示。文章会自动匹配到域名/images/图片名。</strong></p><p><img data-src="/images/blog-wordpress-hexo-02.md-0.png"></p><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;p&gt;使用插件迁移的话，图片会使用 wordpress 的链接，这显然是不符合我们的需求的，有些人可能会使用 cdn，这些倒是没有啥问题，但是如果是把图片存在服务器上的，服务器在的话还好，如果不在了，那这些图片就都全部失效了。所以这里我就讲下图片通过脚本迁移到本地并将文章中的外链进行更换。&lt;/p&gt;
&lt;h2 id=&quot;正文：&quot;&gt;&lt;a href=&quot;#正文：&quot; class=&quot;headerlink&quot; title=&quot;正文：&quot;&gt;&lt;/a&gt;正文：&lt;/h2&gt;&lt;p&gt;在运行下面的脚本前，需要保证所需依赖都安装完成了。具体缺少什么依赖，运行时都会有提示。为了保证能够正常访问到 wordpress 的博客，脚本中设置了本地代理，当然如果能直接正常访问是不需要设置代理的，注释掉即可。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; mimetypes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; regex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os.environ[&lt;span class=&quot;string&quot;&gt;&amp;quot;http_proxy&amp;quot;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&amp;quot;http://127.0.0.1:1081&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os.environ[&lt;span class=&quot;string&quot;&gt;&amp;quot;https_proxy&amp;quot;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&amp;quot;http://127.0.0.1:1081&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&amp;#x27;__main__&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = &lt;span class=&quot;built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;输入 hexo 的 source 目录&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 去尾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; p.endswith(&lt;span class=&quot;string&quot;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p = p[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(p) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    image_p = p + &lt;span class=&quot;string&quot;&gt;&amp;quot;\\images&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    post_p = p + &lt;span class=&quot;string&quot;&gt;&amp;quot;\\_posts&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 查看博文目录是否存在&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; os.path.exists(post_p):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;路径下没_posts路径，请重新输入&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        os.chmod(p, &lt;span class=&quot;number&quot;&gt;777&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 查看图片目录是否存在&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; os.path.exists(image_p):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        os.makedirs(p + &lt;span class=&quot;string&quot;&gt;&amp;quot;\\images&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        os.chmod(p, &lt;span class=&quot;number&quot;&gt;777&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 循环目录下每一个.md 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; os.listdir(post_p):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; filename.endswith(&lt;span class=&quot;string&quot;&gt;&amp;quot;.md&amp;quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(filename)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            path = post_p + &lt;span class=&quot;string&quot;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt; + filename&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# 以utf8编码读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            f = &lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;(path, &lt;span class=&quot;string&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;, encoding=&lt;span class=&quot;string&quot;&gt;&amp;#x27;utf8&amp;#x27;&lt;/span&gt;, errors=&lt;span class=&quot;string&quot;&gt;&amp;#x27;ignore&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            content = f.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            f.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# 匹配 markdown 中的图片 即 ![tag](url)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; text &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; regex.findall(&lt;span class=&quot;string&quot;&gt;r&amp;quot;\!\[[^\s]*\]\([a-zA-z]+://[^\s]*\)&amp;quot;&lt;/span&gt;, content):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 提取 tag 内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                tag = regex.findall(&lt;span class=&quot;string&quot;&gt;r&amp;quot;\!\[[^\s]*\](?=\([a-zA-z]+://[^\s]*\))&amp;quot;&lt;/span&gt;, text)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 提取 url 内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                urldata = regex.findall(&lt;span class=&quot;string&quot;&gt;r&amp;quot;(?&amp;lt;=\!\[[^\s]*\])\([a-zA-z]+://[^\s]*\)&amp;quot;&lt;/span&gt;, text)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 去掉括号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                u = urldata[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(urldata) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 提取当前文章的名字加上编号即为图片名字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name = filename + &lt;span class=&quot;string&quot;&gt;&amp;quot;-&amp;quot;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 获取图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                response = requests.get(u)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 取请求头 content-type 属性获取扩展名如.png/.jpg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                content_type = response.headers[&lt;span class=&quot;string&quot;&gt;&amp;#x27;content-type&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                extension = mimetypes.guess_extension(content_type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 请求返回内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                img = response.content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 写入图片文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;(image_p + &lt;span class=&quot;string&quot;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt; + name + extension, &lt;span class=&quot;string&quot;&gt;&amp;#x27;wb&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    f.write(img)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                f.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 新引用地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                new_u = &lt;span class=&quot;string&quot;&gt;&amp;quot;/images/&amp;quot;&lt;/span&gt; + name + extension&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 替换原文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                content = content.replace(text, tag + &lt;span class=&quot;string&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; + new_u + &lt;span class=&quot;string&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                i += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# 写入文章文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            f = &lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;(path, &lt;span class=&quot;string&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;, encoding=&lt;span class=&quot;string&quot;&gt;&amp;quot;utf8&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            f.write(content)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="建站" scheme="http://guest997.tk/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="建站" scheme="http://guest997.tk/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="脚本" scheme="http://guest997.tk/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>blog 从 WordPress 迁移到 Hexo（一）</title>
    <link href="http://guest997.tk/2021/09/20/blog-wordpress-hexo-01/"/>
    <id>http://guest997.tk/2021/09/20/blog-wordpress-hexo-01/</id>
    <published>2021-09-20T02:26:18.000Z</published>
    <updated>2021-10-04T04:07:53.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>hexo 以及 next 主题的安装过程就不赘述了，<strong>注意：next 主题的7和8版本是分开来的，7版本：<a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a>，8版本：<a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a>。至于为什么分开来，貌似团队内部的矛盾，而想要安装什么版本，就看你们自己了。（我安装的是8版本）</strong></p><h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul><li>  hexo 目录下运行下面的命令安装迁移插件：</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-migrator-wordpress <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ul><li>  用 wordpress 中自带的导出工具，将所有内容导出。</li></ul><p><img data-src="/images/blog-wordpress-hexo-01.md-0.png"></p><ul><li>  通过下面的命令进行迁移。<strong>注意：迁移并不是完美的迁移，比如页面以及评论是无法迁移过去的，不过它会保留下来，根据自己的需要将生成的 md 文档开头的属性修改即可。</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate wordpress &lt;<span class="built_in">source</span>&gt;     <span class="comment">#source 为 WordPress 导出的文件路径或网址</span></span><br></pre></td></tr></table></figure><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;p&gt;hexo 以及 next 主题的安装过程就不赘述了，&lt;strong&gt;注意：next 主题的7和8版本是分开来的，7版本：&lt;a href=&quot;https://github.com/theme-next/hexo-theme-next&quot;&gt;https://github.com/theme-next/hexo-theme-next&lt;/a&gt;，8版本：&lt;a href=&quot;https://github.com/next-theme/hexo-theme-next&quot;&gt;https://github.com/next-theme/hexo-theme-next&lt;/a&gt;。至于为什么分开来，貌似团队内部的矛盾，而想要安装什么版本，就看你们自己了。（我安装的是8版本）&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;正文：&quot;&gt;&lt;a href=&quot;#正文：&quot; class=&quot;headerlink&quot; title=&quot;正文：&quot;&gt;&lt;/a&gt;正文：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;  hexo 目录下运行下面的命令安装迁移插件：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-migrator-wordpress &lt;span class=&quot;comment&quot;&gt;--save&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="建站" scheme="http://guest997.tk/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="建站" scheme="http://guest997.tk/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="插件" scheme="http://guest997.tk/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>免费容器 Heroku 搭建 brook 代理</title>
    <link href="http://guest997.tk/2021/09/17/heroku-brook/"/>
    <id>http://guest997.tk/2021/09/17/heroku-brook/</id>
    <published>2021-09-17T01:42:02.000Z</published>
    <updated>2021-10-04T04:10:33.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol><li> Heroku 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。</li><li> Heroku 免费版有所限制，比如：30 分钟无人访问就休眠以及所有实例访问总时长限制为 550 小时。</li></ol><h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul><li>点击下方链接进入 brook-heroku 项目地址。<br>  <a href="https://github.com/zyp997/brook-heroku">https://github.com/zyp997/brook-heroku</a></li><li>  点击 <strong>Deploy to Heroku</strong> ，进入 Heroku 后台进行部署。</li><li>  只需填入<strong>实例名字</strong>和选择<strong>实例地区</strong>。在下方 <strong>app_name</strong> 项中，填入 <strong>你的实例名字</strong>；<strong>password</strong> 项中，填入密码。</li><li>  点击下方的 <strong>Deploy app</strong> ，等待自动部署完毕。</li><li>  点击 <strong>view</strong> ，会跳到已部署好的实例网站，<strong>如果跳转到了 brook 的官方项目地址或显示502错误，是没问题的。</strong></li><li>  下载支持 Brook 协议的客户端，配置信息如下：</li></ul><p>地址：你的实例名字.herokuapp.com<br>端口：443<br>默认密码：password<br>传输协议：wss<br>默认路径：/ws</p><ul><li>  如果觉得输入配置麻烦，也可以通过下面的地址获取二维码或链接。</li></ul><p>二维码：https://你的实例名字.herokuapp.com:443/密码/qr.png<br>链接： https://你的实例名字.herokuapp.com:443/密码/link.txt</p><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt; Heroku 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。&lt;/li&gt;
&lt;li&gt; Heroku 免费版有所限制，比如：30 分钟无人访问就休眠以及所有实例访问总时长限制为 550 小时。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;正文：&quot;&gt;&lt;a href=&quot;#正文：&quot; class=&quot;headerlink&quot; title=&quot;正文：&quot;&gt;&lt;/a&gt;正文：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;点击下方链接进入 brook-heroku 项目地址。&lt;br&gt;  &lt;a href=&quot;https://github.com/zyp997/brook-heroku&quot;&gt;https://github.com/zyp997/brook-heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  点击 &lt;strong&gt;Deploy to Heroku&lt;/strong&gt; ，进入 Heroku 后台进行部署。&lt;/li&gt;
&lt;li&gt;  只需填入&lt;strong&gt;实例名字&lt;/strong&gt;和选择&lt;strong&gt;实例地区&lt;/strong&gt;。在下方 &lt;strong&gt;app_name&lt;/strong&gt; 项中，填入 &lt;strong&gt;你的实例名字&lt;/strong&gt;；&lt;strong&gt;password&lt;/strong&gt; 项中，填入密码。&lt;/li&gt;
&lt;li&gt;  点击下方的 &lt;strong&gt;Deploy app&lt;/strong&gt; ，等待自动部署完毕。&lt;/li&gt;
&lt;li&gt;  点击 &lt;strong&gt;view&lt;/strong&gt; ，会跳到已部署好的实例网站，&lt;strong&gt;如果跳转到了 brook 的官方项目地址或显示502错误，是没问题的。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;  下载支持 Brook 协议的客户端，配置信息如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;地址：你的实例名字.herokuapp.com&lt;br&gt;端口：443&lt;br&gt;默认密码：password&lt;br&gt;传输协议：wss&lt;br&gt;默认路径：/ws&lt;/p&gt;</summary>
    
    
    
    <category term="爬墙" scheme="http://guest997.tk/categories/%E7%88%AC%E5%A2%99/"/>
    
    
    <category term="白嫖" scheme="http://guest997.tk/tags/%E7%99%BD%E5%AB%96/"/>
    
    <category term="容器" scheme="http://guest997.tk/tags/%E5%AE%B9%E5%99%A8/"/>
    
    <category term="爬墙" scheme="http://guest997.tk/tags/%E7%88%AC%E5%A2%99/"/>
    
    <category term="heroku" scheme="http://guest997.tk/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>免费容器 Heroku 搭建 chisel 代理</title>
    <link href="http://guest997.tk/2021/09/16/heroku-chisel/"/>
    <id>http://guest997.tk/2021/09/16/heroku-chisel/</id>
    <published>2021-09-16T01:44:39.000Z</published>
    <updated>2021-10-04T04:10:35.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol><li> Heroku 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。</li><li> Heroku 免费版有所限制，比如：30 分钟无人访问就休眠以及所有实例访问总时长限制为 550 小时。</li></ol><h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul><li>点击下方链接进入 chisel-heroku 项目地址。<br>  <a href="https://github.com/zyp997/chisel-heroku">https://github.com/zyp997/chisel-heroku</a></li><li>  点击 <strong>Deploy to Heroku</strong> ，进入 Heroku 后台进行部署。</li><li>  只需填入<strong>实例名字</strong>和选择<strong>实例地区</strong>即可。</li><li>  点击下方的 <strong>Deploy app</strong> ，等待自动部署完毕。</li><li>  点击 <strong>view</strong> ，会跳到已部署好的实例网站，如下图显示即为部署成功。</li></ul><p><img data-src="/images/heroku-chisel.md-0.png"></p><ul><li>  下载 chisel 客户端压缩包，点击下方链接进入官方 github 地址，下载并解压相应系统的压缩包。(也可以到我的网盘下载) <a href="https://github.com/jpillora/chisel/releases">https://github.com/jpillora/chisel/releases</a></li><li>  以 win10 64 位系统进行配置，解压后的文件夹下创建 <strong>startup.bat</strong> 文件，文件内容为：</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\chisel client <span class="params">--keepalive</span> 10s <span class="params">--auth</span> user<span class="function">:pass</span> 你的实例名字<span class="string">.herokuapp.com</span> 1080<span class="function">:socks</span></span><br></pre></td></tr></table></figure><ul><li>  双击运行 <strong>startup.bat</strong> 文件，无红字报错即已经成功运行 chisel。</li><li>  浏览器可以安装 SwitchyOmega 插件设置代理，代理协议设置为 socks5，代理服务器设置为 127.0.0.1，代理端口设置为 1080。（最好配合 gfwlist 进行分流上网）考虑到插件不易下载，故将插件放到了我的网盘的爬墙目录下。（不知道我的网盘地址？左侧栏目就有啊！）</li></ul><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt; Heroku 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。&lt;/li&gt;
&lt;li&gt; Heroku 免费版有所限制，比如：30 分钟无人访问就休眠以及所有实例访问总时长限制为 550 小时。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;正文：&quot;&gt;&lt;a href=&quot;#正文：&quot; class=&quot;headerlink&quot; title=&quot;正文：&quot;&gt;&lt;/a&gt;正文：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;点击下方链接进入 chisel-heroku 项目地址。&lt;br&gt;  &lt;a href=&quot;https://github.com/zyp997/chisel-heroku&quot;&gt;https://github.com/zyp997/chisel-heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  点击 &lt;strong&gt;Deploy to Heroku&lt;/strong&gt; ，进入 Heroku 后台进行部署。&lt;/li&gt;
&lt;li&gt;  只需填入&lt;strong&gt;实例名字&lt;/strong&gt;和选择&lt;strong&gt;实例地区&lt;/strong&gt;即可。&lt;/li&gt;
&lt;li&gt;  点击下方的 &lt;strong&gt;Deploy app&lt;/strong&gt; ，等待自动部署完毕。&lt;/li&gt;
&lt;li&gt;  点击 &lt;strong&gt;view&lt;/strong&gt; ，会跳到已部署好的实例网站，如下图显示即为部署成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&quot;/images/heroku-chisel.md-0.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="爬墙" scheme="http://guest997.tk/categories/%E7%88%AC%E5%A2%99/"/>
    
    
    <category term="白嫖" scheme="http://guest997.tk/tags/%E7%99%BD%E5%AB%96/"/>
    
    <category term="容器" scheme="http://guest997.tk/tags/%E5%AE%B9%E5%99%A8/"/>
    
    <category term="爬墙" scheme="http://guest997.tk/tags/%E7%88%AC%E5%A2%99/"/>
    
    <category term="heroku" scheme="http://guest997.tk/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>blog 使用的主题——Sakurairo</title>
    <link href="http://guest997.tk/2021/09/15/blog-sakurairo/"/>
    <id>http://guest997.tk/2021/09/15/blog-sakurairo/</id>
    <published>2021-09-15T01:29:51.000Z</published>
    <updated>2021-10-04T04:07:49.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>一个多彩，轻松上手，体验完善，具有强大自定义功能的 WordPress 主题。</p><h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="版本简介："><a href="#版本简介：" class="headerlink" title="版本简介："></a>版本简介：</h3><ul><li>  多语言支持：目前提供简体中文・英语(繁体中文/日本语将在后续版本中实装)</li><li>  自定义度再加强：一言、页尾附加代码、可视化设置，帮助你更好的自定义你的主题。</li><li>  全面进化主题体验：新增追剧模板优化移动端体验、增强的深色模式，更有超过100+处优化改进，主题体验再一次得到加强。</li></ul><h3 id="使用相关："><a href="#使用相关：" class="headerlink" title="使用相关："></a>使用相关：</h3><ul><li>  使用本主题的博客：<a href="https://iro.tw/demo.html">https://iro.tw/demo.html</a></li><li>  主题交流群：<a href="https://jq.qq.com/?_wv=1027&k=U5UJjRik">784229925</a></li><li>  如果在使用过程中遇到了任何问题，请<strong>访问</strong>本主题的 <a href="https://iro.tw/">官方站点</a></li><li>  在确认你遇到的现象确实是一个 Bug 后，请在 <a href="https://github.com/mirai-mamori/Sakurairo/issues/new/choose">Issues</a> 提交问题，并为该问题尽可能的描述清楚， 按照提供的 issue 模板进行填写，谢谢配合。</li></ul><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><h3 id="开源相关："><a href="#开源相关：" class="headerlink" title="开源相关："></a>开源相关：</h3><ul><li>  本主题<strong>基于 <a href="https://github.com/mashirozx/sakura/tree/3.x">Sakura V3 Series</a> 主题进行重构开发</strong>，使用 <a href="https://github.com/mirai-mamori/Sakurairo/blob/master/LICENSE">GPL V2.0</a> 协议开源。</li><li>  本主题使用了部分来自互联网的特效。由于版权及开源协议不明，无法具体说明相关信息。如果本主题使用到您制作的特效，烦请您通过邮件（me#okaeri.org）来取得联系。</li></ul><h3 id="引用相关："><a href="#引用相关：" class="headerlink" title="引用相关："></a>引用相关：</h3><ul><li>  本主题社交网络图标中，流畅设计图标引用于由Paradox设计的 <a href="https://wwi.lanzous.com/ikyq5kgx0wb">Fluent图标包</a></li><li>  本主题社交网络图标中，沐氢图标引用于由缄默设计的 <a href="https://www.coolapk.com/apk/com.muh2.icon">沐氢图标包</a></li><li>  本主题白猫样式Logo参考原主题作者白猫，由 <a href="https://hyacm.com/acai/ui/143/sakura-logo/">Hyacm</a> 提供方案</li><li>  本主题使用 Stevenjoezhang <a href="https://github.com/stevenjoezhang/live2d-widget">Live2d-Widget</a> 作为默认看板娘</li></ul><h3 id="依赖相关："><a href="#依赖相关：" class="headerlink" title="依赖相关："></a>依赖相关：</h3><ul><li>  本主题使用 Fuukei <a href="https://github.com/Fuukei/Public_Repository">Public Repository</a> 作为默认静态资源库</li><li>  本主题使用 Codestar <a href="https://github.com/Codestar/codestar-framework">Codestar Framework</a> 作为设置框架</li><li>  本主题使用 YahnisElsts <a href="https://github.com/YahnisElsts/plugin-update-checker">Plugin Update Checker</a> 以提供主题更新功能</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;p&gt;一个多彩，轻松上手，体验完善，具有强大自定义功能的 WordPress 主题。&lt;/p&gt;
&lt;h2 id=&quot;正文：&quot;&gt;&lt;a href=&quot;#正文：&quot; class=&quot;headerlink&quot; title=&quot;正文：&quot;&gt;&lt;/a&gt;正文：&lt;/h2&gt;&lt;h3 id=&quot;版本简介：&quot;&gt;&lt;a href=&quot;#版本简介：&quot; class=&quot;headerlink&quot; title=&quot;版本简介：&quot;&gt;&lt;/a&gt;版本简介：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;  多语言支持：目前提供简体中文・英语(繁体中文/日本语将在后续版本中实装)&lt;/li&gt;
&lt;li&gt;  自定义度再加强：一言、页尾附加代码、可视化设置，帮助你更好的自定义你的主题。&lt;/li&gt;
&lt;li&gt;  全面进化主题体验：新增追剧模板优化移动端体验、增强的深色模式，更有超过100+处优化改进，主题体验再一次得到加强。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="建站" scheme="http://guest997.tk/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="建站" scheme="http://guest997.tk/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>解锁网易云音乐客户端变灰歌曲（二）</title>
    <link href="http://guest997.tk/2021/09/14/unblockneteasemusic02/"/>
    <id>http://guest997.tk/2021/09/14/unblockneteasemusic02/</id>
    <published>2021-09-14T13:28:43.000Z</published>
    <updated>2021-10-04T04:13:25.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>之前的版本虽然说未失效，但是已经很久没维护了。故在这介绍另一个项目，fork 自 nondanee 的原版，仅作部分优化。</p><h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>fork 版我实际用起来效果还行，但是会有一些 bug 以及歌曲无法匹配到的问题。搭建方法和之前的文章是一样的，只不过是两个版本的脚本。之前搭建的文章：<a href="https://guest997.ml/practical/unblockneteasemusic/">https://guest997.ml/practical/unblockneteasemusic/</a></p><p>可以保留这两个版本，当使用之前的版本无法匹配到歌曲时，就可以使用现在有人维护的版本。需要注意的是：如果两个版本都使用了一样的代理端口号，就需要把运行中的版本终止掉，然后运行你想要的版本。查看占用端口的程序的 pid 和终止相应的 pid 的程序命令如下。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -aonfindstr <span class="string">&quot;端口&quot;</span>       <span class="comment">#查看占用端口的程序的 pid</span></span><br><span class="line">taskkill <span class="regexp">/F /</span>PID pid             <span class="comment">#终止相应的 pid 的程序</span></span><br></pre></td></tr></table></figure><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>fork 版 UnblockNeteaseMusic 项目地址：<a href="https://github.com/UnblockNeteaseMusic/server">https://github.com/UnblockNeteaseMusic/server</a></p><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;p&gt;之前的版本虽然说未失效，但是已经很久没维护了。故在这介绍另一个项目，fork 自 nondanee 的原版，仅作部分优化。&lt;/p&gt;
&lt;h2 id=&quot;正文：&quot;&gt;&lt;a href=&quot;#正文：&quot; class=&quot;headerlink&quot; title=&quot;正文：&quot;&gt;&lt;/a&gt;正文：&lt;/h2&gt;&lt;p&gt;fork 版我实际用起来效果还行，但是会有一些 bug 以及歌曲无法匹配到的问题。搭建方法和之前的文章是一样的，只不过是两个版本的脚本。之前搭建的文章：&lt;a href=&quot;https://guest997.ml/practical/unblockneteasemusic/&quot;&gt;https://guest997.ml/practical/unblockneteasemusic/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以保留这两个版本，当使用之前的版本无法匹配到歌曲时，就可以使用现在有人维护的版本。需要注意的是：如果两个版本都使用了一样的代理端口号，就需要把运行中的版本终止掉，然后运行你想要的版本。查看占用端口的程序的 pid 和终止相应的 pid 的程序命令如下。&lt;/p&gt;</summary>
    
    
    
    <category term="实用" scheme="http://guest997.tk/categories/%E5%AE%9E%E7%94%A8/"/>
    
    
    <category term="实用" scheme="http://guest997.tk/tags/%E5%AE%9E%E7%94%A8/"/>
    
    <category term="脚本" scheme="http://guest997.tk/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
</feed>
