<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记一次更改主题的404页面全过程</title>
    <url>/2021/03/08/404page/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>由于使用的主题的404页面，我并不喜欢，就想找个好看点的404页面模板来替换掉。由于是个小白，所以折腾起来还是有点费劲的。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul>
<li>  先来看下主题的404页面以及我找的模板页面。<img data-src="/images/404page.md-0.png"><img data-src="/images/404page.md-1.png"></li>
<li>  主题的404页面，比较喜欢的就是下面的两个按钮样式，这个要移植过去还是很简单的，只要找到相应的 div 标签元素复制过去以及将需要用到的 css 文件导入即可。</li>
<li>  模板的404页面，我想删掉下面的小图标和版权信息文字，同理，找到相应的 div 标签元素删掉即可。</li>
<li>  主要问题在于搜索框的处理，原来的表单提交方式是这样的：form action=”#”，表示的是返回当前页面，这样肯定是不行的，我想要实现的是在我的 blog 中进行搜索。</li>
<li>  由于我的搜索页面网址是这样的：<a href="https://guest997.ml/?s=">https://guest997.ml/?s=</a> ，所以只要加个 js 脚本进行网址拼接，再绑定到搜索按钮即可。就是下面的代码。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">addMsg</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.all.form1.action += <span class="string">&quot;/?s=&quot;</span> + <span class="built_in">document</span>.all.page.value;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.all.form1.submit();</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  表单提交方式还没更改，需要注意的是不能为空，否则就会提交给当前页面进行处理，而我们需要的只是保留域名进行网址拼接。更改之后的代码就是下面这样的。</li>
</ul>
<figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">action</span>=<span class="string">&quot;</span></span></span><span class="php"><span class="meta">&lt;?php</span> bloginfo(<span class="string">&#x27;url&#x27;</span>); <span class="meta">?&gt;</span></span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">class</span>=<span class="string">&quot;d-flex error-page-form&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;page&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search here&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;addMsg()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-search&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>  最后将源码放到主题目录下即可。修改完成的404页面如下图。<img data-src="/images/404page.md-1.png"></li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>其实完整的修改还需要修改 css 文件，毕竟我把从主题拿过来的 css 文件导入进去了，而且也删掉了一些模板中的元素，（这就表示里面有我用不到的样式代码）不过 css 文件一般都不大，所以我也就懒得改了。<br>想要我修改之后的模板，请到我的网盘下载 <strong>404页面模板</strong> 压缩包。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>增加阿里云盘容量</title>
    <url>/2021/03/27/alicd-increase-capacity/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>前几天阿里云盘公测，声称不会通过限速来实现商业化，将来也不会限速。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="一年有效期容量"><a href="#一年有效期容量" class="headerlink" title="一年有效期容量"></a>一年有效期容量</h3><p>福利码兑换：打开阿里云盘手机 app —&gt; 点头像 —&gt; 点击福利社 —&gt; 兑换福利码 —&gt; 输入福利码。（每日最多可输入三个，福利码数量有限，尽快输入）</p>
<p>扫地僧头发多（500G）<br>戴老师爱较真（500G)<br>飞跃彩虹（322G）<br>江宁婆婆<br>陈泥玛评测<br>知识就是力量<br>知识需要容量<br>科技中国<br>我爱爱范儿（300G）<br>干翻百度<br>资深盘友<br>yangyi<br>手机中国</p>
<p>做任务：打开阿里云盘手机 app —&gt; 点头像 —&gt; 点击福利社 —&gt;我的任务。</p>
<ul>
<li>  开启相册自动备份。</li>
<li>  打开消息通知。</li>
</ul>
<h3 id="永久容量"><a href="#永久容量" class="headerlink" title="永久容量"></a>永久容量</h3><p>做任务：打开阿里云盘手机 app —&gt; 点头像 —&gt; 点击福利社 —&gt;我的任务。</p>
<ul>
<li>  有名有姓（修改姓名和头像）</li>
<li>  神马都有（累计上传50张图片）</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>上面讲到的福利码和任务可能随时会增加或消失，所以建议尽快做完。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>白嫖</tag>
      </tags>
  </entry>
  <entry>
    <title>纯代码实现 blog 左下角的 APlayer 音乐播放器</title>
    <url>/2021/04/13/blog-aplayer/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>之前其实有用插件给 blog 添加音乐播放器，但如果能用代码实现肯定是更好的。<br><a href="https://guest997.ml/station/blog-music/">https://guest997.ml/station/blog-music/</a></p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul>
<li>  下载我的网盘 <strong>建站</strong> 目录下的 <strong>Aplayer</strong> 压缩包。</li>
<li>  上传并解压到网站随意目录下。</li>
<li>  添加以下代码到当前主题的 <strong>functions.php</strong> 文件。（记得修改引入的 css 和 js 文件的路径）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://guest997.ml/wp-content/themes/argon/Aplayer/APlayer.min.css&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://guest997.ml/wp-content/themes/argon/Aplayer/APlayer.min.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aplayer&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-fixed</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-autoplay</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-volume</span>=<span class="string">&quot;0.8&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-order</span>=<span class="string">&quot;random&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-id</span>=<span class="string">&quot;6707540298&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-server</span>=<span class="string">&quot;netease&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-type</span>=<span class="string">&quot;playlist&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://guest997.ml/wp-content/themes/argon/Aplayer/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  如果想用自己的网易云音乐歌单，可以修改 <strong>data-id</strong> 的值，这个值的获取方法也很简单。打开浏览器访问网页版的网易云音乐，点击自己的网易云音乐歌单，地址栏的 <strong>id</strong> 参数就是对应的 <strong>data-id</strong> 值。<img data-src="/images/blog-aplayer.md-0.png"></li>
<li>  代码中的其它参数可以根据自己的需要进行修改，具体的参数说明及设置可以去官网进行查看。</li>
<li>  最后刷新下网页，就能在左下角看到如下图的效果。<img data-src="/images/blog-aplayer.md-1.png"></li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>Aplayer 项目地址：<a href="https://github.com/DIYgod/APlayer">https://github.com/DIYgod/APlayer</a><br>MetingJS 项目地址：<a href="https://github.com/metowolf/MetingJS">https://github.com/metowolf/MetingJS</a></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>blog 使用的主题——Argon</title>
    <url>/2021/01/23/blog-argon/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>📖 Argon - 一个轻盈、简洁的 WordPress 主题</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul>
<li>  <strong>轻盈美观</strong> - 使用 Argon Design System 前端框架，细节精致，轻盈美观</li>
<li>  <strong>高度可定制化</strong> - 可自定义主题色、布局(双栏/单栏/三栏)、顶栏、侧栏、Banner、背景图、日夜间模式不同背景、背景沉浸、浮动操作按钮等，提供了丰富的自定义选项</li>
<li>  <strong>夜间模式</strong> - 支持日间、夜间、纯黑三种模式，并可以根据时间自动切换或跟随系统夜间模式</li>
<li>  <strong>功能繁多</strong> - Tag 和分类统计、作者链接、额外链接、文章字数和预计阅读时间、文章过时信息显示</li>
<li>  <strong>Pjax</strong> - 支持 Pjax 无刷新加载，提高浏览体验</li>
<li>  <strong>友情链接</strong> - 支持使用 Wordpress 自带的链接管理器进行友链管理，支持多种友链样式</li>
<li>  <strong>“说说” 功能</strong> - 随时发表想法，并在专门的 “说说” 页面展示，也支持说说和首页文章穿插</li>
<li>  <strong>评论功能扩展</strong> - Ajax 评论，评论支持 Markdown、验证码、再次编辑、显示 UA、悄悄话模式、回复时邮件通知、查看编辑记录、无限加载等功能</li>
<li>  <strong>诸多功能</strong> - 文章目录、阅读进度、Mathjax 或 Katex 公式解析、图片放大预览、Pangu.js 文本格式化、平滑滚动等</li>
<li>  <strong>丰富的短代码</strong> - 支持通过短代码在文章中插入 TODO、标签、警告、提示、折叠区块、Github 信息卡、时间线、隐藏文本、视频等模块</li>
<li>  <strong>多语言</strong> - 支持中文、英文、俄文等语言</li>
<li>  <strong>其他</strong> - 自适应、精心优化的文章阅读界面 CSS、可切换衬线/非衬线字体、可自定义 CSS 和 JS、支持使用 CDN 加速静态文件访问、SEO 友好、Banner 打字动画、留言板页面、文章脚注等</li>
</ul>
<h3 id="文档："><a href="#文档：" class="headerlink" title="文档："></a>文档：</h3><p>Argon-Theme 文档：<a href="https://argon-docs.solstice23.top/">https://argon-docs.solstice23.top</a></p>
<h3 id="Demo："><a href="#Demo：" class="headerlink" title="Demo："></a>Demo：</h3><p>主题效果预览地址：<br><a href="https://solstice23.top/">solstice23.top</a><br><a href="http://argon-demo.solstice23.top/">argon-demo.solstice23.top</a></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>Argon 使用 <a href="https://github.com/solstice23/argon-theme/blob/master/LICENSE">GPL V3.0</a> 协议开源，请遵守此协议进行二次开发等。<br>您<strong>必须在页脚保留 Argon 主题的名称及其链接</strong>，否则请不要使用 Argon 主题。您<strong>可以删除</strong>页脚的作者信息，但是<strong>不能删除</strong> Argon 主题的名称和链接。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>使用插件在更新或更换主题时保留主题里的自定义函数</title>
    <url>/2021/02/22/blog-custom-function/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>大多数站长在使用 wordpress 主题的时候，或多或少都会通过添加一些自定义函数到主题文件中以达成某个功能，但是在我们升级 wordpress 主题或者更換新的主题时，这些所添加的这些自定义函数就会消失不见，又需要重新添加。这篇文章就会教你如何解决这个问题。</p>
<h2 id="正文：（安装插件过程我就不赘述了）"><a href="#正文：（安装插件过程我就不赘述了）" class="headerlink" title="正文：（安装插件过程我就不赘述了）"></a>正文：（安装插件过程我就不赘述了）</h2><h3 id="使用-Code-Snippets-插件"><a href="#使用-Code-Snippets-插件" class="headerlink" title="使用 Code Snippets 插件"></a>使用 Code Snippets 插件</h3><p>Code Snippets 插件已经自带了几个默认片段，可以直接删除，添加自己需要的。下图是我之前添加的。<img data-src="/images/blog-custom-function.md-0.png"><br>如上图所示，界面很简洁，有编辑、克隆、导入、导出功能，并且可以设置仅在前端、后端或是全局运行，非常得实用和方便。<br><img data-src="/images/blog-custom-function.md-1.png"></p>
<h3 id="自制插件"><a href="#自制插件" class="headerlink" title="自制插件"></a>自制插件</h3><p>不知是因为 Code Snippets 插件本身的问题还是其它的什么问题，在我添加之前文章所写的开启网站维护模式的代码时，是不能正常启用和关闭该功能的。所以干脆就自己写个插件放到主题下的 plugins 目录下。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Plugin Name: 网站维护模式</span></span><br><span class="line"><span class="comment">Plugin URI: https://guest997.ml</span></span><br><span class="line"><span class="comment">Description: 网站开启维护模式</span></span><br><span class="line"><span class="comment">Author: Guest997</span></span><br><span class="line"><span class="comment">Version: 997</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> maintenance<span class="constructor">_mode()</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span> ( !current<span class="constructor">_user_can( &#x27;<span class="params">edit_themes</span>&#x27; )</span>  !is<span class="constructor">_user_logged_in()</span> ) &#123;wp<span class="constructor">_die(&#x27;&lt;<span class="params">center</span>&gt;&lt;<span class="params">img</span> <span class="params">src</span>=<span class="string">&quot;https://guest997.ml/wp-content/uploads/2021/01/cropped-头像.jpg&quot;</span>  <span class="params">height</span>=<span class="string">&quot;300&quot;</span> <span class="params">width</span>=<span class="string">&quot;300&quot;</span>&gt;&lt;<span class="params">h1</span>&gt;站点维护中，请稍后再来.&lt;<span class="operator">/</span><span class="params">h1</span>&gt;&lt;<span class="params">p</span>&gt;试着放下手中的工作，喝杯咖啡，过一会儿再来看看。&lt;<span class="params">p</span>&gt;&lt;<span class="operator">/</span><span class="params">center</span>&gt;&#x27;)</span>;&#125; </span><br><span class="line">&#125; </span><br><span class="line">add<span class="constructor">_action(&#x27;<span class="params">get_header</span>&#x27;, &#x27;<span class="params">maintenance_mode</span>&#x27;)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意：保存文件时需要将编码保存为 UTF-8 无 BOM 的 PHP 文件，否则会显示乱码。</strong></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>为 blog 制作一个简单的捐赠页面</title>
    <url>/2021/03/10/blog-donation/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>虽然可能不会有多少人会去捐赠，但是我依然相信有人会喜欢本站、喜欢我写的文章。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="制作-php-模板"><a href="#制作-php-模板" class="headerlink" title="制作 php 模板"></a>制作 php 模板</h3><ul>
<li>  创建一个 php 文件放到当前主题目录下。</li>
<li>  wordpress 制作模板页需要固定的如下代码加在文件最前面。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Template Name: 模板名字 </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  设置网站名和网站图标，这个比较简单就不多说了。css 样式也很简单，也就注意一下块级元素水平方向居中的代码而已。</li>
<li>  写点感谢语啥的，然后就是放图片了，使用 center 标签将图片放在中间，最后就是调下图片大小。</li>
<li>  下面就是完整的代码了。记得根据自己的需要进行修改，不过你把我的捐赠二维码放上去我也是不建议的。😂</li>
</ul>
<figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span>  </span></span><br><span class="line"><span class="php"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="php">Template Name: 捐赠页面 </span></span></span><br><span class="line"><span class="comment"><span class="php">*/</span>  </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Guest997&#x27;s Donation<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;images/favicon.ico&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-tag">body</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">width</span>: <span class="number">35em</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to you!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>By donating to Guest997 you help support my costs in developing, hosting, and maintaining this site. I appreciate your support!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>For support please refer to</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://guest997.ml/&quot;</span>&gt;</span>Guest997<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#FF0000</span> <span class="attr">size</span>=<span class="string">4</span>&gt;</span>Thanks for your donation!<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">center</span> <span class="attr">class</span>=<span class="string">&quot;half&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/wechatpay.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/alipay.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Guest997<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2021.04.05<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="创建-wordpress-页面"><a href="#创建-wordpress-页面" class="headerlink" title="创建 wordpress 页面"></a>创建 wordpress 页面</h3><p>进入 wordpress 后台，新建一个页面，在设置的页面属性中，找到 **模板:**，选择 <strong>捐赠页面</strong>。之后就是根据需要把页面放到自己想要的位置了。页面如下图。<br><img data-src="/images/blog-donation.md-0.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>想要完整的页面模板，请到我的网盘下载 <strong>捐赠页面模板</strong> 压缩包。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>blog 实现动态标题</title>
    <url>/2021/07/17/blog-dynamic-title/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>具体效果点击别的标签页再点击回我的博客就看到了。（注意看网页的标题）</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>添加以下代码到当前主题的 <strong>footer.php</strong> 文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;visibilitychange&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>( <span class="built_in">document</span>.visibilityState == <span class="string">&#x27;hidden&#x27;</span> )&#123;</span></span><br><span class="line"><span class="javascript">        normal_title = <span class="built_in">document</span>.title;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.title = <span class="string">&#x27;I Miss You!(*&gt;﹏&lt;*)&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.title = <span class="string">&#x27;你又回来啦!(/≧▽≦/)&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.title = normal_title;</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="number">1500</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>其实上面的代码也是有一些问题的。你在博客内点击站内链接时，还没等它跳转完毕，就点击其它页面，会发现回博客时还是跳转前博客的网页标题。如果有什么解决方法，请在下方留言，谢谢！</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>为 blog 在鼠标悬停在文字上时，旁边加个会动的图标</title>
    <url>/2021/07/14/blog-fontawesome/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>图标库以及动画效果使用的是 font-awesome，其实还有其它的可以提供这样的效果，不过现在很多主题都默认带有 font-awesome，故使用 font-awesome 进行讲解。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul>
<li>  具体的效果，移动鼠标悬停在我博客导航栏上的分类项目就能看到。</li>
<li>  如果你的主题上并没有带有 font-awesome，可以去到官网下载，放到服务器上，再在需要的地方导入即可。（需要注意的是4和5版本的语法已经有所不同了，下面使用的是4的语法）</li>
<li>  其实使用起来也就一行代码就能搞定，如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;faa-parent animated-hover&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-home faa-ring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 主页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;faa-parent animated-hover&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-archive faa-shake&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 归档<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;faa-parent animated-hover&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-clock-o faa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 时光<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;faa-parent animated-hover&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-coffee faa-horizontal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 说说<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;faa-parent animated-hover&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-film faa-falling&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 追番<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>fa-</strong> 开头的表示图标，<strong>faa-</strong> 开头的表示动画。而这些图标和动画可以通过下面的两个网站找到。<br>图标：<a href="http://www.fontawesome.com.cn/faicons/">http://www.fontawesome.com.cn/faicons/</a><br>动画：<a href="https://l-lin.github.io/font-awesome-animation/">https://l-lin.github.io/font-awesome-animation/</a></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>blog 实现整站一键变灰功能</title>
    <url>/2021/05/07/blog-gray/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>在悲伤或国难的日子，可以通过设置 html 选择器使整站变灰。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>添加以下代码到当前主题的 functions.php 文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全站变灰</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gray_head_css</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$styles</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="variable">$styles</span> .= <span class="string">&quot;html&#123;overflow-y:scroll;filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);-webkit-filter: grayscale(100%);&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$styles</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;style&gt;&quot;</span> . <span class="variable">$styles</span> . <span class="string">&quot;&lt;/style&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">add_action(<span class="string">&quot;wp_head&quot;</span>, <span class="string">&quot;gray_head_css&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>具体效果如下图：<img data-src="/images/blog-gray.md-0.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>为 blog 添加局部定时刷新的一言</title>
    <url>/2021/07/13/blog-hitokoto/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>虽然很多博客部署了一言，但是需要刷新页面才能变更为别的句子，故想要实现局部定时刷新的一言。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>添加以下代码到当前主题的 <strong>footer.php</strong> 文件。（点击后方链接查看一言的参数设置：<a href="https://developer.hitokoto.cn/sentence/#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0">https://developer.hitokoto.cn/sentence/#请求参数</a>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://code.jquery.com/jquery-latest.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getHitokoto</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $.get(<span class="string">&#x27;https://v1.hitokoto.cn/?encode=json&amp;c=a&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> hitokoto = response.hitokoto;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> <span class="keyword">from</span> = response.from;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#hitokoto&#x27;</span>).html(hitokoto + <span class="string">&#x27; —《&#x27;</span> + <span class="keyword">from</span> + <span class="string">&#x27;》&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="built_in">setInterval</span>(getHitokoto, <span class="number">3000</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加以下代码到你想显示的地方。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;hitokoto&quot;</span>&gt;loading...&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>其实还想要实现打字效果的一言，可惜是个小菜鸟，始终无法实现。如果有大神会的话，请在下方留言，谢谢！</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>为 blog 制作一个全屏的视频主页</title>
    <url>/2021/03/16/blog-homepage/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>之前看到过别人用全屏的 gifi 动图做主页，然后下滑就能显示博客的文章。不过这样并不合我的喜好，我更喜欢全屏的视频页，提示点击跳转到博客文章页。<br>一开始是想着网上应该有模板或者插件可以实现，找了挺久的，找了个半成品的模板拿来修改。改是改成功了，不过有个问题就是：移动端的无法播放视频。在网上找解决方法和自己尝试修改也没成功，最终还是自己写吧。于是便自己做了一个全屏的视频主页。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="制作-php-模板"><a href="#制作-php-模板" class="headerlink" title="制作 php 模板"></a>制作 php 模板</h3><p>重点：导入 <strong>font-awesome.css</strong> 文件以使用 Font Awesome 图标，<strong>video</strong> 标签属性设置为 <strong>autoplay</strong>(自动播放)、<strong>loop muted</strong>(静音循环播放)，创建一个标签绑定 <strong>onclick</strong> 事件(点击标签跳转到博客文章页)。</p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="xml"> </span><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="php">Template Name: 主页</span></span></span><br><span class="line"><span class="comment"><span class="php">*/</span></span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Guest997 - 一个在互联网下的小小Coder<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/font-awesome.css&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;images/blog.ico&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">loop</span> <span class="attr">muted</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">source</span>  <span class="attr">src</span>=<span class="string">&quot;homepage.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> &gt;</span>;  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;images/avatar.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150px&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;switch&quot;</span> <span class="attr">id</span>=<span class="string">&quot;switch&quot;</span>&gt;</span>点击视频开启声音<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toblog&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://guest997.ml/articles/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-arrow-right&quot;</span>&gt;</span> 进入博客<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="制作-css-样式"><a href="#制作-css-样式" class="headerlink" title="制作 css 样式"></a>制作 css 样式</h3><ul>
<li>  实现视频铺满整个页面：设置所有的元素的对齐方式以及和父类之间的间距都为0，设置 <strong>video</strong> 元素为 <strong>fixed</strong> 的绝对定位以及最小的宽度和高度为100%。</li>
<li>  实现圆形图标居中：设置 <strong>img</strong> 元素为 <strong>absolute</strong> 的绝对定位以及圆角为50%、单单设置 <strong>top</strong> 和 <strong>left</strong> 属性为50%，会使图标偏右下，还需要补充设置 <strong>margin-top</strong> 和 <strong>margin-left</strong> 属性为图片宽高的一半。</li>
<li>  左右下角的标签样式就是细节的问题，就不多说了，自己百度一下或者改一下代码就能看出每个属性的具体作用了。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css">  </span></span><br><span class="line"><span class="css"> *&#123;  </span></span><br><span class="line"><span class="css"> <span class="attribute">margin</span>: <span class="number">0px</span>;  </span></span><br><span class="line"><span class="css"> <span class="attribute">padding</span>: <span class="number">0px</span>;  </span></span><br><span class="line"><span class="css"> &#125;  </span></span><br><span class="line"><span class="css"> <span class="selector-tag">video</span> &#123;  </span></span><br><span class="line"><span class="css"> <span class="attribute">position</span>: fixed;  </span></span><br><span class="line"><span class="css"> <span class="attribute">min-width</span>: <span class="number">100%</span>;  </span></span><br><span class="line"><span class="css"> <span class="attribute">min-height</span>: <span class="number">100%</span>;  </span></span><br><span class="line"><span class="css"> &#125;  </span></span><br><span class="line"><span class="css"> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css"> <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"> <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">margin-top</span>: -<span class="number">75px</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">margin-left</span>: -<span class="number">75px</span>;</span></span><br><span class="line"><span class="css"> &#125;</span></span><br><span class="line"><span class="css"> <span class="selector-class">.toblog</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"> <span class="attribute">bottom</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">right</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">color</span>: <span class="number">#555</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">12px</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css"> &#125;</span></span><br><span class="line"><span class="css"> <span class="selector-class">.switch</span> &#123;</span></span><br><span class="line"><span class="css"> <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"> <span class="attribute">bottom</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">left</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">color</span>: <span class="number">#555</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">12px</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">line-height</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css"> &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="制作-js-脚本"><a href="#制作-js-脚本" class="headerlink" title="制作 js 脚本"></a>制作 js 脚本</h3><ul>
<li>  导入 <strong>jquery.min.js</strong> 文件，否则会无法正常显示和实现功能。</li>
<li>  实现图片不停旋转、鼠标悬停停止旋转：设置定时器（旋转方向、速度和时间），通过绑定 <strong>onmousemove</strong> 和 <strong>onmouseleave</strong> 事件给 <strong>img</strong> 标签实现鼠标悬浮在图片上时清除定时器，离开图片时继续运行定时器。</li>
<li>  实现点击视频开关声音：绑定 <strong>onclick</strong> 事件给 <strong>video</strong> 标签，点击视频时反转 <strong>video</strong> 标签的 <strong>muted</strong> 属性实现开关声音。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="comment">//图标旋转控制</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> rotateVal = <span class="number">0</span> <span class="comment">// 旋转角度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> InterVal <span class="comment">// 定时器</span></span></span><br><span class="line"><span class="javascript">        rotate()</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 鼠标悬浮在图片上时，停止旋转，即清除定时器</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;img&#x27;</span>).onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">clearInterval</span>(InterVal)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 鼠标离开图片时，继续旋转，即继续运行定时器</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;img&#x27;</span>).onmouseleave = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            rotate()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置定时器</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">rotate</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            InterVal = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;img&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            rotateVal += <span class="number">1</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 设置旋转属性(顺时针)</span></span></span><br><span class="line"><span class="javascript">                img.style.transform = <span class="string">&#x27;rotate(&#x27;</span> + rotateVal + <span class="string">&#x27;deg)&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 设置旋转时的动画  匀速0.1s</span></span></span><br><span class="line"><span class="javascript">                img.style.transition = <span class="string">&#x27;0.1s linear&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;, <span class="number">30</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 声音开关控制</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;video&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> myVid=<span class="built_in">document</span>.querySelector(<span class="string">&quot;video&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(myVid.muted===<span class="literal">false</span>)&#123;</span></span><br><span class="line"><span class="javascript">            myVid.muted=<span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;.switch&#x27;</span>).text(<span class="string">&#x27;点击视频开启声音&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            myVid.muted=<span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;.switch&#x27;</span>).text(<span class="string">&#x27;点击视频关闭声音&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125; </span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置-wordpress-主页为制作好的模板"><a href="#设置-wordpress-主页为制作好的模板" class="headerlink" title="设置 wordpress 主页为制作好的模板"></a>设置 wordpress 主页为制作好的模板</h3><ul>
<li>  将制作好的模板文件放到当前主题目录下。（记得修改图片和视频路径）</li>
<li>  进入 wordpress 后台，新建一个页面，填写标题为 <strong>主页</strong>，在设置的页面属性中，找到 **模板:**，选择 <strong>主页</strong>。再新建一个页面，填写标题为 <strong>文章</strong>，在设置的页面属性中，找到 **模板:**，选择 <strong>默认模板。</strong></li>
<li>  wordpress 后台中点击 <strong>外观-自定义</strong>，点击 <strong>主页设置</strong>，如下图选择，最后保存更改即可。<img data-src="/images/blog-homepage.md-0.png"></li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>想要完整的页面模板，请到我的网盘下载 <strong>视频主页模板</strong> 压缩包。(想要更多视频可到我的 <strong>网盘-生活</strong> 目录下载)<br>网盘里的视频是我已经压缩好了的，如果想用自己的视频尽量压缩之后再使用。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>为 blog 在进入主页时添加一个简约的信息提示弹窗</title>
    <url>/2021/03/09/blog-info/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>SweetAlert 可以替代 Javascript 原生的 alert 和 confirm 等函数呈现的弹窗，它将弹窗进行了美化，并且允许自定义，支持设置弹窗标题、提示类型、内容展示图片、确认取消按钮文本、点击后回调函数等。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>添加以下代码到当前主题的 <strong>functions.php</strong> 文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">function prompt() &#123;</span><br><span class="line">echo &#x27;<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external nofollow&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/sweetalert/1.1.3/sweetalert.min.css&quot;</span> &gt;</span>&#x27;;</span><br><span class="line">echo &#x27;<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/sweetalert/1.1.3/sweetalert.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;;</span><br><span class="line">echo &#x27;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.body.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; swal(<span class="string">&quot;欢迎来到我的 Blog!&quot;</span>, <span class="string">&quot;本站大部分分享的资源文件都会放到我的 OneDrive 网盘下，网盘地址可在左侧站点概览中找到。这些资源文件永久免费，如发现倒卖，请立即退款差评！&quot;</span>,<span class="string">&quot;info&quot;</span>);&#125;;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">add_action( &#x27;wp_footer&#x27;, &#x27;prompt&#x27;, 100 );</span><br></pre></td></tr></table></figure>

<p>如果发现加载 sweetalert.min.css 和 sweetalert.min.js 文件缓慢，可以将文件下载下来放到绝对路径下，将 herf 和 src 属性改成上面的两个文件名即可。<img data-src="/images/blog-info.md-0.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>SweetAlert 还有很多玩法，有兴趣的可到其官方中文网下了解一下。<br>官方中文网：<a href="https://guest997.ml/go?_=cebbffb629aHR0cHM6Ly93d3cuc3dlZXRhbGVydC5jbi8=">https://www.sweetalert.cn/</a></p>
<p>其实之前已经有一篇关于 SweetAlert 弹窗的文章了，有兴趣的可以往前翻翻。一开始想着在那篇文章加上这篇的内容的，可是想想还是算了，加上去的话标题会有点长，而且还可以多水一篇文章。😋</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>代码实现 blog 启用网站维护模式</title>
    <url>/2021/02/19/blog-maintenance/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>网站在维护期间会出现很多故障，例如代码报错，界面404等……这样会给访客一个不好的体验，所以弄一个维护界面还是不错的。wordpress 有很多启用维护模式的插件，但是装了太多插件对服务器的压力太大，今天就分享两个方法，教大家在不安装插件的情况下使网站进入维护模式。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="方法一（同时禁止网站前端和后端访问）"><a href="#方法一（同时禁止网站前端和后端访问）" class="headerlink" title="方法一（同时禁止网站前端和后端访问）"></a>方法一（同时禁止网站前端和后端访问）</h3><p>在网站根目录下新建一个名为 <strong>.maintenance</strong> 的文件，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$upgrading</span> = time(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如需退出维护模式，删除文件即可。</p>
<h3 id="方法二（只禁止前端访问，不会禁止后台登录访问）"><a href="#方法二（只禁止前端访问，不会禁止后台登录访问）" class="headerlink" title="方法二（只禁止前端访问，不会禁止后台登录访问）"></a>方法二（只禁止前端访问，不会禁止后台登录访问）</h3><p>添加以下代码到当前主题的 <strong>functions.php</strong> 文件。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> maintenance<span class="constructor">_mode()</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span> ( !current<span class="constructor">_user_can( &#x27;<span class="params">edit_themes</span>&#x27; )</span>  !is<span class="constructor">_user_logged_in()</span> ) &#123;wp<span class="constructor">_die(&#x27;&lt;<span class="params">center</span>&gt;&lt;<span class="params">img</span> <span class="params">src</span>=<span class="string">&quot;你的图片地址&quot;</span>  <span class="params">height</span>=<span class="string">&quot;300&quot;</span> <span class="params">width</span>=<span class="string">&quot;300&quot;</span>&gt;&lt;<span class="params">h1</span>&gt;站点维护中，请稍后再来.&lt;<span class="operator">/</span><span class="params">h1</span>&gt;&lt;<span class="params">p</span>&gt;试着放下手中的工作，喝杯咖啡，过一会儿再来看看。&lt;<span class="params">p</span>&gt;&lt;<span class="operator">/</span><span class="params">center</span>&gt;&#x27;)</span>;&#125; </span><br><span class="line">&#125; </span><br><span class="line">add<span class="constructor">_action(&#x27;<span class="params">get_header</span>&#x27;, &#x27;<span class="params">maintenance_mode</span>&#x27;)</span>;</span><br></pre></td></tr></table></figure>

<p>进入网站发现并没有进入维护模式？那是因为你已经登录了管理员账号，试着在手机上访问网站就能看到如下的页面。<img data-src="/images/blog-maintenance.md-0.png"></p>
<p>如需退出维护模式，将最后一行代码注释掉即可。</p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>为 blog 添加音乐播放器</title>
    <url>/2021/01/23/blog-music/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>QPlayer2 for WordPress - 一款简洁小巧的 HTML5 底部悬浮音乐播放器</p>
<h2 id="正文：-安装插件过程我就不赘述了"><a href="#正文：-安装插件过程我就不赘述了" class="headerlink" title="正文：(安装插件过程我就不赘述了)"></a>正文：(安装插件过程我就不赘述了)</h2><ul>
<li>  在 wordpress 仪表盘中找到设置，点击 <strong>QPlayer2</strong>。</li>
<li>  歌曲列表的设置参数和格式可以去项目地址下查看。</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Nightglow&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;artist&quot;</span>: <span class="string">&quot;蔡健雅&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;audio&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/moeshin/QPlayer-res/Nightglow.mp3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cover&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/moeshin/QPlayer-res/Nightglow.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lrc&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/moeshin/QPlayer-res/Nightglow.lrc&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;やわらかな光&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;artist&quot;</span>: <span class="string">&quot;やまだ豊&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;audio&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/moeshin/QPlayer-res/やわらかな光.mp3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cover&quot;</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/moeshin/QPlayer-res/やわらかな光.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lyrics&quot;</span>: <span class="string">&quot;[00:00.00]请欣赏&quot;</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>作者项目地址：<a href="https://github.com/moeshin/QPlayer2-WordPress">https://github.com/moeshin/QPlayer2-WordPress</a></p>
<p>服务支持 netease、tencent、baidu、xiami、kugou（虾米已经无了）<br>类型支持 playlist、song、album、artist<br>再具体的参数设置，插件里都有，可以去了解一下。</p>
<p>由于我自己平常使用的是网易云音乐，但是现在网易云音乐提供的接口只支持显示歌单前10个的音乐，所以我只好把歌曲传到 vps 上，再进行设置歌曲列表。</p>
<p><strong>如果遇到启用插件后，wordpress 界面功能有问题，就去插件设置下常规项中关闭加载 jQuery 选项。</strong></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔面板设置 blog 为伪静态站点</title>
    <url>/2021/02/17/blog-static/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> 伪静态是相对真实静态网页来说，真实静态网页是生成了一个以 .html 和 .htm 为后缀的文件，而伪静态并没有这样一个文件，它只是以 .html 这样的方式来展示，但是是动态脚本和程序实现的，比如 php 和 .net。</li>
<li> 伪静态比之真实静态页面的好处在于静态页面不需要全站生成，服务器空间使用率可以大幅减少，也能对网站权重和排名提升有一定好处。</li>
</ol>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>在 <strong>宝塔面板-网站-设置-伪静态</strong>，选择 <strong>wordpress</strong>。<img data-src="/images/blog-static.md-0.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>使用宝塔面板设置伪静态还是非常简单的，之前使用插件生成 sitemap 总是失败，去官网找解决方法，发现一定要将网站设置成伪静态才能正常生成 sitemap，故将其记录下来。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>为 blog 添加鼠标点击上升文字特效</title>
    <url>/2021/02/09/blog-text-effect/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>具体效果，使用鼠标在本页面点击几下即可看到。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>添加以下代码到当前主题的 <strong>footer.php</strong> 文件。</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="comment">/* 鼠标特效 */</span></span><br><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(document).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">   $(<span class="string">&quot;body&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> a = <span class="keyword">new</span> Array(<span class="string">&quot;我只会和需要我的人，一起走下去。——缘之空&quot;</span>, <span class="string">&quot;秒速5厘米，那是樱花飘落的速度，那么怎样的速度，才能走完我与你之间的距离？——秒速五厘米&quot;</span>, <span class="string">&quot;即使这份感情是虚假的，这也是我唯一的真实。——罪恶王冠&quot;</span>, <span class="string">&quot;我们每天度过的称之为日常的生活，其实是一个个奇迹的连续也说不定。——日常&quot;</span>, <span class="string">&quot;只要有你在，我就无所不能。——进击的巨人&quot;</span>, <span class="string">&quot;只要记住你的名字，不管你在世界的哪个地方，我一定会去见你。——你的名字&quot;</span>);</span><br><span class="line">       <span class="keyword">var</span> <span class="symbol">$i</span> = $(<span class="string">&quot;&lt;span/&gt;&quot;</span>).text(a[a_idx]);</span><br><span class="line">       a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">       <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">       y = e.pageY;</span><br><span class="line">       <span class="symbol">$i</span>.css(&#123;</span><br><span class="line">           <span class="string">&quot;z-index&quot;</span>: <span class="number">999999999999999999999999999999999999999999999999999999999999999999999</span>,</span><br><span class="line">           <span class="string">&quot;top&quot;</span>: y - <span class="number">20</span>,</span><br><span class="line">           <span class="string">&quot;left&quot;</span>: x,</span><br><span class="line">           <span class="string">&quot;position&quot;</span>: <span class="string">&quot;absolute&quot;</span>,</span><br><span class="line">           <span class="string">&quot;font-weight&quot;</span>: <span class="string">&quot;bold&quot;</span>,</span><br><span class="line">           <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ff9700&quot;</span></span><br><span class="line">       &#125;);</span><br><span class="line">       $(<span class="string">&quot;body&quot;</span>).append(<span class="symbol">$i</span>);</span><br><span class="line">       <span class="symbol">$i</span>.animate(&#123;</span><br><span class="line">           <span class="string">&quot;top&quot;</span>: y - <span class="number">180</span>,</span><br><span class="line">           <span class="string">&quot;opacity&quot;</span>: <span class="number">0</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="number">3000</span>,</span><br><span class="line">       <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="symbol">$i</span>.remove();</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>修改文字内容，array 对象中修改。<br>修改文字样式和文字颜色，font-weight 和 color 参数中修改。<br>修改文字上升时间，可以直接修改 <strong>3000</strong> 这个参数值。</p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>为 blog 在页脚添加网站运行时间</title>
    <url>/2021/03/19/blog-time/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>具体的效果请滑到文章最底部查看。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>添加以下代码到当前主题的 <strong>footer.php</strong> 文件。（记得修改 <strong>create_time</strong> 对象为你博客的创建时间）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">secondToDate</span>(<span class="params">second</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!second) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (second &gt;= <span class="number">365</span> * <span class="number">24</span> * <span class="number">3600</span>) &#123;</span></span><br><span class="line"><span class="javascript">            time[<span class="number">0</span>] = <span class="built_in">parseInt</span>(second / (<span class="number">365</span> * <span class="number">24</span> * <span class="number">3600</span>));</span></span><br><span class="line"><span class="javascript">            second %= <span class="number">365</span> * <span class="number">24</span> * <span class="number">3600</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (second &gt;= <span class="number">24</span> * <span class="number">3600</span>) &#123;</span></span><br><span class="line"><span class="javascript">            time[<span class="number">1</span>] = <span class="built_in">parseInt</span>(second / (<span class="number">24</span> * <span class="number">3600</span>));</span></span><br><span class="line"><span class="javascript">            second %= <span class="number">24</span> * <span class="number">3600</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (second &gt;= <span class="number">3600</span>) &#123;</span></span><br><span class="line"><span class="javascript">            time[<span class="number">2</span>] = <span class="built_in">parseInt</span>(second / <span class="number">3600</span>);</span></span><br><span class="line"><span class="javascript">            second %= <span class="number">3600</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (second &gt;= <span class="number">60</span>) &#123;</span></span><br><span class="line"><span class="javascript">            time[<span class="number">3</span>] = <span class="built_in">parseInt</span>(second / <span class="number">60</span>);</span></span><br><span class="line"><span class="javascript">            second %= <span class="number">60</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (second &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            time[<span class="number">4</span>] = second;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> time;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setTime</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 博客创建时间秒数，时间格式中，月比较特殊，是从0开始的，所以想要显示1月，得写0才行，如下</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> create_time = <span class="built_in">Math</span>.round(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2021</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">57</span>, <span class="number">0</span>))</span></span><br><span class="line"><span class="javascript">                .getTime() / <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 当前时间秒数,增加时区的差异</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> timestamp = <span class="built_in">Math</span>.round((<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">8</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>) / <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">        currentTime = secondToDate((timestamp - create_time));</span></span><br><span class="line"><span class="javascript">        currentTimeHtml = <span class="string">&#x27;博客已运行：&#x27;</span> + currentTime[<span class="number">0</span>] + <span class="string">&#x27; y &#x27;</span> + currentTime[<span class="number">1</span>] + <span class="string">&#x27; d &#x27;</span></span></span><br><span class="line"><span class="javascript">                + currentTime[<span class="number">2</span>] + <span class="string">&#x27; h &#x27;</span> + currentTime[<span class="number">3</span>] + <span class="string">&#x27; min &#x27;</span> + currentTime[<span class="number">4</span>]</span></span><br><span class="line"><span class="javascript">                + <span class="string">&#x27; sec &#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;htmer_time&quot;</span>).innerHTML = currentTimeHtml;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setInterval</span>(setTime, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过添加下面代码到你喜欢的地方，就可以显示你网站的运行时间。（可以修改 style 的 color 属性为你喜欢的文字颜色）</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;span <span class="attribute">id</span>=<span class="string">&quot;htmer_time&quot;</span> <span class="attribute">style</span>=<span class="string">&quot;color: #0196e3;&quot;</span>&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>为 blog 在打字时添加礼花特效</title>
    <url>/2021/03/18/blog-type/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>具体效果请在右上角点击搜索图标，打字即可看到。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul>
<li>  在我的网盘 <strong>建站</strong> 目录下载 <strong>activate-power-mode.js</strong> 文件，放到网站随意目录。</li>
<li>  添加以下代码到当前主题的 <strong>footer.php</strong> 文件。（记得修改文件路径）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://guest997.ml/wp-content/themes/argon/activate-power-mode.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">POWERMODE.colorful = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">POWERMODE.shake = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.addEventListener(<span class="string">&#x27;input&#x27;</span>, POWERMODE);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  如觉得在移动端打字会卡顿，可以通过 <strong>navigator.userAgent.toLowerCase</strong> 函数判断是否是移动端设备，是的话便不在这些设备上运行 js 脚本。代码修改如下。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://guest997.ml/wp-content/themes/argon/activate-power-mode.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">“text/javascript“</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(!(<span class="regexp">/iphoneipodipadipadAndroidnokiablackberrywebosweboswebmatebadalgucwebskyfiresonyericssonmotsamsungsghlgphilipspanasonicalcatellenovocldcmidpwapmobile/i</span>.test(navigator.userAgent.toLowerCase())))&#123;</span></span><br><span class="line"><span class="javascript">POWERMODE.colorful = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">POWERMODE.shake = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.addEventListener(‘input’, POWERMODE);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>blog 调度 WP-Cron 降低 CPU 占用</title>
    <url>/2021/02/21/blog-wp-cron-cpu/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>WP-Cron 是 wordpress 内置的计划任务系统，用于处理定时任务计划。wordpress 默认执行许多计划任务，其中包括：</p>
<ul>
<li>  wordpress 核心更新检查</li>
<li>  插件更新检查</li>
<li>  主题更新检查</li>
<li>  发布预定帖子</li>
</ul>
<p>一些第三方插件还会利用 WP-Cron 安排其他计划任务。例如：定时自动备份数据库或网站文件。因此，我们必须确保 WP-Cron 能够正常运行。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="WP-Cron-并不可靠"><a href="#WP-Cron-并不可靠" class="headerlink" title="WP-Cron 并不可靠"></a><strong>WP-Cron 并不可靠</strong></h3><p>为了使 WP-Cron 触发计划的事件，wordpress 网站必须接收常规流量。<br>对于低流量站点，这可能会造成问题，并且如果长时间未收到任何流量，则会导致错过计划的事件。<br>而对于大量页面缓存的高流量站点也可能遇到相同的调度问题。页面缓存实际上将 wordpress 变成了静态 HTML 站点，这意味着请求不再执行，也无法再触发计划的事件。</p>
<h3 id="WP-Cron-效率低下"><a href="#WP-Cron-效率低下" class="headerlink" title="WP-Cron 效率低下"></a><strong>WP-Cron 效率低下</strong></h3><p>对于无法进行页面缓存的高流量站点，WP-Cron 的效率极低。这是因为 WP-Cron 将在每次页面加载时检查计划的事件。大多数计划的事件不需要这种粒度级别，通常只需要每分钟运行一次即可。</p>
<h3 id="禁用-WP-Cron"><a href="#禁用-WP-Cron" class="headerlink" title="禁用 WP-Cron"></a>禁用 WP-Cron</h3><p>将以下代码添加到网站根目录的 <code>**wp-config.php**</code> 文件中。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;DISABLE_WP_CRON&#x27;</span>, <span class="literal">true</span> );</span><br></pre></td></tr></table></figure>

<p>这将防止 WP-Cron 在每次页面加载时自动检查计划的 cron 事件。这不会完全禁用 wordpress 中的计划事件，而只会自动检查和触发计划事件。为了确保预定事件继续工作，您需要一种替代方案来触发预定事件。</p>
<h3 id="添加-Linux-计划任务"><a href="#添加-Linux-计划任务" class="headerlink" title="添加 Linux 计划任务"></a><strong>添加 Linux 计划任务</strong></h3><p>Unix cron 是在后台运行的系统守护程序。与 WP-Cron 不同，Unix cron 连续运行并使用系统时钟安排任务。这意味着永远不会错过预定的事件。</p>
<p>在 Linux 系统的 crontab 中填加以下内容 (记得修改对应的 wordpress 网址或网站目录) ，设置每10分钟访问一次 wp-cron.php 以执行 wordpress 定时任务。</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">*<span class="regexp">/10 * * * * wget -q -O - https:/</span><span class="regexp">/guest997.ml/</span>wp-cron.php?doing_wp_cron &amp;&gt;<span class="regexp">/dev/</span><span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">*<span class="regexp">/10 * * * * curl https:/</span><span class="regexp">/guest997.ml/</span>wp-cron.php?doing_wp_cron &amp;&gt;<span class="regexp">/dev/</span><span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>又或者</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">*<span class="regexp">/10 * * * * cd /</span>www<span class="regexp">/wwwroot/gu</span>est997.ml; </span><br><span class="line">php wp-cron.php &amp;&gt;<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p>也可以在 <strong>宝塔面板-计划任务</strong> 中添加一个每隔10分钟运行一次的 <strong>Shell 脚本</strong>。(记得修改 wordpress 网站目录)</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/www/</span>wwwroot/guest997.ml; </span><br><span class="line">php wp-cron.php &amp;&gt;<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/images/blog-wp-cron-cpu.md-0.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>Linux 系统基于时间的计划任务更稳定，不会因为前端访客少从而错过执行计划任务的时间，也不会因为前端访客多而频繁地执行 wordpress 计划任务。一般而言绝大多数的网站10分钟一次地执行计划任务就足够了，当然你也可以缩短这个触发时间。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>免费容器 IBM Cloud 搭建 Xray 代理</title>
    <url>/2021/01/26/bm-cloud-xray/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> IBM Cloud 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。</li>
<li> IBM Cloud 免费版有所限制，几天无人访问就会休眠。（具体是几天已经忘记了，不过下面讲述的方法会每天定时重启实例，所以无需担心）</li>
</ol>
<h2 id="正文：-IBM-Cloud-注册过程就不赘述了，注册不成功，就换邮箱、IP"><a href="#正文：-IBM-Cloud-注册过程就不赘述了，注册不成功，就换邮箱、IP" class="headerlink" title="正文：(IBM Cloud 注册过程就不赘述了，注册不成功，就换邮箱、IP)"></a>正文：(IBM Cloud 注册过程就不赘述了，注册不成功，就换邮箱、IP)</h2><ul>
<li>点击下方链接进入 xray-ibm-us 项目地址。（此项目仅适用于达拉斯地区，伦敦地区的请看下方备注）<br>  <a href="https://github.com/zyp997/xray-ibm-us">https://github.com/zyp997/xray-ibm-us</a></li>
<li>  点击右上角 <strong>Fork</strong> ，会跳转到你的项目地址。（需要 GitHub 账号）</li>
<li>  点击 <strong>Settings</strong> ，在左边栏目找到并点击 <strong>Secrets</strong> ，再点击右上角的 <strong>New repository secret</strong>，分别创建如下表的参数。</li>
</ul>
<table>
<thead>
<tr>
<th>Secrets变量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>IBM_CF_USERNAME</td>
<td>IBM Cloud 邮箱地址</td>
</tr>
<tr>
<td>IBM_CF_PASSWORD</td>
<td>IBM Cloud 邮箱密码</td>
</tr>
<tr>
<td>IBM_CF_APP_NAME</td>
<td>IBM Cloud 应用程序名</td>
</tr>
<tr>
<td><code>V2_UUID</code></td>
<td>自定义 UUID 码</td>
</tr>
<tr>
<td>V2_WS_PATH_VMESS                                        V2_WS_PATH_VLESS</td>
<td>左边协议选择一个，填入自定义 PATH 路径</td>
</tr>
</tbody></table>
<ul>
<li>  点击 <strong>Actions</strong> ，点击 <strong>I understand my workflows, go and ahead and enable them</strong> ，在左边栏目找到并点击 <strong>IBM Cloud Foundry - Xray</strong> ，点击 <strong>Enable workflow</strong> ，再点击 <strong>Run workflow</strong> 选项，最后点击 <strong>Run workflow</strong> 。</li>
<li>在左边栏目找到并点击 <strong>All workflows</strong> ，如出现下图结果则表示实例部署成功。(如果什么都没显示，则在 <strong>README.md</strong> 文件随便打个字符即可；如果执行失败，则仔细检查 <strong>Secrets 变量</strong> 是否填写正确，之后再重新执行 <strong>Actions</strong>)<br>  <img data-src="/images/bm-cloud-xray.md-0.png"></li>
<li>  登录 IBM Cloud，进入到部署好的 <strong>Cloud Foundry 应用程序</strong>，点击右上角的 <strong>操作…</strong> 选项，点击 <strong>编辑路径</strong>，修改为 <strong>IBM Cloud 应用程序名.us-south.cf.appdomain.cloud</strong>。点击 <strong>保存</strong>，选中实例，点击 <strong>除去</strong>。</li>
<li>  下载支持 vless 和 vmess 协议的客户端，配置信息如下：</li>
</ul>
<p>代理协议：vless 或 vmess<br>地址：IBM Cloud 应用程序名.us-south.cf.appdomain.cloud<br>端口：443<br>UUID：自定义 UUID 码<br>加密方式：none<br>传输协议：ws<br>路径：自定义PATH路径<br>底层传输安全：tls</p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>伦敦地区的，需到自己 fork 的项目下，编辑 <strong>.github/workflows</strong> 目录下的 <strong>ibm-cf-v2.yml</strong> 文件，将 <strong>env</strong> 项下的 <strong>IBM_CF_API</strong> 参数修改为：<strong><a href="https://api.eu-gb.cf.cloud.ibm.com/">https://api.eu-gb.cf.cloud.ibm.com</a></strong>。</p>
<p>由于 IBM Cloud 给的免费内存空间为256MB，而项目中的内存设置的为128MB，所以可以多搭建一个来玩玩。</p>
<p>还有使用 v2ray 进行部署的项目，配置信息如上所述，有兴趣的可以到下面的地址进行部署。<br><a href="https://github.com/zyp997/v2ray-ibm-us">https://github.com/zyp997/v2ray-ibm-us</a></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>爬墙</category>
      </categories>
      <tags>
        <tag>白嫖</tag>
        <tag>ibm-cloud</tag>
        <tag>容器</tag>
        <tag>爬墙</tag>
      </tags>
  </entry>
  <entry>
    <title>使用宝塔面板搭建 OneIndex 个人共享网盘</title>
    <url>/2021/02/05/bt-oneindex/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> 需要一个 Onedrive 账号，并且 VPS 已经安装了 PHP（5.6版本以上）和 Nginx。</li>
<li> 由于 OneIndex 原项目已经删库不再维护，所以推荐两个其衍生项目，分别是 OneindexN 和 OneindexM。</li>
<li> OneindexN - 本项目是 Oneindex 的继承版本。主要针对后台和 nexmoe 主题进行优化修改。管理员默认密码：oneindexn</li>
<li> OneindexM - 本项目是 Oneindex、OneindexN 的继承、自用版本。主要针对后台和 nexmoe 主题进行优化修改。管理员默认密码：MintimateBlog</li>
</ol>
<p><img data-src="/images/bt-oneindex.md-0.png"></p>
<p><img data-src="/images/bt-oneindex.md-1.png"></p>
<h2 id="正文：（宝塔面板安装过程就不赘述了）"><a href="#正文：（宝塔面板安装过程就不赘述了）" class="headerlink" title="正文：（宝塔面板安装过程就不赘述了）"></a>正文：（宝塔面板安装过程就不赘述了）</h2><ul>
<li>  服务器安装完宝塔面板后，添加一个网站，不需要数据库支持。</li>
<li>点击下面的链接下载 OneindexN 或者 OneindexM 源码。（也可以到我的网盘下载）<br>  OneindexN:<a href="https://github.com/xieqifei/OneindexN/archive/master.zip">https://github.com/xieqifei/OneindexN/archive/master.zip</a> OneindexM:<a href="https://github.com/Mintimate/OneindexM/archive/master.zip">https://github.com/Mintimate/OneindexM/archive/master.zip</a></li>
<li>  将文件上传并解压到网站文件夹根目录下。</li>
<li>  输入 IP 或者域名访问网站。会提示程序安装，环境检查项目全部打勾了的话，就点击 <strong>下一步</strong>。</li>
<li>  之后的操作如下图进行即可，点击右上边的 <strong>获取应用 ID 和机密</strong>，会跳转到授权页面，复制完应用 ID 和机密，点击 <strong>下一步</strong>，之后就是绑定账号了。<img data-src="/images/bt-oneindex.md-2.gif"></li>
<li>  <strong>基本设置</strong> 按自己的需要设置即可，之后在 <strong>密码修改</strong> 那里，修改成自己的密码，最后刷新一下网页。</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>实用</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔面板简单优化</title>
    <url>/2021/01/30/bt/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>安装完宝塔面板并且建好网站之后，需要给面板和服务器做一些简单的设置，比如说 php 优化、myql 优化、开启 php 缓存、网站流量限制等等来提高服务器的性能。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="定期释放内存（宝塔面板-计划任务-释放内存）"><a href="#定期释放内存（宝塔面板-计划任务-释放内存）" class="headerlink" title="定期释放内存（宝塔面板-计划任务-释放内存）"></a><strong>定期释放内存</strong>（宝塔面板-计划任务-释放内存）</h3><p>释放 PHP、MYSQL、PURE-FTPD、APACHE、NGINX 的内存占用,建议在每天半夜执行！<img data-src="/images/bt.md-0.png"></p>
<h3 id="开启-Swap-虚拟内存（宝塔面板-Linux-工具箱-Swap-虚拟内存）"><a href="#开启-Swap-虚拟内存（宝塔面板-Linux-工具箱-Swap-虚拟内存）" class="headerlink" title="开启 Swap/虚拟内存（宝塔面板- Linux 工具箱- Swap/虚拟内存）"></a>开启 Swap/虚拟内存（宝塔面板- Linux 工具箱- Swap/虚拟内存）</h3><p>官方已经给出了推荐的 Swap 的设置值。</p>
<p><strong>物理内存</strong>      <strong>Swap</strong><br>512 MB        1024 MB<br>1 GB          1500 MB<br>2 GB          2048 MB<br>4 GB          4096 MB<br>6 GB+         4096 MB</p>
<h3 id="安装-PHP-缓存扩展（宝塔面板-软件商店-PHP-设置-安装拓展）"><a href="#安装-PHP-缓存扩展（宝塔面板-软件商店-PHP-设置-安装拓展）" class="headerlink" title="安装 PHP 缓存扩展（宝塔面板-软件商店-PHP 设置-安装拓展）"></a><strong>安装 PHP 缓存扩展</strong>（宝塔面板-软件商店-PHP 设置-安装拓展）</h3><p>php 版本强烈建议选择 php7.0 以上版本的， php 缓存扩展推荐使用 Opcache 脚本缓存和 Memcached 或者 redis 内容缓存。<img data-src="/images/bt.md-1.png"></p>
<h3 id="PHP-配置调整（宝塔面板-软件商店-PHP-设置-配置修改）"><a href="#PHP-配置调整（宝塔面板-软件商店-PHP-设置-配置修改）" class="headerlink" title="PHP 配置调整（宝塔面板-软件商店-PHP 设置-配置修改）"></a><strong>PHP 配置调整</strong>（宝塔面板-软件商店-PHP 设置-配置修改）</h3><p>Wordpress 要跑的流畅的话还是很耗内存的，Wordpress 本身就是个吃内存的大户，所以我们需要在 php 管理的配置中，把 <strong>memory_limit</strong> （<strong>脚本内存限制）</strong>修改成 <strong>256M</strong>。<img data-src="/images/bt.md-2.png"></p>
<h3 id="PHP-性能调整（宝塔面板-软件商店-PHP-设置-性能调整）"><a href="#PHP-性能调整（宝塔面板-软件商店-PHP-设置-性能调整）" class="headerlink" title="PHP 性能调整（宝塔面板-软件商店-PHP 设置-性能调整）"></a><strong>PHP 性能调整</strong>（宝塔面板-软件商店-PHP 设置-性能调整）</h3><p>里面自带了几个优化过的 php 并发方案，根据自己 VPS 的内存进行选择。<img data-src="/images/bt.md-3.png"></p>
<h3 id="开启隐藏的-waf-防火墙（宝塔面板-软件商店-Nginx-设置-配置修改）"><a href="#开启隐藏的-waf-防火墙（宝塔面板-软件商店-Nginx-设置-配置修改）" class="headerlink" title="开启隐藏的 waf 防火墙（宝塔面板-软件商店-Nginx 设置-配置修改）"></a>开启隐藏的 waf 防火墙（宝塔面板-软件商店-Nginx 设置-配置修改）</h3><p>找到大约在第17行的代码：<code>**#include luawaf.conf;**</code>，去掉前面的 <code>**#**</code> 符号，保存并重启 Nginx。<img data-src="/images/bt.md-4.png"></p>
<p>访问 **<code>http://你的网址/?id=../etc/passwd</code>**，页面会弹出拦截提示，如下图显示，则成功开启了 ngx_lua_waf。<img data-src="/images/bt.md-5.png"></p>
<h3 id="网站流量限制（宝塔面板-网站-设置-流量限制）"><a href="#网站流量限制（宝塔面板-网站-设置-流量限制）" class="headerlink" title="网站流量限制（宝塔面板-网站 设置-流量限制）"></a>网站流量限制（宝塔面板-网站 设置-流量限制）</h3><p>里面自带了几个优化过的限制方案，我们一般选择 <strong>论坛/博客</strong> 这种就可以了，这样对网站有个最起码的保护作用，或者说如果被 cc 了，这样设置还是有点作用的。<img data-src="/images/bt.md-6.png"></p>
<h3 id="MySQL-性能调整（宝塔面板-软件商店-MySQL-设置-性能调整）"><a href="#MySQL-性能调整（宝塔面板-软件商店-MySQL-设置-性能调整）" class="headerlink" title="MySQL 性能调整（宝塔面板-软件商店- MySQL 设置-性能调整）"></a><strong>MySQL 性能调整</strong>（宝塔面板-软件商店- MySQL 设置-性能调整）</h3><p>里面自带了几个优化过的方案，根据自己 VPS 的内存进行选择。当你有在使用 redis、memcached 等缓存软件时，将 <strong>query_cache_size</strong> 设为0可以将其关闭。<img data-src="/images/bt.md-7.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>这里提供的教程也只是一些最简单最基本的设置，对一些小白可以能会有很大帮助，如果你们有更好的优化方案，不妨分享出来。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>实用</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 浏览器实用插件推荐</title>
    <url>/2021/02/06/chrome-plugin/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> SwitchyOmega</li>
<li> Volume Booster</li>
<li> 恢复关闭的标签页</li>
<li> Online Download Manager</li>
<li> AHA Music - 浏览器中的音乐雷达</li>
<li> crxMouse Chrome™ 手势</li>
<li> Buster: Captcha Solver for Humans</li>
<li> Dark Reader</li>
<li> Enhancer for YouTube™</li>
<li> 集装箱</li>
<li> 暴力猴</li>
<li> Infinity 新标签页</li>
<li> Adblock Plus - 免费的广告拦截器</li>
<li> FasterChrome</li>
</ol>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="SwitchyOmega"><a href="#SwitchyOmega" class="headerlink" title="SwitchyOmega"></a>SwitchyOmega</h3><p>轻松快捷地管理和切换多个代理设置。备用下载地址： <a href="https://github.com/FelisCatus/SwitchyOmega/releases">https://github.com/FelisCatus/SwitchyOmega/releases</a></p>
<p><img data-src="/images/chrome-plugin.md-0.jpg"></p>
<h3 id="Volume-Booster"><a href="#Volume-Booster" class="headerlink" title="Volume Booster"></a>Volume Booster</h3><p>你讨厌的音频或视频播放网络上的低量？ 增压器可以500％提高音量了！<br>- 您可以提升单个站点上卷 - 你可以看到选项卡播放声音，并选择适当的音量。<br>由于一些技术原因，它不会在全屏模式下工作。</p>
<p><img data-src="/images/chrome-plugin.md-1.jpg"></p>
<h3 id="恢复关闭的标签页"><a href="#恢复关闭的标签页" class="headerlink" title="恢复关闭的标签页"></a>恢复关闭的标签页</h3><p>重新打开已关闭的标签页，可自定义图标。</p>
<p><img data-src="/images/chrome-plugin.md-2.jpg"></p>
<h3 id="Online-Download-Manager"><a href="#Online-Download-Manager" class="headerlink" title="Online Download Manager"></a>Online Download Manager</h3><p>管理下载，搜索和保存视频、图像、mp3 文件。使用在线下载管理器，加强 Chrome 浏览器功能。</p>
<p><img data-src="/images/chrome-plugin.md-3.jpg" alt="此图像的alt属性为空；文件名为XYtn8eNoPfFJqV-eLFN_cSUet5fmn6DWXFSTtxNC7IqVX5Fy7RKuOWAutN3WX_QrVUPjo9KVy3LGElHHoYkSKyhR=w640-h400-e365-rj-sc0x00ffffff"></p>
<p><img data-src="/images/chrome-plugin.md-4.jpg"></p>
<p><img data-src="/images/chrome-plugin.md-5.jpg"></p>
<p><img data-src="/images/chrome-plugin.md-6.jpg"></p>
<h3 id="AHA-Music-浏览器中的音乐雷达"><a href="#AHA-Music-浏览器中的音乐雷达" class="headerlink" title="AHA Music - 浏览器中的音乐雷达"></a>AHA Music - 浏览器中的音乐雷达</h3><p>识别浏览器中所播放的歌曲</p>
<p><img data-src="/images/chrome-plugin.md-7.jpg"></p>
<h3 id="crxMouse-Chrome™-手势"><a href="#crxMouse-Chrome™-手势" class="headerlink" title="crxMouse Chrome™ 手势"></a>crxMouse Chrome™ 手势</h3><p>原名:Gestures for Chrome(TM)汉化版.方便,快捷,充分发掘鼠标的所有操作.功能包括:鼠标手势,超级拖曳,滚轮手势,摇杆手势,平滑滚动,标签页列表等.</p>
<p><a href="https://www.youtube.com/embed/vls3se188NE">https://www.youtube.com/embed/vls3se188NE</a></p>
<h3 id="Buster-Captcha-Solver-for-Humans"><a href="#Buster-Captcha-Solver-for-Humans" class="headerlink" title="Buster: Captcha Solver for Humans"></a>Buster: Captcha Solver for Humans</h3><p>谷歌机翻：<br>通过要求 Buster 为您解决验证码来节省时间。<br>Buster 是一种浏览器扩展程序，可通过使用语音识别完成 reCAPTCHA 音频挑战来帮助您解决困难的验证码。<br>单击 reCAPTCHA 小部件底部的扩展按钮即可解决挑战。不能保证始终解决挑战，需要考虑技术的局限性。</p>
<p><img data-src="/images/chrome-plugin.md-8.jpg"></p>
<h3 id="Dark-Reader"><a href="#Dark-Reader" class="headerlink" title="Dark Reader"></a>Dark Reader</h3><p>适用于任何网站的黑暗主题。关爱眼睛，就使用 Dark Reader 进行日常浏览。<br>这是一个护眼扩展程序，通过实时生成黑暗主题，为每一个网站启用夜间模式。 Dark Reader 反转明亮的颜色，使网页内容具有高对比度并易于在夜间阅读。<br>您可以调整亮度、对比度，应用棕褐色滤镜、黑暗模式，设置字体和忽略的网站列表。</p>
<p><a href="https://www.youtube.com/embed/849mznBKmIQ">https://www.youtube.com/embed/849mznBKmIQ</a></p>
<h3 id="Enhancer-for-YouTube™"><a href="#Enhancer-for-YouTube™" class="headerlink" title="Enhancer for YouTube™"></a>Enhancer for YouTube™</h3><p>海量自定义功能提升您的 YouTube™ 用户体验。<br>一个十分易用且高度可定制的扩展程序，它允许您：<br>✔ 使用鼠标滚轮控制音量和播放速度<br>✔ 视频去广告（自动或手动）<br>✔ 频道白名单（不自动去广告）<br>✔ 屏蔽注解（自动或手动）<br>✔ 自动切换视频清晰度（可以设定为 4K、HD 或任意清晰度）<br>✔ 循环播放视频（完整循环或部分循环）<br>✔ 使用自定义主题样式<br>✔ 自动拉伸播放器<br>✔ 查看评论时将播放器固定在右下角<br>✔ 执行自定义脚本<br>✔ 以及更多……</p>
<p><img data-src="/images/chrome-plugin.md-9.jpg"></p>
<h3 id="集装箱"><a href="#集装箱" class="headerlink" title="集装箱"></a>集装箱</h3><p>一个插件，提供一揽子服务。定位类似于 Tampermonkey 的脚本管理器，用户可以根据自己需要安装和更新应用。</p>
<p><img data-src="/images/chrome-plugin.md-10.jpg"></p>
<h3 id="暴力猴"><a href="#暴力猴" class="headerlink" title="暴力猴"></a>暴力猴</h3><p>一个开源的用户脚本管理器，支持很多浏览器。</p>
<p>脚本网站推荐：<a href="https://greasyfork.org/zh-CN/scripts">https://greasyfork.org/zh-CN/scripts</a></p>
<p><img data-src="/images/chrome-plugin.md-11.jpg"></p>
<h3 id="Infinity-新标签页"><a href="#Infinity-新标签页" class="headerlink" title="Infinity 新标签页"></a>Infinity 新标签页</h3><p>百万用户选择的新标签页，自由添加网站图标，云端高清壁纸，快速访问书签、天气、笔记、待办事项、扩展管理与历史记录。</p>
<p><img data-src="/images/chrome-plugin.md-12.jpg"></p>
<h3 id="Adblock-Plus-免费的广告拦截器"><a href="#Adblock-Plus-免费的广告拦截器" class="headerlink" title="Adblock Plus - 免费的广告拦截器"></a>Adblock Plus - 免费的广告拦截器</h3><p>Adblock Plus 是世界上最流行的浏览器扩展，世界各地有数百万用户在使用它。这是一个社区驱动的开源项目，有数百名志愿者为 Adblock Plus 的成功作出了贡献，以实现所有烦人的广告被自动阻挡。</p>
<p>项目地址推荐：<a href="https://github.com/cjx82630/cjxlist">https://github.com/cjx82630/cjxlist</a>（规则方案建议）</p>
<p><img data-src="/images/chrome-plugin.md-13.jpg"></p>
<h3 id="FasterChrome"><a href="#FasterChrome" class="headerlink" title="FasterChrome"></a>FasterChrome</h3><p>谷歌机翻：<br>更快地浏览网络。FasterChrome 使用即时预加载功能；它会在您单击页面之前立即预加载该页面。FasterChrome 在相同站点上的页面上效果最佳。到外部站点的页面仍然更快，但通常不足以引起注意。</p>
<p><img data-src="/images/chrome-plugin.md-14.jpg"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>由于谷歌网上商店不方便访问，所以推荐一个国内方便访问的下载插件的网站：<a href="https://www.extfans.com/">https://www.extfans.com/</a></p>
<p>这篇文章会不定期更新。如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Cloudflare 优化 blog 缓存配置规则</title>
    <url>/2021/02/20/cloudflare-rules-blog/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> 通过 Cloudflare 的 CDN 节点进行中转后，默认情况下，Cloudflare 会对你网站中的图片、JS、CSS 文件等静态文件进行缓存。当访客访问你网站页面的时候，所有的静态文件都是由 Cloudflare 的节点直接给到访客的，但是 HTML 文件是默认不缓存的。也就意味着访客访问你的某一页面的时候。仍然会<strong>回源你的服务器</strong>。</li>
<li> 本篇文章就是教你如何使用 Cloudflare 的页面规则把整个 HTML 页面给缓存。使访客访问被缓存的页面的时候，直接交由 Cloudflare 进行服务，甚至你的源服务器不会收到任何 GET 请求。</li>
<li> <strong>这样做的好处是，可以大大减少源服务器的负载开支，使得你的站点能够承载更多的访客及流量。</strong></li>
</ol>
<h2 id="正文：（注意：规则顺序不要搞错了！这三条规则是有优先度的，第一条优先度最高）"><a href="#正文：（注意：规则顺序不要搞错了！这三条规则是有优先度的，第一条优先度最高）" class="headerlink" title="正文：（注意：规则顺序不要搞错了！这三条规则是有优先度的，第一条优先度最高）"></a>正文：（注意：规则顺序不要搞错了！这三条规则是有优先度的，第一条优先度最高）</h2><h3 id="第一条规则"><a href="#第一条规则" class="headerlink" title="第一条规则"></a>第一条规则</h3><p><strong>*.域名/wp-admin*</strong></p>
<p>含义：适用于域名后面开头是 wp-admin 的 URL 地址，wp-admin 是 wordpress 博客的默认后台地址。规则配置如下图：<br><img data-src="/images/cloudflare-rules-blog.md-0.png"></p>
<h3 id="第二条规则"><a href="#第二条规则" class="headerlink" title="第二条规则"></a>第二条规则</h3><p><strong>*.域名/*preview=true*</strong></p>
<p>含义：域名后面 URL 中只要带有 preview=true 的字符，都适用于此条规则。preview=true 是 wordpress 写文章点击预览时的预览 URL 地址。规则配置如下图：<br><img data-src="/images/cloudflare-rules-blog.md-1.png"></p>
<h3 id="第三条规则"><a href="#第三条规则" class="headerlink" title="第三条规则"></a>第三条规则</h3><p><strong>*.域名/*</strong></p>
<p>含义：域名后面所有的 URL 地址全部适用于此条规则。规则配置如下图：<br><img data-src="/images/cloudflare-rules-blog.md-2.png"></p>
<p><strong>注意：</strong>还有个 wp-login 的地址我们没有设置，需要用到 <strong>Change wp-admin login</strong> 这个插件，然后进入 wordpress 后台，点击 <strong>设置—固定链接</strong>，找到 <strong>Change wp-admin login</strong> 项下的 <strong>Login URL</strong>，把 <strong>wp-login</strong> 改成 <strong>wp-admin 后面加上任何字</strong>，如下图：<br><img data-src="/images/cloudflare-rules-blog.md-3.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建基于 Cloudflare Workers 的 GitHub 文件加速下载网站</title>
    <url>/2021/01/30/cloudflare-workers-github/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> gh-proxy - github release、archive 以及项目文件的加速项目。</li>
<li> 支持 clone，有 Cloudflare Workers 无服务器版本以及 Python 版本。</li>
<li> Cloudflare Workers 免费版有所限制，比如：每天有10万次免费请求限制，并且有每分钟1000次请求的限制。不过个人使用已经是完全够用的了。</li>
</ol>
<h2 id="正文：（Cloudflare-注册过程就不赘述了）"><a href="#正文：（Cloudflare-注册过程就不赘述了）" class="headerlink" title="正文：（Cloudflare 注册过程就不赘述了）"></a>正文：（Cloudflare 注册过程就不赘述了）</h2><ul>
<li>  点击右边列表的 <strong>Workers</strong>，点击 <strong>创建 Worker</strong>。</li>
<li>  在左边代码框中，输入以下代码。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * static files (404.html, sw.js, conf.js)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> ASSET_URL = <span class="string">&#x27;https://hunshcn.github.io/gh-proxy/&#x27;</span></span><br><span class="line"><span class="comment">// 前缀，如果自定义路由为example.com/gh/*，将PREFIX改为 &#x27;/gh/&#x27;，注意，少一个杠都会错！</span></span><br><span class="line"><span class="keyword">const</span> PREFIX = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"><span class="comment">// git使用cnpmjs镜像、分支文件使用jsDelivr镜像的开关，0为关闭，默认开启</span></span><br><span class="line"><span class="keyword">const</span> Config = &#123;</span><br><span class="line">    <span class="attr">jsdelivr</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">cnpmjs</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@type <span class="type">&#123;RequestInit&#125;</span> </span>*/</span></span><br><span class="line"><span class="keyword">const</span> PREFLIGHT_INIT = &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">204</span>,</span><br><span class="line">    <span class="attr">headers</span>: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">        <span class="string">&#x27;access-control-allow-origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;access-control-allow-methods&#x27;</span>: <span class="string">&#x27;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;access-control-max-age&#x27;</span>: <span class="string">&#x27;1728000&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;any&#125;</span> <span class="variable">body</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">status</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&lt;string, string&gt;&#125;</span> <span class="variable">headers</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeRes</span>(<span class="params">body, status = <span class="number">200</span>, headers = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    headers[<span class="string">&#x27;access-control-allow-origin&#x27;</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Response(body, &#123;status, headers&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">urlStr</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newUrl</span>(<span class="params">urlStr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> URL(urlStr)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addEventListener(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ret = fetchHandler(e)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> makeRes(<span class="string">&#x27;cfworker error:\n&#x27;</span> + err.stack, <span class="number">502</span>))</span><br><span class="line">    e.respondWith(ret)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;FetchEvent&#125;</span> <span class="variable">e</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> req = e.request</span><br><span class="line">    <span class="keyword">const</span> urlStr = req.url</span><br><span class="line">    <span class="keyword">const</span> urlObj = <span class="keyword">new</span> URL(urlStr)</span><br><span class="line">    <span class="keyword">let</span> path = urlObj.searchParams.get(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (path) &#123;</span><br><span class="line">        <span class="keyword">return</span> Response.redirect(<span class="string">&#x27;https://&#x27;</span> + urlObj.host + PREFIX + path, <span class="number">301</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cfworker 会把路径中的 `//` 合并成 `/`</span></span><br><span class="line">    path = urlObj.href.substr(urlObj.origin.length + PREFIX.length).replace(<span class="regexp">/^https?:\/+/</span>, <span class="string">&#x27;https://&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> exp1 = <span class="regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:releasesarchive)\/.*$/i</span></span><br><span class="line">    <span class="keyword">const</span> exp2 = <span class="regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:blob)\/.*$/i</span></span><br><span class="line">    <span class="keyword">const</span> exp3 = <span class="regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:infogit-).*$/i</span></span><br><span class="line">    <span class="keyword">const</span> exp4 = <span class="regexp">/^(?:https?:\/\/)?raw\.githubusercontent\.com\/.+?\/.+?\/.+?\/.+$/i</span></span><br><span class="line">    <span class="keyword">if</span> (path.search(exp1) === <span class="number">0</span>  !Config.cnpmjs &amp;&amp; (path.search(exp3) === <span class="number">0</span>  path.search(exp4) === <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> httpHandler(req, path)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.search(exp2) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Config.jsdelivr)&#123;</span><br><span class="line">            <span class="keyword">const</span> newUrl = path.replace(<span class="string">&#x27;/blob/&#x27;</span>, <span class="string">&#x27;@&#x27;</span>).replace(<span class="regexp">/^(?:https?:\/\/)?github\.com/</span>, <span class="string">&#x27;https://cdn.jsdelivr.net/gh&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> Response.redirect(newUrl, <span class="number">302</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            path = path.replace(<span class="string">&#x27;/blob/&#x27;</span>, <span class="string">&#x27;/raw/&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> httpHandler(req, path)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.search(exp3) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> newUrl = path.replace(<span class="regexp">/^(?:https?:\/\/)?github\.com/</span>, <span class="string">&#x27;https://github.com.cnpmjs.org&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> Response.redirect(newUrl, <span class="number">302</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.search(exp4) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> newUrl = path.replace(<span class="regexp">/(?&lt;=com\/.+?\/.+?)\/(.+?\/)/</span>, <span class="string">&#x27;@$1&#x27;</span>).replace(<span class="regexp">/^(?:https?:\/\/)?raw\.githubusercontent\.com/</span>, <span class="string">&#x27;https://cdn.jsdelivr.net/gh&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> Response.redirect(newUrl, <span class="number">302</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fetch(ASSET_URL + path)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Request&#125;</span> <span class="variable">req</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">pathname</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">httpHandler</span>(<span class="params">req, pathname</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reqHdrRaw = req.headers</span><br><span class="line"></span><br><span class="line">    <span class="comment">// preflight</span></span><br><span class="line">    <span class="keyword">if</span> (req.method === <span class="string">&#x27;OPTIONS&#x27;</span> &amp;&amp;</span><br><span class="line">        reqHdrRaw.has(<span class="string">&#x27;access-control-request-headers&#x27;</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="literal">null</span>, PREFLIGHT_INIT)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> rawLen = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reqHdrNew = <span class="keyword">new</span> Headers(reqHdrRaw)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> urlStr = pathname</span><br><span class="line">    <span class="keyword">if</span> (urlStr.startsWith(<span class="string">&#x27;github&#x27;</span>)) &#123;</span><br><span class="line">        urlStr = <span class="string">&#x27;https://&#x27;</span> + urlStr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> urlObj = newUrl(urlStr)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@type <span class="type">&#123;RequestInit&#125;</span> </span>*/</span></span><br><span class="line">    <span class="keyword">const</span> reqInit = &#123;</span><br><span class="line">        <span class="attr">method</span>: req.method,</span><br><span class="line">        <span class="attr">headers</span>: reqHdrNew,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: req.body</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> proxy(urlObj, reqInit, rawLen, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;URL&#125;</span> <span class="variable">urlObj</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;RequestInit&#125;</span> <span class="variable">reqInit</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">urlObj, reqInit, rawLen</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(urlObj.href, reqInit)</span><br><span class="line">    <span class="keyword">const</span> resHdrOld = res.headers</span><br><span class="line">    <span class="keyword">const</span> resHdrNew = <span class="keyword">new</span> Headers(resHdrOld)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// verify</span></span><br><span class="line">    <span class="keyword">if</span> (rawLen) &#123;</span><br><span class="line">        <span class="keyword">const</span> newLen = resHdrOld.get(<span class="string">&#x27;content-length&#x27;</span>)  <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> badLen = (rawLen !== newLen)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (badLen) &#123;</span><br><span class="line">            <span class="keyword">return</span> makeRes(res.body, <span class="number">400</span>, &#123;</span><br><span class="line">                <span class="string">&#x27;--error&#x27;</span>: <span class="string">`bad len: <span class="subst">$&#123;newLen&#125;</span>, except: <span class="subst">$&#123;rawLen&#125;</span>`</span>,</span><br><span class="line">                <span class="string">&#x27;access-control-expose-headers&#x27;</span>: <span class="string">&#x27;--error&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> status = res.status</span><br><span class="line">    resHdrNew.set(<span class="string">&#x27;access-control-expose-headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    resHdrNew.set(<span class="string">&#x27;access-control-allow-origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    resHdrNew.delete(<span class="string">&#x27;content-security-policy&#x27;</span>)</span><br><span class="line">    resHdrNew.delete(<span class="string">&#x27;content-security-policy-report-only&#x27;</span>)</span><br><span class="line">    resHdrNew.delete(<span class="string">&#x27;clear-site-data&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Response(res.body, &#123;</span><br><span class="line">        status,</span><br><span class="line">        <span class="attr">headers</span>: resHdrNew,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>  可以在代码框上边修改名字，之后再点击 <strong>保存并部署</strong>。</li>
<li>  再点击 <strong>预览</strong>，即可看到效果图，也能直接在浏览器输入网址访问网站。</li>
</ul>
<p><img data-src="/images/cloudflare-workers-github.md-0.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>gh-proxy 项目地址：<a href="https://github.com/hunshcn/gh-proxy">https://github.com/hunshcn/gh-proxy</a></p>
<p>此项目还支持 Python 版本部署，有兴趣的可到项目下 <strong>README.md</strong> 文件了解一下。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>实用</tag>
        <tag>白嫖</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Cloudflare Workers 加速爬墙</title>
    <url>/2021/01/31/cloudflare-workers/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> CloudflareSpeedTest - 🌩 测试 Cloudflare CDN 延迟和速度，获取最快 IP (IPv4+IPv6)！</li>
<li> 要使用 Cloud­flare Workers 加速爬墙，梯子必须是用 WebSocket 作为传输方式，比如 v2ray 的 WebSocket，gost 的 WebSocket 隧道，shad­ow­socks 的 v2ray-plu­gin 等等。</li>
<li> Cloudflare Workers 免费版有所限制，比如：每天有10万次免费请求限制，并且有每分钟1000次请求的限制。不过个人使用已经是完全够用的了。</li>
</ol>
<h2 id="正文：（Cloudflare-注册过程就不赘述了）"><a href="#正文：（Cloudflare-注册过程就不赘述了）" class="headerlink" title="正文：（Cloudflare 注册过程就不赘述了）"></a>正文：（Cloudflare 注册过程就不赘述了）</h2><h3 id="创建-Worker-反代域名"><a href="#创建-Worker-反代域名" class="headerlink" title="创建 Worker 反代域名"></a>创建 Worker 反代域名</h3><ul>
<li>  点击右边列表的 <strong>Workers</strong>，点击 <strong>创建 Worker</strong>。</li>
<li>  在左边代码框中，输入以下代码。</li>
</ul>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SingleDay = <span class="comment">&#x27;需要加速的域名&#x27;</span></span><br><span class="line"><span class="keyword">const</span> DoubleDay = <span class="comment">&#x27;需要加速的域名&#x27;</span></span><br><span class="line">addEventListener(</span><br><span class="line">    <span class="string">&quot;fetch&quot;</span>,event =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> nd = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">if</span> (nd.<span class="keyword">get</span><span class="built_in">Date</span>()%<span class="number">2</span>) &#123;</span><br><span class="line">            host = SingleDay</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            host = DoubleDay</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="keyword">new</span> URL(event.<span class="built_in">request</span>.url);</span><br><span class="line">        url.hostname = host;</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">request</span> = <span class="keyword">new</span> <span class="built_in">Request</span>(url,event.<span class="built_in">request</span>);</span><br><span class="line">        event.respondWith(</span><br><span class="line">            fetch(<span class="built_in">request</span>)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>  可以在代码框上边修改名字，之后再点击 <strong>保存并部署</strong>。</li>
<li>  再点击 <strong>预览</strong>，即可看到效果图，也能直接在浏览器输入网址访问网站。如果出现的是你的网站的内容，那说明反代成功了。</li>
</ul>
<h3 id="自选-Cloudflare-IP-并自动写入-hosts-文件"><a href="#自选-Cloudflare-IP-并自动写入-hosts-文件" class="headerlink" title="自选 Cloudflare IP 并自动写入 hosts 文件"></a>自选 Cloudflare IP 并自动写入 hosts 文件</h3><ul>
<li>  点击下方链接进入 CloudflareSpeedTest 项目下载页面：<a href="https://github.com/XIU2/CloudflareSpeedTest/releases">https://github.com/XIU2/CloudflareSpeedTest/releases</a></li>
<li>  下载并解压相应系统的压缩包。（也可以到我的网盘下载）</li>
<li>  修改 hosts 文件，格式为：</li>
</ul>
<p>1.1.1.1   <strong>Worker 应用的域名</strong><br>1.1.1.1   <strong>Worker 应用的域名</strong></p>
<ul>
<li>  双击运行 <strong>cfst_hosts.bat</strong> 文件，首次运行会提示输入 IP，输入<strong>1.1.1.1</strong>即可。</li>
</ul>
<h3 id="更改客户端服务器配置"><a href="#更改客户端服务器配置" class="headerlink" title="更改客户端服务器配置"></a>更改客户端服务器配置</h3><p>直接把 <strong>IP</strong> 和 <strong>host</strong> 地址改为 <strong>Worker 应用的域名</strong> 即可。</p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>CloudflareSpeedTest 项目地址：<a href="https://github.com/XIU2/CloudflareSpeedTest">https://github.com/XIU2/CloudflareSpeedTest</a></p>
<p>还有一种方式就是：自动更新 Cloudflare 中的域名解析记录为最快 IP。但由于我使用的是 Freenom 的免费域名，无法使用 <strong>Global API Key</strong> 配置 DNS，所以就作罢了。有兴趣的可到下方链接了解一下。<a href="https://github.com/XIU2/CloudflareSpeedTest/issues/40">https://github.com/XIU2/CloudflareSpeedTest/issues/40</a></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>爬墙</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>爬墙</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 基础(一)</title>
    <url>/2021/04/23/css-basis01/</url>
    <content><![CDATA[<h2 id="CSS-的优势："><a href="#CSS-的优势：" class="headerlink" title="CSS 的优势："></a>CSS 的优势：</h2><ul>
<li>  内容和表现分离</li>
<li>  网页结构表现统一，可以实现复用。</li>
<li>  样式十分丰富</li>
<li>  利用 SEO，容易被搜索引擎收录。</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line">    声明<span class="number">1</span><span class="comment">;</span></span><br><span class="line">    声明<span class="number">2</span><span class="comment">;</span></span><br><span class="line">    声明<span class="number">3</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三种-CSS-导入方式"><a href="#三种-CSS-导入方式" class="headerlink" title="三种 CSS 导入方式"></a>三种 CSS 导入方式</h2><ul>
<li>  行内样式</li>
<li>  内部样式</li>
<li>  外部样式（推荐使用）</li>
</ul>
<p>优先级问题：就近原则（哪种离 html 标签代码近就用哪种。<strong>注意：就近原则适用于同一种属性。如果行内样式设置了 color 属性，内部样式设置了 font-size 属性，是都生效，而不是只生效行内样式</strong>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--如果要将 CSS 代码写在 html 文件，就在 head 标签内写--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*表示所有的 h1 标签都适用下面的样式*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入外部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题4<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--行内样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color:blue&quot;</span>&gt;</span>标题5<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*style.css*/</span></span><br><span class="line"><span class="comment">/*外部样式*/</span></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 基础(二)</title>
    <url>/2021/04/23/css-basis02/</url>
    <content><![CDATA[<h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><ul>
<li>  标签选择器（同一类型的标签适用）</li>
<li>  类选择器（同一 class 中的不同类型标签也适用）</li>
<li>  id 选择器（标签的 id 属性值要唯一）</li>
</ul>
<p>优先级问题：id &gt; 类 &gt; 标签（<strong>注意：</strong>适用于<strong>同一种属性。如果 id 选择器设置了 color 属性，类选择器设置了 font-size 属性，是都生效，而不是只生效 id 选择器</strong>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*标签选择器 语法：标签类型&#123;&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*类选择器 语法：.类名&#123;&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*id 选择器 语法：id&#123;&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#title01</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#test</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#test01</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id &gt; 标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--class &gt; 标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id &gt; class 和 标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;test01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>标题4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>标题5<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>标题6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--id 属性值唯一--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;title01&quot;</span>&gt;</span>标题7<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h2><ul>
<li>  后代选择器：某个/类标签的后代全部特定标签</li>
<li>  子选择器：某个/类标签的后一代特定标签</li>
<li>  相邻兄弟选择器：有相同父元素的同类型标签中的后一个特定标签</li>
<li>  通用选择器：有相同父元素的同类型标签中的全部特定标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="comment">/*后代选择器 语法：标签 标签&#123;&#125; 第一个标签可以是三种基本选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> <span class="selector-tag">em</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*子代选择器 语法：标签&gt;标签&#123;&#125; 第一个标签可以是三种基本选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">ol</span>&gt;<span class="selector-tag">li</span>&#123;      <span class="comment">/*ol&gt;p无效！*/</span></span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*相邻兄弟选择器 语法：标签+标签&#123;&#125; 第一个标签可以是三种基本选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.list01</span>+<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*通用选择器 语法：标签~标签&#123;&#125; 第一个标签可以是三种基本选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-id">#list02</span>~<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--后代选择器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>斜体1<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>斜体2<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体3<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内嵌列表<span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体4<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体5<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--子代选择器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--相邻兄弟选择器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list01&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通用选择器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list02&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="结构性伪类选择器（有-就算）"><a href="#结构性伪类选择器（有-就算）" class="headerlink" title="结构性伪类选择器（有 : 就算）"></a>结构性伪类选择器（有 : 就算）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择当前标签的父元素下的第 n 个，且是同类型的标签。*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">h1</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择当前标签的父元素下的同类型的第 n 个标签。*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">h1</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二行<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第三行<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="属性选择器（常用）"><a href="#属性选择器（常用）" class="headerlink" title="属性选择器（常用）"></a>属性选择器（常用）</h2><p>下面的实例，可以一个个注释掉属性选择器来测试，方便理解。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.demo</span> <span class="selector-tag">a</span>&#123;      <span class="comment">/*先不用掌握，便于测试而已。*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font</span>: bold <span class="number">20px</span>/<span class="number">50px</span> Arial;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">        =  等于...</span></span></span><br><span class="line"><span class="comment"><span class="css">        *= 包含...</span></span></span><br><span class="line"><span class="comment"><span class="css">        ^= 以...开头</span></span></span><br><span class="line"><span class="comment"><span class="css">        $= 以...结尾</span></span></span><br><span class="line"><span class="comment"><span class="css">        */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*语法：标签[属性(可以用正则表达式)]&#123;&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[class]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-attr">[class]</span>&#123;       <span class="comment">/*对于有子代的标签不生效*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[id=<span class="string">&quot;i1&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[id*=<span class="string">&quot;d&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: orange;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">&quot;https&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: fuchsia;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[href$=<span class="string">&quot;mg&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: saddlebrown;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span>p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--下面这些 a 标签随便写的，便于测试。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://guest997.ml&quot;</span> <span class="attr">class</span>=<span class="string">&quot;c2&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;img&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;jpg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;i1&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;video&quot;</span> <span class="attr">title</span>=<span class="string">&quot;t1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;i2&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;video&quot;</span> <span class="attr">title</span>=<span class="string">&quot;t1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;video&quot;</span> <span class="attr">title</span>=<span class="string">&quot;t1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 基础(三)</title>
    <url>/2021/04/27/css-basis03/</url>
    <content><![CDATA[<h2 id="span-和-div-标签"><a href="#span-和-div-标签" class="headerlink" title="span 和 div 标签"></a>span 和 div 标签</h2><ul>
<li>  span 标签：用来组合文档中的行内元素，重点要突出的文字。</li>
<li>  div 标签： 定义文档中的分区或节。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#blog</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    欢迎来到我的博客 <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://guest997.ml/&quot;</span> <span class="attr">id</span>=<span class="string">&quot;blog&quot;</span>&gt;</span>Guest997<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="常用字体样式"><a href="#常用字体样式" class="headerlink" title="常用字体样式"></a>常用字体样式</h2><ul>
<li>  font- family：字体（可以输入多种字体）</li>
<li>  font-size：字体大小</li>
<li>  font- weight：字体粗细</li>
<li>  color：字体颜色</li>
<li>  font- style：字体风格（粗体和斜体）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font</span>- style: oblique;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-family</span>: <span class="string">&quot;Arial Black&quot;</span>,楷体;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: bolder;</span></span><br><span class="line"><span class="css">            <span class="comment">/*语法：font:font-style font-weight font-size font-family</span></span></span><br><span class="line"><span class="comment"><span class="css">            注意：</span></span></span><br><span class="line"><span class="comment"><span class="css">            1.编写代码时必须遵循上述格式顺序。</span></span></span><br><span class="line"><span class="comment"><span class="css">            2.在用上述格式简写时不必四种属性全写，但一定要包括 font-size 和 font-famil，否则不生效。</span></span></span><br><span class="line"><span class="comment"><span class="css">            3.各属性之间用空格隔开。*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*font:oblique bolder 30px &quot;Arial Black&quot;,楷体;*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I hope you can live the best of yourself !<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>本站大部分分享的资源文件都会放到我的 OneDrive 网盘下，网盘地址可在右侧站点概览中找到。这些资源文件永久免费，如果发现倒卖，请立即退款差评！如果喜欢本站，可以在右侧栏目中找到捐赠页面地址，支持一下站长。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="常用文本样式"><a href="#常用文本样式" class="headerlink" title="常用文本样式"></a>常用文本样式</h2><ul>
<li>  color：文本颜色（rgb 和 rgba）</li>
<li>  text-align：文本对齐方式（居左、中、右）</li>
<li>  text-indent：首行缩进</li>
<li>  line-height：行高</li>
<li>  text-decoration：装饰</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#title</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*a: 0~1（透明度）*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#p1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*em 是一个相对的度量单位，对于浏览器来说，1em=16px，16px 为浏览器的默认字体大小。*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#p2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*行高和块的高度相等，就能实现单行文字垂直居中*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*上、中、下划线*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#p3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#p4</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#p5</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: overline;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*去掉 a 标签默认下划线*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://guest997.ml&quot;</span>&gt;</span>Guest997<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p3&quot;</span>&gt;</span>6666<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p4&quot;</span>&gt;</span>8888<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p5&quot;</span>&gt;</span>9999<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Guest997<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Guest997<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>I hope you can live the best of yourself !<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>本站大部分分享的资源文件都会放到我的 OneDrive 网盘下，网盘地址可在右侧站点概览中找到。这些资源文件永久免费，如果发现倒卖，请立即退款差评！如果喜欢本站，可以在右侧栏目中找到捐赠页面地址，支持一下站长。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="超链接伪类"><a href="#超链接伪类" class="headerlink" title="超链接伪类"></a>超链接伪类</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*鼠标悬浮的状态*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*鼠标点击的状态*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://guest997.ml&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>Guest997<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 基础(四)</title>
    <url>/2021/04/27/css-basis04/</url>
    <content><![CDATA[<h2 id="列表简单练习"><a href="#列表简单练习" class="headerlink" title="列表简单练习"></a>列表简单练习</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;category&quot;</span>&gt;</span>商品种类<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>大家电<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生活电器<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>数码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>汽车<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>二手车<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>女鞋<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>男鞋<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>手表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>眼镜<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*style.css*/</span></span><br><span class="line"><span class="selector-id">#nav</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: dodgerblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#category</span>&#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*list-style:</span></span><br><span class="line"><span class="comment">none    去掉原点或数字</span></span><br><span class="line"><span class="comment">circle  空心圆</span></span><br><span class="line"><span class="comment">decimal 数字</span></span><br><span class="line"><span class="comment">square  正方形*/</span></span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">background</span>: dodgerblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: greenyellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="背景图像简单练习"><a href="#背景图像简单练习" class="headerlink" title="背景图像简单练习"></a>背景图像简单练习</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;   <span class="comment">/*先不用掌握，便于测试*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;images/avatar.jpg&quot;</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*默认是平铺，可以设置成不重复或者行、列重复*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;images/avatar.jpg&quot;</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="css">        &#125;<span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;images/avatar.jpg&quot;</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-repeat</span>: repeat-x;</span></span><br><span class="line"><span class="css">        &#125;<span class="selector-class">.d3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;images/avatar.jpg&quot;</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-repeat</span>: repeat-y;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*可以直接写在 background 属性中，并且进行图片定位*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.d4</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;images/avatar.jpg&quot;</span>) <span class="number">100px</span> <span class="number">50px</span> no-repeat;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 基础(五)</title>
    <url>/2021/04/28/css-basis05/</url>
    <content><![CDATA[<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p><img data-src="/images/css-basis05.md-0.gif"></p>
<p>不同部分的说明：</p>
<ul>
<li>  <strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li>
<li>  <strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li>
<li>  <strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li>
<li>  <strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</li>
</ul>
<p>总元素的宽度计算公式：<br>总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距</p>
<p>总元素的高度计算公式：<br>总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距<img data-src="/images/css-basis05.md-1.png"></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li>margin/padding/border：属性1，属性2，属性3，属性4<br>  上-&gt;右-&gt;下-&gt;左（顺时针）</li>
<li>margin/padding/border：属性1，属性2，属性3<br>  上-&gt;左右-&gt;下</li>
<li>margin/padding/border：属性1，属性2<br>  上下-&gt;左右</li>
<li>margin/padding/border：属性1<br>  上下左右属性相同</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*body 标签有默认的外边距*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">            <span class="comment">/*标签水平居中*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin: 0 auto;*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*p 标签有默认的上下外边距*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>:yellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.mpb</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-top:50px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            margin-right:50px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            margin-bottom:100px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            margin-left:100px;*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">100px</span> <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-top:10px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            padding-right:50px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            padding-bottom:50px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            padding-left:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*border-style: solid;（必须要的一项属性，否则边框就不生效）</span></span></span><br><span class="line"><span class="comment"><span class="css">            border-color: red;</span></span></span><br><span class="line"><span class="comment"><span class="css">            border-top: 5px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            border-right: 5px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            border-bottom: 5px;</span></span></span><br><span class="line"><span class="comment"><span class="css">            border-left: 5px;*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid red <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个没有指定边距和边框大小的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mpb&quot;</span>&gt;</span>这是一个指定边距和边框大小的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="只设置内边距的效果"><a href="#只设置内边距的效果" class="headerlink" title="只设置内边距的效果"></a>只设置内边距的效果</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img data-src="/images/css-basis05.md-2.png"></h3><h3 id="只设置外边距的效果"><a href="#只设置外边距的效果" class="headerlink" title="只设置外边距的效果"></a>只设置外边距的效果</h3><p><img data-src="/images/css-basis05.md-3.png"></p>
<h3 id="同时设置内外边距的效果"><a href="#同时设置内外边距的效果" class="headerlink" title="同时设置内外边距的效果"></a>同时设置内外边距的效果</h3><p><img data-src="/images/css-basis05.md-4.png"></p>
<h3 id="同时设置内外边距和边框的效果"><a href="#同时设置内外边距和边框的效果" class="headerlink" title="同时设置内外边距和边框的效果"></a>同时设置内外边距和边框的效果</h3><p><img data-src="/images/css-basis05.md-5.png"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 基础(六)</title>
    <url>/2021/04/28/css-basis06/</url>
    <content><![CDATA[<p>标准文档流中行内元素可以被包含在块级元素中，反之，则不可以。</p>
<h2 id="display-属性"><a href="#display-属性" class="headerlink" title="display 属性"></a>display 属性</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid red <span class="number">1px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*转换成行内元素设置的高和宽就会失效*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: inline;*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: inline-block;    <span class="comment">/*既具有 block 元素可以设置宽高的特性,同时又具有 inline 元素默认不换行的特性。*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid red <span class="number">1px</span>;<span class="comment">/*到这为止，是不能生效设置的高和宽*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*转换成块级元素就可以了*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: block;*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>块级标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>行内标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="float-属性"><a href="#float-属性" class="headerlink" title="float 属性"></a>float 属性</h2><p>点击下方文章链接了解 float 属性：<br><a href="https://www.cnblogs.com/iyangyuan/archive/2013/03/27/2983813.html">经验分享：CSS浮动(float,clear)通俗讲解</a></p>
<h3 id="父级边框塌陷解决方法："><a href="#父级边框塌陷解决方法：" class="headerlink" title="父级边框塌陷解决方法："></a>父级边框塌陷解决方法：</h3><ul>
<li>增加父元素的宽或高<br>  缺点：简单，但如果父元素设有了固定的高度，就会被限制。</li>
<li>增加一个空的 div 标签，并设置 style 的 clear 属性为 both。<br>  缺点：简单，但代码中尽量避免空 div 标签。</li>
<li>设置父元素 style 的 overflow 属性<br>  缺点：简单，但子元素可能无法显示完全，并且下拉的一些场景尽量避免使用。</li>
<li>父元素添加一个 after 伪类<br>  缺点：写法稍微复杂一点，但是没有副作用，推荐使用！</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">            <span class="comment">/*增加父元素的宽或高可解决边框塌陷问题*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*width: 1000px; height: 300px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*当父元素的宽高已定，可设置 overflow 属性解决边框塌陷问题*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*width: 60px; height: 60px;overflow: hidden;*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*增加一个父元素 after 伪类可解决边框塌陷问题*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>:after&#123;</span></span><br><span class="line"><span class="css">            content: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*当使用 float 属性时就有可能会出现父级边框塌陷问题*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/avatar.jpg&quot;</span>&gt;</span>    <span class="comment">&lt;!--图片为100*100像素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I hope you can live the best of yourself !<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置空的 div 标签的 style 的 clear 属性为 both，可解决边框塌陷问题。--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;div id=&quot;clear&quot; style=&quot;clear: both;&quot;&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="display-和-float-属性对比"><a href="#display-和-float-属性对比" class="headerlink" title="display 和 float 属性对比"></a>display 和 float 属性对比</h2><p>共同点：都能实现元素在同一行进行排列。<br>不同点：display 属性不能控制方向，float 属性可以。使用 float 属性时可能会出现父级边框塌陷问题，display 属性则不会。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 基础(七)</title>
    <url>/2021/05/08/css-basis07/</url>
    <content><![CDATA[<h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><p>相对于原来的位置进行偏移，偏移量的符号可以是正负，正就是往元素自身的中心方向进行移动，负则反之。<br>进行相对定位的元素仍然会在标准文档流中，并且原来的位置会被保留。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#first</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: dashed <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: darkmagenta;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#second</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: dashed <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: aqua;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#third</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: dashed <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: lightcoral;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#fourth</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: dashed <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: teal;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>第一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span>第二个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>第三个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;fourth&quot;</span>&gt;</span>第四个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方块定位练习"><a href="#方块定位练习" class="headerlink" title="方块定位练习"></a>方块定位练习</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>四<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>五<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*style.css*/</span></span><br><span class="line"><span class="comment">/*其实下面不使用浮动和 inline-block，代码会更简洁，这样写只是为了复习之前的东西，可以自己试下只用相对定位。*/</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo</span>:after&#123;</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>),<span class="selector-tag">a</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">5</span>)&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">4</span>)&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">105px</span>;    <span class="comment">/*设置为-100px,左边会有多的空白间隙，是因为 inline-blcok 块之间的不可见符号会被保留父层字体的1/3大小的空间*/</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><ul>
<li>  父级元素不存在定位，会相对于浏览器边界进行偏移。</li>
<li>  父级元素存在定位，会相对于父级元素边框进行偏移。</li>
<li>  进行绝对定位的元素不会在标准文档流中，原来的位置不会被保留。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*把下行代码注释去掉，可以看到父级元素有定位时的效果*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*position: relative;*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#first</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: dashed <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: darkmagenta;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#second</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: dashed <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: aqua;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#third</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: dashed <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: lightcoral;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#fourth</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: dashed <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: teal;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>第一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span>第二个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>第三个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;fourth&quot;</span>&gt;</span>第四个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p>相对于浏览器窗口进行定位，脱离原来的文档流。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: greenyellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: fixed;     <span class="comment">/*设置了 fixed 属性后，往下滚动页面会发现导航栏会一直有置顶的效果。*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>导航栏<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><p>想要调整层叠元素的堆叠顺序时可以使用 z-index 属性来设置层叠顺序。</p>
<ul>
<li>  z-index 的默认值是0，取值越大元素的层叠顺序越靠上。</li>
<li>  如果同样的值则根据文档顺序，后来者居上。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: black <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: greenyellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;  <span class="comment">/*一定要设置 position 属性，否则设置的 z-index 属性会无效。*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*z-index: 1;*/</span>     <span class="comment">/*可实现 d1 堆叠在 d2 和 d3 上面*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: crimson;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: -<span class="number">60px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*z-index: 1;*/</span>     <span class="comment">/*可实现 d2 堆叠在 d1 和 d3 上面*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: goldenrod;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: -<span class="number">120px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">opacity</span>: <span class="number">0.2</span>;       <span class="comment">/*opacity 属性可设置元素不透明度，数值范围为0~1。*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d3&quot;</span>&gt;</span>三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 OCR 原理的生肉翻译器</title>
    <url>/2021/01/31/dango-translator/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> 团子翻译器 - 个人兴趣制作的一款基于 OCR 技术的翻译器</li>
<li> 原理：该软件为OCR翻译器，OCR利用了百度AI的文字识别，原理为通过识别图片上的外文文字并进行翻译。</li>
<li> 适用范围：包括但不限于，galgame、rpg 游戏、模拟器游戏、外文视频、网页游戏、pdf 图片版文献等等，一切能显示在电脑屏幕上的文字。</li>
<li> 翻译接口：百度、腾讯、彩云、google 等等共12个翻译源。</li>
<li> 译文语种：日语、英语、韩文（会考虑加入其它的，但是目前必要性不大）</li>
</ol>
<h2 id="正文：（压缩包里其实已经有了非常详细的使用教程，在这就不赘述了）"><a href="#正文：（压缩包里其实已经有了非常详细的使用教程，在这就不赘述了）" class="headerlink" title="正文：（压缩包里其实已经有了非常详细的使用教程，在这就不赘述了）"></a>正文：（压缩包里其实已经有了非常详细的使用教程，在这就不赘述了）</h2><ul>
<li>  点击下方链接进入 Dango-Translator 项目下载页面。（也可以到我的网盘下载）<a href="https://github.com/PantsuDango/Dango-Translator/releases">https://github.com/PantsuDango/Dango-Translator/releases</a></li>
<li>  通过截图的方式获取需要翻译的屏幕区域坐标。</li>
<li>  通过坐标截图（可自动），并发送至百度 AI 的文字识别接口。</li>
<li>  获取识别好的文字后发送给百度、腾讯、彩云等翻译接口。</li>
<li>结果反馈至GUI界面。<br>  <img data-src="/images/dango-translator.md-0.png"></li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>Dango-Translator 项目地址：<a href="https://github.com/PantsuDango/Dango-Translator">https://github.com/PantsuDango/Dango-Translator</a></p>
<p>作者给出的一些信息：（也可到项目下 README.md 文件查看）</p>
<ul>
<li>  联系方式：QQ：394883561 —— Email：<a href="mailto:&#51;&#x39;&#52;&#x38;&#x38;&#x33;&#x35;&#54;&#49;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;">&#51;&#x39;&#52;&#x38;&#x38;&#x33;&#x35;&#54;&#49;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;</a></li>
<li>  演示视频：<a href="https://www.bilibili.com/video/BV1gp4y1Q7Ts?from=search&seid=2515920591076249883">哔哩哔哩</a></li>
<li>  百度盘下载：<a href="https://pan.baidu.com/s/1AD9JWSAKS69gOawwvMXXQw">百度云盘</a> 提取码：975h 解压密码：Dango</li>
</ul>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>二次元</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>自动续期 EUserv 免费 IPv6 VPS</title>
    <url>/2021/01/27/euserv-ipv6-vps-2/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> EUserv 申请的免费 IPv6 VPS，需要每个月进行续订，否则会被收回。</li>
<li> 教程使用 Github Action 自动续期 EUserv 免费 IPv6 VPS 脚本。</li>
<li> 每天会自动获取账号内所有的 VPS 项目，并检测是否需要续期，需要续期时会自动续期。</li>
</ol>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul>
<li>点击下方链接进入 euserv_extend 项目地址。<br>  <a href="https://github.com/zyp997/euserv_extend">https://github.com/zyp997/euserv_extend</a></li>
<li>  点击右上角 <strong>Fork</strong> ，会跳转到你的项目地址。（需要 GitHub 账号）</li>
<li>  点击 <strong>Settings</strong> ，在左边栏目找到并点击 <strong>Secrets</strong> ，再点击右上角的 <strong>New repository secret</strong>，分别创建如下表的参数。（支持同时添加多个账号，数据之间用单个空格隔开即可，账号邮箱和账号密码需一一对应）</li>
</ul>
<table>
<thead>
<tr>
<th>Secrets变量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>USERNAME</td>
<td>EUserv 账号邮箱</td>
</tr>
<tr>
<td>PWD</td>
<td>EUserv 账号密码</td>
</tr>
</tbody></table>
<ul>
<li>  点击 <strong>Actions</strong> ，点击 <strong>I understand my workflows, go and ahead and enable them</strong> ，在左边栏目找到并点击 <strong>EUserv Auto Extend</strong> ，点击 <strong>Enable workflow</strong> ，再点击 <strong>Run workflow</strong> 选项，最后点击 <strong>Run workflow</strong> 。</li>
<li>在左边栏目找到并点击 <strong>All workflows</strong> ，如出现下图结果则表示配置成功。(如果什么都没显示，则在 <strong>README.md</strong> 文件随便打个字符即可；如果执行失败，则仔细检查 <strong>Secrets 变量</strong> 是否填写正确，之后再重新执行 <strong>Actions</strong>)<br>  <img data-src="/images/euserv-ipv6-vps-2.md-0.png"></li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>该项目还支持通过 sre24 免费推送微信提醒，有兴趣的可到项目下 <strong>README.md</strong> 文件了解一下。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>vps</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>EUserv 永久免费的 IPv6 VPS 申请教程</title>
    <url>/2021/01/27/euserv-ipv6-vps/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>EUserv 是一家德国主机商，提供专用服务器托管，虚拟专用服务器，云服务，网站托管和域注册服务。目前该商家提供免费 IPv6 主机服务器，配置信息如下：</p>
<ul>
<li>  CPU：1 Core @ 1 GHz</li>
<li>  内存：1 GB</li>
<li>  硬盘：10 GB HDD</li>
<li>  带宽：1 Gbit</li>
<li>  IP ：1 IPv6</li>
</ul>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="注册账号："><a href="#注册账号：" class="headerlink" title="注册账号："></a>注册账号：</h3><ul>
<li>  点击后面的链接进入 EUserv IPv6 VPS 的申请网站：<a href="https://www.euserv.com/en/virtual-private-server/root-vserver/v2/vs2-free.php">https://www.euserv.com/en/virtual-private-server/root-vserver/v2/vs2-free.php</a></li>
<li>  点击右边的 <strong>Order</strong>，弹出对话框再点击 <strong>Order</strong>，最后点击 <strong>Go to checkout</strong>。</li>
<li>  点击 <strong>Register</strong> 注册帐号，填入信息。注意：邮箱使用国外邮箱，国家必须选择欧美国家 。</li>
<li>  打勾同意条款并点击 <strong>Proceed checkout</strong>。</li>
<li>  因为 EUserv 需要审核才能通过，所以需要重新登陆后完善信息。<img data-src="/images/euserv-ipv6-vps.md-0.png"></li>
</ul>
<h3 id="完善信息："><a href="#完善信息：" class="headerlink" title="完善信息："></a>完善信息：</h3><ul>
<li>  点击下面的链接进入身份生成网站。 <a href="https://www.meiguodizhi.com/">https://www.meiguodizhi.com/</a></li>
<li>  通过上面生成的身份信息，填入到你的资料中，最后点击 <strong>Save</strong>。</li>
<li>  审核时间一般不超过48小时，如果通过会在邮箱有信息提示，再次登录 EUserv 的时候，如果登录不了说明没有通过审核，帐号被删除了，这个邮箱也不能再申请了，需要换邮箱重新申请！</li>
<li>  如果要查看订单申请状态，登录后会到后台界面，点击 <strong>Cover Page</strong>，点击 <strong>vServer</strong>，会查看到订单的信息，在 <strong>State</strong> 项下，如果是一个沙漏，则说明还在审核，如果打勾了，则说明审核通过了。</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>白嫖</tag>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title>Freenom 免费域名注册以及 Cloudflare 域名免费托管和解析</title>
    <url>/2021/01/27/freenom-cloudflare/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> Freenom 提供了 tk、ml、ga、cf、gq 这几类后缀的免费域名。.tk 域名是南太平洋岛国托克劳的顶级域名，.ml 是非洲国家马里的后缀，.ga 域名为加蓬国家顶级域名后缀，.cf 是中非共和国的后缀，.gq 域名是赤道几内亚国家地区顶级域名。</li>
<li> Cloudflare 提供的安全服务是帮助网站阻止来自网络的黑客攻击、垃圾邮件等，并提升网页的浏览速度。如果用户使用了其服务，那么网络流量将通过 Cloudflare 的全球网络智能路由。Cloudflare 会自动优化用户的网页交付，以期达到最快的页面加载时间以及最佳性能。Cloudflare 提供包括 CDN、优化工具、安全、分析以及应用等服务。</li>
<li> <strong>这次的教程会以上篇申请的 IPv6 VPS 为例进行域名的一些操作。</strong></li>
</ol>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="Freenom-免费域名注册：（账号注册过程就不赘述了）"><a href="#Freenom-免费域名注册：（账号注册过程就不赘述了）" class="headerlink" title="Freenom 免费域名注册：（账号注册过程就不赘述了）"></a>Freenom 免费域名注册：（账号注册过程就不赘述了）</h3><ul>
<li>  点击下方链接进入 Freenom 官网： <a href="http://www.freenom.com/zh/index.html">http://www.freenom.com/zh/index.html</a></li>
<li>  直接输入域名检查可用性。例如 <strong>guest997</strong>。</li>
<li>  如果是可用的，会在下方显示 <strong>现在获取！</strong>，点击自己想要的域名。（可以多选）</li>
<li>  右上方会显示 <strong>完成</strong> ，点击进入购物车。</li>
<li>  在最右边选择12个月免费的选项。（快到期了会发邮件提醒续订）</li>
<li>  点击 <strong>Continue</strong>，打勾同意条款并点击 <strong>Complete Order</strong>。（系统会给你发一封确认订购的邮件，你需登陆邮箱完成订购）</li>
</ul>
<h3 id="Cloudflare-域名免费托管和解析：（账号注册过程就不赘述了）"><a href="#Cloudflare-域名免费托管和解析：（账号注册过程就不赘述了）" class="headerlink" title="Cloudflare 域名免费托管和解析：（账号注册过程就不赘述了）"></a>Cloudflare 域名免费托管和解析：（账号注册过程就不赘述了）</h3><ul>
<li>  点击右上角的 <strong>+添加站点</strong> ，输入注册好的域名，点击 <strong>添加域名</strong> 。选择免费计划。</li>
<li>  会跳转到如图提示的域名托管的操作，找到第二项 <strong>替换为 Cloudflare 名称服务器</strong>，两个名称服务器都复制下来。<img data-src="/images/freenom-cloudflare.md-0.png"></li>
<li>  进入到 Freenom 官网，点击右上角的 <strong>services</strong> 项下的 <strong>My Domians</strong> ，点击 <strong>Manage Domain</strong> ，点击 <strong>Management Tools</strong> 项下的 <strong>Nameservers</strong> ，点击 <strong>Use custom nameservers(enter blow)</strong> 选项，填入刚刚复制的两个名称服务器，最后点击 <strong>Change Nameservers</strong> 。</li>
<li>  回到 Cloudflare 后台，点击 <strong>完成，检查名称服务器</strong> 。会跳到如下图所示的 <strong>快速入门指南</strong> 界面，在第一项 <strong>提高安全性</strong> 中，建议选择 <strong>完全</strong> 模式，其它的默认就好。<img data-src="/images/freenom-cloudflare.md-1.png"></li>
<li>  进入到 EUserv 控制台，点击 <strong>Cover Page</strong> ，点击 <strong>vServer</strong> ，点击 <strong>Actions</strong> 项下的 <strong>Select</strong> 。点击 <strong>Serverdata</strong> ，会在 <strong>Main IPv6-Address:</strong> 中看到 IPv6 的地址。</li>
<li>  在 Cloudflare 上添加 <strong>AAAA</strong> 记录，名称随意，可以是 **@**，直接指向一级域名，也可以输入名字，指向二级域名。</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>大多平常使用的 VPS 都是会有提供 IPv4 的地址，添加的是 <strong>A</strong> 记录。特殊点的会添加 <strong>CNAME</strong> 和 <strong>TXT</strong> 记录等等，反正都会有提示。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>白嫖</tag>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title>自动续期 Freenom 免费域名</title>
    <url>/2021/01/30/freenom/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> Freenom 申请的免费域名，需要每年进行续订，否则会被收回。</li>
<li> 教程使用 Github Action 自动续期 Freenom 免费域名脚本。</li>
<li> 每周五会自动获取账号内所有的免费域名，并检测是否需要续期，需要续期时会自动续期。</li>
</ol>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul>
<li>点击下方链接进入 freenom 项目地址。<br>  <a href="https://github.com/zyp997/freenom">https://github.com/zyp997/freenom</a></li>
<li>  点击右上角 <strong>Fork</strong> ，会跳转到你的项目地址。（需要 GitHub 账号）</li>
<li>  点击 <strong>Settings</strong> ，在左边栏目找到并点击 <strong>Secrets</strong> ，再点击右上角的 <strong>New repository secret</strong>，分别创建如下表的参数。（如想要添加多个账号，请看下方备注）</li>
</ul>
<table>
<thead>
<tr>
<th>Secrets变量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>USERNAME</td>
<td>Freenom 账号邮箱</td>
</tr>
<tr>
<td>PASSWORD</td>
<td>Freenom 账号密码</td>
</tr>
</tbody></table>
<ul>
<li>  点击 <strong>Actions</strong> ，点击 <strong>I understand my workflows, go and ahead and enable them</strong> ，在左边栏目找到并点击 <strong>autorun</strong> ，点击 <strong>Enable workflow</strong> ，再点击 <strong>Run workflow</strong> 选项，最后点击 <strong>Run workflow</strong> 。</li>
<li>在左边栏目找到并点击 <strong>All workflows</strong> ，如出现下图结果则表示配置成功。(如果什么都没显示，则在 <strong>README.md</strong> 文件随便打个字符即可；如果执行失败，则仔细检查 <strong>Secrets 变量</strong> 是否填写正确，之后再重新执行 <strong>Actions</strong>)<br>  <img data-src="/images/freenom.md-0.png"></li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>还有支持多账号、邮箱推送功能的项目，有兴趣的可到下方链接了解一下。<br><a href="https://github.com/luolongfei/freenom">https://github.com/luolongfei/freenom</a></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>免费容器 goormIDE 搭建 Socks5 代理</title>
    <url>/2021/02/01/goormide-socks5/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> goormIDE 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。</li>
<li> goormIDE 免费版有所限制，比如：关闭工作空间且30分钟无操作就会关机。</li>
</ol>
<h2 id="正文：（goormIDE-注册过程就不赘述了）"><a href="#正文：（goormIDE-注册过程就不赘述了）" class="headerlink" title="正文：（goormIDE 注册过程就不赘述了）"></a>正文：（goormIDE 注册过程就不赘述了）</h2><ul>
<li>点击下方链接进入到 goormIDE 控制台。<br>  <a href="https://ide.goorm.io/dashboard#/containers">https://ide.goorm.io/dashboard#/containers</a></li>
<li>  点击右上角的 <strong>+ New container</strong>。</li>
<li>  只需要填写名字和选择地区即可，一共有四个地区。美国、韩国、德国和印度，一共可以创建五个容器，可以都试一下每个地区的网速如何。不过有时会变 IP 和端口。</li>
<li>  点击右上角的 **Create (Ctrl + M)**，等待创建完成。</li>
<li>  点击 <strong>Run Container</strong>，进入到工作空间。</li>
<li>  输入下面代码搭建 Socks5 代理。（输入 <strong>y</strong> 确认即可）</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/guleonseon/g</span>oorm-auto<span class="regexp">/master/i</span>nstall.sh)</span><br></pre></td></tr></table></figure>

<ul>
<li>  <strong>搭建完成后，不要关闭该页面。否则30分钟后，就会关机。</strong></li>
<li>  回到控制台，点击创建的容器的 <strong>Settings</strong> ，在下方 <strong>Port forwading</strong> 项下，点击右上角的 <strong>+ Add</strong>，输入<strong>1080</strong>，按回车。</li>
<li>  复制 <strong>Command</strong> 下的 IP 地址和端口。</li>
<li>  浏览器可以安装 SwitchyOmega 插件设置代理，代理协议设置为 socks5，代理服务器设置为复制的 IP 地址，代理端口设置为复制的端口。（最好配合 gfwlist 进行分流上网）考虑到插件不易下载，故将插件放到了我的网盘的爬墙目录下。（不知道我的网盘地址？左侧栏目就有啊！）</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>由于第一次运行需要搭建代理、开放内部端口，之后就只需要重新启动即可。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>爬墙</category>
      </categories>
      <tags>
        <tag>白嫖</tag>
        <tag>容器</tag>
        <tag>爬墙</tag>
        <tag>goormide</tag>
      </tags>
  </entry>
  <entry>
    <title>希望爷爷一路走好...</title>
    <url>/2021/05/01/grandpa-passed-away/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>4月28日晚上8点左右爷爷在深圳医院去世。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>我收到消息时是在茂名，一开始是老姐说爷爷在医院抢救，具体发生了什么我也不清楚，过了一个小时后，老姐就跟我说爷爷去世了，叫我抽空给奶奶打电话。</p>
<p>如果要问我对爷爷的了解有多少，我只能说寥寥无几。只记得小学去爷爷奶奶家度过了整个寒假，也没干什么，就跟我表哥玩以及帮爷爷奶奶按摩聊天啥的。之后便没再去呆过更长的时间了。</p>
<p>虽然每年除夕都会去爷爷奶奶那守岁，但大部分时候都是跟同辈人聊天而已。爷爷奶奶则大多时候都是在跟爸爸那一辈的在聊天。在最近几年，爷爷先后得了老年痴呆和尿毒症，老年痴呆以现在的医学水平肯定是治不好的，尿毒症则是需要透析才能活下来。</p>
<p>之后再见到爷爷的时候，爷爷已经忘记我们了，最多还记得奶奶和爸爸他们。平时需要奶奶提醒爷爷才可能记起来，又或者是已经是无法想起来了。其实其它病还好，就怕失去记忆这种东西，虽然我无法切身感受到，但动漫看多了也能感受到一点，失去记忆是有多难受。毕竟会不知道身边的人是谁，现在是什么时候，甚至会认为自己还活在过去的时间。</p>
<p>爷爷得了尿毒症之后，有一次放假回去便去看爷爷，毕竟腰上别着个尿袋还是有所不便的，帮爷爷洗澡，以及做下家务而已。更多的就是奶奶帮爷爷做了，毕竟爷爷不记得我们了，如果我们干了什么，他就会生气地叫我们走开。</p>
<p>爷爷去世后，刚好是五一假期，之前嫌麻烦都是在学校度过的。这次就回到家，送爷爷出殡，具体时间是5月5日早上九点到十一点半结束。6号中午我就会坐高铁回学校了。</p>
<p>我不了解爷爷的一生是怎么样度过的，所以我也无法说出更多的送别语，只能说<strong>每个人都会有这一次这样的经历，每个人都知道如何应对，也许对爷爷来说离开是另一种生活的开始，而他将会留在我们的心里。希望爷爷一路走好。</strong></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>不知道爷爷去世时是否有人在他身边，奶奶的心情如何。逝者已逝，生者如斯。我更多地是希望奶奶今后能够淡然地过着生活，有人能陪她聊天，直到去见爷爷的时候，与爷爷重逢，也能开心地说出爷爷不在之后，她是如何地生活。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>免费容器 Heroku 搭建 goproxy 代理</title>
    <url>/2021/01/23/heroku-goproxy/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> Heroku 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。</li>
<li> Heroku 免费版有所限制，比如：30分钟无人访问就休眠以及所有实例访问总时长限制为550小时。</li>
</ol>
<h2 id="正文：-Heroku-注册过程就不赘述了"><a href="#正文：-Heroku-注册过程就不赘述了" class="headerlink" title="正文：(Heroku 注册过程就不赘述了)"></a>正文：(Heroku 注册过程就不赘述了)</h2><ul>
<li>点击下方链接进入 goproxy-heroku 项目地址。<br>  <a href="https://github.com/zyp997/goproxy-heroku">https://github.com/zyp997/goproxy-heroku</a></li>
<li>  点击 <strong>Deploy to Heroku</strong> ，进入 Heroku 后台进行部署。</li>
<li>  只需填入<strong>实例名字</strong>和选择<strong>实例地区</strong>即可。</li>
<li>  点击下方的 <strong>Deploy app</strong> ，等待自动部署完毕。</li>
<li>  点击 <strong>view</strong> ，会跳到已部署好的实例网站，如下图显示即为部署成功。<img data-src="/images/heroku-goproxy.md-0.png"></li>
<li>  下载 goproxy 客户端压缩包，点击下方链接进入官方 github 地址，下载并解压相应系统的压缩包。(也可以到我的网盘下载) <a href="https://github.com/snail007/goproxy/releases">https://github.com/snail007/goproxy/releases</a></li>
<li>  以 win10 64位系统进行配置，解压后的文件夹下创建 <strong>startup.bat</strong> 文件，文件内容为：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">proxy<span class="selector-class">.exe</span> http --always -t tcp -<span class="selector-tag">p</span> :<span class="number">6600</span> -T wss -P 你的实例名字<span class="selector-class">.herokuapp</span><span class="selector-class">.com</span>:<span class="number">443</span> --parent-ws-password pass -<span class="selector-tag">q</span> <span class="number">8.8</span>.<span class="number">8.8</span>:<span class="number">53</span> --timeout <span class="number">30000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  双击运行 <strong>startup.bat</strong> 文件，无红字报错即已经成功运行 goproxy。</li>
<li>  浏览器可以安装 SwitchyOmega 插件设置代理，代理协议设置为 http，代理服务器设置为127.0.0.1，代理端口设置为6600。（最好配合 gfwlist 进行分流上网）考虑到插件不易下载，故将插件放到了我的网盘的爬墙目录下。（不知道我的网盘地址？左侧栏目就有啊！）</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>Android 端的也有插件能够实现设置代理，具体的可以到下面的地址了解一下。<br><a href="https://github.com/snail007/goproxy-ss-plugin-android">https://github.com/snail007/goproxy-ss-plugin-android</a></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>爬墙</category>
      </categories>
      <tags>
        <tag>白嫖</tag>
        <tag>容器</tag>
        <tag>爬墙</tag>
        <tag>heroku</tag>
      </tags>
  </entry>
  <entry>
    <title>免费容器 Heroku 搭建 Gost 代理</title>
    <url>/2021/01/23/heroku-gost/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> Heroku 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。</li>
<li> Heroku 免费版有所限制，比如：30分钟无人访问就休眠以及所有实例访问总时长限制为550小时。</li>
</ol>
<h2 id="正文：-Heroku-注册过程就不赘述了"><a href="#正文：-Heroku-注册过程就不赘述了" class="headerlink" title="正文：(Heroku 注册过程就不赘述了)"></a>正文：(Heroku 注册过程就不赘述了)</h2><ul>
<li>点击下方链接进入 gost-heroku 项目地址。<br>  <a href="https://github.com/zyp997/gost-heroku">https://github.com/zyp997/gost-heroku</a></li>
<li>  点击 <strong>Deploy to Heroku</strong> ，进入 Heroku 后台进行部署。</li>
<li>  只需填入<strong>实例名字</strong>和选择<strong>实例地区</strong>即可。</li>
<li>  点击下方的 <strong>Deploy app</strong> ，等待自动部署完毕。</li>
<li>  点击 <strong>view</strong> ，会跳到已部署好的实例网站，显示 <code>**404 page not found**</code>，即部署成功。</li>
<li>  下载 Gost 客户端压缩包，点击下方链接进入官方 github 地址，下载并解压相应系统的压缩包。(也可以到我的网盘下载) <a href="https://github.com/ginuerzh/gost/releases">https://github.com/ginuerzh/gost/releases</a></li>
<li>  以 win10 64位系统进行配置，解压后的文件夹下创建 <strong>startup.bat</strong> 文件，文件内容为：(<strong>注意：由于代码编辑器会自动和谐掉 : 和 @ 中间的代码，需要自己加上：ss123456</strong>)</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gost</span>-windows-amd<span class="number">64</span>.exe -L=:<span class="number">8899</span> -F=ss+mwss://chacha<span class="number">20</span>:@你的实例名字.herokuapp.com:<span class="number">443</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  双击运行 <strong>startup.bat</strong> 文件，无红字报错即已经成功运行 Gost。</li>
<li>  浏览器可以安装 SwitchyOmega 插件设置代理，代理协议设置为 socks 或者 http 都可以，代理服务器设置为127.0.0.1，代理端口设置为8899。（最好配合 gfwlist 进行分流上网）考虑到插件不易下载，故将插件放到了我的网盘的爬墙目录下。（不知道我的网盘地址？左侧栏目就有啊！）</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>Android 端的也有插件能够实现设置代理，具体的可以到下面的地址了解一下。<a href="https://github.com/xausky/ShadowsocksGostPlugin">https://github.com/xausky/ShadowsocksGostPlugin</a></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>爬墙</category>
      </categories>
      <tags>
        <tag>白嫖</tag>
        <tag>容器</tag>
        <tag>爬墙</tag>
        <tag>heroku</tag>
      </tags>
  </entry>
  <entry>
    <title>免费容器 Heroku 搭建 GSnova 代理</title>
    <url>/2021/01/22/heroku-gsnova/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> Heroku 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。</li>
<li> Heroku 免费版有所限制，比如：30分钟无人访问就休眠以及所有实例访问总时长限制为550小时。</li>
</ol>
<h2 id="正文：-Heroku-注册过程就不赘述了"><a href="#正文：-Heroku-注册过程就不赘述了" class="headerlink" title="正文：(Heroku 注册过程就不赘述了)"></a>正文：(Heroku 注册过程就不赘述了)</h2><ul>
<li>点击下方链接进入 gsnova-heroku 项目地址。<br>  <a href="https://github.com/zyp997/gsnova-heroku">https://github.com/zyp997/gsnova-heroku</a></li>
<li>  点击 <strong>Deploy to Heroku</strong> ，进入 Heroku 后台进行部署。</li>
<li>  只需填入<strong>实例名字</strong>和选择<strong>实例地区</strong>即可。</li>
<li>  点击下方的 <strong>Deploy app</strong> ，等待自动部署完毕。</li>
<li>  点击 <strong>view</strong> ，会跳到已部署好的实例网站，如下图显示即为部署成功。<img data-src="/images/heroku-gsnova.md-0.png"></li>
<li>  下载 GSnova 客户端压缩包，点击下方链接进入我的网盘，下载并解压相应系统的压缩包。<a href="https://guest997.000webhostapp.com/?/%E7%88%AC%E5%A2%99/heroku%E6%90%AD%E5%BB%BAgsnova/">https://guest997.000webhostapp.com/?/%E7%88%AC%E5%A2%99/heroku%E6%90%AD%E5%BB%BAgsnova/</a></li>
<li>  以 win10 64位系统进行配置，解压后的文件夹下编辑 <strong>client.json</strong> 文件，如下图进行修改，修改 <strong>Mux</strong> 项下的 <strong>MaxStreamWindow</strong> 参数为 <strong>1024K</strong> ，<strong>StreamMinRefresh</strong> 参数为 <strong>64K</strong>；修改 <strong>Channel</strong> 项下的 <strong>ServerList</strong> 参数为 <strong>wss://你的实例名字.herokuapp.com</strong>。<img data-src="/images/heroku-gsnova.md-0.png"><img data-src="/images/heroku-gsnova.md-1.png"></li>
<li>  双击运行 <strong>gsnova.exe</strong> 文件，无红字报错即已经成功运行 GSnova。</li>
<li>  浏览器可以安装 SwitchyOmega 插件设置代理，代理协议设置为 socks 或者 http 都可以，代理服务器设置为127.0.0.1，代理端口设置为48101。（最好配合 gfwlist 进行分流上网）考虑到插件不易下载，故将插件放到了我的网盘的爬墙目录下。（不知道我的网盘地址？左侧栏目就有啊！）</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>爬墙</category>
      </categories>
      <tags>
        <tag>白嫖</tag>
        <tag>容器</tag>
        <tag>爬墙</tag>
        <tag>heroku</tag>
      </tags>
  </entry>
  <entry>
    <title>免费容器 Heroku 搭建 proxypool</title>
    <url>/2021/01/24/heroku-proxypool/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> Heroku 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。</li>
<li> Heroku 免费版有所限制，比如：30分钟无人访问就休眠以及所有实例访问总时长限制为550小时。</li>
<li> 自动抓取 tg 频道、订阅地址、公开互联网上的 ss、ssr、vmess、trojan 节点信息，聚合去重后提供节点列表，每小时更新。</li>
<li> 因为爬虫程序需要持续运行，所以至少选择$7/月的配置或者是绑定信用卡，设置云监控，每15分钟访问一次站点。</li>
</ol>
<h2 id="正文：-Heroku-注册过程就不赘述了"><a href="#正文：-Heroku-注册过程就不赘述了" class="headerlink" title="正文：(Heroku 注册过程就不赘述了)"></a>正文：(Heroku 注册过程就不赘述了)</h2><ul>
<li>点击下方链接进入 proxypool-heroku 项目地址。<br>  <a href="https://github.com/zyp997/proxypool-heroku">https://github.com/zyp997/proxypool-heroku</a></li>
<li>  点击 <strong>Deploy to Heroku</strong> ，进入 Heroku 后台进行部署。</li>
<li>  填入<strong>实例名字</strong>和选择<strong>实例地区</strong>之后，在 <strong>CONFIG_FILE</strong> 项下，填入 <strong>./config/config.yaml</strong>，<strong>DOMAIN</strong> 项下，填入 <strong>你的实例名字.herokuapp.com</strong>。</li>
<li>  点击下方的 <strong>Deploy app</strong> ，等待自动部署完毕。</li>
<li>  点击 <strong>view</strong> ，会跳到已部署好的实例网站，如下图显示即为部署成功。<img data-src="/images/heroku-proxypool.md-0.png"></li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>完整的配置选项见<a href="https://github.com/Sansui233/proxypool/wiki/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E">配置文件说明</a>，如果需要订阅地址转换，可点击实例网站上方导航栏中的 <strong>? More</strong>，会跳转到 <a href="https://bianyuan.xyz/">ACL4SSR 在线订阅转换</a> 网站。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>爬墙</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>白嫖</tag>
        <tag>容器</tag>
        <tag>爬墙</tag>
        <tag>heroku</tag>
      </tags>
  </entry>
  <entry>
    <title>免费容器 Heroku 搭建 SSRot 代理</title>
    <url>/2021/01/26/heroku-ssrot/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> Heroku 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。</li>
<li> Heroku 免费版有所限制，比如：30分钟无人访问就休眠以及所有实例访问总时长限制为550小时。</li>
</ol>
<h2 id="正文：-Heroku-注册过程就不赘述了"><a href="#正文：-Heroku-注册过程就不赘述了" class="headerlink" title="正文：(Heroku 注册过程就不赘述了)"></a>正文：(Heroku 注册过程就不赘述了)</h2><ul>
<li>点击下方链接进入 ssrot-heroku 项目地址。<br>  <a href="https://github.com/zyp997/ssrot-heroku">https://github.com/zyp997/ssrot-heroku</a></li>
<li>  点击 <strong>Deploy to Heroku</strong> ，进入 Heroku 后台进行部署。</li>
<li>  填入<strong>实例名字</strong>和选择<strong>实例地区</strong>，在下方 <strong>APP_SITE</strong> 项中，填入 <strong>你的实例名字.herokuapp.com</strong>。</li>
<li>  点击下方的 <strong>Deploy app</strong> ，等待自动部署完毕。</li>
<li>  点击 <strong>view</strong> ，会跳到已部署好的实例网站，如下图显示即为部署成功。<img data-src="/images/heroku-ssrot.md-0.png"></li>
<li>  下载支持 SSRot 协议的客户端，配置信息如下：</li>
</ul>
<p>地址：你的实例名字.herokuapp.com<br>端口：443<br>默认密码：13955112-79c5-4aae-ac01-aabec4c963aa<br>加密方式：aes-128-ctr<br>传输协议：origin<br>混淆插件：plain<br>默认路径：/9ccbb338-2c45-4751-b767-8ba83a1e5624/<br>底层传输安全：tls</p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>爬墙</category>
      </categories>
      <tags>
        <tag>白嫖</tag>
        <tag>容器</tag>
        <tag>爬墙</tag>
        <tag>heroku</tag>
      </tags>
  </entry>
  <entry>
    <title>免费容器 Heroku 搭建 web 代理</title>
    <url>/2021/01/24/heroku-webproxy/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ul>
<li>  Heroku 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。</li>
<li>  Heroku 免费版有所限制，比如：30分钟无人访问就休眠以及所有实例访问总时长限制为550小时。</li>
</ul>
<h2 id="正文：-Heroku-注册过程就不赘述了"><a href="#正文：-Heroku-注册过程就不赘述了" class="headerlink" title="正文：(Heroku 注册过程就不赘述了)"></a>正文：(Heroku 注册过程就不赘述了)</h2><ol>
<li> 点击下方链接进入 HolyUnblockerPublic 项目地址。<a href="https://github.com/QuiteAFancyEmerald/HolyUnblockerPublic">https://github.com/QuiteAFancyEmerald/HolyUnblockerPublic</a></li>
<li> 点击 <strong>Deploy to Heroku</strong> ，进入 Heroku 后台进行部署。</li>
<li> 只需填入<strong>实例名字</strong>和选择<strong>实例地区</strong>即可。</li>
<li> 点击下方的 <strong>Deploy app</strong> ，等待自动部署完毕。</li>
<li> 点击 <strong>view</strong> ，会跳到已部署好的实例网站，如下图显示即为部署成功。</li>
</ol>
<p><img data-src="/images/heroku-webproxy.md-0.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>由于搭建的是 web 代理，使用起来可能会有些问题，所以不建议大流量使用，比如看视频、下东西等等。建议平时用来搜索点东西就好了。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>爬墙</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>白嫖</tag>
        <tag>容器</tag>
        <tag>爬墙</tag>
        <tag>heroku</tag>
      </tags>
  </entry>
  <entry>
    <title>免费容器 Heroku 搭建 Xray 代理</title>
    <url>/2021/01/26/heroku-xray/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> Heroku 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。</li>
<li> Heroku 免费版有所限制，比如：30分钟无人访问就休眠以及所有实例访问总时长限制为550小时。</li>
<li> 使用 xray+caddy 同时部署通过 ws 传输的 vmess vless trojan-go shadowsocks 协议。</li>
</ol>
<h2 id="正文：-Heroku-注册过程就不赘述了"><a href="#正文：-Heroku-注册过程就不赘述了" class="headerlink" title="正文：(Heroku 注册过程就不赘述了)"></a>正文：(Heroku 注册过程就不赘述了)</h2><ul>
<li>点击下方链接进入 xray-heroku 项目地址。<br>  <a href="https://github.com/zyp997/xray-heroku">https://github.com/zyp997/xray-heroku</a></li>
<li>  点击 <strong>Deploy to Heroku</strong> ，进入 Heroku 后台进行部署。</li>
<li>  只需填入<strong>实例名字</strong>和选择<strong>实例地区</strong>即可。</li>
<li>  点击下方的 <strong>Deploy app</strong> ，等待自动部署完毕。</li>
<li>  点击 <strong>view</strong> ，会跳到已部署好的实例网站，如下图显示即为部署成功。<img data-src="/images/heroku-xray.md-0.png"></li>
<li>  下载支持上述协议的客户端，配置信息如下：</li>
</ul>
<p>代理协议：vless 或 vmess<br>地址：你的实例名字.herokuapp.com<br>端口：443<br>默认 UUID：8f91b6a0-e8ee-11ea-adc1-0242ac120002<br>加密方式：none<br>传输协议：ws<br>路径：/8f91b6a0-e8ee-11ea-adc1-0242ac120002-vless // 默认vless使用/$uuid-vless，vmess使用/$uuid-vmess<br>底层传输安全：tls</p>
<p>代理协议：trojan-go<br>地址：你的实例名字.herokuapp.com<br>端口：443<br>默认 UUID：8f91b6a0-e8ee-11ea-adc1-0242ac120002<br>传输协议：ws<br>路径：/8f91b6a0-e8ee-11ea-adc1-0242ac120002-trojan<br>底层传输安全：tls</p>
<p>代理协议：shadowsocks<br>地址: 你的实例名字.herokuapp.com<br>端口: 443<br>默认密码：password<br>加密方式：chacha20-ietf-poly1305<br>插件程序：v2ray-plugin  //需将插件 <a href="https://github.com/shadowsocks/v2ray-plugin/releases">https://github.com/shadowsocks/v2ray-plugin/releases</a> 下载解压后放至 shadowsocks 同目录(也可到我网盘进行下载)<br>插件选项: tls;host=你的实例名字.herokuapp.com;path=/8f91b6a0-e8ee-11ea-adc1-0242ac120002-ss</p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>还有使用 v2ray+caddy 进行部署的项目，配置信息如上所述，有兴趣的可以到下面的地址进行部署。<br><a href="https://github.com/zyp997/v2ray-heroku">https://github.com/zyp997/v2ray-heroku</a></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>爬墙</category>
      </categories>
      <tags>
        <tag>白嫖</tag>
        <tag>容器</tag>
        <tag>爬墙</tag>
        <tag>heroku</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 基础(一)</title>
    <url>/2021/04/17/html-basis01/</url>
    <content><![CDATA[<h2 id="网页基本结构"><a href="#网页基本结构" class="headerlink" title="网页基本结构"></a>网页基本结构</h2><p><code>&lt;body&gt;&lt;/body&gt;</code>等成对的标签，分别叫开放标签和闭合标签。单独呈现的标签（空元素），如<code>&lt;hr/&gt;</code>意为用 / 来关闭空元素的自闭合标签。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--DOCTYPE：告诉浏览器，我们使用什么规范--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--head：网页头部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--meta：描述性标签，描述网站的一些信息。一般用来做 SEO--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--title：网页标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Guest997<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;一个在互联网下的小小 Coder。&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;个人博客...&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--body：网页主体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="网页基本标签"><a href="#网页基本标签" class="headerlink" title="网页基本标签"></a>网页基本标签</h2><ul>
<li>  标题标签（h1….h6）</li>
<li>  段落标签（p）</li>
<li>  换行标签（br）</li>
<li>  水平线标签（hr）</li>
<li>  字体样式标签（strong、em……）</li>
<li>  注释和特殊符号（注释：<code>&lt;!----&gt; </code>空格：&nbsp; 版权：<code>&amp;copy</code>; 等等）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本标签学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--标题标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标签<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标签<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--段落标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://guest997.ml<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://guest997.ml/article/<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--换行标签（只算一段）--&gt;</span></span><br><span class="line">https://guest997.ml<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">https://guest997.ml/article/</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--水平线标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--字体样式标签--&gt;</span></span><br><span class="line">粗体：<span class="tag">&lt;<span class="name">strong</span>&gt;</span>Guest997<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">斜体：<span class="tag">&lt;<span class="name">em</span>&gt;</span>Guest997<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注释--&gt;</span></span><br><span class="line"><span class="comment">&lt;!----&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--特殊符号--&gt;</span></span><br><span class="line">空         格   <span class="comment">&lt;!--不管中间有多少个空格，显示出来的，中间空格都只有一个--&gt;</span></span><br><span class="line">空<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>格</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span>版权所有 Guest997</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">特殊符号记忆方式：</span></span><br><span class="line"><span class="comment">$   ;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特殊符号有非常多，除了常用的，没必要全记住。只需要如下图，打一个 &amp; 符号后，再输入一个字母，就会有提示。<img data-src="/images/html-basis01.md-0.png"></p>
<h2 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图像标签学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">src：图片地址  使用绝对地址、相对地址（推荐使用） ../ 表示上一级目录</span></span><br><span class="line"><span class="comment">alt：图片名字</span></span><br><span class="line"><span class="comment">title：鼠标悬停文字</span></span><br><span class="line"><span class="comment">width：宽度</span></span><br><span class="line"><span class="comment">height：高度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resource/images/avatar.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">title</span>=<span class="string">&quot;鼠标悬停文字&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h2><ul>
<li>  页面间链接</li>
<li>  锚链接</li>
<li>  功能性链接</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>链接标签学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--顶部锚标记--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span>顶部锚链接标记<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--底部锚链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#down&quot;</span>&gt;</span>去到底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--页面间链接</span></span><br><span class="line"><span class="comment">href：跳转的页面地址</span></span><br><span class="line"><span class="comment">target：表示页面在哪打开    默认是_self：在当前标签页打开； _blank：在新标签页中打开。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文字链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://guest997.ml&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>我的博客...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--图像链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://guest997.ml&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resource/images/avatar.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">title</span>=<span class="string">&quot;鼠标悬停文字&quot;</span> <span class="attr">width</span>=<span class="string">&quot;900&quot;</span> <span class="attr">height</span>=<span class="string">&quot;900&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--页面内锚链接</span></span><br><span class="line"><span class="comment">1.需要一个锚标记（使用 name 或 id 标记，推荐使用 id 标记，使用 name 会出现一些奇怪的问题）</span></span><br><span class="line"><span class="comment">2.创建一个跳转到标记的标签（# + 标记名）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--顶部锚链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--底部锚标记--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;down&quot;</span>&gt;</span>底部锚链接标记<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--页面间锚链接</span></span><br><span class="line"><span class="comment">href：跳转的页面地址 + # + 标记名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://guest997.ml/article/#footer&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>跳转到我的博客底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--功能性链接</span></span><br><span class="line"><span class="comment">mailto：邮件链接（会自动调用设备上的邮件客户端）</span></span><br><span class="line"><span class="comment">QQ 推广：https://shang.qq.com/v3/widget.html（这种 QQ 已经做好了的，直接复制就好了）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:1036635267@qq.com&quot;</span>&gt;</span>点击邮件联系我！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://wpa.qq.com/msgrd?v=3&amp;uin=1036635267&amp;site=qq&amp;menu=yes&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://wpa.qq.com/pa?p=2:1036635267:51&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;点击这里给我发消息&quot;</span> <span class="attr">title</span>=<span class="string">&quot;点击这里给我发消息&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="IDEA-快捷代码缩写、快捷键-后面的文章可能会继续补充"><a href="#IDEA-快捷代码缩写、快捷键-后面的文章可能会继续补充" class="headerlink" title="IDEA 快捷代码缩写、快捷键(后面的文章可能会继续补充)"></a>IDEA 快捷代码缩写、快捷键(后面的文章可能会继续补充)</h2><ul>
<li>  ctrl + / = <code>&lt;!----&gt;</code></li>
<li>  html + tab = <code>&lt;html&gt;&lt;/html&gt;</code>（所有标签都能像这样地自动补全）</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 基础(二)</title>
    <url>/2021/04/18/html-basis02/</url>
    <content><![CDATA[<h2 id="行内元素和块元素"><a href="#行内元素和块元素" class="headerlink" title="行内元素和块元素"></a>行内元素和块元素</h2><ul>
<li>  行内元素：内容撑开宽度，左右都是行内元素的可以排在一行。（a、strong、em…）</li>
<li>  块元素：无论内容多少，该元素独占一行。（p、h1-h6…）</li>
</ul>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li>  有序列表</li>
<li>  无序列表</li>
<li>  自定列表</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--有序列表</span></span><br><span class="line"><span class="comment">ol：ordered lists：有序列表</span></span><br><span class="line"><span class="comment">li：list item：列表项</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无序列表</span></span><br><span class="line"><span class="comment">ul: unordered lists：无序列表</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定列表</span></span><br><span class="line"><span class="comment">dl：definition lists：自定列表</span></span><br><span class="line"><span class="comment">dt：definition term：自定列表组</span></span><br><span class="line"><span class="comment">dd：definition description：自定列表描述</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ul>
<li>  单元格</li>
<li>  行</li>
<li>  列</li>
<li>  合并行</li>
<li>  合并列</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">table：表格</span></span><br><span class="line"><span class="comment">border：边框</span></span><br><span class="line"><span class="comment">tr：tablerow；行</span></span><br><span class="line"><span class="comment">td：tabledata：数据</span></span><br><span class="line"><span class="comment">colspan：columnspan：合并列</span></span><br><span class="line"><span class="comment">rowspan：合并行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;3px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;td&gt;1-2&lt;/td&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;td&gt;1-3&lt;/td&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;td&gt;3-3&lt;/td&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="视频和音频"><a href="#视频和音频" class="headerlink" title="视频和音频"></a>视频和音频</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>视频和音频学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--视频</span></span><br><span class="line"><span class="comment">src：文件地址</span></span><br><span class="line"><span class="comment">controls：控制条</span></span><br><span class="line"><span class="comment">muted：静音与否（默认为 true）</span></span><br><span class="line"><span class="comment">autoplay：自动播放（现在大部分浏览器禁止自动播放视频了，如果还想实现自动播放视频，需要加 muted(静音) 属性）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;../resource/video/homepage.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">muted</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--音频</span></span><br><span class="line"><span class="comment">跟视频同类，毕竟视频包含了音频。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;../resource/audio/One more time, One more chance.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">muted</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 基础(三)</title>
    <url>/2021/04/18/html-basis03/</url>
    <content><![CDATA[<h2 id="页面结构分析"><a href="#页面结构分析" class="headerlink" title="页面结构分析"></a>页面结构分析</h2><ul>
<li>  header：标题头部区域的内容（用于页面或页面中的一块区域）</li>
<li>  footer：标记脚部区域的内容（用于整个页面或页面的一块区域）</li>
<li>  section：Web 页面中的一块独立区域</li>
<li>  article：独立的文章内容</li>
<li>  aside：相关内容或应用（常用于侧边栏）</li>
<li>  nav：导航类辅助内容</li>
</ul>
<h2 id="iframe-内联框架"><a href="#iframe-内联框架" class="headerlink" title="iframe 内联框架"></a>iframe 内联框架</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>iframe 内联框架学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">src：引用页面地址</span></span><br><span class="line"><span class="comment">name：框架标识名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://guest997.ml/&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">iframe 的 src 设置为空，并设置 name 属性；在 a 标签的 target 属性填入 iframe 的 name 属性值，就能点击显示出博客主页。</span></span><br><span class="line"><span class="comment">这样的做法就相当于 iframe 是个容器，点击 a 标签显示出容器内容。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;blog&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://guest997.ml/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;blog&quot;</span>&gt;</span>点击显示博客主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--下面是网易云音乐和 bilibili 自己做好的 iframe 内联框架--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--网易云音乐--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=28056707&amp;auto=1&amp;height=66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--bilibli 视频--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=39303278&amp;bvid=BV1gt411k7aU&amp;cid=69068417&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 基础(四)</title>
    <url>/2021/04/21/html-basis04/</url>
    <content><![CDATA[<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="常用表单元素属性（input-标签）"><a href="#常用表单元素属性（input-标签）" class="headerlink" title="常用表单元素属性（input 标签）"></a>常用表单元素属性（input 标签）</h3><ul>
<li>  type(必填)：指定元素的类型。text(文本框)、password(密码框)、checkbox(多选框)、radio(单选框)、submit(提交按钮)、reset(重置按钮)、file(文件)、image(图片)、button(按钮)、email(邮箱)、url(网址)、number(数字)、range(滑块) 和 search(搜索框)。</li>
<li>  name：指定表单元素的名称。（<strong>注意：虽然有一小部分表单元素不设置 name 属性也没事，但是几乎全部都是必须设置的，所以建议所有表单元素都设置 name 属性！</strong>）</li>
<li>value：为表单元素设定值。type 为 radio 或 checkbox 时，必须设置 value 属性。对于不同的输入类型，value 属性的用法也不同：<ul>
<li>  type 为 button、reset、submit - 定义按钮上的显示的文本</li>
<li>  type 为 text、password、hidden - 定义输入字段的初始值</li>
<li>  type 为 checkbox、radio、image - 定义与输入相关联的值</li>
<li>  type 为 file 时不适用</li>
</ul>
</li>
<li>  size：指定表单元素的初始宽度。当 type 为 text 或 password 时，表单元素的大小以字符为单位。对于其他类型，宽度以像素为单位。</li>
<li>  maxlength：type 为 text 或 password 时，输入的最大字符数。</li>
<li>  checked：type 为 radio 或 checkbox 时，指定按钮是否是被选中。</li>
<li>  hidden：隐藏元素（只是隐藏了但是还存在）</li>
<li>  disabled：禁用（表现为无法输入、选择、点击和调节元素）</li>
<li>  readonly：只读元素（表示输入框只读，不能进行输入和修改。其它的元素也能使用 readonly 属性，表现为类似 diasbled 属性的效果）</li>
<li>  placeholder：输入框提示信息。</li>
<li>  required：必填项（表示元素一定要输入或选择，否则就无法提交表单）</li>
<li>  pattern：正则表达式</li>
</ul>
<h3 id="下拉框和文本域（非-input-标签）"><a href="#下拉框和文本域（非-input-标签）" class="headerlink" title="下拉框和文本域（非 input 标签）"></a>下拉框和文本域（非 input 标签）</h3><ul>
<li>  下拉框：select - option</li>
<li>  文本域：textarea - cols - rows</li>
</ul>
<h3 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h3><ul>
<li>  action：表单提交的位置，可以是网站，也可以是一个请求处理地址。</li>
<li>  method：post、get 提交方式。get：在网址中会看到提交的信息，不安全却高效。post：比较安全，可传输大文件。</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://guest997.ml&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Guest997&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;8&quot;</span> <span class="attr">size</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--单选框</span></span><br><span class="line"><span class="comment">    name 属性值必须一样，表示在一个组里。否则两个框都能选择，就变成多选了。</span></span><br><span class="line"><span class="comment">    如果都设置了 checked 属性，则最后一项会被选择。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;null&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>无</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--多选框</span></span><br><span class="line"><span class="comment">    name 属性值建议设置为一样。</span></span><br><span class="line"><span class="comment">    name 属性值需要在最后面加个 [] ，表示数组，接收多个数据。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span> <span class="attr">checked</span>&gt;</span>睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> <span class="attr">checked</span>&gt;</span>游戏</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;chat&quot;</span>&gt;</span>聊天</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--自定按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;自定按钮&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--点击图片会有跟 submit 同样的提交效果--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">name</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../resource/images/avatar.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">title</span>=<span class="string">&quot;点击提交表单...&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--提交和重置按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--type 为 submit，不设置 name 属性，是能够正常提交表单。但是提交完了，后台在使用的时候没有办法获取，一般都是通过 name 来获取，如果不写，就找不到提交的数据！--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交表单&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">name</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空表单&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--邮箱--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--网址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>网址：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>数字：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">step</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--滑块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>音量：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;volume&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">step</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--搜索框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索框：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--下拉框</span></span><br><span class="line"><span class="comment">    selected：表示选项是否被选择</span></span><br><span class="line"><span class="comment">    如果都设置了 selected 属性，则最后一项会被选择。</span></span><br><span class="line"><span class="comment">    --&gt;</span>国家：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;列表名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span> <span class="attr">selected</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;us&quot;</span> <span class="attr">selected</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;japan&quot;</span> <span class="attr">selected</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--文本域（可拖动）</span></span><br><span class="line"><span class="comment">    clos：列数</span></span><br><span class="line"><span class="comment">    rows：行数</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈：</span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;feedback&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>禁止浏览器强制跳转到 https 协议以及清除特定网站缓存</title>
    <url>/2021/02/09/https-cache/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>测试网站的时候，有时候只能在 http 协议下访问，但是浏览器总会强制跳转到 https 协议下，怀疑是浏览器域名安全策略问题，也可能是浏览器缓存问题。所以需要删除域名安全策略，再清除特定网站的缓存。</p>
<h2 id="正文：（仅适用于-chrome-内核的浏览器）"><a href="#正文：（仅适用于-chrome-内核的浏览器）" class="headerlink" title="正文：（仅适用于 chrome 内核的浏览器）"></a>正文：（仅适用于 chrome 内核的浏览器）</h2><h3 id="禁止浏览器强制跳转到-https-协议"><a href="#禁止浏览器强制跳转到-https-协议" class="headerlink" title="禁止浏览器强制跳转到 https 协议"></a>禁止浏览器强制跳转到 https 协议</h3><p>浏览器输入 <strong>chrome://net-internals/#hsts</strong> 跳转到安全策略页面，在页面最下方找到 <strong>Delete domain security policies</strong> 项，在 <strong>Domain</strong> 中输入域名，最后点击 <strong>Delete</strong> 即可。<img data-src="/images/https-cache.md-0.png"></p>
<h3 id="清除特定网站缓存"><a href="#清除特定网站缓存" class="headerlink" title="清除特定网站缓存"></a>清除特定网站缓存</h3><p>其实清除特定网站缓存有许多种方法，而我下面介绍的是一种非常简便实用的方法。</p>
<p>打开要清除缓存的网站，按下 <strong>F12</strong> 进入开发者模式，右键浏览器的刷新按钮，会出现三个选项：正常刷新，硬刷新，清空缓存并进行硬刷新。</p>
<ul>
<li>  正常刷新：正常重新刷新。</li>
<li>  硬刷新：浅层次的清除历史记录，但不是缓存完全清除。（与 Ctrl+F5 同理）</li>
<li>  清空缓存并进行硬刷新：深层次的清除所有的缓存。（建议选择）<img data-src="/images/https-cache.md-1.png"></li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
      </tags>
  </entry>
  <entry>
    <title>免费容器 IBM Cloud 搭建 SSRot 代理</title>
    <url>/2021/01/26/ibm-cloud-ssrot/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> IBM Cloud 为我们提供了免费的容器服务，我们不应该滥用它，所以不宜做为长期翻墙使用。</li>
<li> IBM Cloud 免费版有所限制，几天无人访问就会休眠。（具体是几天已经忘记了，不过下面讲述的方法会每天定时重启实例，所以无需担心）</li>
</ol>
<h2 id="正文：-IBM-Cloud-注册过程就不赘述了，注册不成功，就换邮箱、IP"><a href="#正文：-IBM-Cloud-注册过程就不赘述了，注册不成功，就换邮箱、IP" class="headerlink" title="正文：(IBM Cloud 注册过程就不赘述了，注册不成功，就换邮箱、IP)"></a>正文：(IBM Cloud 注册过程就不赘述了，注册不成功，就换邮箱、IP)</h2><ul>
<li>  点击右上角 <strong>创建资源</strong> ，点击 <strong>Cloud Foundry</strong>，点击 <strong>创建</strong> 。</li>
<li>  达拉斯地区的 <strong>域</strong> 要选择 <strong>us-south.cf.appdomain.cloud</strong>，伦敦地区的 <strong>域</strong> 则要选择 <strong>eu-gb.cf.cloud.ibm.com</strong>。其它的就随意填写、选择。（记住你填写的<strong>应用程序名称</strong>）最后点击创建。</li>
<li>  创建完后会自动跳转到控制台，点击右上角的 <strong>IBM Cloud Shell</strong>。</li>
<li>  如果你是伦敦地区的需要输入以下代码强制切换命令行所在的地区。</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">ibmcloud <span class="keyword">target</span> -r eu-gb</span><br></pre></td></tr></table></figure>

<ul>
<li>  输入以下代码，下载 SSRot 的脚本文件。</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/ShadowsocksR-Live/</span>shadowsocksr-native<span class="regexp">/master/i</span>nstall/ibmcloud.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>  输入以下代码，运行脚本来安装 SSRot。</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bash </span>ibmcloud.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  之后会提示是否安装 cloud foundry cli，选择 y。提示输入你的应用程序名称，提示输入应用的内存大小。（免费版的最大内存为256MB）</li>
<li>  之后会提示输入密码和路径，可以直接回车。</li>
<li>  安装完后，会把配置文件直接输出到命令行，<strong>记录下密码和路径</strong>。</li>
<li>  点击下方链接进入 ssrot-ibm 项目地址。 <a href="https://github.com/zyp997/ssrot-ibm">https://github.com/zyp997/ssrot-ibm</a></li>
<li>  点击右上角 <strong>Fork</strong> ，会跳转到你的项目地址。（需要 GitHub 账号）</li>
<li>  点击 <strong>Settings</strong> ，在左边栏目找到并点击 <strong>Secrets</strong> ，再点击右上角的 <strong>New repository secret</strong>，分别创建如下表的参数。</li>
</ul>
<table>
<thead>
<tr>
<th>Secrets变量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>MAIL</td>
<td>IBM Cloud 邮箱地址</td>
</tr>
<tr>
<td>PWD</td>
<td>IBM Cloud 邮箱密码</td>
</tr>
<tr>
<td>CFNAME</td>
<td>IBM Cloud 应用程序名</td>
</tr>
<tr>
<td>RGN</td>
<td>us-south(达拉斯)、eu-gb(伦敦)</td>
</tr>
</tbody></table>
<ul>
<li>  点击 <strong>Actions</strong> ，点击 <strong>I understand my workflows, go and ahead and enable them</strong> ，在左边栏目找到并点击 <strong>IBM Cloud Auto Restart</strong> ，点击 <strong>Enable workflow</strong> ，再点击 <strong>Run workflow</strong> 选项，最后点击 <strong>Run workflow</strong> 。</li>
<li>在左边栏目找到并点击 <strong>All workflows</strong> ，如出现下图结果则表示配置成功。(如果什么都没显示，则在 <strong>README.md</strong> 文件随便打个字符即可；如果执行失败，则仔细检查 <strong>Secrets 变量</strong> 是否填写正确，之后再重新执行 <strong>Actions</strong>)<br>  <img data-src="/images/ibm-cloud-ssrot.md-0.png"></li>
<li>  下载支持 SSRot 协议的客户端，配置信息如下：</li>
</ul>
<p>地址：IBM Cloud 应用程序名.us-south.cf.appdomain.cloud  //伦敦地区的为 IBM Cloud 应用程序名.eu-gb.cf.appdomain.cloud<br>端口：443<br>密码：上面记录的密码<br>加密方式：aes-128-ctr<br>传输协议：auth_aes128_md5<br>混淆插件：tls1.2_ticket_auth<br>路径：/上面记录的路径/<br>底层传输安全：tls</p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>爬墙</category>
      </categories>
      <tags>
        <tag>白嫖</tag>
        <tag>ibm-cloud</tag>
        <tag>容器</tag>
        <tag>爬墙</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 2020.3.3破解教程</title>
    <url>/2021/04/04/intellij-idea/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>之前用的是 IDEA 社区版，会有诸多不便。故在网上找了个破解的，现在就分享一下。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul>
<li>点击下方链接进入官网，并下载 2020.3.3 版本。<br>  <a href="https://www.jetbrains.com/idea/download/other.html">https://www.jetbrains.com/idea/download/other.html</a></li>
<li>  进入我的网盘学习目录下，下载并解压 <strong>IntelliJ IDEA 破解</strong> 压缩包。<strong>注意：激活后文件不要移动或删除！</strong></li>
<li>  直接安装 IDEA，过程就不赘述了。</li>
<li>  运行 IDEA 后，会先弹出一个注册框，勾选 Evaluate for free, 点击 Evaluate， 试用30天。<img data-src="/images/intellij-idea.md-0.jpg"></li>
<li>  如果进不去软件，就进入 <strong>reset_script</strong> 文件夹下，执行重置30天试用期的脚本。</li>
<li>  进入 IDEA 后， 先随便建个工程， 然后将 BetterIntelliJ.zip 直接拖入 IDEA 界面中，如下图所示：<img data-src="/images/intellij-idea.md-1.jpg"></li>
<li>  重启成功后，点击菜单栏的 Help -&gt; Register -&gt; Add New License ，复制 <strong>激活补丁key.txt</strong> 文件中的激活码，粘贴到输入框中，然后点击 Activate 按钮激活。<img data-src="/images/intellij-idea.md-2.jpg"></li>
<li>  点击菜单栏的 Help -&gt; Register，可以看到已经成功激活至 2099 年。</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如果上面的操作没有成功激活，就点击下面的链接试下另外一种方法。我是直接就成功了的。<br>原文链接：<a href="https://mp.weixin.qq.com/s/5jNmMRS1rZMoTL1KWrWn2g">https://mp.weixin.qq.com/s/5jNmMRS1rZMoTL1KWrWn2g</a></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Cloudflare WARP 给 IPv6 VPS 免费添加 IPv4 网络支持</title>
    <url>/2021/03/23/ipv6-vps-ipv4/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>WARP 是 Cloud­flare 提供的一项基于 Wire­Guard 的网络流量安全及加速服务，能够让你通过连接到 Cloud­flare 的边缘节点实现隐私保护及链路优化。其连接入口为双栈 (IPv4/IPv6)，因此单栈服务器可以连接到 WARP 来获取额外的网络连通性支持。WARP 并不提供公网 IP 地址，而是以 NAT 的方式去访问外部网络。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><p>脚本仅针对 OpenVZ、LXC 架构的 IPV6 only VPS，添加 WARP IPV4 网络支持，默认已设置 WARP IPV4 优先。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>已测试通过 Debian <span class="number">10</span>、Ubuntu <span class="number">20.04</span>wget https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/YG-tsj/</span>EUserv-addv4-warp<span class="regexp">/main/u</span>b20db10.sh &amp;&amp; chmod +x ub20db10.sh &amp;&amp; ./ub20db10.sh</span><br></pre></td></tr></table></figure>

<h3 id="测试-IP-优先情况"><a href="#测试-IP-优先情况" class="headerlink" title="测试 IP 优先情况"></a>测试 IP 优先情况</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">curl</span> ip.p<span class="number">3</span>terx.com</span><br></pre></td></tr></table></figure>

<p>如下图所示，如果是 IPv4 优先，则第一行会显示 IPv4 地址，否则是 IPv6 地址。<img data-src="/images/ipv6-vps-ipv4.md-0.png"></p>
<h3 id="Ping-Google-IPv4-情况"><a href="#Ping-Google-IPv4-情况" class="headerlink" title="Ping Google IPv4 情况"></a>Ping Google IPv4 情况</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ping</span> ipv<span class="number">4</span>.google.com</span><br></pre></td></tr></table></figure>

<p>能 ping 通就说明已经成功添加了 IPv4 网络支持。</p>
<h3 id="检测-Netflix-支持情况"><a href="#检测-Netflix-支持情况" class="headerlink" title="检测 Netflix 支持情况"></a>检测 Netflix 支持情况</h3><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">bash &lt;(<span class="name">curl</span> -sSL <span class="string">&quot;https://www.zeroteam.top/files/mediatest.sh&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>如下图所示，如果 <strong>Netflix:</strong> 项显示 <strong>Yes</strong>，则说明是支持 Netflix 的。<img data-src="/images/ipv6-vps-ipv4.md-1.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>由于默认设置 WARP IPV4 优先，有时不希望 WARP IPV4 优先，（比如有些脚本申请证书识别报错）那么可以先关再开。（但是重启后会自动开）</p>
<h3 id="查看-WARP-网络当前状态"><a href="#查看-WARP-网络当前状态" class="headerlink" title="查看 WARP 网络当前状态"></a>查看 WARP 网络当前状态</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wg</span></span><br></pre></td></tr></table></figure>

<h3 id="手动关闭-WARP-网络接口"><a href="#手动关闭-WARP-网络接口" class="headerlink" title="手动关闭 WARP 网络接口"></a>手动关闭 WARP 网络接口</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wg-quick down wgcf</span></span><br></pre></td></tr></table></figure>

<h3 id="手动开启-WARP-网络接口"><a href="#手动开启-WARP-网络接口" class="headerlink" title="手动开启 WARP 网络接口"></a>手动开启 WARP 网络接口</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wg-quick up wgcf</span></span><br></pre></td></tr></table></figure>

<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>IPv6 VPS 的 SSH 连接以及宝塔面板安装</title>
    <url>/2021/01/27/ipv6-vps-ssh/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> 有三种方式可以连接纯 IPV6 的 VPS，本地网络连接、服务器跳板连接和网页终端连接，三种方式各有各的好处。</li>
<li> 宝塔面板是一款服务器管理软件，支持 windows 和 linux 系统，可以通过 Web 端轻松管理服务器，提升运维效率。例如：创建管理网站、FTP、数据库，<strong>拥有可视化文件管理器，可视化软件管理器</strong>，可视化CPU、内存、流量监控图表，计划任务等功能。</li>
</ol>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="SSH-连接"><a href="#SSH-连接" class="headerlink" title="SSH 连接:"></a>SSH 连接:</h3><h4 id="一、本地网络连接"><a href="#一、本地网络连接" class="headerlink" title="一、本地网络连接"></a>一、本地网络连接</h4><ul>
<li>点击下面的链接测试网络是否支持 IPV6。<br>  <a href="http://test-ipv6.com/">http://test-ipv6.com/</a></li>
<li>  如果支持，那么就可以直接用普通的 ssh 软件连接，地址用**[ ]**包裹住 IPv6 地址进行访问。</li>
<li>  也可以通过开启 IPv6 隧道，支持连接 IPv6。（可以自己百度一下）</li>
</ul>
<h4 id="二、服务器跳板连接"><a href="#二、服务器跳板连接" class="headerlink" title="二、服务器跳板连接"></a>二、服务器跳板连接</h4><p>如果有 IPv4/IPv6 的 VPS 可以通过跳板连接</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -<span class="number">6</span> IPv<span class="number">6</span>地址</span><br></pre></td></tr></table></figure>

<h4 id="三、网页终端连接"><a href="#三、网页终端连接" class="headerlink" title="三、网页终端连接"></a>三、网页终端连接</h4><ul>
<li>点击下面链接进入嘿哟终端官网。<br>  <a href="https://heyterm.com/zh-cn/">https://heyterm.com/zh-cn/</a></li>
<li>  注册账号过程就不赘述了，登录账号之后创建 <strong>组织</strong> 和 <strong>项目</strong>，进入到项目中点击右上角的 <strong>新建资产</strong>，会提示输入 <strong>IP地址</strong>、<strong>用户名</strong> 和 <strong>密码</strong>。</li>
<li>  进入到 EUserv 控制台，点击 <strong>Cover Page</strong> ，点击 <strong>vServer</strong> ，点击 <strong>Actions</strong> 项下的 <strong>Select</strong> 。点击 <strong>Serverdata</strong> ，会在 <strong>Main IPv6-Address:</strong> 中看到 IPv6 的地址，在 <strong>Default-Password for SSH or Webpanel (admin/root/Administrator):</strong> 中看到密码。</li>
<li>  通过上面记录的地址和密码，填入到嘿哟终端的资产信息中，用户名则为 <strong>root</strong>，其它选项随意即可。</li>
</ul>
<h3 id="宝塔面板安装："><a href="#宝塔面板安装：" class="headerlink" title="宝塔面板安装："></a>宝塔面板安装：</h3><ul>
<li>  通过 SSH 连接到 VPS。</li>
<li>  输入下面代码设置 NAT64 网关。</li>
</ul>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">echo -e <span class="string">&quot;nameserver 2001:67c:2b0::4•nnameserver 2001:67c:2b0::6&quot;</span> &gt; <span class="regexp">/etc/</span>resolv.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>  Centos 系统还需要输入下面的代码修改配置文件。按键盘的 <strong>i</strong> 键，把第一行 <strong>enable=1</strong> 改为 <strong>enable=0</strong>，按 <strong>ESC</strong> 键后输入 <strong>:wq</strong> 保存并退出。</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/yum</span><span class="regexp">/pluginconf.d/</span>fastestmirror.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>  输入下面代码安装宝塔面板。</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -sSO http:<span class="regexp">//</span>download.bt.cn<span class="regexp">/install/</span>new_install.sh &amp;&amp; bash new_install.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>  安装完后输入 <strong>bt</strong>，输入 <strong>8</strong> 更改端口为下图列出的端口，Cloudflare 支持的转发端口如下：<img data-src="/images/ipv6-vps-ssh.md-0.png"></li>
<li>  在浏览器输入 <strong>域名:端口</strong>，登录到宝塔面板。（如提示 <strong>请使用正确的入口登录面板</strong>，则在终端输入：**/etc/init.d/bt default**，查看面板入口，之后再在浏览器输入 <strong>域名:端口/面板入口</strong> 即可）</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 基础(一)</title>
    <url>/2021/05/09/javascript-basis01/</url>
    <content><![CDATA[<h2 id="两种-JavaScript-导入方式"><a href="#两种-JavaScript-导入方式" class="headerlink" title="两种 JavaScript 导入方式"></a>两种 JavaScript 导入方式</h2><p>由于加载顺序问题，html 文档是从上往下加载。所以如果要使用 script 内部标签，要写在 body 标签内的最后。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--外部引用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jscript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内部标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//在浏览器按 F12，控制台会输出 123。</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="number">123</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jscript.js</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="number">456</span>)</span><br></pre></td></tr></table></figure>

<h2 id="严格检测模式（需要设置支持-ES6-语法）"><a href="#严格检测模式（需要设置支持-ES6-语法）" class="headerlink" title="严格检测模式（需要设置支持 ES6 语法）"></a>严格检测模式（需要设置支持 ES6 语法）</h2><p>使用 <strong>‘use strict’;</strong> 开启严格检测模式，避免 javascript 的随意性产生的一些问题。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">    &#x27;use strict&#x27;</span>;    <span class="comment">//必需写在 javascript 代码的第一行！</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//i = 0;   //会报错</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> CON = <span class="number">0</span>;  <span class="comment">//(使用 const 定义常量)</span></span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> v = <span class="number">0</span>;  <span class="comment">//使用 var 定义全局变量</span></span><br><span class="line"><span class="keyword">let</span> l = <span class="number">0</span>;  <span class="comment">//使用 let 定义局部变量（能使用 var 定义局部变量，但是有可能出现问题。）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; <span class="number">6</span>; x++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(x+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="comment">/*结果为 0 1 2 3 4 5 6 7</span></span><br><span class="line"><span class="comment">0 1 2 3 4 5 Uncaught ReferenceError: x is not defined</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//可以看到 i 变量出了作用域，依然起作用了，最后输出了 7。而 x 变量则不会这样，会报错提示 x 未定义。</span></span><br></pre></td></tr></table></figure>

<h2 id="数值类型-Number"><a href="#数值类型-Number" class="headerlink" title="数值类型 - Number"></a>数值类型 - Number</h2><ul>
<li>  js 不区分小数和整数。</li>
<li>  NaN(Not a Nomber) 属于数值类型，是指数据不是一个数字。</li>
</ul>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">==   //(类型不一样，值一样，会被判断为 true)</span></span><br><span class="line"><span class="section">===    //(类型一样，值一样，才会被判断为 true)</span></span><br><span class="line">NaN === NaN    //结果为 false</span><br></pre></td></tr></table></figure>

<ul>
<li>  坚持不要使用 == 进行比较，这是一个 js 的缺陷。</li>
<li>  NaN 与所有的数值都不相等，包括自己。</li>
<li>  只能通过 isNaN() 来判断这个数是否是 NaN。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 基础(二)</title>
    <url>/2021/05/12/javascript-basis02/</url>
    <content><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="多行字符串编写"><a href="#多行字符串编写" class="headerlink" title="多行字符串编写"></a>多行字符串编写</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">`123</span></span><br><span class="line"><span class="string">abc</span></span><br><span class="line"><span class="string">/*-`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">123</span></span><br><span class="line"><span class="comment">abc</span></span><br><span class="line"><span class="comment">/*-</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Guest997&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">`你好，<span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">//结果为 你好，Guest997!</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h3><p>toUpperCase()：把字符串转换为大写。<br>toLowerCase()：把字符串转换为小写。<br>substring()：截取数组的一部分，返回一个新数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Guest997&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name.toUpperCase());</span><br><span class="line"><span class="built_in">console</span>.log(name.toLowerCase());</span><br><span class="line"><span class="built_in">console</span>.log(name.substring(<span class="number">1</span>));      <span class="comment">//截取下标从 1 到最后的字符</span></span><br><span class="line"><span class="built_in">console</span>.log(name.substring(<span class="number">1</span>,<span class="number">3</span>));    <span class="comment">//左闭右开</span></span><br><span class="line"><span class="comment">//结果为 GUEST997 guest997 uest997 ue</span></span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组中可以是不同类型的对象；如果数组下标越界会提示 undefined。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2.3</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>];   <span class="comment">//这样是没问题的</span></span><br><span class="line"><span class="built_in">console</span>.log(array.length);</span><br><span class="line"><span class="comment">//可以直接给数组长度赋值，如果比原来大，则增加的对象为空；如果比原来的小，则多出来的对象会丢失。</span></span><br><span class="line">array.length = <span class="number">9</span>;</span><br><span class="line"><span class="built_in">console</span>.log(array);      <span class="comment">//结果为 (9) [1, 2.3, &quot;hello&quot;, null, true, 空 × 4]</span></span><br><span class="line"><span class="comment">// array.length = 3;</span></span><br><span class="line"><span class="comment">// console.log(array);   //结果为 (3) [1, 2.3, &quot;hello&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h3><p>slice()：截取数组的一部分，返回一个新数组。类似于字符串中的 substring()。<br>push()：在尾部增加对象。<br>pop()：弹出尾部的一个对象。<br>unshift()：在头部增加对象。<br>shift()：弹出头部的一个对象。<br>concat()：用于连接多个数组。原数组不会被修改，只是会返回一个新数组。<br>join()：使用特定的字符拼接数组。</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">var <span class="keyword">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;k&#x27;</span>];</span><br><span class="line">console.log(<span class="keyword">array</span>.slice(<span class="number">1</span>));</span><br><span class="line">console.log(<span class="keyword">array</span>.slice(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>.push(<span class="number">6</span>);</span><br><span class="line">console.log(<span class="keyword">array</span>);</span><br><span class="line"><span class="keyword">array</span>.pop();</span><br><span class="line">console.log(<span class="keyword">array</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>.unshift(<span class="number">9</span>);</span><br><span class="line">console.log(<span class="keyword">array</span>);</span><br><span class="line"><span class="keyword">array</span>.shift();</span><br><span class="line">console.log(<span class="keyword">array</span>);</span><br><span class="line"></span><br><span class="line">var arr = [<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">console.log(<span class="keyword">array</span><span class="built_in">.concat</span>(arr));</span><br><span class="line">console.log(<span class="keyword">array</span>);</span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">array</span>.join(<span class="string">&#x27;-&#x27;</span>));</span><br><span class="line">/*结果为</span><br><span class="line">(<span class="number">4</span>)&amp;nbsp;[<span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;k&quot;</span>]</span><br><span class="line">(<span class="number">2</span>)&amp;nbsp;[<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">(<span class="number">6</span>)&amp;nbsp;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="number">6</span>]</span><br><span class="line">(<span class="number">5</span>)&amp;nbsp;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;k&quot;</span>]</span><br><span class="line">(<span class="number">6</span>)&amp;nbsp;[<span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;k&quot;</span>]</span><br><span class="line">(<span class="number">5</span>)&amp;nbsp;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;k&quot;</span>]</span><br><span class="line">(<span class="number">7</span>)&amp;nbsp;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">(<span class="number">5</span>)&amp;nbsp;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;k&quot;</span>]</span><br><span class="line"><span class="number">1</span>-<span class="number">2</span>-<span class="number">3</span>-l-k</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h2 id="Map（需要设置支持-ES6-语法）"><a href="#Map（需要设置支持-ES6-语法）" class="headerlink" title="Map（需要设置支持 ES6 语法）"></a>Map（需要设置支持 ES6 语法）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>],[<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>],[<span class="string">&#x27;c&#x27;</span>,<span class="number">3</span>]]);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;a&#x27;</span>));      <span class="comment">//传入键给 get() 获取相应的值。</span></span><br><span class="line"><span class="built_in">console</span>.log(map.set(<span class="string">&#x27;d&#x27;</span>,<span class="number">4</span>));    <span class="comment">//通过 set() 增加一个键值对。</span></span><br><span class="line">map.delete(<span class="string">&#x27;d&#x27;</span>);                <span class="comment">//传入键给 delete() 删除相应的键值对。</span></span><br><span class="line"><span class="built_in">console</span>.log(map);</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">Map(4)&amp;nbsp;&#123;&quot;a&quot; =&gt; 1, &quot;b&quot; =&gt; 2, &quot;c&quot; =&gt; 3, &quot;d&quot; =&gt; 4&#125;</span></span><br><span class="line"><span class="comment">Map(3)&amp;nbsp;&#123;&quot;a&quot; =&gt; 1, &quot;b&quot; =&gt; 2, &quot;c&quot; =&gt; 3&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Set（需要设置支持-ES6-语法）"><a href="#Set（需要设置支持-ES6-语法）" class="headerlink" title="Set（需要设置支持 ES6 语法）"></a>Set（需要设置支持 ES6 语法）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>]);  <span class="comment">//无序不重复的集合</span></span><br><span class="line"><span class="built_in">console</span>.log(set);</span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(set.add(<span class="number">3</span>));</span><br><span class="line">set.delete(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set);</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">Set(3)&amp;nbsp;&#123;&#x27;1&#x27;,1, 6, 9&#125;</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">Set(4)&amp;nbsp;&#123;&#x27;1&#x27;,1, 6, 9, 3&#125;</span></span><br><span class="line"><span class="comment">Set(3)&amp;nbsp;&#123;&#x27;1&#x27;,6, 9, 3&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>使用大括号包裹对象属性；每个属性之间使用逗号隔开，最后一个不需要添加。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="comment">//定义属性的语法为：属性名 : 属性值</span></span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;Guest997&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">    <span class="attr">tags</span> : [<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;css&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取对象的属性值</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="comment">//使用对象不存在的属性，也不会报错，而是会提示 undefined。</span></span><br><span class="line"><span class="built_in">console</span>.log(person.id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接通过 delete 删除属性。</span></span><br><span class="line"><span class="keyword">delete</span> person.tags;</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="comment">//也可以通过直接给新的属性赋值进行添加属性。</span></span><br><span class="line">person.tags = [<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;css&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"></span><br><span class="line"><span class="comment">//js 中所有的键都是字符串，而值是任意对象。</span></span><br><span class="line"><span class="comment">//使用 in 判断属性是否在对象中。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> person);     <span class="comment">//因为 age 是键，所以一定要使用单引号或双引号包裹。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> person);     <span class="comment">//默认是继承了 toString()</span></span><br><span class="line"><span class="built_in">console</span>.log(person.hasOwnProperty(<span class="string">&#x27;toString&#x27;</span>));  <span class="comment">//使用 hasOwnProperty() 判断属性是否是对象自己拥有的。</span></span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">Guest997</span></span><br><span class="line"><span class="comment">undefined</span></span><br><span class="line"><span class="comment">&#123;name: &quot;Guest997&quot;, age: &quot;18&quot;&#125;</span></span><br><span class="line"><span class="comment">&#123;name: &quot;Guest997&quot;, age: &quot;18&quot;, tags: Array(3)&#125;</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 基础(三)</title>
    <url>/2021/05/14/javascript-basis03/</url>
    <content><![CDATA[<h2 id="forEach-和-for-…in…-循环"><a href="#forEach-和-for-…in…-循环" class="headerlink" title="forEach 和 for(…in…) 循环"></a>forEach 和 for(…in…) 循环</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">//使用 forEach 循环需要传入的是函数，并且不能使用 break 和 return 语句。</span></span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//不推荐用 for(...in...) 来循环一个数组，因为数组的 index 跟普通的对象属性不一样，是重要的数值序列指标。总之，它是用来循环带有字符 key 的对象的方法。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> array)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(array[index]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 1 6 9 3 5 1 6 9 3 5</span></span><br></pre></td></tr></table></figure>

<h2 id="for-…of…-循环"><a href="#for-…of…-循环" class="headerlink" title="for(…of…) 循环"></a>for(…of…) 循环</h2><p>ES6 里引入了一种新的循环方法，它就是 for(…of…) 循环，它既比传统的 for 循环简洁，同时弥补了 forEach 和 for(…in…) 循环的短板。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="comment">//遍历一个数组</span></span><br><span class="line"><span class="keyword">var</span> iterable = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> vaule <span class="keyword">of</span> iterable)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(vaule);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历一个字符串</span></span><br><span class="line"><span class="keyword">var</span> iterable02 = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable02) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历一个 Map。</span></span><br><span class="line"><span class="keyword">var</span> iterable03 = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>],[<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>],[<span class="string">&#x27;c&#x27;</span>,<span class="number">3</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> iterable03) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;[&#x27;</span> + key + <span class="string">&#x27;,&#x27;</span> + value + <span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> iterable03) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(entry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历一个 Set。</span></span><br><span class="line"><span class="keyword">var</span> iterable04 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable04) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">t</span></span><br><span class="line"><span class="comment">e</span></span><br><span class="line"><span class="comment">s</span></span><br><span class="line"><span class="comment">t</span></span><br><span class="line"><span class="comment">[&#x27;a&#x27;,1]</span></span><br><span class="line"><span class="comment">[&#x27;b&#x27;,2]</span></span><br><span class="line"><span class="comment">[&#x27;c&#x27;,3]</span></span><br><span class="line"><span class="comment">(2)&amp;nbsp;[&quot;a&quot;, 1]</span></span><br><span class="line"><span class="comment">(2)&amp;nbsp;[&quot;b&quot;, 2]</span></span><br><span class="line"><span class="comment">(2)&amp;nbsp;[&quot;c&quot;, 3]</span></span><br><span class="line"><span class="comment">&#x27;1&#x27;</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 基础(四)</title>
    <url>/2021/05/15/javascript-basis04/</url>
    <content><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数只要是要调用它进行执行的，都必须加括号。此时，函数()实际上等于函数的返回值。虽然有些是没有返回值的，但已经执行了函数体内的行为，这个是根本。就是说，只要加括号的，就代表将会执行函数体代码。<br>不加括号的，是把函数名作为函数的指针，用于传参。此时不是得到函数的结果，因为不会运行函数体代码。它只是传递了函数体所在的地址位置，在需要的时候好找到函数体去执行。</p>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//代码...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;   <span class="comment">//这是一个匿名函数。但是可以把结果赋值给变量 test，通过 test 就可以调用函数。</span></span><br><span class="line">    <span class="comment">//代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有 return 语句，函数执行完也会返回结果，结果就是 undefined。</p>
<h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>js 可以传任意个参数，也可以不传递参数。这样就可能会产生一些问题，比如：参数是否存在、多个参数如何处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x === <span class="literal">undefined</span>)&#123;      <span class="comment">//使用 === 判断参数是否为空</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;参数不存在!&quot;</span>);        <span class="comment">//可以控制台输出提示信息</span></span><br><span class="line">        <span class="comment">//throw &#x27;Parameter does not exist!&#x27;;    //也可以手动抛出异常</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);      <span class="comment">//使用 arguments 对象接收多个参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test();          <span class="comment">//调用函数</span></span><br><span class="line">test(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">参数不存在!</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>arguments 对象会包含所有的参数，我们有时候想使用后面的参数，就需要排除已有参数。操作就会比较繁琐。可以使用 ES6 的新参数 rest，获取除了已经定义之外的所以参数，语法为：所有定义的参数,…变量名。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(a,b,<span class="rest_arg">...args</span>)</span></span>&#123;</span><br><span class="line">    console.log(args);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>);</span><br><span class="line"><span class="comment">//结果为 (3)&amp;nbsp;[6, 9, 7]</span></span><br></pre></td></tr></table></figure>

<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>内部函数可以访问外部函数的成员，而外部函数不能直接访问内部函数的成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test02</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> y = x + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">Uncaught ReferenceError: y is not defined</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>js 中函数查找变量会从自身函数开始，由内向外查找，假设外部存在同名的函数变量，则内部函数会屏蔽外部函数的变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test02</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="comment">//结果为 b</span></span><br></pre></td></tr></table></figure>

<h3 id="提升变量作用域"><a href="#提升变量作用域" class="headerlink" title="提升变量作用域"></a>提升变量作用域</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//let y;           //这里隐式地自动声明了 y 变量。</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">&#x27;x&#x27;</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">let</span> y = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="comment">//结果为 xundefined</span></span><br></pre></td></tr></table></figure>

<p>上面的结果说明了 js 的执行引撃，自动提升了 y 的声明，但是不会提升 y 的赋值。<br>所以建议养成规范，将所有的变量定义都放在函数的头部，不要乱放，便于代码维护。<br>将上面的代码进行如下修改。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x,y;       <span class="comment">//undefined</span></span><br><span class="line">    x = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    y = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="comment">//结果为 xy</span></span><br></pre></td></tr></table></figure>

<h2 id="window-全局对象"><a href="#window-全局对象" class="headerlink" title="window 全局对象"></a>window 全局对象</h2><p>默认所以的全局变量都会自动绑定在 window 全局对象下。alert() 本身也是全局变量，也会自动绑定在 window 全局对象下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">alert(x);     <span class="comment">//弹窗</span></span><br><span class="line">alert(<span class="built_in">window</span>.x);   <span class="comment">//跟上面的效果一样</span></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="built_in">window</span>.x);   <span class="comment">//跟上面的效果一样</span></span><br></pre></td></tr></table></figure>

<p>js 实际上只有一个全局作用域，任何变量（函数也能视为变量）假设没有在函数作用范围内找到，就会向外查找。如果在全局作用域都没找到，就会提示 RefrenceError。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> old = alert;  <span class="comment">//将 alert 方法保存在 old 变量中，注意：不能用(),要不然就会直接调用 alert() 弹窗出空信息。</span></span><br><span class="line">alert = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;       <span class="comment">//重写 alert 方法</span></span><br><span class="line">    <span class="comment">//alert(&#x27;x&#x27;);        //会报错，因为重写了 alert 方法。</span></span><br><span class="line">    old(<span class="string">&#x27;x&#x27;</span>);        <span class="comment">//不会报错，且跟原生 alert 方法相同的效果。</span></span><br><span class="line">&#125;</span><br><span class="line">alert();</span><br></pre></td></tr></table></figure>

<p>由于所有的全局变量都会绑定到 window 全局对象上。如果导入不同的 js 文件中，使用了同名的全局变量，就会发生冲突。通过把自己的代码全部放入到自己定义的唯一全局空间中，就能尽量避免发生这样的冲突。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="comment">//定义唯一全局空间</span></span><br><span class="line"><span class="keyword">var</span> guest997 = &#123;&#125;;</span><br><span class="line"><span class="comment">//定义全局变量和函数</span></span><br><span class="line">guest997.name = <span class="string">&#x27;guest997 的全局变量！&#x27;</span>;</span><br><span class="line">guest997.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;guest997 的全局函数！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 基础(五)</title>
    <url>/2021/05/17/javascript-basis05/</url>
    <content><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>函数放在对象里，就叫做方法。对象只有两种东西，属性和方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> guest997 = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;guest997&#x27;</span>,</span><br><span class="line">    <span class="attr">birth</span> : <span class="number">1999</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">        <span class="keyword">return</span> now-<span class="built_in">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Guest997.name);</span><br><span class="line"><span class="built_in">console</span>.log(Guest997.age());</span><br><span class="line"><span class="comment">//结果为 guest997 22</span></span><br></pre></td></tr></table></figure>

<p>this 代表什么？拆开上面的 function 看看。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> guest997 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;guest997&#x27;</span>,</span><br><span class="line">    <span class="attr">birth</span>: <span class="number">1999</span>,</span><br><span class="line">    <span class="attr">age</span>: getAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="built_in">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(guest997.age());</span><br><span class="line"><span class="built_in">console</span>.log(getAge());</span><br><span class="line"><span class="comment">//结果为 22 Uncaught TypeError: Cannot read property &#x27;birth&#x27; of undefined</span></span><br></pre></td></tr></table></figure>

<p>由上面的结果可以看出 <strong>this.birth</strong> 指向的并不是 Guest997 对象，而是 window 对象。<br>在 java 中，this 是无法改变指向的，只会指向调用它的那个对象。<br>但是在 js 中，所以的函数都可以使用 apply() 改变 this 指向的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> guest997 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;guest997&#x27;</span>,</span><br><span class="line">    <span class="attr">birth</span>: <span class="number">1999</span>,</span><br><span class="line">    <span class="attr">age</span>: getAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="built_in">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getAge.apply(guest997,[]));   <span class="comment">//this 指向了 guest997，参数为空。</span></span><br><span class="line"><span class="comment">//结果为 22</span></span><br></pre></td></tr></table></figure>

<h2 id="内部对象"><a href="#内部对象" class="headerlink" title="内部对象"></a>内部对象</h2><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="built_in">console</span>.log(now.getFullYear());</span><br><span class="line"><span class="built_in">console</span>.log(now.getMonth());        <span class="comment">//数值范围为0~11</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getDate());</span><br><span class="line"><span class="built_in">console</span>.log(now.getDay());</span><br><span class="line"><span class="built_in">console</span>.log(now.getHours());</span><br><span class="line"><span class="built_in">console</span>.log(now.getMinutes());</span><br><span class="line"><span class="built_in">console</span>.log(now.getSeconds());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.getTime());    <span class="comment">//时间戳</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.toLocaleString());</span><br><span class="line"><span class="built_in">console</span>.log(now.toUTCString());</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">Mon Apr 12 2021 00:07:28 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="comment">2021</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">28</span></span><br><span class="line"><span class="comment">1618157248506</span></span><br><span class="line"><span class="comment">2021/4/12上午12:07:28</span></span><br><span class="line"><span class="comment">Sun, 11 Apr 2021 16:07:28 GMT</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>在 js 中一切皆为对象、任何 js 支持的类型都可以用 JSON 来表示。</p>
<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><ul>
<li>  对象都用{ }</li>
<li>  数组都用[ ]</li>
<li>  所有的键值对都是用 key : value</li>
</ul>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&#x27;use</span> strcict&#x27;;</span><br><span class="line">var guest997 = &#123;</span><br><span class="line">    name : &#x27;<span class="type">guest997</span>&#x27;,</span><br><span class="line">    age : 22,</span><br><span class="line">    tags : [&#x27;<span class="type">js</span><span class="string">&#x27;,&#x27;</span>java&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">console.log(guest997);</span><br><span class="line"></span><br><span class="line">//对象转为 json 字符串</span><br><span class="line">var json = JSON.stringify(guest997);</span><br><span class="line">console.log(json);</span><br><span class="line"></span><br><span class="line">//json 字符串转为对象</span><br><span class="line">var toObject = JSON.parse(&#x27;&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;guest997&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">22</span>,<span class="string">&quot;tags&quot;</span>:[<span class="string">&quot;js&quot;</span>,<span class="string">&quot;java&quot;</span>]&#125;&#x27;);   //建议最外层用单引号包裹，里面则用双引号。</span><br><span class="line">console.log(toObject);</span><br><span class="line"></span><br><span class="line">/*结果为</span><br><span class="line">&#123;name: <span class="string">&quot;guest997&quot;</span>, age: <span class="number">22</span>, tags: <span class="keyword">Array</span>(<span class="number">2</span>)&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;guest997&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">22</span>,<span class="string">&quot;tags&quot;</span>:[<span class="string">&quot;js&quot;</span>,<span class="string">&quot;java&quot;</span>]&#125;</span><br><span class="line">&#123;name: <span class="string">&quot;guest997&quot;</span>, age: <span class="number">22</span>, tags: <span class="keyword">Array</span>(<span class="number">2</span>)&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 基础(六)</title>
    <url>/2021/05/20/javascript-basis06/</url>
    <content><![CDATA[<h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><p>点击下方链接了解原型和原型链。<br><a href="https://blog.csdn.net/dengyao46395665/article/details/100600069">https://blog.csdn.net/dengyao46395665/article/details/100600069</a></p>
<h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> Student = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;student&#x27;</span>,</span><br><span class="line">    <span class="attr">test</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;run...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Bird = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;bird&#x27;</span>,</span><br><span class="line">    <span class="attr">test</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;fly...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> guest997 = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//guest997 的原型指向 Bird</span></span><br><span class="line">guest997.__proto__ = Bird;</span><br><span class="line"><span class="built_in">console</span>.log(guest997.name);</span><br><span class="line">guest997.test();</span><br><span class="line"></span><br><span class="line"><span class="comment">//guest997 的原型指向 Student</span></span><br><span class="line">guest997.__proto__ = Student;</span><br><span class="line"><span class="built_in">console</span>.log(guest997.name);</span><br><span class="line">guest997.test();</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">bird</span></span><br><span class="line"><span class="comment">birdfly...</span></span><br><span class="line"><span class="comment">student</span></span><br><span class="line"><span class="comment">studentrun...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>从上面的结果可以看出即使将原型先指向了 Bird，而后指向 Student 也是没问题的。</p>
<h2 id="class-继承（需要设置支持-ES6-语法）"><a href="#class-继承（需要设置支持-ES6-语法）" class="headerlink" title="class 继承（需要设置支持 ES6 语法）"></a>class 继承（需要设置支持 ES6 语法）</h2><p>其底层实现还是基于原型，只是原型继承的语法糖。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Guest997</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name,age</span>)</span> &#123;     <span class="comment">//重写了 constructor，并且一定要写在 this 之前。</span></span><br><span class="line">        <span class="built_in">super</span>(name);     <span class="comment">//这行代码一定要写，调用父类的构造器。</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;      <span class="comment">//重写了父类方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="built_in">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> Guest997(<span class="string">&#x27;guest997&#x27;</span>,<span class="number">22</span>);</span><br><span class="line">instance.test();</span><br><span class="line"><span class="comment">//结果为 guest99722</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 基础(七)</title>
    <url>/2021/05/20/javascript-basis07/</url>
    <content><![CDATA[<h2 id="操作-BOM-对象"><a href="#操作-BOM-对象" class="headerlink" title="操作 BOM 对象"></a>操作 BOM 对象</h2><p>BOM：BrowserObjectModel（浏览器对象模型）<img data-src="/images/javascript-basis07.md-0.jpg"></p>
<h3 id="window-对象（重要）"><a href="#window-对象（重要）" class="headerlink" title="window 对象（重要）"></a>window 对象（重要）</h3><p>表示窗口位置的属性有 screenLeft、screenTop、screenX、screenY、表示窗口大小的属性有 innerWidth、innerHeight、outerWidth、outerHeight，但是它们的具体含义和不同的浏览器密切相关。在处理浏览器差异性建议使用 js 框架。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>open()</td>
<td>返回新打开窗口的引用，利用该引用可以继续操作该新窗口</td>
</tr>
<tr>
<td>moveTo(x,y)</td>
<td>x 和 y 表示新位置的x和y坐标值 只适用于最外层 window 对象</td>
</tr>
<tr>
<td>moveBy(x,y)</td>
<td>x 和 y 表示在水平和垂直方向上移动的像素数 只适用于最外层 window 对象</td>
</tr>
<tr>
<td>resizeTo(x,y)</td>
<td>x 和 y 表示浏览器窗口的新宽度和新高度 只适用于最外层 window 对象</td>
</tr>
<tr>
<td>resizeBy(x,y)</td>
<td>x 和 y 表示浏览器窗口的宽高变化尺寸 只适用于最外层 window 对象</td>
</tr>
<tr>
<td>alert()</td>
<td>提示框-显示时包含传入的字符串和“确定”按钮</td>
</tr>
<tr>
<td>confirm()</td>
<td>确认框-点击 确认 返回 true，点击 取消 返回 false</td>
</tr>
<tr>
<td>prompt()</td>
<td>确认 按钮（返回文本输入域的内容）、取消 按钮（返回 null）和文本输入域。</td>
</tr>
<tr>
<td>find()</td>
<td>等同使用浏览器菜单栏的 查找 命令打开对话框</td>
</tr>
<tr>
<td>print()</td>
<td>等同使用浏览器菜单栏的 打印 命令打开对话框</td>
</tr>
<tr>
<td>setTimeOut()</td>
<td>参数为：执行函数或代码、执行代码前需要等待的时间（毫秒）</td>
</tr>
<tr>
<td>clearTimeOut()</td>
<td>参数为 setTimeout() 的引用</td>
</tr>
<tr>
<td>setInterval()</td>
<td>参数为：执行函数或代码、循环执行代码的间隔时间（毫秒）</td>
</tr>
<tr>
<td>clearInterval()</td>
<td>参数为 setInterval() 的引用</td>
</tr>
</tbody></table>
<h3 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h3><p>history 对象保存着从窗口被打开起的 <strong>历史记录</strong>，每个浏览器窗口、标签页、框架都有自己的 history 对象。</p>
<table>
<thead>
<tr>
<th>属性或方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>length</td>
<td>历史记录的数量</td>
</tr>
<tr>
<td>go()</td>
<td>0表示刷新页面，负数表示向后跳转，正数表示向前跳转，字符串参数表示跳转到历史记录中包含该字符串的最近一个位置 （可能前进，也可能后退）</td>
</tr>
<tr>
<td>back()</td>
<td>后退一页，可模仿浏览器 后退 按钮</td>
</tr>
<tr>
<td>forward()</td>
<td>前进一页，可模仿浏览器 前进 按钮</td>
</tr>
</tbody></table>
<h3 id="location-对象（重要）"><a href="#location-对象（重要）" class="headerlink" title="location 对象（重要）"></a>location 对象（重要）</h3><p>location 对象提供了与当前窗口中 <strong>加载的文档有关的信息以及一些导航功能</strong>，它既是 window 对象的属性，同时也是 document 对象的属性。</p>
<table>
<thead>
<tr>
<th>属性或方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>href</td>
<td>返回当前完整的 URL 地址 == location.toString()</td>
</tr>
<tr>
<td>host</td>
<td>返回服务器名称和端口号</td>
</tr>
<tr>
<td>hostname</td>
<td>返回服务器名称</td>
</tr>
<tr>
<td>port</td>
<td>返回 URL 中指定的端口号，如果没有，返回空字符串</td>
</tr>
<tr>
<td>pathname</td>
<td>返回 URL 中的目录和文件名</td>
</tr>
<tr>
<td>protocol</td>
<td>返回页面使用的协议，通常是 http 或 https</td>
</tr>
<tr>
<td>search</td>
<td>返回 URL 的查询字符串，这个字符串以问号开头</td>
</tr>
<tr>
<td>assign()</td>
<td>立即打开新 URL 并在浏览器历史中生成一条记录，相当于直接设置 location.href 值， 也可以修改 location 对象的其它属性来重新加载</td>
</tr>
<tr>
<td>replace()</td>
<td>打开新 URL，但是不会生成历史记录，使用 replace() 之后，用户不能通过 后退 回到前一个页面</td>
</tr>
<tr>
<td>reload()</td>
<td>重新加载当前页面，不传递参数时会以最有效方式加载（可能从缓存中加载）， 传入 true 时，则强制从浏览器重新加载</td>
</tr>
</tbody></table>
<h3 id="navigator-对象"><a href="#navigator-对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h3><p>navigator 对象用来描述浏览器本身，包括 <strong>浏览器的名称、版本、语言、系统平台、用户特性字符串</strong> 等信息。但是各个浏览器及浏览器的不同版本之间对这个对象的实现也不尽相同。</p>
<p><strong>注意：大多数时候，我们不会使用 navigator 对象，因为会被人为修改。</strong></p>
<h3 id="screen-对象"><a href="#screen-对象" class="headerlink" title="screen 对象"></a>screen 对象</h3><p>screen 对象用来表明客户端显示器的能力。多用于测定客户端能力的站点跟踪工具中。包括浏览器窗口外部的显示器的信息，如像素宽度和高度等，每个浏览器中的 screen 对象都包含着各不相同的属性。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>height</td>
<td>屏幕的像素高度</td>
</tr>
<tr>
<td>width</td>
<td>屏幕的像素宽度</td>
</tr>
<tr>
<td>availHeight</td>
<td>屏幕的像素高度减系统部件高度之后的值</td>
</tr>
<tr>
<td>availWidth</td>
<td>屏幕的像素宽度减系统部件宽度之后的值</td>
</tr>
</tbody></table>
<h3 id="document-对象（重要）"><a href="#document-对象（重要）" class="headerlink" title="document 对象（重要）"></a>document 对象（重要）</h3><p>document 对象既是 BOM 顶级对象的一个属性，更是 DOM 模型中的顶级对象，会在 DOM 中一起总结。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 基础(八)</title>
    <url>/2021/05/21/javascript-basis08/</url>
    <content><![CDATA[<h2 id="操作-DOM-对象"><a href="#操作-DOM-对象" class="headerlink" title="操作 DOM 对象"></a>操作 DOM 对象</h2><p>浏览器网页就是一个 DOM 树形结构。要操作一个 DOM 节点，就必须要先获得这个 DOM 节点。<br><strong>注意：下面讲的都是原始的代码，之后尽量是用 jQuery。</strong></p>
<h3 id="获得-DOM-节点"><a href="#获得-DOM-节点" class="headerlink" title="获得 DOM 节点"></a>获得 DOM 节点</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>段落一<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>段落二<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//对应 css 的选择器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> father = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;father&#x27;</span>),</span></span><br><span class="line"><span class="javascript">        h1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>),      <span class="comment">//获取的是一个数组</span></span></span><br><span class="line"><span class="javascript">        p1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>),</span></span><br><span class="line"><span class="javascript">        p2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;p2&#x27;</span>);    <span class="comment">//获取的是一个数组</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取所有的子节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> children = father.children;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取第一个子节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> firstChild = father.firstChild;     <span class="comment">//father.children[0] === father.firstChild</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取最后一个子节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lastChild = father.lastChild;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="更新-DOM-节点"><a href="#更新-DOM-节点" class="headerlink" title="更新 DOM 节点"></a>更新 DOM 节点</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> id1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    id1.innerText = <span class="string">&#x27;123&#x27;</span>;   <span class="comment">//修改文本内容</span></span></span><br><span class="line"><span class="javascript">    id1.innerHTML = <span class="string">&#x27;&lt;strong&gt;456&lt;/strong&gt;&#x27;</span>;   <span class="comment">//能够解析 html 标签</span></span></span><br><span class="line"><span class="javascript">    id1.style.color = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    id1.style.fontSize = <span class="string">&#x27;60px&#x27;</span>;      <span class="comment">//font-size 变为 fontSize，转成驼峰命名。</span></span></span><br><span class="line"><span class="javascript">    id1.style.padding = <span class="string">&#x27;2em&#x27;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="删除-DOM-节点"><a href="#删除-DOM-节点" class="headerlink" title="删除 DOM 节点"></a>删除 DOM 节点</h3><p>先获取父节点，再通过父节点删除自身节点。<strong>注意：删除是一个动态的过程</strong>。当你删除第一个节点后，原来的第二个节点就会立马顶替成为第一个节点。所以删除 Dom 节点建议是从后往前删。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>段落一<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>段落二<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> father = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;father&#x27;</span>),</span></span><br><span class="line"><span class="javascript">        self = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    father.removeChild(self);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//father.removeChild(father.children[2]);    //会报错</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="插入-DOM-节点"><a href="#插入-DOM-节点" class="headerlink" title="插入 DOM 节点"></a>插入 DOM 节点</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>),</span></span><br><span class="line"><span class="javascript">        title = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;title&#x27;</span>);   <span class="comment">//已有节点</span></span></span><br><span class="line"><span class="javascript">    list.appendChild(title);     <span class="comment">//插入到 list 子节点的最后</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> test = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;body&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    test[<span class="number">0</span>].appendChild(title);    <span class="comment">//插入到 body 子节点的最后</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//document.body.appendChild(title);         //同样的效果</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//list.insertBefore(title,list.children[1]);    //插入到 list 第二个子个节点的前面</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//list.insertBefore(title,list.lastElementChild);    //插入到 list 最后一个子节点的前面</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="增加-DOM-节点"><a href="#增加-DOM-节点" class="headerlink" title="增加 DOM 节点"></a>增加 DOM 节点</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//增加 h1 新节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> newH1 = <span class="built_in">document</span>.createElement(<span class="string">&#x27;h1&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//插入到 body 子节点的最后</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(newH1);</span></span><br><span class="line"><span class="javascript">    newH1.setAttribute(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;title&#x27;</span>);     <span class="comment">//设置属性建议使用 setAttribute()，这种是万能的。</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// newH1.id = &#x27;title&#x27;;</span></span></span><br><span class="line"><span class="javascript">    newH1.innerText = <span class="string">&#x27;标题&#x27;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// newH1.outerHTML = &#x27;&lt;h1 id=&quot;title&quot;&gt;标题&lt;/h1&gt;&#x27;;    //同样的效果</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//添加 style 新节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> newStyle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//插入到 head 子节点的最后</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.head.appendChild(newStyle);</span></span><br><span class="line"><span class="javascript">    newStyle.setAttribute(<span class="string">&#x27;type&#x27;</span>,<span class="string">&#x27;text/css&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    newStyle.innerHTML = <span class="string">&#x27;body&#123;background-color : red;&#125;&#x27;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// document.body.style.backgroundColor = &#x27;red&#x27;;   //同样的效果</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 基础(九)</title>
    <url>/2021/05/23/javascript-basis09/</url>
    <content><![CDATA[<h2 id="获取表单元素的-value-值"><a href="#获取表单元素的-value-值" class="headerlink" title="获取表单元素的 value 值"></a>获取表单元素的 value 值</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">name</span>=<span class="string">&quot;formName&quot;</span> <span class="attr">id</span>=<span class="string">&quot;formId&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Guest997&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//通过下面的方法获取表单元素的 value 值</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>).value);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(formId.username.value);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(formName.pwd.value);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//可以通过 getElementsByName() 获取单选框或多选框的数组，之后再通过循环判断是否被选择，获取被选择框的 value 值。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> test = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;sex&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; test.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(test[i].checked)&#123;</span></span><br><span class="line"><span class="javascript">            alert(test[i].value);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="md5-加密密码"><a href="#md5-加密密码" class="headerlink" title="md5 加密密码"></a>md5 加密密码</h2><p>加密的效果可以在浏览器开发者工具的 network(网络) 中看到。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入 md5.js 文件用于加密密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/blueimp-md5/2.18.0/js/md5.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return test()&quot;</span>&gt;</span>   <span class="comment">&lt;!--提交表单时调用 test()，注意：一定要写 return，否则想阻止表单提交时会不成功。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Guest997&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;orgin-pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;md5-pwd&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span>   <span class="comment">&lt;!--只有设置了 name 属性的表单元素，后台才能获取到。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> orginPwd = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;orgin-pwd&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> md5Pwd = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;md5-pwd&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        md5Pwd.value = md5(orginPwd.value);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;      <span class="comment">//不写这行代码，默认是返回为 true。如果返回为 false，则会阻止表单提交。</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//同样的效果</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*var md5Pwd = document.getElementsByName(&#x27;pwd&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        md5Pwd[0].value = md5(orginPwd.value);*/</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/images/javascript-basis09.md-0.png"><br>至于为什么要多创建一个 hidden 的表单元素，是因为真正提交给后台的是这隐藏的表单元素，提高了安全性。并且如果只是在 password 表单元素上进行 js 处理，会发现在提交表单的一瞬间，因为 md5 加密的密码会变长，破坏了用户使用的体验。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 基础(十)</title>
    <url>/2021/05/23/javascript-basis10/</url>
    <content><![CDATA[<h2 id="jQuery-库"><a href="#jQuery-库" class="headerlink" title="jQuery 库"></a>jQuery 库</h2><p>jQuery 库中有大量的 js 函数。文档工具站：<a href="https://jquery.cuishifeng.cn/index.html">https://jquery.cuishifeng.cn/index.html</a></p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><strong>$(selector).action()</strong> <strong>注意：selector 就是 css 的选择器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入 jquery.js 文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://ajax.microsoft.com/ajax/jquery/jquery-1.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击弹窗<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;p&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;jQuery!&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DOM 树加载完后，触发事件。</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;) = $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>获取鼠标坐标<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://s3.pstatp.com/cdn/expire-1-M/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;xy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mouse&quot;</span>&gt;</span></span><br><span class="line">在框内移动鼠标获得坐标</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#mouse&#x27;</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;     <span class="comment">//e 中包含了事件触发时的函数，mousemove 包含了 pageX 和 pageY。</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#xy&#x27;</span>).text(<span class="string">&#x27;x:&#x27;</span> + e.pageX + <span class="string">&#x27;y:&#x27;</span> + e.pageY);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="操作-DOM-元素"><a href="#操作-DOM-元素" class="headerlink" title="操作 DOM 元素"></a>操作 DOM 元素</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://s3.pstatp.com/cdn/expire-1-M/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;js&quot;</span>&gt;</span>js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;css&quot;</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>display<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">&#x27;#js&#x27;</span>).text());   <span class="comment">//获得值   相当于innerText</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#js&#x27;</span>).text(<span class="string">&#x27;123&#x27;</span>);      <span class="comment">//设置值</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#js&#x27;</span>).html(<span class="string">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span>);      <span class="comment">//相当于 innerHTML</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#css&#x27;</span>).css(&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;text-decoration&#x27;</span>:<span class="string">&#x27;underline&#x27;</span>&#125;);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#test&#x27;</span>).hide();    <span class="comment">//对应的还有 show()</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(一)</title>
    <url>/2021/03/31/javase-basis01/</url>
    <content><![CDATA[<h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><ul>
<li>  一般利用公司域名倒置做包名</li>
<li>  导入包格式：import[.package2…].(classname*);</li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>//单行注释</p>
<p>/*</p>
<p>多行注释</p>
<p>*/</p>
<p>/**</p>
<p>文档注释</p>
<p>*/</p>
<h3 id="文档注释的参数信息"><a href="#文档注释的参数信息" class="headerlink" title="文档注释的参数信息"></a>文档注释的参数信息</h3><ul>
<li>  @author 作者名</li>
<li>  @version 版本号</li>
<li>  @since 指明需要最早使用的 jdk 版本</li>
<li>  @param 参数名</li>
<li>  @return 返回值情况</li>
<li>  @throws 异常抛出情况</li>
</ul>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul>
<li>  标识符只能以字母、$、_ 开头。</li>
<li>  标识符是大小写敏感的。</li>
</ul>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul>
<li>  变量和方法名：首字母小写和驼峰原则：除了第一个单词以外，后面的单词首字母大写。例如：lastName、runFast()</li>
<li>  常量：使用大写字母和下划线。例如：MAX_VALUE</li>
<li>  类名：首字母大写和驼峰原则。例如：GoodMan</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="八大基本数据类型"><a href="#八大基本数据类型" class="headerlink" title="八大基本数据类型"></a>八大基本数据类型</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示范围：byte &lt; short &lt; int &lt; long</span></span><br><span class="line"><span class="keyword">byte</span> by = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">short</span> sh = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> in = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">long</span> lo = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示范围：float &lt; double</span></span><br><span class="line"><span class="keyword">float</span> fl = <span class="number">30.0f</span>;</span><br><span class="line"><span class="keyword">double</span> db = <span class="number">30.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> bl = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>;   <span class="comment">//char 类型一定要使用单引号</span></span><br></pre></td></tr></table></figure>

<h3 id="三大引用数据类型"><a href="#三大引用数据类型" class="headerlink" title="三大引用数据类型"></a>三大引用数据类型</h3><ul>
<li>  类</li>
<li>  接口</li>
<li>  数组</li>
</ul>
<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>（根据字节大小）低 ——–&gt; 高（小数优先于整数）</p>
<p>byte,short,char -&gt; int -&gt; long -&gt; float -&gt; double</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//强制转换 (类型)变量名  高 -&gt; 低</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;</span><br><span class="line"><span class="comment">//自动转换  低 -&gt; 高</span></span><br><span class="line"><span class="keyword">double</span> c = i;</span><br></pre></td></tr></table></figure>

<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>使用 final 定义常量。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> <span class="literal">PI</span> = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><ul>
<li>  类变量</li>
<li>  实例变量</li>
<li>  局部变量</li>
</ul>
<p>局部变量必须声明和初始化值。 实例变量从属于对象，不初始化值则为默认值。（数字值为0，布尔值为 false，字符值为空；除了基本数据类型，其余的默认值都为 null）实例变量在方法中调用：（new 一个实例对象后使用）</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Demo01 demo = <span class="keyword">new</span> <span class="built_in">Demo01</span>();</span><br><span class="line">        System.out.<span class="built_in">println</span>(demo.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类变量从属于类，不初始化值则为默认值。（数字值为0，布尔值为 false，字符值为空；除了基本数据类型，其余的默认值都为 null）类变量在方法中调用：（static 定义类变量后直接用）</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">String</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IDEA-快捷代码缩写、快捷键-后面的文章可能会继续补充"><a href="#IDEA-快捷代码缩写、快捷键-后面的文章可能会继续补充" class="headerlink" title="IDEA 快捷代码缩写、快捷键(后面的文章可能会继续补充)"></a>IDEA 快捷代码缩写、快捷键(后面的文章可能会继续补充)</h2><ul>
<li>  ctrl + / = //</li>
<li>  ctrl + shift + / = /**/</li>
<li>  psvm = public static void main(String[] args) {}</li>
<li>  sout = System.out.println();</li>
<li>  new Demo() + (ctrl+alt+v) -&gt; Demo demo = new Demo();（ctrl+alt+v 可以实现如上操作直接创建一个对象或变量）</li>
<li>  ctrl+d (复制当前行到下一行)</li>
<li>  ctrl+alt+L (格式化代码)</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(二)</title>
    <url>/2021/04/01/javase-basis02/</url>
    <content><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li>  关系运算符：instanceof</li>
<li>  逻辑运算符：&amp;&amp;、、！</li>
<li>  条件运算符：？、:</li>
</ul>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul>
<li>  &amp;&amp; 运算：两边为真，才为真。（可实现短路运算）</li>
<li>  运算：一边为真，就为真。</li>
<li>  ！运算：真假取反。</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//短路运算（&amp;&amp;号左边为假，则不执行右边的代码）</span></span><br><span class="line"><span class="built_in">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">bool</span>ean b = (a&lt;<span class="number">2</span>)&amp;&amp;(++a&lt;<span class="number">2</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(a);</span><br><span class="line"><span class="comment">//结果为3</span></span><br></pre></td></tr></table></figure>

<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//x ? y : z</span></span><br><span class="line"><span class="comment">//x == true,结果为y,否则结果为z。</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">String</span> score = x&lt;=<span class="number">60</span> ? <span class="string">&quot;及格&quot;</span> : <span class="string">&quot;不及格&quot;</span>;</span><br><span class="line">System.out.<span class="built_in">println</span>(score);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> y = <span class="number">70</span>;</span><br><span class="line"><span class="keyword">String</span> score01 = y&gt;=<span class="number">80</span> ? <span class="string">&quot;优秀&quot;</span> : <span class="string">&quot;不优秀&quot;</span>;</span><br><span class="line">System.out.<span class="built_in">println</span>(score01);  </span><br><span class="line"><span class="comment">//结果为及格 不优秀</span></span><br></pre></td></tr></table></figure>

<h2 id="a-和-a-的区别"><a href="#a-和-a-的区别" class="headerlink" title="a++ 和 ++a 的区别"></a>a++ 和 ++a 的区别</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">int</span> b = a++;        <span class="comment">//先赋值给b,a再自增</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(a);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> d = ++c;        <span class="comment">//c先自增，再赋值给d</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(d);</span><br><span class="line"><span class="comment">//结果为4 3 11 11</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串拼接细节"><a href="#字符串拼接细节" class="headerlink" title="字符串拼接细节"></a>字符串拼接细节</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//+号左边为空的 String，右边也按 String 拼接；+号左边为可运算式，先计算再拼接。</span></span><br><span class="line"><span class="built_in">int</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> d = <span class="number">2</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;&quot;</span>+ c+d);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c+d +<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//结果为12 3</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(三)</title>
    <url>/2021/04/02/javase-basis03/</url>
    <content><![CDATA[<h2 id="Scanner-对象"><a href="#Scanner-对象" class="headerlink" title="Scanner 对象"></a>Scanner 对象</h2><p>使用 Scanner 类的 next() 和 nextLine() 接收用户输入的字符串，使用 hasNext() 和 hasNextLine() 判断是否还有输入的数据。（nextInt() 和 nextFloat() 等类似）</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 Scanner 对象准备接收用户输入数据</span></span><br><span class="line">Scanner scanner = <span class="keyword">new</span> <span class="constructor">Scanner(System.<span class="params">in</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;请输入数据：&quot;</span>);</span><br><span class="line">​</span><br><span class="line"><span class="comment">//使用 hasNext() 判断用户是否还有数据输入</span></span><br><span class="line"><span class="keyword">if</span>(scanner.has<span class="constructor">Next()</span>)&#123;</span><br><span class="line">    <span class="comment">//使用 next() 接收数据</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;next() 接收输出：&quot;</span> + scanner.next<span class="literal">()</span>);</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="comment">//使用 hasNextLine() 判断用户是否还有数据输入</span></span><br><span class="line"><span class="keyword">if</span>(scanner.has<span class="constructor">NextLine()</span>)&#123;</span><br><span class="line">    <span class="comment">//使用 nextLine() 接收数据</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;nextLine() 接收输出：&quot;</span> + scanner.next<span class="constructor">Line()</span>);</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="comment">//属于 IO 流的类要关闭，否则会一直占用资源。</span></span><br><span class="line">scanner.close<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果为；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello World!  </span><br><span class="line">next() 接收输出：Hello  </span><br><span class="line">nextLine() 接收输出： World!  </span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p>注释掉 hasNext() 部分，运行结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello World!  </span><br><span class="line">nextLine() 接收输出：Hello World!  </span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h2 id="next-和-nextLine-区别"><a href="#next-和-nextLine-区别" class="headerlink" title="next() 和 nextLine() 区别"></a>next() 和 nextLine() 区别</h2><h3 id="next"><a href="#next" class="headerlink" title="next():"></a>next():</h3><ul>
<li>  一定要读到有效字符后才可以结束输入。</li>
<li>  对输入有效字符之前的空白，自动去掉。</li>
<li>  对输入有效字符之后的空白，当作分隔符或者结束符。</li>
</ul>
<h3 id="nextLine"><a href="#nextLine" class="headerlink" title="nextLine():"></a>nextLine():</h3><ul>
<li>  会接收按下回车键之前的所以字符 。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(四)</title>
    <url>/2021/04/03/javase-basis04/</url>
    <content><![CDATA[<h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><ul>
<li>  if 单、双、多选择结构</li>
<li>  嵌套的 if 选择结构</li>
<li>  switch 多选择结构</li>
</ul>
<h3 id="if-多选择结构"><a href="#if-多选择结构" class="headerlink" title="if 多选择结构"></a>if 多选择结构</h3><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>)&#123;</span><br><span class="line">代码<span class="params">...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line">代码<span class="params">...</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">代码<span class="params">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="switch-多选择结构"><a href="#switch-多选择结构" class="headerlink" title="switch 多选择结构"></a>switch 多选择结构</h3><p>变量类型支持 byte、short、int、char、String，case 标签必须为字符串常量或字面量。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">switch(expression)&#123;</span><br><span class="line">case value:</span><br><span class="line"><span class="regexp">//</span>代码...</span><br><span class="line"><span class="keyword">break</span>;   <span class="regexp">//</span>可选</span><br><span class="line">case value:</span><br><span class="line"><span class="regexp">//</span>代码...</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">default: <span class="regexp">//</span>可选，case 匹配不到就从这进入。</span><br><span class="line"><span class="regexp">//</span>代码...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="comment">//case 穿透</span></span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span>(a)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;无&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 b c 无</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(五)</title>
    <url>/2021/04/03/javase-basis05/</url>
    <content><![CDATA[<h2 id="循环结构（注意初始化从0还是1开始循环）"><a href="#循环结构（注意初始化从0还是1开始循环）" class="headerlink" title="循环结构（注意初始化从0还是1开始循环）"></a>循环结构（注意初始化从0还是1开始循环）</h2><ul>
<li>  while 循环</li>
<li>  do…while 循环</li>
<li>  for 循环</li>
<li>  增强 for 循环（主要用于数组或集合）</li>
</ul>
<h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自己想打印到 i=99 时，两种方式的整个过程。</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    i++;</span><br><span class="line">    System.out.<span class="built_in">println</span>(i);</span><br><span class="line">&#125;<span class="comment">//结果为 1...100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    System.out.<span class="built_in">println</span>(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;<span class="comment">//结果为1...99</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算1-100总和</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">         i++;</span><br><span class="line">    &#125;</span><br><span class="line">System.out.<span class="built_in">println</span>(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出九九乘法表</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;<span class="number">9</span>)&#123;     <span class="comment">//行循环</span></span><br><span class="line">        x++;</span><br><span class="line">         <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">while</span>(y&lt;x)&#123;     <span class="comment">//列循环，第几行则循环几次</span></span><br><span class="line">            y++;</span><br><span class="line">             System.out.<span class="built_in">print</span>(x + <span class="string">&quot;*&quot;</span> + y + <span class="string">&quot;=&quot;</span> + x*y +<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">         &#125;  </span><br><span class="line">         System.out.<span class="built_in">println</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h3><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">//计算1-100总和</span><br><span class="line">int i = 0;</span><br><span class="line">int sum = 0;</span><br><span class="line"><span class="meta">do</span>&#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;<span class="meta">while</span> (i &lt;= 100);</span><br><span class="line">System.<span class="meta">out</span>.print<span class="meta">ln(</span>sum);</span><br><span class="line"></span><br><span class="line">//输出九九乘法表</span><br><span class="line">int <span class="meta">x</span> = 0;</span><br><span class="line">    <span class="meta">do</span>&#123;</span><br><span class="line">        <span class="meta">x</span>++;</span><br><span class="line">         int y =0;</span><br><span class="line">            <span class="meta">do</span>&#123;</span><br><span class="line">                y++;</span><br><span class="line">                System.<span class="meta">out</span>.p<span class="meta">rint(</span><span class="meta">x</span> + <span class="string">&quot;*&quot;</span> + y + <span class="string">&quot;=&quot;</span> + <span class="meta">x</span><span class="comment">*y +&quot;\t&quot;);</span></span><br><span class="line">            &#125;<span class="meta">while</span>(y&lt;<span class="meta">x</span>);</span><br><span class="line">            System.<span class="meta">out</span>.print<span class="meta">ln(</span>);</span><br><span class="line">        &#125;<span class="meta">while</span>(<span class="meta">x</span>&lt;9);</span><br></pre></td></tr></table></figure>

<h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">for (初始化<span class="comment">;循环条件（布尔表达式）;迭代更新)&#123;</span></span><br><span class="line">    代码...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出九九乘法表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;    <span class="comment">//行循环，行数限制在九行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;   <span class="comment">//列循环，第几行则循环几次</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(i + <span class="string">&quot;*&quot;</span> + j + <span class="string">&quot;=&quot;</span> + i*j + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>

<h3 id="增强-for-循环"><a href="#增强-for-循环" class="headerlink" title="增强 for 循环"></a>增强 for 循环</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(声明语句 : 表达式)</span></span>&#123;</span><br><span class="line">    代码...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="built_in">int</span>[] <span class="built_in">num</span> = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i : <span class="built_in">num</span>)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="print-和-println-区别"><a href="#print-和-println-区别" class="headerlink" title="print() 和 println() 区别"></a>print() 和 println() 区别</h2><ul>
<li>  print() 输出完不会换行。</li>
<li>  println() 输出完会换行。</li>
</ul>
<h2 id="常用转义字符"><a href="#常用转义字符" class="headerlink" title="常用转义字符"></a>常用转义字符</h2><ul>
<li>  \n：换行</li>
<li>  \r：回车</li>
<li>  \t：横向制表符</li>
</ul>
<h2 id="equals-和-的区别"><a href="#equals-和-的区别" class="headerlink" title="equals() 和 == 的区别"></a>equals() 和 == 的区别</h2><ul>
<li>  equals() 是判断所指向的内存空间的值是否相同。</li>
<li>  == 是判断是否指向同一个内存空间。</li>
</ul>
<h2 id="IDEA-快捷代码缩写、快捷键-后面的文章可能会继续补充"><a href="#IDEA-快捷代码缩写、快捷键-后面的文章可能会继续补充" class="headerlink" title="IDEA 快捷代码缩写、快捷键(后面的文章可能会继续补充)"></a>IDEA 快捷代码缩写、快捷键(后面的文章可能会继续补充)</h2><ul>
<li>  100.for = for (int i = 0; i &lt; 100; i++) { }</li>
<li>  fori = for (int i = 0; i &lt; ; i++) { }</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(六)</title>
    <url>/2021/04/04/javase-basis06/</url>
    <content><![CDATA[<h2 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h2><p>用于强制退出循环，不执行循环中剩余语句。</p>
<h2 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h2><p>用于跳过某次循环，进行下一次是否执行循环的判定。</p>
<h2 id="打印三角形"><a href="#打印三角形" class="headerlink" title="打印三角形"></a>打印三角形</h2><p>将三角形分为三个部分打印，左上空白三角形、左半三角形、右半三角形。建议通过 Debug 查看整个打印过程。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;    <span class="comment">//行数限制在五行</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">5</span>;j &gt;= i;j--)&#123;      <span class="comment">//打印左上空白三角形</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">1</span>;j &lt;= i;j++)&#123;      <span class="comment">//打印左半三角形</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;  <span class="comment">//打印右半三角形</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">    *</span></span><br><span class="line">   <span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">  <span class="strong">****</span>*</span></span></span><br><span class="line"><span class="strong"> **</span><span class="strong">****</span><span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"><span class="strong">****</span><span class="strong">****</span>*</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(七)</title>
    <url>/2021/04/06/javase-basis07/</url>
    <content><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;   <span class="regexp">//</span>这里的参数叫形参    方法体...    return 返回值;&#125;</span><br></pre></td></tr></table></figure>

<p>return 除了返回结果，还有终止方法的作用。（void 返回值类型，可以这样写：**return;**）</p>
<h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><p>在同一个类中：对于静态方法，其他的静态或非静态方法都可以直接调用它。而对于非静态方法，其他的非静态方法是可以直接调用它的，但是其他静态方法只有通过对象才能调用它。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo19</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态方法和类一起加载的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//b();        //会报错</span></span><br><span class="line">        <span class="keyword">new</span> Demo19().b();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态方法在类实例化之后才存在</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">c();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在不同类中：无论调用方法是非静态还是静态，如果被调用的方法是：静态方法，则通过 <strong>类名或对象</strong> 都可以进行调用，（但通过对象的方式不建议使用，因为它属于非静态调用的方式）如果被调用的方法是：非静态方法，则只能通过对象才可以调用它。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo20</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">d</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Demo19.a();</span><br><span class="line">        <span class="keyword">new</span> Demo19().a();  <span class="comment">//不建议使用</span></span><br><span class="line">        <span class="comment">//Demo19.b();      //会报错</span></span><br><span class="line">        <span class="keyword">new</span> Demo19().b();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">e</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Demo19.a();</span><br><span class="line">        <span class="keyword">new</span> Demo19().a();  <span class="comment">//不建议使用</span></span><br><span class="line">        <span class="comment">//Demo19.b();      //会报错</span></span><br><span class="line">        <span class="keyword">new</span> Demo19().b();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><h4 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h4><ul>
<li>  方法名称相同。</li>
<li>  参数列表必须不同。（个数、类型、排列顺序不同等）</li>
</ul>
<h4 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h4><p>方法名称相同时，编译器会根据调用方法的的参数个数、参数类型等去逐个匹配，以选择对应的方法，如匹配失败，则编译器报错。</p>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul>
<li>  在方法声明中，在指定参数类型后加一个省略号（…）。</li>
<li>  一个方法中只能指定一个可变参数，它必需是方法的最后一个参数，任何普通的参数必须在它之前声明。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">    Demo11 demo11 = <span class="keyword">new</span> Demo11();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">Demo11 demo11 = <span class="keyword">new</span> Demo11();</span><br><span class="line">demo11.test(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">test</span>(<span class="params">int ... num</span>)</span>&#123;    <span class="comment">//可变参数是一个特殊的一维数组</span></span><br><span class="line">System.out.println(num[<span class="number">0</span>] + num[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为5</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(八)</title>
    <url>/2021/04/07/javase-basis08/</url>
    <content><![CDATA[<h2 id="递归（基数很高，便不适合用。尽量能不用就不用）"><a href="#递归（基数很高，便不适合用。尽量能不用就不用）" class="headerlink" title="递归（基数很高，便不适合用。尽量能不用就不用）"></a>递归（基数很高，便不适合用。尽量能不用就不用）</h2><h3 id="结构："><a href="#结构：" class="headerlink" title="结构："></a>结构：</h3><ul>
<li>  递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。</li>
<li>  递归体：什么时候需要调用自身方法。</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">    Demo12 demo12 = <span class="keyword">new</span> <span class="built_in">Demo12</span>();</span><br><span class="line">    <span class="keyword">int</span> result = demo12.<span class="built_in">test</span>(<span class="number">3</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归实现阶乘  n! = n*(n-1)*(n-2)......   最后乘到1为止，所以通过判断传入的为1，就返回1，不再调用自身。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> i * <span class="built_in">test</span>(i<span class="number">-1</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(九)</title>
    <url>/2021/04/07/javase-basis09/</url>
    <content><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组声明（放在栈）"><a href="#数组声明（放在栈）" class="headerlink" title="数组声明（放在栈）"></a>数组声明（放在栈）</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">dataType[] <span class="built_in">array</span>ReVar;   <span class="comment">//首选方法</span></span><br><span class="line">dataType <span class="built_in">array</span>ReVar[];</span><br></pre></td></tr></table></figure>

<h3 id="数组创建（放在堆）"><a href="#数组创建（放在堆）" class="headerlink" title="数组创建（放在堆）"></a>数组创建（放在堆）</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">dataType[] <span class="built_in">array</span>ReVar = new dataType[<span class="built_in">array</span>Size];</span><br></pre></td></tr></table></figure>

<h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><h4 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>.<span class="number">3</span>&#125;;</span><br><span class="line"><span class="attribute">Man</span>[] mans = &#123;new Man(<span class="number">1</span>,<span class="number">1</span>),new Man(<span class="number">2</span>,<span class="number">2</span>)&#125;;     //引用类型</span><br></pre></td></tr></table></figure>

<h4 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">int</span>[] a = new int[<span class="number">2</span>];</span><br><span class="line"><span class="attribute">a</span>[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="attribute">a</span>[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h4 id="数组的默认初始化"><a href="#数组的默认初始化" class="headerlink" title="数组的默认初始化"></a>数组的默认初始化</h4><p>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式柀隐式初始化。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">/*      </span><br><span class="line">int[] nums;     <span class="regexp">//</span>声明一个数组</span><br><span class="line">nums = new int[<span class="number">3</span>];   <span class="regexp">//</span>创建一个数组</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">int[] nums = new int[<span class="number">3</span>];   <span class="regexp">//</span>声明和创建数组整合到一起</span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">1</span>;    <span class="regexp">//</span>数组赋值</span><br><span class="line">nums[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">nums[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;    <span class="regexp">//</span>遍历数组，nums.length 为获取数组长度。</span><br><span class="line">    System.out.println(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组使用"><a href="#数组使用" class="headerlink" title="数组使用"></a>数组使用</h3><ul>
<li>  For-Each 循环</li>
</ul>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">int[] arrays =<span class="built_in"> new </span>int[3];</span><br><span class="line">for (int<span class="built_in"> array </span>: arrays) &#123;</span><br><span class="line">    System.out.println(array);</span><br><span class="line">&#125;</span><br><span class="line">//结果为0 0 0</span><br></pre></td></tr></table></figure>

<ul>
<li>  数组作为方法参数</li>
<li>  数组作为返回值</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">  <span class="built_in">int</span>[] <span class="built_in">array</span>s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">  <span class="built_in">int</span>[] result = reverse(<span class="built_in">array</span>s);</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i : result) &#123;</span><br><span class="line">      System.<span class="keyword">out</span>.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">int</span>[] reverse(<span class="built_in">int</span>[] <span class="built_in">array</span>s) &#123;</span><br><span class="line">  <span class="comment">//反转数组</span></span><br><span class="line">  <span class="built_in">int</span>[] result = new <span class="built_in">int</span>[<span class="built_in">array</span>s.length];</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>, j = <span class="built_in">array</span>s.length - <span class="number">1</span>; i &lt; <span class="built_in">array</span>s.length; i++, j--) &#123;</span><br><span class="line">      result[i] = <span class="built_in">array</span>s[j];      <span class="comment">//arrays[0] 赋值给 result[2]，以此类推。</span></span><br><span class="line">      <span class="comment">//result[j] = arrays[i];    效果一样，arrays[2] 赋值给 result[0]，以此类推。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为3 2 1</span></span><br></pre></td></tr></table></figure>

<h2 id="IDEA-快捷代码缩写、快捷键-后面的文章可能会继续补充"><a href="#IDEA-快捷代码缩写、快捷键-后面的文章可能会继续补充" class="headerlink" title="IDEA 快捷代码缩写、快捷键(后面的文章可能会继续补充)"></a>IDEA 快捷代码缩写、快捷键(后面的文章可能会继续补充)</h2><ul>
<li>  array.for 自动生成增强 for 循环。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(十)</title>
    <url>/2021/04/08/javase-basis10/</url>
    <content><![CDATA[<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">int</span> a[][] = new int[<span class="number">2</span>][<span class="number">3</span>];    //可以看成一个二行三列的数组</span><br><span class="line"><span class="attribute">int</span>[][] a = new int[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="attribute">int</span>[][] a = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//遍历二维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; a[i].<span class="built_in">length</span>; j++) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//结果为1 2 3 3 4 5</span></span><br></pre></td></tr></table></figure>

<h2 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h2><p>具有以下常用功能</p>
<ul>
<li>  数组填充赋值：通过 fill 方法。</li>
<li>  对数组排序：通过 sort 方法。</li>
<li>  比较数组：通过 equals 方法比较数组中元素值是否相等。</li>
<li>  查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span><span class="literal">[]</span> arrays = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">arrays</span>)</span>);  <span class="comment">//打印数组</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>sort(arrays);         <span class="comment">//数组排序</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">arrays</span>)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>fill(arrays,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>);        <span class="comment">//数据填充(左闭右开区间)</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">arrays</span>)</span>);</span><br><span class="line"><span class="comment">//结果为 [1, 3, 8, 9, 6, 2] [1, 2, 3, 6, 8, 9] [1, 2, 0, 0, 8, 9]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(十一)</title>
    <url>/2021/04/08/javase-basis11/</url>
    <content><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p>
<h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><ul>
<li>  比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>  对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>
<li>  针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>  持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。<img data-src="/images/javase-basis11.md-0.gif"></li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static <span class="built_in">int</span><span class="literal">[]</span> mao<span class="constructor">Pao(<span class="params">int</span>[] <span class="params">a</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; a.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a<span class="literal">[<span class="identifier">j</span>]</span> &gt; a<span class="literal">[<span class="identifier">j</span> + <span class="number">1</span>]</span>) &#123;</span><br><span class="line">                <span class="built_in">int</span> temp = a<span class="literal">[<span class="identifier">j</span>]</span>;</span><br><span class="line">                a<span class="literal">[<span class="identifier">j</span>]</span> = a<span class="literal">[<span class="identifier">j</span> + <span class="number">1</span>]</span>;</span><br><span class="line">                a<span class="literal">[<span class="identifier">j</span> + <span class="number">1</span>]</span> = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">    <span class="built_in">int</span><span class="literal">[]</span> a = &#123;<span class="number">4</span>, <span class="number">987</span>, <span class="number">64</span>, <span class="number">52</span>, <span class="number">75</span>, <span class="number">3</span>, <span class="number">19</span>&#125;;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">maoPao</span>(<span class="params">a</span>)</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为[3, 4, 19, 52, 64, 75, 987]</span></span><br></pre></td></tr></table></figure>

<h3 id="算法讲解"><a href="#算法讲解" class="headerlink" title="算法讲解"></a>算法讲解</h3><p>把数组中最小的那个往上<strong>冒</strong>，冒的过程就是<strong>和他相邻的元素交换</strong>。这个冒的过程就是内循环。 经过了一个冒的过程，可以使<strong>一个</strong>最小的元素冒出来，如果数组里面有 n 个元素，就得冒 n-1 次，这就是外循环。 冒泡排序每循环排序一次,就把最大的一个数排在了最右边，每一次排序都是在上一次排序的基础上再排序，比如：第2次排序之后，i 已经成2了，第三次排序是要在第二次的基础上在进行排序，而第二次排序后就已经把两个最大的数已经放到最后了，所以第三次排序就不需要在去比他俩，就得把这个 2 减掉，只需要循环 n-i 次(此时的 i 是2；为什么 -i 之后还要-1呢？ 这是因为在内层循环的判断中是把当前值和后面一个值做比较的。如果不减1，则当循环到最后一个值的时候，再取下一个值就取不到，就需要额外的操作，或者抛出数组下标越界的异常。</p>
<h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>当一个数组中大部分元素为0,或者为同一值的数组时，可以使用稀疏数组来保存该数组。</p>
<h3 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h3><ul>
<li>  记录数组一共有几行几列，有多少个不同值。</li>
<li>  把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模。<img data-src="/images/javase-basis11.md-1.png"></li>
</ul>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">public static void main(<span class="symbol">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">    //创建一个二维数组并打印出来。</span><br><span class="line">    int[][] a = new int[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">    a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">    for (int[] ints : a) &#123;</span><br><span class="line">        for (int anInt : ints) &#123;</span><br><span class="line">            <span class="symbol">System</span>.out.print(anInt + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="symbol">System</span>.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //判断 a 中不为<span class="number">0</span>的个数</span><br><span class="line">    int sum = <span class="number">0</span>;</span><br><span class="line">    for (int[] ints : a) &#123;</span><br><span class="line">        for (int anInt : ints) &#123;</span><br><span class="line">            if(anInt != <span class="number">0</span>)&#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //将 a 压缩成稀疏数组并打印出来。</span><br><span class="line">    //放入第一行数据</span><br><span class="line">    int[][] b = new int[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">    b[<span class="number">0</span>][<span class="number">0</span>] = a.length;</span><br><span class="line">    b[<span class="number">0</span>][<span class="number">1</span>] = a[<span class="number">0</span>].length;</span><br><span class="line">    b[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">    //放入剩下行数据</span><br><span class="line">    int count = <span class="number">1</span>;    //从第二行开始打印</span><br><span class="line">    for (int i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        for (int j = <span class="number">0</span>; j &lt; a[i].length; j++) &#123;</span><br><span class="line">            if(a[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                b[count][<span class="number">0</span>] = i;</span><br><span class="line">                b[count][<span class="number">1</span>] = j;</span><br><span class="line">                b[count][<span class="number">2</span>] = a[i][j];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //打印稀疏数组</span><br><span class="line">    <span class="symbol">System</span>.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">    for (int[] ints : b) &#123;</span><br><span class="line">        for (int anInt : ints) &#123;</span><br><span class="line">            <span class="symbol">System</span>.out.print(anInt + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="symbol">System</span>.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //还原稀疏数组</span><br><span class="line">    int[][] c = new int[b[<span class="number">0</span>][<span class="number">0</span>]][b[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">    for (int i = <span class="number">1</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">        for (int j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            c[b[i][<span class="number">0</span>]][b[i][<span class="number">1</span>]] = b[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //打印还原后的数组</span><br><span class="line">    <span class="symbol">System</span>.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">    for (int[] ints : c) &#123;</span><br><span class="line">        for (int anInt : ints) &#123;</span><br><span class="line">            <span class="symbol">System</span>.out.print(anInt + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="symbol">System</span>.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">0 2 0 </span></span><br><span class="line"><span class="comment">0 0 3 </span></span><br><span class="line"><span class="comment">0 0 0 </span></span><br><span class="line"><span class="comment">=========</span></span><br><span class="line"><span class="comment">3 3 2 </span></span><br><span class="line"><span class="comment">0 1 2 </span></span><br><span class="line"><span class="comment">1 2 3 </span></span><br><span class="line"><span class="comment">=========</span></span><br><span class="line"><span class="comment">0 2 0 </span></span><br><span class="line"><span class="comment">0 0 3 </span></span><br><span class="line"><span class="comment">0 0 0 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(十二)</title>
    <url>/2021/04/09/javase-basis12/</url>
    <content><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul>
<li>  面向对象编程(Object-Oriented Programming,OOP)</li>
<li>  面向对象编程的本质就是：以类的方式组织代码，以对象的形式封装数据。</li>
<li>  三大特性：封装、继承、多态。</li>
</ul>
<h2 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h2><p>使用 new 关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。类中的枃造器也称为枃造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：</p>
<ul>
<li>  必须和类的名字相同</li>
<li>  必须没有返回类型也不能写 void</li>
</ul>
<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo22</span> </span>&#123;</span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造器用于实例化初始值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Demo22</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;Guest997&quot;</span>;      <span class="comment">//this 表示当前类</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义了有参构造器，如果想使用无参构造器就必须显示定义，否则就会报错。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Demo22</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Demo22 demo22 = <span class="keyword">new</span> <span class="built_in">Demo22</span>();</span><br><span class="line">        System.out.<span class="built_in">println</span>(demo22.name);</span><br><span class="line"></span><br><span class="line">        Demo22 demo22p = <span class="keyword">new</span> <span class="built_in">Demo22</span>(<span class="string">&quot;guest997&quot;</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(demo22p.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为Guest997 guest997</span></span><br></pre></td></tr></table></figure>

<h2 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h2><p><strong>值传递：</strong>在方法被调用时，实参通过形参把它的内容副本传入方法内部，此时形参接收到的内容是实参值的一个拷贝，因此在方法内对形参的任何操作，都仅仅是对这个副本的操作，不影响原始值的内容。<br><strong>引用传递：</strong> <strong>引用</strong> 也就是指向真实内容的地址值。在方法调用时，实参的地址通过方法调用被传递给相应的形参，在方法体内，形参和实参指向同一个内存地址，对形参的操作会影响真实内容。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo21</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">test</span>(a);</span><br><span class="line">        System.out.<span class="built_in">println</span>(a);</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> <span class="built_in">Person</span>();</span><br><span class="line">        <span class="built_in">test02</span>(person);</span><br><span class="line">        System.out.<span class="built_in">println</span>(person.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//值传递</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//引用传递</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        person.name = <span class="string">&quot;Guest997&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">String</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为1 Guest997</span></span><br></pre></td></tr></table></figure>

<h2 id="IDEA-快捷代码缩写、快捷键-后面的文章可能会继续补充"><a href="#IDEA-快捷代码缩写、快捷键-后面的文章可能会继续补充" class="headerlink" title="IDEA 快捷代码缩写、快捷键(后面的文章可能会继续补充)"></a>IDEA 快捷代码缩写、快捷键(后面的文章可能会继续补充)</h2><ul>
<li>  alt+Insert（或者右键）：创建构造器、Getter 和 Setter、重写方法。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(十三)</title>
    <url>/2021/04/09/javase-basis13/</url>
    <content><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>程序设计要追求：高内聚，低耦合。高内聚就是类的内部数据操作细节自己完成，不允许外部 干涉；低耦合：仅暴露少量的方法给外部使用。</p>
<p>记住一句话就够了：属性私有（private），get 和 set。</p>
<h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul>
<li>  提高程序的安全性，保护数据。</li>
<li>  隐藏代码的实现细节。</li>
<li>  统一接口。</li>
<li>  系统可维护性增加了。</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo23</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;     <span class="comment">//私有属性</span></span><br><span class="line">    <span class="keyword">public</span> int age;          <span class="comment">//公有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setName</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> int <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setAge</span>(<span class="params">int age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Demo23 demo23 = <span class="keyword">new</span> <span class="built_in">Demo23</span>();</span><br><span class="line">        demo23.age = <span class="number">10</span>;</span><br><span class="line">        System.out.<span class="built_in">println</span>(demo23.age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//demo23.name = &quot;Guest997&quot;      //会报错</span></span><br><span class="line">        demo23.<span class="built_in">setName</span>(<span class="string">&quot;Guest997&quot;</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(demo23.<span class="built_in">getName</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为10 Guest997</span></span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>extands</strong> 的意思是 扩展。子类是父类的扩展。Java 中类只有单继承，没有多继承！继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖、组合、聚合等。（所以的类都默认继承 Object 类）</p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name = <span class="string">&quot;pet&quot;</span>;    <span class="comment">//私有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setName</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">void</span> <span class="function"><span class="title">shout</span>(<span class="params"></span>)</span>&#123;           <span class="comment">//私有方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;叫了一声！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">getShout</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Pet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> <span class="built_in">Dog</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//dog.name;     //会报错</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(dog.<span class="built_in">getName</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//dog.shout();    //会报错</span></span><br><span class="line">        dog.<span class="built_in">getShout</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为pet 叫了一声！</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/images/javase-basis13.md-0.png"></p>
<p><img data-src="/images/javase-basis13.md-1.png"></p>
<p>可以从上面两个图看出，报错原因是：在父类中属性和方法具有私有权限。而不是报错未定义属性和方法，这就说明父类中私有的属性和方法被子类继承过去了，只是没有权限进行操作。而从结果可以看出，可以通过继承来的公共方法把父类的私有属性和方法取出来。</p>
<h2 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;pet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">String</span> name = <span class="string">&quot;x&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Pet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Dog</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//这里有个隐藏代码默认调用了父类的构造器：super();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">        <span class="comment">//super();    //会报错，只能写在子类构造器的第一行。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name = <span class="string">&quot;xh&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">shout</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);    <span class="comment">//本类</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name);   <span class="comment">//父类</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">test01</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.shout();</span><br><span class="line">        <span class="built_in">super</span>.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.test();</span><br><span class="line">        dog.test01();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为pet dog xh x test01 test</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(十四)</title>
    <url>/2021/04/11/javase-basis14/</url>
    <content><![CDATA[<h2 id="方法重写：需要有继承关系"><a href="#方法重写：需要有继承关系" class="headerlink" title="方法重写：需要有继承关系"></a>方法重写：需要有继承关系</h2><ul>
<li>  方法名必须相同。</li>
<li>  参数列表必须相同。</li>
<li>  修饰符：范围可以扩大，但不能缩小。 public &gt; protected &gt; default &gt; private</li>
<li>  抛出的异常：范围可以缩小，但不能扩大。</li>
<li>  父类的私有方法不能被重写，static 和 final 修饰的方法不能被重写。</li>
</ul>
<h3 id="为什么需要重写"><a href="#为什么需要重写" class="headerlink" title="为什么需要重写"></a>为什么需要重写</h3><p>父类的功能，子类不一定需要或者不一定满足。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    public void test() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        B b = <span class="keyword">new</span> <span class="type">B</span>();</span><br><span class="line">        b.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类的引用指向了子类对象</span></span><br><span class="line">        A a = <span class="keyword">new</span> <span class="type">B</span>();   <span class="comment">//a 是 B new 出来的对象，因此调用的是 B 重写之后的方法。</span></span><br><span class="line">        a.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为B B</span></span><br></pre></td></tr></table></figure>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="多态存在的条件"><a href="#多态存在的条件" class="headerlink" title="多态存在的条件"></a>多态存在的条件</h3><ul>
<li>  有继承关系</li>
<li>  子类重写父类方法</li>
<li>  父类引用指向子类对象</li>
</ul>
<h2 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a>instanceof 关键字</h2><p>测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。</p>
<p>子类转父类能直接转，父类转子类需要强制转。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    public void shout()&#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;shout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Main &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        //<span class="keyword">Object</span> &gt; Person &gt; Teacher</span><br><span class="line">        //<span class="keyword">Object</span> &gt; Person &gt; Student</span><br><span class="line">        Person p = <span class="built_in">new</span> Student();  //<span class="built_in">new</span> 了一个 Person 类 p 指向了子类(Studenet)对象。</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(p instanceof Student);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(p instanceof <span class="keyword">Object</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(p instanceof Teacher);</span><br><span class="line"></span><br><span class="line">        Student s = <span class="built_in">new</span> Student();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(s instanceof Student);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(s instanceof <span class="keyword">Object</span>);</span><br><span class="line">        //<span class="keyword">System</span>.<span class="keyword">out</span>.println(s instanceof Teacher);    //会报错，因为同为 Person 的子类。</span><br><span class="line"></span><br><span class="line">        Person p2 = s;</span><br><span class="line">        //p2.shout();      //会报错，s 能直接转成 Person 类，但可能会丢失自身独有的方法。</span><br><span class="line"></span><br><span class="line">        Student s2 = (Student)p;  //p 强转成 Student 类，便能调用子类独有的方法，但可能损失精度。</span><br><span class="line">        s2.shout();</span><br><span class="line">        //((Student)p).shout();  同样的效果</span><br><span class="line"></span><br><span class="line">        //((Teacher)p).run();  //编译不会报错，运行会报错。因为 p 指向的是子类(Studenet)对象。</span><br><span class="line">        Person p2 = <span class="built_in">new</span> Teacher();</span><br><span class="line">        ((Teacher)p2).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//结果为<span class="keyword">true</span> <span class="keyword">true</span> <span class="keyword">false</span> <span class="keyword">true</span> <span class="keyword">true</span> shout run</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(十五)</title>
    <url>/2021/04/11/javase-basis15/</url>
    <content><![CDATA[<h2 id="匿名和静态代码块"><a href="#匿名和静态代码块" class="headerlink" title="匿名和静态代码块"></a>匿名和静态代码块</h2><p>静态最先执行但只执行一次；第二是匿名，跟对象一起产生，可用于赋初始值。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo24</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo24</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Demo24 a = <span class="keyword">new</span> <span class="built_in">Demo24</span>();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;========&quot;</span>);</span><br><span class="line">        Demo24 b = <span class="keyword">new</span> <span class="built_in">Demo24</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">静态代码块</span></span><br><span class="line"><span class="comment">匿名代码块</span></span><br><span class="line"><span class="comment">构造器</span></span><br><span class="line"><span class="comment">========</span></span><br><span class="line"><span class="comment">匿名代码块</span></span><br><span class="line"><span class="comment">构造器</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(十六)</title>
    <url>/2021/04/12/javase-basis16/</url>
    <content><![CDATA[<h2 id="抽象类（抽象类并不常用，用的大多是接口，因为接口能实现多继承）"><a href="#抽象类（抽象类并不常用，用的大多是接口，因为接口能实现多继承）" class="headerlink" title="抽象类（抽象类并不常用，用的大多是接口，因为接口能实现多继承）"></a>抽象类（抽象类并不常用，用的大多是接口，因为接口能实现多继承）</h2><ul>
<li>  用 abstract 修饰符定义抽象类。（抽象类是类的抽象，而类本就是抽象的，抽象的抽象更像是一种约束）</li>
<li>  不能 new 抽象类，只能靠子类去实现它的方法。（如果抽象类的子类不是抽象类，就一定要实现父类的方法；如果抽象类的子类还是抽象类，就让它子类的子类去实现，以此类推）</li>
<li>  虽然我们不能创建抽象类的对象，但是当我们创建抽象类的一个具体的子类对象时，抽象类的构造函数就会被自动调用。</li>
<li>  抽象类中可以写普通方法，但抽象方法必须在抽象类中。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo25</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Demo26</span> <span class="keyword">extends</span> <span class="title">Demo25</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void test() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(十七)</title>
    <url>/2021/04/12/javase-basis17/</url>
    <content><![CDATA[<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul>
<li>  用 interface 关键字定义接口，能定义方法但不能写方法实现。</li>
<li>  能用接口实现多继承。</li>
<li>  接口不能被实例化，且没有构造器。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性默认修饰符是 public static final</span></span><br><span class="line">    <span class="keyword">int</span> AGE = <span class="number">0</span>;      <span class="comment">//常量，平常不会在接口中定义属性。</span></span><br><span class="line">    <span class="comment">//方法默认修饰符是 public abstract</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;       <span class="comment">//不能写方法实现，否则会报错。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">UserServiceImpl</span> <span class="selector-tag">implements</span> <span class="selector-tag">UserService</span>,<span class="selector-tag">TimeService</span>&#123;     <span class="comment">//用 implements 修饰符实现多继承</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void add() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void delete() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void update() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void query() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void timer() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE 基础(十八)</title>
    <url>/2021/04/15/javase-basis18/</url>
    <content><![CDATA[<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类就是在一个类的内部定义一个类，比如，A类中定义ー个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类了。</p>
<h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">out</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;out&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Inner</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;in&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得外部类的私有或公有的属性和方法都可以。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getOuter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(id);</span><br><span class="line">            <span class="keyword">out</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Application &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">Outer</span> <span class="keyword">outer</span> = <span class="built_in">new</span> <span class="keyword">Outer</span>();</span><br><span class="line">        //通过外部类来实例化内部类</span><br><span class="line">        <span class="keyword">Outer</span>.<span class="keyword">Inner</span> <span class="keyword">inner</span> = <span class="keyword">outer</span>.<span class="built_in">new</span> <span class="keyword">Inner</span>();</span><br><span class="line">        <span class="keyword">inner</span>.<span class="keyword">in</span>();</span><br><span class="line">        <span class="keyword">inner</span>.getOuter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//结果为<span class="keyword">in</span> <span class="number">0</span> <span class="keyword">out</span></span><br></pre></td></tr></table></figure>

<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;out&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//静态内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner02</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;in&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getOuter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(id);  //会报错，因为用 static 定义静态内部类后，静态内部类会跟随外部类一起加载；而 id 属性是在被实例化之后才出现的。</span></span><br><span class="line">        <span class="comment">//out();        //也会报错，跟上面同理。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;out&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//局部内部类(方法中定义类)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner03</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo27</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类：没有名字去实例化类，不用将实例保存到变量中。</span></span><br><span class="line">        <span class="keyword">new</span> AnonInner().test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面的代码就是实现了接口的类，也没有名字。</span></span><br><span class="line">        <span class="comment">//下面的代码相当于：AnonService anonService = new AnonService()&#123;省略重写的方法...&#125;.test();</span></span><br><span class="line">        <span class="keyword">new</span> <span class="function"><span class="title">AnonService</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">test</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;anonservice&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.test();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个 Java 类中能有多个 class，但只能有一个 public class。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonInner</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;anoninner&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> AnonService&#123;</span><br><span class="line">    <span class="built_in">void</span> test();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为anoninner anonservice</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(一)</title>
    <url>/2021/07/15/javaweb-basis01/</url>
    <content><![CDATA[<h2 id="准备工作（由于步骤比较繁琐，网上也有很多教程，下面我就一笔带过了）"><a href="#准备工作（由于步骤比较繁琐，网上也有很多教程，下面我就一笔带过了）" class="headerlink" title="准备工作（由于步骤比较繁琐，网上也有很多教程，下面我就一笔带过了）"></a>准备工作（由于步骤比较繁琐，网上也有很多教程，下面我就一笔带过了）</h2><p>下载并解压 Tomcat 和 Maven 压缩包，配置好环境变量；能够正常启动 Tomcat 和进入首页；在 Maven 的配置文件中，配置镜像源以及指定仓库目录位置。</p>
<p>使用 IDEA 创建一个基于 Maven 的 JavaWeb 项目。（建议使用 Web 模板创建）在完成项目搭建后，还需要注意 Tomcat 服务器的配置。</p>
<p>整个准备工作做下来会有许多坑，最后能够在 IDEA 中正常启动 Tomcat 并访问 index 页面就算成功。</p>
<h2 id="第一个-JavaWeb-程序"><a href="#第一个-JavaWeb-程序" class="headerlink" title="第一个 JavaWeb 程序"></a>第一个 JavaWeb 程序</h2><p><strong>我使用的是 Tomcat10，配置会与之前的版本不同。但其实不推荐用10的版本，会出现很多奇怪的问题。</strong><img data-src="/images/javaweb-basis01.md-0.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--pom.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ml.guest997<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JavaWeb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JSP 的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Servlet 的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>JavaWeb<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册 servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一个 servlet 对应一个 mapping--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--请求路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//响应类型：html</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="comment">//响应输出流</span></span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;title&gt;Hello World!&lt;/title&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;Hello World!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后能够如下图正常地访问就说明成功了。<img data-src="/images/javaweb-basis01.md-1.png"></p>
<h2 id="IDEA-快捷代码缩写、快捷键-后面的文章可能会继续补充"><a href="#IDEA-快捷代码缩写、快捷键-后面的文章可能会继续补充" class="headerlink" title="IDEA 快捷代码缩写、快捷键(后面的文章可能会继续补充)"></a>IDEA 快捷代码缩写、快捷键(后面的文章可能会继续补充)</h2><ul>
<li>  alt + insert 可以可以用来生成构造函数、setter 和 getter，或者重写父类的方法……</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(二)</title>
    <url>/2021/07/16/javaweb-basis02/</url>
    <content><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>Servlet 就是一个 Java 类。类就会有一系列的属性和方法。了解这些可以看详细的 API 文档。这里不再赘述。<br>网页有静态和动态之分。静态的只能看看，而动态可以实现客户端和服务器的交互。比如登录的功能，我们输入用户名和密码后提交到服务器，服务器会处理这些信息，如果正确的话则进入主页。若不正确，则给出提示信息。<br>Servlet 是 Java 中用在 BS 架构下，客户端请求的响应处理。</p>
<h2 id="Servlet-执行原理"><a href="#Servlet-执行原理" class="headerlink" title="Servlet 执行原理"></a>Servlet 执行原理</h2><p>点击后方链接了解 Servlet 执行原理。<a href="https://blog.csdn.net/u010452388/article/details/80395679">https://blog.csdn.net/u010452388/article/details/80395679</a></p>
<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><h3 id="一个-Servlet-对应一个映射"><a href="#一个-Servlet-对应一个映射" class="headerlink" title="一个 Servlet 对应一个映射"></a>一个 Servlet 对应一个映射</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="一个-Servlet-对应多个映射"><a href="#一个-Servlet-对应多个映射" class="headerlink" title="一个 Servlet 对应多个映射"></a>一个 Servlet 对应多个映射</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloServlet02<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="一个-Servlet-指定通用映射"><a href="#一个-Servlet-指定通用映射" class="headerlink" title="一个 Servlet 指定通用映射"></a>一个 Servlet 指定通用映射</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloServlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="默认请求映射（不建议使用，会覆盖-index-页面）"><a href="#默认请求映射（不建议使用，会覆盖-index-页面）" class="headerlink" title="默认请求映射（不建议使用，会覆盖 index 页面）"></a>默认请求映射（不建议使用，会覆盖 index 页面）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="指定后缀的映射"><a href="#指定后缀的映射" class="headerlink" title="指定后缀的映射"></a>指定后缀的映射</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--localhost:8080/123/456.hello 也是能正常访问的，只要是以 .hello 结尾都可以--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="映射优先级"><a href="#映射优先级" class="headerlink" title="映射优先级"></a>映射优先级</h3><ul>
<li>  精确路径匹配。例子：servletA 的映射为 /test，servletB 的为 /* ，这个时候，如果我访问 localhost/test，这个时候容器就会先进行精确路径匹配，发现 /test 正好被 servletA 精确匹配，那么就去调用 servletA，也就不会去理会其他的 servlet 了。</li>
<li>  最长路径匹配。例子：servletA 的映射为 /test/，而 servletB 的为 /test/a/，此时访问 localhost/test/a 时，容器会选择路径最长的 servlet 来匹配，也就是这里的 servletB。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(三)</title>
    <url>/2021/07/16/javaweb-basis03/</url>
    <content><![CDATA[<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p>ServletContext 官方叫 servlet 上下文。服务器会为每一个工程创建一个对象，这个对象就是 ServletContext 对象。这个对象全局唯一，而且工程内部的所有 servlet 都共享这个对象。所以叫全局应用程序共享对象。<img data-src="/images/javaweb-basis03.md-0.png"></p>
<h2 id="ServletContext-作用"><a href="#ServletContext-作用" class="headerlink" title="ServletContext 作用"></a>ServletContext 作用</h2><ul>
<li>  是一个域对象，域对象是服务器在内存上创建的存储空间，用于在不同动态资源之间传递与共享数据。</li>
<li>  可以读取全局配置参数</li>
<li>  可以读取当前工程目录下面的资源文件</li>
</ul>
<h3 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sa<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.SetAttribute<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sa<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/sa<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ga<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.GetAttribute<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ga<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ga<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SetAttribute</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        getServletContext().setAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;用户名写入到 servletContext 成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">GetAttribute</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> username = (<span class="type">String</span>) getServletContext().getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;从 servletContext 读取到的用户名为：&quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要先访问 localhost:8080/JavaWeb/sa 将数据写入到 servletConetext，才能在访问 localhost:8080/JavaWeb/ga 时取得到数据，否则取出来的是 null。</p>
<h3 id="读取全局配置参数"><a href="#读取全局配置参数" class="headerlink" title="读取全局配置参数"></a>读取全局配置参数</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.GetParam<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/gp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.<span class="type">ServletException</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">GetParam</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> name = getServletContext().getInitParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;读取到的全局配置参数值为：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="读取当前工程目录下面的资源文件"><a href="#读取当前工程目录下面的资源文件" class="headerlink" title="读取当前工程目录下面的资源文件"></a>读取当前工程目录下面的资源文件</h3><p>所有的资源文件都会被打包到同一个路径下，/WEB-INF/classes，俗称这个路径为 classpath。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gr<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.GetResources<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gr<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/gr<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetResources</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream is = getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        String username = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(username + <span class="string">&quot;:&quot;</span> + password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出了：root:root</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(四)</title>
    <url>/2021/07/17/javaweb-basis04/</url>
    <content><![CDATA[<h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><h3 id="向浏览器发送数据"><a href="#向浏览器发送数据" class="headerlink" title="向浏览器发送数据"></a>向浏览器发送数据</h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<p>getOutputStream() 用于返回字节输出流对象，Servlet 程序可以按字节形式输出响应正文。<br>getWriter() 用于返回字符输出流对象，Servlet 程序可以按字符形式输出响应正文。<br>getOutputStream() 和 getWriter() 这两个方法互相排斥，同一个 response 对象调用了其中的任何一个方法后，就不能再调用另一方法。</p>
<h3 id="向浏览器发送响应头"><a href="#向浏览器发送响应头" class="headerlink" title="向浏览器发送响应头"></a>向浏览器发送响应头</h3><p>HTTP 响应头用于告诉客户端：发送回来的内容的类型、有多少内容被正在发送以及发送内容的服务器的类型等等。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsHeader</span><span class="params">(<span class="keyword">String</span> var1)</span></span>;   <span class="comment">//返回一个布尔值指示是否设置了响应头。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(<span class="keyword">String</span> var1, <span class="keyword">String</span> var2)</span></span>;    <span class="comment">//用于一个给定的名称和字符串设置响应头的通用方式。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(<span class="keyword">String</span> var1, <span class="keyword">String</span> var2)</span></span>;    <span class="comment">//用于在 response 中添加一个给定名称和字符串的响应头，而不管是否已经存在同名的报头。该方法允许响应头有多个值。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(<span class="keyword">String</span> var1)</span></span>;      <span class="comment">//用于设置返回客户端内容的 MIME 类型</span></span><br></pre></td></tr></table></figure>

<h3 id="常见响应状态码"><a href="#常见响应状态码" class="headerlink" title="常见响应状态码"></a>常见响应状态码</h3><ul>
<li>  200（成功）服务器已成功处理了请求。</li>
<li>  301（永久移动）请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</li>
<li>  302（临时移动）服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li>
<li>  401（未授权）请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li>
<li>  403（禁止）服务器拒绝请求。</li>
<li>  404（未找到）服务器找不到请求的网页。</li>
</ul>
<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dl<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.Download<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dl<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dl<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Download</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取要下载的文件的绝对路径</span></span><br><span class="line">        String realPath = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/classes/测试.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//获取要下载的文件名，返回 realPath 这个 String 对象的一个子串，这个子串是从 String 对象中最后一次出现/的索引+1开始到最后。</span></span><br><span class="line">        String fileName = realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//设置 content-disposition 响应头控制浏览器以下载的形式打开文件，中文文件名要使用 URLEncoder.encode 方法进行编码，否则会出现文件名乱码。</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="comment">//获取文件输入流</span></span><br><span class="line">        InputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        OutputStream out = resp.getOutputStream();</span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            out.write(buffer,<span class="number">0</span>,len);      <span class="comment">//将缓冲区的数据输出到客户端浏览器</span></span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生成验证码"><a href="#生成验证码" class="headerlink" title="生成验证码"></a>生成验证码</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>vc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.VerificationCode<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>vc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/vc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerificationCode</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//浏览器每3秒刷新一次</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="comment">//设置输出类型和浏览器不保存缓存</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        <span class="comment">//创建图片对象</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>,<span class="number">20</span>,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        Graphics2D g = (Graphics2D) image.getGraphics();     <span class="comment">//创建画笔</span></span><br><span class="line">        <span class="comment">//设置图片的背景颜色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//给图片写入数据</span></span><br><span class="line">        g.setColor(Color.red);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        g.drawString(randomNum(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//将图片发送给浏览器</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpeg&quot;</span>,resp.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成6位随机数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">randomNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String num = random.nextInt(<span class="number">999999</span>) + <span class="string">&quot;&quot;</span>;     <span class="comment">//生成[0,999999)的整数</span></span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="comment">//处理生成的随机数，保证其为6位数。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>-num.length(); i++) &#123;</span><br><span class="line">            sb.append(<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>));      <span class="comment">//生成[0,10)的整数补足剩下的位数</span></span><br><span class="line">        &#125;</span><br><span class="line">        num += sb.toString();</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(五)</title>
    <url>/2021/07/17/javaweb-basis05/</url>
    <content><![CDATA[<h2 id="JavaWeb-重定向与请求转发"><a href="#JavaWeb-重定向与请求转发" class="headerlink" title="JavaWeb 重定向与请求转发"></a>JavaWeb 重定向与请求转发</h2><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p><img data-src="/images/javaweb-basis05.md-0.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>rb<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.RedirectB<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>rb<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/rb<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>rc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.RedirectC<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>rc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/rc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line">import jakarta.servlet.http.HttpServlet;</span><br><span class="line">import jakarta.servlet.http.HttpServletRequest;</span><br><span class="line">import jakarta.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> RedirectB extends HttpServlet &#123;</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求携带的 id（localhost:8080/JavaWeb/rb?id=123）</span></span><br><span class="line">        String id = req.get<span class="constructor">Parameter(<span class="string">&quot;id&quot;</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;A 对 B 说：帮我拿下快递，id 号是:&quot;</span> + id);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;B 对 A 说：我没有空，你找 C。&quot;</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        resp.send<span class="constructor">Redirect(<span class="string">&quot;/JavaWeb/rc&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws IOException &#123;</span><br><span class="line">        <span class="keyword">do</span><span class="constructor">Get(<span class="params">req</span>, <span class="params">resp</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">RedirectC</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取请求携带的id</span></span><br><span class="line">        <span class="type">String</span> id = req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;A 对 C 说，帮我拿下快递，id 号是：&quot;</span> + id);</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;拿到快递了。&quot;</span>);</span><br><span class="line">        <span class="comment">//将信息返回给浏览器</span></span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;拿到快递了。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出了：<br>A 对 B 说：帮我拿下快递，id 号是:123<br>B 对 A 说：我没有空，你找 C。<br>-—分割线—-<br>A 对 C 说，帮我拿下快递，id 号是：null<br>拿到快递了。</p>
<p>从结果可以看出 servlet 不能共享 request，且浏览器地址会发生改变。可以跳转到任意资源，且请求路径是绝对路径。</p>
<h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><p><img data-src="/images/javaweb-basis05.md-1.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>fb<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.ForwardB<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>fb<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/fb<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>fc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.ForwardC<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>fc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/fc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.<span class="type">RequestDispatcher</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.<span class="type">ServletException</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ForwardB</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="comment">// 获取请求携带的id（localhost:8080/JavaWeb/rb?id=456）</span></span><br><span class="line">        <span class="type">String</span> id = req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;A对B说：帮我拿下快递，id号是:&quot;</span> + id);</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;B对A说：好的。&quot;</span>);</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;----分割线----&quot;</span>);</span><br><span class="line">        <span class="comment">//请求转发，并将请求和响应一并转发过去。</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/fc&quot;</span>).forward(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ForwardC</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取请求携带的id</span></span><br><span class="line">        <span class="type">String</span> id = req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;B 对 C 说，帮我拿下快递，id 号是：&quot;</span> + id);</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;拿到快递了。&quot;</span>);</span><br><span class="line">        <span class="comment">//将信息返回给浏览器</span></span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;拿到快递了。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出了：<br>A对B说：帮我拿下快递，id号是:456<br>B对A说：好的。<br>-—分割线—-<br>B 对 C 说，帮我拿下快递，id 号是：456<br>拿到快递了。</p>
<p>从结果可以看出 servlet 能共享 request，且浏览器地址不会发生改变。可以跳转到项目内部资源，且请求路径是相对路径。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(六)</title>
    <url>/2021/07/18/javaweb-basis06/</url>
    <content><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie 是客户端（一般指浏览器）请求服务器后服务器发给客户端的一个辨认标识，保存在客户端，当客户端再次向服务器发送请求时，会携带着这个辨认标识，服务器就可以通过这个标识来识别客户端的身份或状态等。<br>Cookie 的作用：跟踪会话，记录一次会话中（即 Session，一次会话可能会有多次请求，当然也可以有多个 Cookie 来跟踪不同的信息）的信息，这样服务器就会知道用户的状态。</p>
<h3 id="创建并赋值-Cookie-对象"><a href="#创建并赋值-Cookie-对象" class="headerlink" title="创建并赋值 Cookie 对象"></a>创建并赋值 Cookie 对象</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> <span class="constructor">Cookie(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;Guest997&quot;</span>)</span>;    <span class="comment">//参数是键值对的形式，并且两个参数都是字符串</span></span><br><span class="line">response.add<span class="constructor">Cookie(<span class="params">cookie</span>)</span>;     <span class="comment">//将 Cookie 发送给浏览器</span></span><br></pre></td></tr></table></figure>

<h3 id="获取客户端携带的-Cookie"><a href="#获取客户端携带的-Cookie" class="headerlink" title="获取客户端携带的 Cookie"></a>获取客户端携带的 Cookie</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Cookie<span class="literal">[]</span> cookies = req.get<span class="constructor">Cookies()</span>;</span><br><span class="line">        <span class="keyword">if</span> (cookies != null) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">                String name = c.get<span class="constructor">Name()</span>;            <span class="comment">//获取 Cookie 的键</span></span><br><span class="line">                <span class="keyword">if</span> (c.equals(<span class="string">&quot;username&quot;</span>)) &#123;</span><br><span class="line">                    String value = c.get<span class="constructor">Value()</span>;    <span class="comment">//获取 Cookie 的值</span></span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>value<span class="constructor">Of(<span class="params">value</span>)</span>;         <span class="comment">//转成 int 类型，如果要转成其它基本数据类型都有 valueOf() 这样的方法</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改-Cookie"><a href="#修改-Cookie" class="headerlink" title="修改 Cookie"></a>修改 Cookie</h3><p>Cookie 一旦发送给浏览器，那么服务器将不能直接修改，但是可以通过使用同名 Cookie 来替换浏览器已有 Cookie 的方式来间接地修改。浏览器收到新 Cookie 以后，就会将老的 Cookie 销毁，使用新的 Cookie。</p>
<h3 id="设置-Cookie-的有效时间"><a href="#设置-Cookie-的有效时间" class="headerlink" title="设置 Cookie 的有效时间"></a>设置 Cookie 的有效时间</h3><p>Cookie 发送给浏览器以后，浏览器并不会永久保存，也就是到了一定的时间以后浏览器会自动销毁 Cookie。Cookie 的默认有效时间为一次会话（一次打开关闭浏览器的过程），我们还可以手动指定 Cookie 的有效时间。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>当参数大于<span class="number">0</span>时，会设置为指定的秒数</span><br><span class="line">cookie.setMaxAge(<span class="number">30</span>);</span><br><span class="line"><span class="regexp">//</span>当参数等于<span class="number">0</span>时，浏览器不会保存 Cookie，Cookie 立即失效。</span><br><span class="line">cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line"><span class="regexp">//</span>当参数小于<span class="number">0</span>时，和不设置是一样的，只是当前会话有效。</span><br><span class="line">cookie.setMaxAge(-<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<h3 id="删除-Cookie"><a href="#删除-Cookie" class="headerlink" title="删除 Cookie"></a>删除 Cookie</h3><p>通过设置同名 Cookie 的最大存活时间为0，删除 Cookie 是指使浏览器不再保存 Cookie，使 Cookie 立即失效。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> <span class="constructor">Cookie(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;Guest997&quot;</span>)</span>;</span><br><span class="line"><span class="comment">//设置 cookie 的有效时间为0</span></span><br><span class="line">cookie.set<span class="constructor">MaxAge(0)</span>;</span><br><span class="line"><span class="comment">//将 cookie 发送给浏览器，来替换同名 cookie</span></span><br><span class="line">response.add<span class="constructor">Cookie(<span class="params">cookie</span>)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Cookie-应用场景"><a href="#Cookie-应用场景" class="headerlink" title="Cookie 应用场景"></a>Cookie 应用场景</h3><ul>
<li>  记住密码</li>
<li>  自动登录</li>
<li>  第几次访问</li>
<li>  浏览进度</li>
</ul>
<h3 id="Cookie-实例"><a href="#Cookie-实例" class="headerlink" title="Cookie 实例"></a>Cookie 实例</h3><p>在网页上显示最后一次登录时间。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ll<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.LastLogin<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ll<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ll<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LastLogin</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//防止乱码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        <span class="comment">//通过 Request 对象获取请求中的 Cookies</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="comment">//获取每一个 Cookie 的名称</span></span><br><span class="line">                String name = cookie.getName();</span><br><span class="line">                <span class="comment">//判断是否存在一个名为 lastLogin 的 Cookie</span></span><br><span class="line">                <span class="keyword">if</span>(name.equals(<span class="string">&quot;lastLogin&quot;</span>))&#123;</span><br><span class="line">                    <span class="comment">//如果存在，说明不是第一次登录，显示最后一次登录的时间。</span></span><br><span class="line">                    out.write(<span class="string">&quot;最后一次登录时间为：&quot;</span> + URLDecoder.decode(cookie.getValue(),<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            out.write(<span class="string">&quot;你是第一次访问该页面。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建用于记录最后一次登录时间的 Cookie 实例对象</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;lastLogin&quot;</span>, URLEncoder.encode(<span class="keyword">new</span> Date().toString(),<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        <span class="comment">// 将 Cookie 实例对象添加到 Response 对象中</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>new Date() 创建的日期中有空格，而 Cookie 参数中是不允许有空格存在的，所以需要将日期进行编码，再在取出来的时候进行解码。</p>
<p>在你第一次访问页面时会发现，并没有在页面输出：你是第一次访问该页面。那是因为访问时还携带了别的 Cookie，可以在浏览器的开发者模式下，删除所有的 Cookie，再进行访问就会显示了。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(七)</title>
    <url>/2021/07/18/javaweb-basis07/</url>
    <content><![CDATA[<h2 id="Session（重要）"><a href="#Session（重要）" class="headerlink" title="Session（重要）"></a>Session（重要）</h2><p><strong>Session 其实分为客户端 Session 和服务端 Session。</strong></p>
<p>当用户首次与 Web 服务器建立连接的时候，服务器会给用户分发一个 SessionID 作为标识。用户每次提交页面，浏览器都会把这个 SessionID 包含在 HTTP 头中提交给 Web 服务器，最后在 Web 服务器中根据 Session ID 寻找相应的对象。这样 Web 服务器就能区分当前请求页面的是哪一个客户端。<br>其实客户端 Session 默认是以 Cookie 的形式来存储的，客户端 Session 就只保存 SessionID 到 Cookie 中，而不会保存 Session。所以客户端 Session 可以说就是一个 Cookie。不过当用户禁用了 Cookie 的话，服务器端就得不到 SessionID。这时我们可以使用 URL 的方式来存储客户端 Session。也就是将 SessionID 直接写在了 URL 中，不过这种方法不常用。</p>
<h3 id="创建并赋值-Session-对象"><a href="#创建并赋值-Session-对象" class="headerlink" title="创建并赋值 Session 对象"></a>创建并赋值 Session 对象</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>使用 Request 对象的 getSession() 获取 Session，如果 Session 不存在则自动创建一个。</span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line"><span class="regexp">//</span>将数据存储到 Session 中</span><br><span class="line">session.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;Guest997&quot;</span>);   <span class="regexp">//</span>第二个参数可以是一个对象</span><br></pre></td></tr></table></figure>

<h3 id="获取客户端-Session（其实就是获取-SessionID）"><a href="#获取客户端-Session（其实就是获取-SessionID）" class="headerlink" title="获取客户端 Session（其实就是获取 SessionID）"></a>获取客户端 Session（其实就是获取 SessionID）</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取 SessionId</span></span><br><span class="line">String sessionId = session.get<span class="constructor">Id()</span>;</span><br><span class="line"><span class="comment">//判断 session 是不是新创建的</span></span><br><span class="line"><span class="keyword">if</span> (session.is<span class="constructor">New()</span>) &#123;</span><br><span class="line">    response.get<span class="constructor">Writer()</span>.write(<span class="string">&quot;Session 创建成功，SessionID 是：&quot;</span> + sessionId);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    response.get<span class="constructor">Writer()</span>.write(<span class="string">&quot;服务器已经存在该 Session 了，SessionID 是：&quot;</span> + sessionId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置-Session-的有效时间"><a href="#设置-Session-的有效时间" class="headerlink" title="设置 Session 的有效时间"></a>设置 Session 的有效时间</h3><p>Session 默认有效期是30分钟。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">session</span>.setMaxInactiveInterval(<span class="number">60</span>*<span class="number">60</span>);     //以秒为单位</span><br><span class="line"><span class="attribute">session</span>.setMaxInactiveInterval(-<span class="number">1</span>);      //设置为-<span class="number">1</span>则表示永不过期</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以分钟为单位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>60<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="销毁-Session"><a href="#销毁-Session" class="headerlink" title="销毁 Session"></a>销毁 Session</h3><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">session.invalidate()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h3 id="Session-应用场景"><a href="#Session-应用场景" class="headerlink" title="Session 应用场景"></a>Session 应用场景</h3><ul>
<li>  用户是否登录</li>
<li>  用户当前身份</li>
<li>  多页面数据共用</li>
</ul>
<h3 id="Session-实例"><a href="#Session-实例" class="headerlink" title="Session 实例"></a>Session 实例</h3><p>在不同的 Servlet 之间传递与共享数据</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ss<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.SetSession<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ss<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ss<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gs<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.GetSession<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gs<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/gs<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>60<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> int age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Person</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Person</span>(<span class="params"><span class="built_in">String</span> name, int age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setName</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> int <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setAge</span>(<span class="params">int age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.<span class="type">ServletException</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpSession</span>;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.<span class="type">Person</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SetSession</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//创建并赋值 Session 对象</span></span><br><span class="line">        <span class="type">HttpSession</span> session = req.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>,<span class="keyword">new</span> <span class="type">Person</span>(<span class="string">&quot;Guest997&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;成功将用户信息存在 Session 中。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetSession</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取 Session 对象</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        Person person = (Person) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历 Session 对象属性和值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field[] declaredFields = person.getClass().getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">                <span class="comment">//设置允许通过反射访问私有变量</span></span><br><span class="line">                declaredField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                String name = declaredField.getName();</span><br><span class="line">                String value = declaredField.get(person).toString();</span><br><span class="line">                resp.getWriter().write(name + <span class="string">&quot;:&quot;</span> + value + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先访问 localhost:8080/JavaWeb/ss 将数据存入 Session 中，再在 localhost:8080/JavaWeb/gs 中取出数据并显示。<br>结果为：<br>name:Guest997<br>age:18</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(八)</title>
    <url>/2021/07/19/javaweb-basis08/</url>
    <content><![CDATA[<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>JSP 全称是 Java Server Pages，它和 Servlet 技术一样，都是用于开发动态 Web 资源的技术。<br>JSP 这门技术的最大的特点在于，写 jsp 就像在写 html，但它相比 html 而言，html 只能为用户提供静态内容，而 JSP 技术允许在页面中嵌套 java 代码，为用户提供动态数据。</p>
<h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><p>当第一次访问 jsp 页面时，会向一个 Servlet 容器发出请求，Servlet 容器先要把 jsp 页面转化为 Servlet 代码（.java），再编译成 .class 文件进行调用，最后将执行结果响应给客户端。当再次访问 jsp 页面时，跳过翻译和编译的过程直接调用。</p>
<h3 id="JSP-语法"><a href="#JSP-语法" class="headerlink" title="JSP 语法"></a>JSP 语法</h3><h4 id="JSP-注释"><a href="#JSP-注释" class="headerlink" title="JSP 注释"></a>JSP 注释</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP 注释--%&gt;</span><br><span class="line"><span class="comment">&lt;!--HTML 注释--&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML 注释的内容会输出到浏览器端，在浏览器端查看网页源代码可以看到 HTML 注释的内容，而 JSP 注释的内容则查看不到。</p>
<h4 id="JSP-表达式"><a href="#JSP-表达式" class="headerlink" title="JSP 表达式"></a>JSP 表达式</h4><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">&lt;%--用于将已经声明的变量或者表达式输出到网页上，尾部不能有分号--%&gt;</span><br><span class="line">&lt;%= 变量或表达式 %&gt;</span><br><span class="line">&lt;%=new java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="JSP脚本"><a href="#JSP脚本" class="headerlink" title="JSP脚本"></a>JSP脚本</h4><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP 脚本执行 Java 代码--%&gt;</span><br><span class="line">&lt;% JSP 脚本部分 %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">sum</span> += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">out</span>.<span class="built_in">print</span>(<span class="built_in">sum</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意：上面讲到的语法都会被编译到 jsp 生成 java 的 _jspService 方法中。</strong></p>
<h4 id="JSP-声明"><a href="#JSP-声明" class="headerlink" title="JSP 声明"></a>JSP 声明</h4><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP 声明用于声明变量和方法--%&gt;</span><br><span class="line">&lt;%! JSP 声明部分 %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="comment">//声明一个整型变量</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="comment">//声明一个方法</span></span><br><span class="line">    public String info() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意：JSP 声明会被编译到 jsp 生成 java 的类中。</strong></p>
<h3 id="JSP-指令"><a href="#JSP-指令" class="headerlink" title="JSP 指令"></a>JSP 指令</h3><p>一般都会把 JSP 指令放到 jsp 文件的最上方，<strong>但这不是必须的。</strong></p>
<h4 id="contentType"><a href="#contentType" class="headerlink" title="contentType"></a>contentType</h4><p>contentType 用于定义网络文件的类型和网页的编码。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;%@<span class="built_in"> page </span><span class="attribute">contentType</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><p>导入包。</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">&lt;%@ page import=<span class="string">&quot;java.util.*&quot;</span> %&gt;</span><br><span class="line">&lt;%=new Date()%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="isErrorPage"><a href="#isErrorPage" class="headerlink" title="isErrorPage"></a>isErrorPage</h4><p>在一个 jsp 页面出错后，Tomcat 会响应给我用户错误信息，如果你不希望 Tomcat 给用户输出错误信息，那么可以使用page 指令的 isErrorPage 来指定错误页。</p>
<figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">&lt;%--404.jsp--%&gt;</span></span><br><span class="line"><span class="attribute">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;%@page isErrorPage=&quot;true&quot; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;html&gt;</span></span><br><span class="line"><span class="attribute">&lt;head&gt;</span></span><br><span class="line">    <span class="attribute">&lt;title&gt;</span>404页面<span class="attribute">&lt;/title&gt;</span></span><br><span class="line"><span class="attribute">&lt;/head&gt;</span></span><br><span class="line"><span class="attribute">&lt;body&gt;</span></span><br><span class="line">    <span class="attribute">&lt;h1&gt;</span>发生了404错误，找不到资源！<span class="attribute">&lt;/h1&gt;</span></span><br><span class="line"><span class="attribute">&lt;/body&gt;</span></span><br><span class="line"><span class="attribute">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>../error/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><p>include 指令表示静态包含其它 jsp 页面，会把所有 jsp 页面合并成一个文件，然后再编译成 Servlet。</p>
<figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">&lt;%--header.jsp--%&gt;</span></span><br><span class="line"><span class="attribute">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;h1&gt;</span>我是 header.<span class="attribute">&lt;/h1&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">&lt;%--footer.jsp--%&gt;</span></span><br><span class="line"><span class="attribute">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;h1&gt;</span>我是 footer.<span class="attribute">&lt;/h1&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%-</span><span class="ruby">-index.jsp-</span><span class="xml">-%&gt;</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"><span class="variable">@include</span> file=<span class="string">&quot;common/header.jsp&quot;</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"><span class="variable">@include</span> file=<span class="string">&quot;common/footer.jsp&quot;</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(九)</title>
    <url>/2021/07/19/javaweb-basis09/</url>
    <content><![CDATA[<h2 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h2><ul>
<li>  pageContext（存东西）</li>
<li>  request（存东西）</li>
<li>  response</li>
<li>  session（存东西）</li>
<li>  application(ServletContext)（存东西）</li>
<li>  config(ServletConfig)</li>
<li>  out</li>
<li>  page（不用了解）</li>
<li>  exception</li>
</ul>
<p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻。</p>
<p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车。</p>
<p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据。</p>
<h2 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.<span class="built_in">setAttribute</span>(<span class="string">&quot;name01&quot;</span>,<span class="string">&quot;Guest01&quot;</span>);  <span class="comment">//保存的数据只在一个页面中有效</span></span><br><span class="line">    request.<span class="built_in">setAttribute</span>(<span class="string">&quot;name02&quot;</span>,<span class="string">&quot;Guest02&quot;</span>);      <span class="comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据。</span></span><br><span class="line">    session.<span class="built_in">setAttribute</span>(<span class="string">&quot;name03&quot;</span>,<span class="string">&quot;Guest03&quot;</span>);      <span class="comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器。</span></span><br><span class="line">    application.<span class="built_in">setAttribute</span>(<span class="string">&quot;name04&quot;</span>,<span class="string">&quot;Guest04&quot;</span>);  <span class="comment">//保存的数据在服务器中有效，从打开服务器到关闭服务器。</span></span><br><span class="line">    <span class="comment">//在页面中寻找属性</span></span><br><span class="line">    <span class="keyword">String</span> name01 = (<span class="keyword">String</span>) pageContext.<span class="built_in">findAttribute</span>(<span class="string">&quot;name01&quot;</span>);</span><br><span class="line">    <span class="keyword">String</span> name02 = (<span class="keyword">String</span>) pageContext.<span class="built_in">findAttribute</span>(<span class="string">&quot;name02&quot;</span>);</span><br><span class="line">    <span class="keyword">String</span> name03 = (<span class="keyword">String</span>) pageContext.<span class="built_in">findAttribute</span>(<span class="string">&quot;name03&quot;</span>);</span><br><span class="line">    <span class="keyword">String</span> name04 = (<span class="keyword">String</span>) pageContext.<span class="built_in">findAttribute</span>(<span class="string">&quot;name04&quot;</span>);</span><br><span class="line">    <span class="keyword">String</span> name05 = (<span class="keyword">String</span>) pageContext.<span class="built_in">findAttribute</span>(<span class="string">&quot;name05&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--el 表达式--%&gt;</span><br><span class="line">$&#123;name01&#125;</span><br><span class="line">$&#123;name02&#125;</span><br><span class="line">$&#123;name03&#125;</span><br><span class="line">$&#123;name04&#125;</span><br><span class="line">$&#123;name05&#125;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%=name01%&gt;</span><br><span class="line">&lt;%=name02%&gt;</span><br><span class="line">&lt;%=name03%&gt;</span><br><span class="line">&lt;%=name04%&gt;</span><br><span class="line">&lt;%=name05%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>从结果可以看出，el 表达式输出不存在的变量，不会显示任何东西在页面上，而使用 JSP 表达式会输出 null 在页面上。这样的结果是我们不愿意看到的，所以建议使用 el 表达式输出页面内容。</p>
<h2 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h2><p>在上面的基础上再创建一个 jsp 页面。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    //在页面中寻找属性</span><br><span class="line">    //作用域从低到高：pageContext-&gt;request-&gt;session-&gt;application</span><br><span class="line">    <span class="keyword">String</span> name01 = (<span class="keyword">String</span>) pageContext.findAttribute(<span class="string">&quot;name01&quot;</span>);</span><br><span class="line">    <span class="keyword">String</span> name02 = (<span class="keyword">String</span>) pageContext.findAttribute(<span class="string">&quot;name02&quot;</span>);</span><br><span class="line">    <span class="keyword">String</span> name03 = (<span class="keyword">String</span>) pageContext.findAttribute(<span class="string">&quot;name03&quot;</span>);</span><br><span class="line">    <span class="keyword">String</span> name04 = (<span class="keyword">String</span>) pageContext.findAttribute(<span class="string">&quot;name04&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--el 表达式--%&gt;</span><br><span class="line"><span class="variable">$&#123;name01&#125;</span></span><br><span class="line"><span class="variable">$&#123;name02&#125;</span></span><br><span class="line"><span class="variable">$&#123;name03&#125;</span></span><br><span class="line"><span class="variable">$&#123;name04&#125;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>从结果可以看出，只输出了 name03 和 name04。</p>
<h2 id="测试三"><a href="#测试三" class="headerlink" title="测试三"></a>测试三</h2><figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"></span></span><br><span class="line"><span class="ruby">    pageContext.setAttribute(<span class="string">&quot;name01&quot;</span>,<span class="string">&quot;Guest01&quot;</span>);</span></span><br><span class="line"><span class="ruby">    request.setAttribute(<span class="string">&quot;name02&quot;</span>,<span class="string">&quot;Guest02&quot;</span>);</span></span><br><span class="line"><span class="ruby">    session.setAttribute(<span class="string">&quot;name03&quot;</span>,<span class="string">&quot;Guest03&quot;</span>);</span></span><br><span class="line"><span class="ruby">    application.setAttribute(<span class="string">&quot;name04&quot;</span>,<span class="string">&quot;Guest04&quot;</span>);</span></span><br><span class="line"><span class="ruby">    <span class="regexp">//</span>请求转发</span></span><br><span class="line"><span class="ruby">    pageContext.forward(<span class="string">&quot;getData02.jsp&quot;</span>);</span></span><br><span class="line"><span class="ruby"></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    //在页面中寻找属性</span><br><span class="line">    <span class="keyword">String</span> name01 = (<span class="keyword">String</span>) pageContext.findAttribute(<span class="string">&quot;name01&quot;</span>);</span><br><span class="line">    <span class="keyword">String</span> name02 = (<span class="keyword">String</span>) pageContext.findAttribute(<span class="string">&quot;name02&quot;</span>);</span><br><span class="line">    <span class="keyword">String</span> name03 = (<span class="keyword">String</span>) pageContext.findAttribute(<span class="string">&quot;name03&quot;</span>);</span><br><span class="line">    <span class="keyword">String</span> name04 = (<span class="keyword">String</span>) pageContext.findAttribute(<span class="string">&quot;name04&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--el 表达式--%&gt;</span><br><span class="line"><span class="variable">$&#123;name01&#125;</span></span><br><span class="line"><span class="variable">$&#123;name02&#125;</span></span><br><span class="line"><span class="variable">$&#123;name03&#125;</span></span><br><span class="line"><span class="variable">$&#123;name04&#125;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>从结果可以看出，输出了 name02、name03 和 name04。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(十)</title>
    <url>/2021/07/20/javaweb-basis10/</url>
    <content><![CDATA[<h2 id="JSP-标签"><a href="#JSP-标签" class="headerlink" title="JSP 标签"></a>JSP 标签</h2><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">%--</span>动态包含其它 jsp 页面，本质上还是多个 jsp 文件--%&gt;</span><br><span class="line">&lt;<span class="meta">%--jsp:include--</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="meta">%--</span>请求转发</span><br><span class="line">localhost:<span class="number">8080</span>/jspLabel.jsp<span class="built_in">?name</span>=Guest997&amp;age=<span class="number">18</span></span><br><span class="line">--%&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">jsp:forward</span> <span class="attr">page</span>=<span class="string">&quot;/jspLabel2.jsp&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">jsp:param</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Guest997&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:param</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">jsp:param</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:param</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">jsp:forward</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="EL-表达式"><a href="#EL-表达式" class="headerlink" title="EL 表达式"></a>EL 表达式</h2><p>EL 表达式提供 . 和 [ ] 两种运算符来取数据。<br>当要存取的属性名称中包含一些特殊字符，如 - 或 ? 等并非字母或数字的符号，就一定要使用 [ ]。例如：${user.My-Name} 应当改为 ${user[“My-Name”] }</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">%--</span>等价于 request.getParameter(String<span class="built_in"> name</span>)  获得相应名的数据，如果有重复的名，则返回第一个的值。--%&gt;</span><br><span class="line">$&#123;param<span class="built_in">.name</span>&#125;</span><br><span class="line">&lt;<span class="meta">%--</span>等价于 request.getParameterValues(String<span class="built_in"> name</span>)  获得相应名的数据的数组变量--%&gt;</span><br><span class="line">$&#123;paramValues<span class="built_in">.name</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSTL-标签"><a href="#JSTL-标签" class="headerlink" title="JSTL 标签"></a>JSTL 标签</h2><p>JSTL 标签库的使用就是为了弥补 HTML 标签的不足；它定义了许多标签供我们使用，功能和 Java 代码一样。</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSTL 标签的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.web<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglibs-standard-spec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="核心标签"><a href="#核心标签" class="headerlink" title="核心标签"></a>核心标签</h3><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;<span class="meta">%--</span>引入 JSTL 核心标签库--%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%--提交给当前页--%&gt;</span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;?&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%--判断如果提交的用户名是 admin，则显示登录成功。--%&gt;</span></span><br><span class="line"><span class="xml">&lt;%--c:if 不支持 ifesle 判断--%&gt;</span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;param.username == &#x27;admin&#x27;&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;isAdmin&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;isAdmin&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">c:out</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">&quot;登录成功！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">c:out</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>如果想实现 ifelse 判断，可以如下进行修改。</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;<span class="meta">%--</span>引入 JSTL 核心标签库--%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%--提交给当前页--%&gt;</span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;?&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%--判断如果提交的用户名是管理员，则显示登录成功，否则显示登录失败--%&gt;</span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;param.username == &#x27;admin&#x27;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">&quot;登录成功！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">c:out</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">&quot;登录失败！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">c:out</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>实现多选择结构</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;<span class="meta">%--</span>引入 JSTL 核心标签库--%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%--创建一个变量并赋值--%&gt;</span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">&quot;score&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;score &gt;=60 &amp;&amp; score &lt;= 100&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">&quot;你及格了。&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">c:out</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;score &gt;=0 &amp;&amp; score &lt; 60&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">C:out</span> <span class="attr">value</span>=<span class="string">&quot;你不及格。&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">C:out</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">&quot;输入的成绩不合法。&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">c:out</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>forEach 循环</p>
<figure class="highlight vbscript-html"><table><tr><td class="code"><pre><span class="line"><span class="vbscript">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="vbscript">&lt;%@ page import=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="vbscript">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="vbscript">&lt;%</span></span><br><span class="line"><span class="vbscript">    ArrayList&lt;String&gt; people = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="vbscript">    people.add(<span class="string">&quot;Guest997&quot;</span>);</span></span><br><span class="line"><span class="vbscript">    people.add(<span class="string">&quot;GUEST997&quot;</span>);</span></span><br><span class="line"><span class="vbscript">    people.add(<span class="string">&quot;guest997&quot;</span>);</span></span><br><span class="line"><span class="vbscript">    <span class="built_in">request</span>.setAttribute(<span class="string">&quot;people&quot;</span>,people);     //Map 和 List 都需要像这样放进 <span class="built_in">request</span> 中。</span></span><br><span class="line"><span class="vbscript">%&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">&quot;person&quot;</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;people&#125;&quot;</span> <span class="attr">begin</span>=<span class="string">&quot;0&quot;</span> <span class="attr">end</span>=<span class="string">&quot;$&#123;people.size()&#125;&quot;</span> <span class="attr">step</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;person&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">c:out</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(十一)</title>
    <url>/2021/07/20/javaweb-basis11/</url>
    <content><![CDATA[<h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>JavaBean 是特殊的 Java 类（实体类），一般用来和数据库的字段做映射 ORM（ORM：对象关系映射）。</p>
<ul>
<li>  表 —&gt; 类</li>
<li>  字段 —&gt; 属性</li>
<li>  行记录 —&gt; 对象</li>
</ul>
<p>JavaBean 有特定的写法：</p>
<ul>
<li>  必须要有一个无参构造</li>
<li>  属性必须私有化</li>
<li>  必须有对应的 get 和 set 方法</li>
</ul>
<p>之前文章创建过的 Person 类就能映射为数据库表。（JavaWeb 基础(七)）</p>
<p>name</p>
<p>age</p>
<p>Guest997</p>
<p>18</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">jsp:useBean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Person&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:useBean</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%--调用的是实体类中的 set()--%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">&quot;person&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Guest997&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:setProperty</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">&quot;person&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:setProperty</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%--调用的是实体类中的 get()--%&gt;</span></span><br><span class="line"><span class="xml">姓名：<span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">&quot;person&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">年龄：<span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">&quot;person&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">姓名：$</span><span class="template-variable">&#123;person.name&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">年龄：$</span><span class="template-variable">&#123;person.age&#125;</span><span class="xml">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">打印信息：$</span><span class="template-variable">&#123;person.toString()&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><h3 id="视图-View"><a href="#视图-View" class="headerlink" title="视图 (View)"></a>视图 (View)</h3><p>负责页面的显示与用户的交互。</p>
<h3 id="模型-Model"><a href="#模型-Model" class="headerlink" title="模型 (Model)"></a>模型 (Model)</h3><p>负责各个功能的实现（如登录、增加、删除功能）。模型用 JavaBean 实现。</p>
<p>JavaBean 分为2大类：</p>
<ul>
<li>  封装业务逻辑的 JavaBean。</li>
<li>  封装数据的 JavaBean。</li>
</ul>
<h3 id="控制器-Controller"><a href="#控制器-Controller" class="headerlink" title="控制器 (Controller)"></a>控制器 (Controller)</h3><p>控制器负责将视图与模型一一对应起来。相当于一个模型分发器。所谓分发就是：</p>
<ul>
<li>  接收请求，并将该请求跳转（转发，重定向）到模型进行处理。</li>
<li>  模型处理完毕后，再通过控制器，返回给视图中的请求处。</li>
</ul>
<h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>三层架构与 MVC 的目标一致：都是为了解耦和、提高代码复用。MVC 是一种设计模式，而三层架构是一种软件架构。</p>
<p><strong>三层架构分为：表现层（UIL）(Web 层)、业务逻辑层（BLL）(Service 层)、数据访问层（DAL）(Dao 层)，再加上实体类库（Model）。</strong></p>
<ul>
<li>  实体类库（Model）：数据库中用于存放数据，而我们通常选择会用一个专门的类来抽象出数据表的结构，类的属性就一对一的对应这表的属性。一般来说，Model 实体类库层需要被 DAL 层，BIL 层和 UIL 层引用。</li>
<li>  数据访问层（DAL）：主要是存放对数据类的访问，即对数据库的添加、删除、修改、更新等基本操作。DAL 就是根据业务需求，构造 SQL 语句、构造参数、调用帮助类以及获取结果。DAL 层被 BIL 层调用。</li>
<li>  业务逻辑层（BLL）BLL 层好比是桥梁，将 UIL 表现层与 DAL 数据访问层之间联系起来。所要负责的就是处理涉及业务逻辑相关的问题，比如在调用访问数据库之前，先处理数据、判断数据。BLL 层只被 UIL 层引用。</li>
<li>  用户表现层（UIL）就是用户看到的主界面。</li>
</ul>
<h2 id="MVC-与三层架构的对应关系"><a href="#MVC-与三层架构的对应关系" class="headerlink" title="MVC 与三层架构的对应关系"></a>MVC 与三层架构的对应关系</h2><p><img data-src="/images/javaweb-basis11.md-0.png"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(十二)</title>
    <url>/2021/07/21/javaweb-basis12/</url>
    <content><![CDATA[<h2 id="过滤器（Filter）（重要）"><a href="#过滤器（Filter）（重要）" class="headerlink" title="过滤器（Filter）（重要）"></a>过滤器（Filter）（重要）</h2><p>点击后方链接了解 Filter 工作原理。<a href="https://www.runoob.com/w3cnote/filter-filterchain-filterconfig-intro.html">https://www.runoob.com/w3cnote/filter-filterchain-filterconfig-intro.html</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ss<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.ShowServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ss<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/ss<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ss<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ss<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>ml.guest997.filter.CharsetFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置要过滤的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.<span class="type">ServletException</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ShowServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;你好！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharsetFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter 初始化！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//下一行代码一定要写，因为过滤器会拦截请求和响应，处理完之后需要将请求和响应进行放行，放行给下一个过滤器或者 Servlet。</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter 已销毁！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从控制台输出的信息可以看出，初始化是在服务器启动时执行的，而销毁是在服务器关闭时执行的。<br>访问 localhost:8080/JavaWeb/ss 时文字乱码，而访问 localhost:8080/JavaWeb/servlet/ss 时文字正常显示，可以看出过滤器过滤成功了。</p>
<h2 id="监听器（Listener）"><a href="#监听器（Listener）" class="headerlink" title="监听器（Listener）"></a>监听器（Listener）</h2><p>实际开发中用的不是太多，所以了解一些基础的知识，之后遇到相关的问题再进行深究。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>ml.guest997.listener.OnlineListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">package ml.guest997.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统计网站在线人数：统计客户端 Session 个数</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OnlineListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="keyword">void</span> sessionCreated(HttpSessionEvent se) &#123;</span><br><span class="line">        ServletContext context = se.getSession().getServletContext();</span><br><span class="line">        <span class="built_in">Object</span> <span class="built_in">num</span> = context.getAttribute(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">num</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">            context.setAttribute(<span class="string">&quot;num&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">int</span> count = (<span class="built_in">int</span>) <span class="built_in">num</span>;</span><br><span class="line">            context.setAttribute(<span class="string">&quot;num&quot;</span>,count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="keyword">void</span> sessionDestroyed(HttpSessionEvent se) &#123;</span><br><span class="line">        ServletContext context = se.getSession().getServletContext();</span><br><span class="line">        <span class="built_in">Object</span> <span class="built_in">num</span> = context.getAttribute(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">num</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">            context.setAttribute(<span class="string">&quot;num&quot;</span>,<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">int</span> count = (<span class="built_in">int</span>) <span class="built_in">num</span>;</span><br><span class="line">            context.setAttribute(<span class="string">&quot;num&quot;</span>,count<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;html&gt;</span></span><br><span class="line"><span class="attribute">&lt;head&gt;</span></span><br><span class="line">    <span class="attribute">&lt;title&gt;</span>Title<span class="attribute">&lt;/title&gt;</span></span><br><span class="line"><span class="attribute">&lt;/head&gt;</span></span><br><span class="line"><span class="attribute">&lt;body&gt;</span></span><br><span class="line">在线人数为：<span class="attribute">&lt;%=application.getAttribute(&quot;num&quot;)%&gt;</span></span><br><span class="line"><span class="attribute">&lt;/body&gt;</span></span><br><span class="line"><span class="attribute">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>在创建会话时，会有以前的 Session 没销毁，导致在线人数不正确。解决方法：Redeploy Tomcat 服务器</p>
<h2 id="过滤器实现权限拦截"><a href="#过滤器实现权限拦截" class="headerlink" title="过滤器实现权限拦截"></a>过滤器实现权限拦截</h2><p>用户登录后才能够进入主页，没有登录或者注销后就不能进入主页。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.Login<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>logout<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.logout<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>logout<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/logout<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hpf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>ml.guest997.filter.HomePageFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hpf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/homePage.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">%--login</span>.jsp--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">%--homePage</span>.jsp--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;logout&quot;</span>&gt;</span>点击注销用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight vbscript-html"><table><tr><td class="code"><pre><span class="line"><span class="vbscript">&lt;%--<span class="keyword">error</span>.jsp--%&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="vbscript">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">用户名不正确或权限不足，请返回登录页面！</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;login.jsp&quot;</span>&gt;</span>点击返回登录页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> final <span class="keyword">static</span> <span class="keyword">String</span> STATE = <span class="string">&quot;state&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.<span class="type">ServletException</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.util.<span class="type">Constant</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="type">String</span> username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(username.equals(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//在 Session 中设置一个属性，记录是否是登录着的状态</span></span><br><span class="line">            req.getSession().setAttribute(<span class="type">Constant</span>.<span class="type">STATE</span>,req.getSession().getId());</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;homePage.jsp&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.<span class="type">ServletException</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.util.<span class="type">Constant</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">logout</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="type">Object</span> attribute = req.getSession().getAttribute(<span class="type">Constant</span>.<span class="type">STATE</span>);</span><br><span class="line">        <span class="keyword">if</span>(attribute != <span class="literal">null</span>)&#123;</span><br><span class="line">            req.getSession().removeAttribute(<span class="type">Constant</span>.<span class="type">STATE</span>);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.util.Constant;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomePageFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//强转获取 Session 对象</span></span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse) servletResponse;</span><br><span class="line">        Object attribute = req.getSession().getAttribute(Constant.STATE);</span><br><span class="line">        <span class="keyword">if</span>(attribute == <span class="keyword">null</span>)&#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(十三)</title>
    <url>/2021/07/21/javaweb-basis13/</url>
    <content><![CDATA[<h2 id="超市订单管理系统（SMBMS）"><a href="#超市订单管理系统（SMBMS）" class="headerlink" title="超市订单管理系统（SMBMS）"></a>超市订单管理系统（SMBMS）</h2><p>项目源码会放在我的网盘 <strong>学习-JavaWeb</strong> 目录下的 <strong>smbms</strong> 压缩包。</p>
<p><strong>注意：因为事务控制是发生在 Service 层，也就是 Connection 的生成是出现在 Service 层的，而 Dao 层也是要用到Connection 对象的。那么为了保持一个事务中 Connection 对象是同一个那么就不能 new 了，只能通过传递，通常的做法是在 Dao 实现类中定义一个属性 Connection conn 来接收，这样 Dao 类中的方法都可以使用使用该 Connection 对象了。</strong></p>
<h3 id="系统功能架构"><a href="#系统功能架构" class="headerlink" title="系统功能架构"></a>系统功能架构</h3><p><img data-src="/images/javaweb-basis13.md-0.png"></p>
<h3 id="数据库模型设计"><a href="#数据库模型设计" class="headerlink" title="数据库模型设计"></a>数据库模型设计</h3><p><img data-src="/images/javaweb-basis13.md-1.png"></p>
<h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><ul>
<li>  使用 maven 模板搭建一个 Web 项目</li>
<li>  配置 Tomcat</li>
<li>  测试项目是否能够运行</li>
<li>  导入依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单元测试（不需要写 main 方法，使用 @Test 注解就能运行）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JSP 的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet 的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JSTL 标签的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.web<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglibs-standard-spec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MySQL 数据库连接依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--StringUtils 工具类依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阿里 FastJson 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>项目包结构<br>  <img data-src="/images/javaweb-basis13.md-2.png"></p>
</li>
<li><p>编写实体类<br>  可以如下图直接创建数据库相应的实体类。不过根据业务需求，还需在实体类中创建其它的属性。详情请看源代码。<br>  <img data-src="/images/javaweb-basis13.md-3.png"></p>
</li>
<li><p>编写公共基础类（由于 wordpress 显示问题，故不在下面放代码了，可以去压缩包下看）</p>
<ul>
<li>  util 包工具类</li>
<li>  数据库配置文件</li>
<li>  数据库公共类</li>
<li>  字符编码过滤器</li>
</ul>
</li>
<li><p>导入静态资源<br>  <img data-src="/images/javaweb-basis13.md-4.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(十四)</title>
    <url>/2021/07/22/javaweb-basis14/</url>
    <content><![CDATA[<h2 id="SMBMS（续一）"><a href="#SMBMS（续一）" class="headerlink" title="SMBMS（续一）"></a>SMBMS（续一）</h2><h3 id="实现登录功能"><a href="#实现登录功能" class="headerlink" title="实现登录功能"></a>实现登录功能</h3><p><img data-src="/images/javaweb-basis14.md-0.png"></p>
<p>Dao 层：首先需要将指定用户数据查出来，而想要查询指定用户数据就至少需要一个参数，登录时使用的是用户名和密码，就可以选择用户名作为参数。调用数据库公共类方法获取指定用户数据后，最后将数据赋值给实体类对象。<br>Service 层：调用了 Dao 层，并进行了密码判断。<br>Web 层：由于已经导入了静态资源页面，就只需要判断用户是否登录成功即可。这就需要在 Servlet 中获取前端传过来的参数，通过调用 Service 层判断用户是否登录成功。如果能够成功将用户信息查询出来，则为登录成功将跳转到后台首页；反之则不跳转只进行请求转发。</p>
<h4 id="设置登录页面为首页"><a href="#设置登录页面为首页" class="headerlink" title="设置登录页面为首页"></a>设置登录页面为首页</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置首页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Dao-层"><a href="#Dao-层" class="headerlink" title="Dao 层"></a>Dao 层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.dao.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取登录的用户数据</span></span><br><span class="line">    <span class="function">User <span class="title">getLoginUser</span><span class="params">(Connection connection, String userCode)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997.dao.user;</span><br><span class="line"></span><br><span class="line">import ml.guest997.dao.BaseDao;</span><br><span class="line">import ml.guest997.pojo.User;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> UserDaoImpl implements UserDao&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public User get<span class="constructor">LoginUser(Connection <span class="params">connection</span>, String <span class="params">userCode</span>)</span> throws SQLException &#123;</span><br><span class="line">        PreparedStatement pstm = null;</span><br><span class="line">        ResultSet rs = null;</span><br><span class="line">        User user = null;       <span class="comment">//声明一个变量，类型为 User，不创建新实例。</span></span><br><span class="line">        <span class="keyword">if</span> (connection != null) &#123;</span><br><span class="line">            String sql = <span class="string">&quot;select * from smbms_user where userCode = ?&quot;</span>;</span><br><span class="line">            Object<span class="literal">[]</span> params = &#123;userCode&#125;;</span><br><span class="line">            rs = <span class="module-access"><span class="module"><span class="identifier">BaseDao</span>.</span></span>execute(connection, pstm, rs, sql, params);</span><br><span class="line">            <span class="keyword">if</span> (rs.next<span class="literal">()</span>)&#123;</span><br><span class="line">                user = <span class="keyword">new</span> <span class="constructor">User()</span>;</span><br><span class="line">                user.set<span class="constructor">Id(<span class="params">rs</span>.<span class="params">getInt</span>(<span class="string">&quot;id&quot;</span>)</span>);</span><br><span class="line">                user.set<span class="constructor">UserCode(<span class="params">rs</span>.<span class="params">getString</span>(<span class="string">&quot;userCode&quot;</span>)</span>);</span><br><span class="line">                user.set<span class="constructor">UserName(<span class="params">rs</span>.<span class="params">getString</span>(<span class="string">&quot;userName&quot;</span>)</span>);</span><br><span class="line">                user.set<span class="constructor">UserPassword(<span class="params">rs</span>.<span class="params">getString</span>(<span class="string">&quot;userPassword&quot;</span>)</span>);</span><br><span class="line">                user.set<span class="constructor">Gender(<span class="params">rs</span>.<span class="params">getInt</span>(<span class="string">&quot;gender&quot;</span>)</span>);</span><br><span class="line">                user.set<span class="constructor">Birthday(<span class="params">rs</span>.<span class="params">getDate</span>(<span class="string">&quot;birthday&quot;</span>)</span>);</span><br><span class="line">                user.set<span class="constructor">Phone(<span class="params">rs</span>.<span class="params">getString</span>(<span class="string">&quot;phone&quot;</span>)</span>);</span><br><span class="line">                user.set<span class="constructor">Address(<span class="params">rs</span>.<span class="params">getString</span>(<span class="string">&quot;address&quot;</span>)</span>);</span><br><span class="line">                user.set<span class="constructor">UserRole(<span class="params">rs</span>.<span class="params">getInt</span>(<span class="string">&quot;userRole&quot;</span>)</span>);</span><br><span class="line">                user.set<span class="constructor">CreatedBy(<span class="params">rs</span>.<span class="params">getInt</span>(<span class="string">&quot;createdBy&quot;</span>)</span>);</span><br><span class="line">                user.set<span class="constructor">CreationDate(<span class="params">rs</span>.<span class="params">getTimestamp</span>(<span class="string">&quot;creationDate&quot;</span>)</span>);</span><br><span class="line">                user.set<span class="constructor">ModifyBy(<span class="params">rs</span>.<span class="params">getInt</span>(<span class="string">&quot;modifyBy&quot;</span>)</span>);</span><br><span class="line">                user.set<span class="constructor">ModifyDate(<span class="params">rs</span>.<span class="params">getTimestamp</span>(<span class="string">&quot;modifyDate&quot;</span>)</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">BaseDao</span>.</span></span>release<span class="constructor">Resources(<span class="params">null</span>,<span class="params">pstm</span>,<span class="params">rs</span>)</span>;    <span class="comment">//Service 层中可能存在着事务，所以都是在 Service 层中关闭 Connection。</span></span><br><span class="line">        &#125;</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h4><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    User login(<span class="keyword">String</span> userCode, <span class="keyword">String</span> password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.dao.user.UserDao;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.dao.user.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">//业务层都会调用 Dao 层，所以要引入 Dao 层</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line">    <span class="comment">//每次实例化 UserService 就直接实例化了 userDao</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userCode, String password)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = BaseDao.getConnection();</span><br><span class="line">            user = userDao.getLoginUser(conn, userCode);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.releaseResources(conn,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匹配密码</span></span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!user.getUserPassword().equals(password))</span><br><span class="line">                user = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Web-层"><a href="#Web-层" class="headerlink" title="Web 层"></a>Web 层</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.<span class="type">ServletException</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.<span class="type">User</span>;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.service.user.<span class="type">UserServiceImpl</span>;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.util.<span class="type">Constants</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="type">String</span> userCode = req.getParameter(<span class="string">&quot;userCode&quot;</span>);</span><br><span class="line">        <span class="type">String</span> userPassword = req.getParameter(<span class="string">&quot;userPassword&quot;</span>);</span><br><span class="line">        <span class="type">User</span> user = <span class="keyword">new</span> <span class="type">UserServiceImpl</span>().login(userCode, userPassword);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>)&#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="type">Constants</span>.<span class="type">USER_SESSION</span>,user);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;jsp/frame.jsp&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            req.setAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;用户名或者密码不正确！&quot;</span>);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加映射"><a href="#添加映射" class="headerlink" title="添加映射"></a>添加映射</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.user.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实现注销功能和权限拦截"><a href="#实现注销功能和权限拦截" class="headerlink" title="实现注销功能和权限拦截"></a>实现注销功能和权限拦截</h3><p>JavaWeb 基础(十二) 中已经实现了相应的功能，就不再解释了。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.servlet.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.util.<span class="type">Constants</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="comment">//清除 Session</span></span><br><span class="line">        req.getSession().removeAttribute(<span class="type">Constants</span>.<span class="type">USER_SESSION</span>);</span><br><span class="line">        resp.sendRedirect(req.getContextPath()+<span class="string">&quot;/login.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.util.Constants;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse) servletResponse;</span><br><span class="line">        User user = (User) req.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;         <span class="comment">//用户被移除、注销或者未登录</span></span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/smbms/error.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            filterChain.doFilter(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LogoutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.user.LogoutServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LogoutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jsp/logout.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--权限拦截过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>ml.guest997.filter.SysFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jsp/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(十五)</title>
    <url>/2021/07/22/javaweb-basis15/</url>
    <content><![CDATA[<h2 id="SMBMS（续二）"><a href="#SMBMS（续二）" class="headerlink" title="SMBMS（续二）"></a>SMBMS（续二）</h2><h3 id="实现密码修改功能"><a href="#实现密码修改功能" class="headerlink" title="实现密码修改功能"></a>实现密码修改功能</h3><p>Dao 层：改密码需要两个参数，一个是 id 号用来指定用户，一个是新密码覆盖原有的旧密码。<br>Service 层：只是简单地调用了 Dao 层。<br>Web 层：由于已经导入了静态资源页面，Web 层就只需要判断是否更改密码成功。这就需要在 Servlet 中获取前端传过来的参数，通过调用 Service 层判断是否更改密码成功。如果判断 Session 存在、新密码不为空且调用 Service 层方法返回的为真，则为修改成功。</p>
<h4 id="Dao-层"><a href="#Dao-层" class="headerlink" title="Dao 层"></a>Dao 层</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改当前用户密码</span></span><br><span class="line"><span class="built_in">int</span> update<span class="constructor">Pwd(Connection <span class="params">connection</span>, <span class="params">int</span> <span class="params">id</span>, String <span class="params">userPassword</span>)</span>throws SQLException;</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="built_in">public</span> <span class="type">int</span> updatePwd(<span class="keyword">Connection</span> <span class="keyword">connection</span>, <span class="type">int</span> id, String userPassword) throws SQLException &#123;</span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="keyword">execute</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">Object</span> params[] = &#123;userPassword,id&#125;;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">connection</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">        String <span class="keyword">sql</span> = &quot;update smbms_user set userPassword = ? where id = ?&quot;;</span><br><span class="line">        <span class="keyword">execute</span> = BaseDao.<span class="keyword">execute</span>(<span class="keyword">connection</span>, pstm, <span class="keyword">sql</span>, params);</span><br><span class="line">        BaseDao.releaseResources(<span class="keyword">connection</span>,pstm,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">execute</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据用户 ID 修改密码</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updatePwd</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">String</span> userPassword)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据用户 ID 修改密码</span></span><br><span class="line">@Override</span><br><span class="line">public boolean update<span class="constructor">Pwd(<span class="params">int</span> <span class="params">id</span>, String <span class="params">userPassword</span>)</span> &#123;</span><br><span class="line">    Connection conn;</span><br><span class="line">    boolean flag = <span class="literal">false</span>;</span><br><span class="line">    conn = <span class="module-access"><span class="module"><span class="identifier">BaseDao</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(userDao.update<span class="constructor">Pwd(<span class="params">conn</span>,<span class="params">id</span>,<span class="params">userPassword</span>)</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (SQLException throwables) &#123;</span><br><span class="line">        throwables.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">BaseDao</span>.</span></span>release<span class="constructor">Resources(<span class="params">conn</span>,<span class="params">null</span>,<span class="params">null</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Web-层"><a href="#Web-层" class="headerlink" title="Web 层"></a>Web 层</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997.servlet.user;</span><br><span class="line"></span><br><span class="line">import jakarta.servlet.ServletException;</span><br><span class="line">import jakarta.servlet.http.HttpServlet;</span><br><span class="line">import jakarta.servlet.http.HttpServletRequest;</span><br><span class="line">import jakarta.servlet.http.HttpServletResponse;</span><br><span class="line">import ml.guest997.pojo.User;</span><br><span class="line">import ml.guest997.service.user.UserServiceImpl;</span><br><span class="line">import ml.guest997.util.Constants;</span><br><span class="line">import org.apache.commons.lang.StringUtils;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现 Servlet 复用（其实就是多个功能在一个 Servlet 中实现）</span></span><br><span class="line">public <span class="keyword">class</span> UserServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> &#123;</span><br><span class="line">        String <span class="keyword">method</span> = req.get<span class="constructor">Parameter(<span class="string">&quot;method&quot;</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">method</span> != null<span class="operator"> &amp;&amp; </span><span class="keyword">method</span>.equals(<span class="string">&quot;savepwd&quot;</span>)) &#123;</span><br><span class="line">            this.update<span class="constructor">Pwd(<span class="params">req</span>, <span class="params">resp</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">do</span><span class="constructor">Get(<span class="params">req</span>, <span class="params">resp</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改密码</span></span><br><span class="line">    public void update<span class="constructor">Pwd(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span>&#123;</span><br><span class="line">        String newpassword = req.get<span class="constructor">Parameter(<span class="string">&quot;newpassword&quot;</span>)</span>;</span><br><span class="line">        Object o = req.get<span class="constructor">Session()</span>.get<span class="constructor">Attribute(Constants.USER_SESSION)</span>;</span><br><span class="line">        boolean flag;</span><br><span class="line">        <span class="keyword">if</span> (o != null<span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>is<span class="constructor">NotBlank(<span class="params">newpassword</span>)</span>)&#123;   <span class="comment">//判断 Session 存在且新密码不为空</span></span><br><span class="line">            UserServiceImpl userService = <span class="keyword">new</span> <span class="constructor">UserServiceImpl()</span>;</span><br><span class="line">            flag = userService.update<span class="constructor">Pwd(((User)</span>o).get<span class="constructor">Id()</span>,newpassword);</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                req.set<span class="constructor">Attribute(Constants.SYS_MESSAGE,<span class="string">&quot;密码修改成功，请退出，使用新密码登录。&quot;</span>)</span>;</span><br><span class="line">                req.get<span class="constructor">Session()</span>.remove<span class="constructor">Attribute(Constants.USER_SESSION)</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                req.set<span class="constructor">Attribute(Constants.SYS_MESSAGE,<span class="string">&quot;密码修改失败！&quot;</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            req.set<span class="constructor">Attribute(Constants.SYS_MESSAGE,<span class="string">&quot;新密码有误！&quot;</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            req.get<span class="constructor">RequestDispatcher(<span class="string">&quot;pwdmodify.jsp&quot;</span>)</span>.forward(req,resp);</span><br><span class="line">        &#125; catch (ServletException  IOException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至于为什么不在密码修改成功后直接跳转到登录页，是因为修改完密码之后即使不重新登录，因为之前设置过滤器的原因，当点击其它页面时，也会跳转到 error.jsp 让其到登录页重新登录。而且当发生密码修改错误时，会需要将请求转发到密码修改页（就是当前页）所有我们只需在最后走一遍请求转发即可。</p>
<h4 id="添加映射"><a href="#添加映射" class="headerlink" title="添加映射"></a>添加映射</h4><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;servlet&gt;</span></span><br><span class="line">    <span class="params">&lt;servlet-name&gt;</span>UserServlet<span class="params">&lt;/servlet-name&gt;</span></span><br><span class="line">    <span class="params">&lt;servlet-class&gt;</span>ml.guest997.servlet.user.UserServlet<span class="params">&lt;/servlet-class&gt;</span></span><br><span class="line"><span class="params">&lt;/servlet&gt;</span></span><br><span class="line"><span class="params">&lt;servlet-mapping&gt;</span></span><br><span class="line">    <span class="params">&lt;servlet-name&gt;</span>UserServlet<span class="params">&lt;/servlet-name&gt;</span></span><br><span class="line">    <span class="params">&lt;url-pattern&gt;</span><span class="meta-keyword">/jsp/</span>user.do<span class="params">&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="params">&lt;/servlet-mapping&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实现前端旧密码验证功能"><a href="#实现前端旧密码验证功能" class="headerlink" title="实现前端旧密码验证功能"></a>实现前端旧密码验证功能</h3><p>旧密码验证其实能像上面一样写三层代码也是能够实现的，不过这样会使得在提交时才能知道旧密码是否正确，影响了用户体验还不高效。所以在前端会使用 Ajax 实现旧密码验证功能。</p>
<h4 id="UserServlet-代码修改"><a href="#UserServlet-代码修改" class="headerlink" title="UserServlet 代码修改"></a>UserServlet 代码修改</h4><p><strong>注意：要对应着前端 pwdmodify.js 文件进行修改。</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997.servlet.user;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import jakarta.servlet.ServletException;</span><br><span class="line">import jakarta.servlet.http.HttpServlet;</span><br><span class="line">import jakarta.servlet.http.HttpServletRequest;</span><br><span class="line">import jakarta.servlet.http.HttpServletResponse;</span><br><span class="line">import ml.guest997.pojo.User;</span><br><span class="line">import ml.guest997.service.user.UserServiceImpl;</span><br><span class="line">import ml.guest997.util.Constants;</span><br><span class="line">import org.apache.commons.lang.StringUtils;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现 Servlet 复用（其实就是多个功能在一个 Servlet 中实现）</span></span><br><span class="line">public <span class="keyword">class</span> UserServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> &#123;</span><br><span class="line">        String <span class="keyword">method</span> = req.get<span class="constructor">Parameter(<span class="string">&quot;method&quot;</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">method</span> != null<span class="operator"> &amp;&amp; </span><span class="keyword">method</span>.equals(<span class="string">&quot;savepwd&quot;</span>)) &#123;</span><br><span class="line">            this.update<span class="constructor">Pwd(<span class="params">req</span>, <span class="params">resp</span>)</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">method</span> != null<span class="operator"> &amp;&amp; </span><span class="keyword">method</span>.equals(<span class="string">&quot;pwdmodify&quot;</span>))&#123;</span><br><span class="line">            this.pwd<span class="constructor">Modify(<span class="params">req</span>,<span class="params">resp</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">do</span><span class="constructor">Get(<span class="params">req</span>, <span class="params">resp</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改密码</span></span><br><span class="line">    public void update<span class="constructor">Pwd(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span>&#123;</span><br><span class="line">        String newpassword = req.get<span class="constructor">Parameter(<span class="string">&quot;newpassword&quot;</span>)</span>;</span><br><span class="line">        Object o = req.get<span class="constructor">Session()</span>.get<span class="constructor">Attribute(Constants.USER_SESSION)</span>;</span><br><span class="line">        boolean flag;</span><br><span class="line">        <span class="keyword">if</span> (o != null<span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>is<span class="constructor">NotBlank(<span class="params">newpassword</span>)</span>)&#123;   <span class="comment">//判断用户存在且新密码不为空</span></span><br><span class="line">            UserServiceImpl userService = <span class="keyword">new</span> <span class="constructor">UserServiceImpl()</span>;</span><br><span class="line">            flag = userService.update<span class="constructor">Pwd(((User)</span>o).get<span class="constructor">Id()</span>,newpassword);</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                req.set<span class="constructor">Attribute(Constants.SYS_MESSAGE,<span class="string">&quot;密码修改成功，请退出，使用新密码登录。&quot;</span>)</span>;</span><br><span class="line">                req.get<span class="constructor">Session()</span>.remove<span class="constructor">Attribute(Constants.USER_SESSION)</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                req.set<span class="constructor">Attribute(Constants.SYS_MESSAGE,<span class="string">&quot;密码修改失败！&quot;</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            req.set<span class="constructor">Attribute(Constants.SYS_MESSAGE,<span class="string">&quot;新密码有误！&quot;</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            req.get<span class="constructor">RequestDispatcher(<span class="string">&quot;pwdmodify.jsp&quot;</span>)</span>.forward(req,resp);</span><br><span class="line">        &#125; catch (ServletException  IOException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证旧密码</span></span><br><span class="line">    public void pwd<span class="constructor">Modify(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> &#123;</span><br><span class="line">        Object o = req.get<span class="constructor">Session()</span>.get<span class="constructor">Attribute(Constants.USER_SESSION)</span>;</span><br><span class="line">        String oldpassword = req.get<span class="constructor">Parameter(<span class="string">&quot;oldpassword&quot;</span>)</span>;</span><br><span class="line">        <span class="comment">//万能 Map：结果集</span></span><br><span class="line">        Map&lt;String, String&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">if</span> (o<span class="operator"> == </span>null) &#123;     <span class="comment">//Session 不存在</span></span><br><span class="line">            resultMap.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;sessionerror&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>is<span class="constructor">Blank(<span class="string">&quot;oldpassword&quot;</span>)</span>) &#123;       <span class="comment">//输入的密码为空</span></span><br><span class="line">            resultMap.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String userPassword = ((User) o).get<span class="constructor">UserPassword()</span>;   <span class="comment">//获取 Session 中用户的密码</span></span><br><span class="line">            <span class="keyword">if</span> (oldpassword.equals(userPassword)) &#123;</span><br><span class="line">                resultMap.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resultMap.put(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resp.set<span class="constructor">ContentType(<span class="string">&quot;application/json&quot;</span>)</span>;</span><br><span class="line">            PrintWriter writer = resp.get<span class="constructor">Writer()</span>;</span><br><span class="line">            <span class="comment">// JSONArray 阿里的 JSON 工具类, 转换成 Json 格式。</span></span><br><span class="line">            writer.write(<span class="module-access"><span class="module"><span class="identifier">JSONArray</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">resultMap</span>)</span>);</span><br><span class="line">            writer.flush<span class="literal">()</span>;</span><br><span class="line">            writer.close<span class="literal">()</span>;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(十六)</title>
    <url>/2021/07/23/javaweb-basis16/</url>
    <content><![CDATA[<h2 id="SMBMS（续三）"><a href="#SMBMS（续三）" class="headerlink" title="SMBMS（续三）"></a>SMBMS（续三）</h2><h3 id="实现用户管理功能（部分实现）"><a href="#实现用户管理功能（部分实现）" class="headerlink" title="实现用户管理功能（部分实现）"></a>实现用户管理功能（部分实现）</h3><p><strong>注意：要对应着前端 userlist.jsp 和 rollpage.jsp 文件编写代码。</strong><img data-src="/images/javaweb-basis16.md-0.png"><img data-src="/images/javaweb-basis16.md-1.png"></p>
<p>Dao层：一开始进入界面会显示全部的用户，再根据需要填入 <strong>用户名</strong> 或者选择 <strong>用户角色</strong> 或者 <strong>两个都满足</strong> 的条件筛选出每页的用户列表。而想要实现左下角的总数记录，就需要获取上述条件筛选后的用户总数。（增删改就不多说了，可以自己去看源码）<br>Service 层：只是简单地调用了 Dao 层。<br>Web 层：已经导入了静态资源页面，获取前端传过来的 用户名、用户角色、页面索引的参数后，调用 Service 层，并将结果参数通过请求转发返回给前端。需要注意的是当为第一页或者最后一页时不能再继续翻页的处理。</p>
<h4 id="导入分页的工具类（PageSupport-java）"><a href="#导入分页的工具类（PageSupport-java）" class="headerlink" title="导入分页的工具类（PageSupport.java）"></a>导入分页的工具类（PageSupport.java）</h4><p>创建四个属性：页码从前端传入；页面容量在 Servlet 中设置；用户数量是 Servlet 调用 Service 层后设置的，并且在其 set 方法中调用了计算总页数的方法，这样 Servlet 中就能直接调用总页数的 get 方法获取总页数。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageSupport</span> </span>&#123;</span><br><span class="line">   <span class="comment">//当前页码 - 来自于用户输入</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> currentPageNo = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//总用户数量</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> totalCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//页面容量 - Servlet 中赋值</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> pageSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//总页数</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> totalPageCount = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCurrentPageNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> currentPageNo;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setCurrentPageNo</span><span class="params">(<span class="keyword">int</span> currentPageNo)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(currentPageNo &gt; <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">this</span>.currentPageNo = currentPageNo;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> totalCount;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setTotalCount</span><span class="params">(<span class="keyword">int</span> totalCount)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(totalCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">this</span>.totalCount = totalCount;</span><br><span class="line">         <span class="comment">//设置总页数</span></span><br><span class="line">         <span class="keyword">this</span>.setTotalPageCount();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> pageSize;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(pageSize &gt; <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getTotalPageCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> totalPageCount;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setTotalPageCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.totalCount % <span class="keyword">this</span>.pageSize == <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">this</span>.totalPageCount = <span class="keyword">this</span>.totalCount / <span class="keyword">this</span>.pageSize;</span><br><span class="line">      &#125;<span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(<span class="keyword">this</span>.totalCount % <span class="keyword">this</span>.pageSize &gt; <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.totalPageCount = <span class="keyword">this</span>.totalCount / <span class="keyword">this</span>.pageSize + <span class="number">1</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.totalPageCount = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Dao-层"><a href="#Dao-层" class="headerlink" title="Dao 层"></a>Dao 层</h4><h5 id="UserDao"><a href="#UserDao" class="headerlink" title="UserDao"></a>UserDao</h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据用户名、用户角色查询用户总数</span></span><br><span class="line"><span class="built_in">int</span> get<span class="constructor">UserCount(Connection <span class="params">connection</span>, String <span class="params">username</span>, <span class="params">int</span> <span class="params">userRole</span>)</span>throws SQLException;</span><br><span class="line"><span class="comment">//根据用户名、用户角色获取每页用户列表</span></span><br><span class="line">List&lt;User&gt; get<span class="constructor">UserList(Connection <span class="params">connection</span>, String <span class="params">userName</span>, <span class="params">int</span> <span class="params">userRole</span>, <span class="params">int</span> <span class="params">currentPageNo</span>, <span class="params">int</span> <span class="params">pageSize</span>)</span>throws SQLException;</span><br></pre></td></tr></table></figure>

<h5 id="UserDaoImpl"><a href="#UserDaoImpl" class="headerlink" title="UserDaoImpl"></a>UserDaoImpl</h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public <span class="built_in">int</span> get<span class="constructor">UserCount(Connection <span class="params">connection</span>, String <span class="params">username</span>, <span class="params">int</span> <span class="params">userRole</span>)</span> throws SQLException &#123;</span><br><span class="line">    PreparedStatement pstm = null;</span><br><span class="line">    ResultSet rs = null;</span><br><span class="line">    <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (connection != null) &#123;</span><br><span class="line">        StringBuilder sql = <span class="keyword">new</span> <span class="constructor">StringBuilder()</span>;</span><br><span class="line">        <span class="comment">//用于第一次进入页面显示全部用户信息</span></span><br><span class="line">        sql.append(<span class="string">&quot;select count(1) as count from smbms_user u, smbms_role r where u.userrole = r.id&quot;</span>);</span><br><span class="line">        <span class="comment">//存放参数</span></span><br><span class="line">        ArrayList&lt;Object&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">//通过拼接字符串添加 sql 语句的筛选条件</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>is<span class="constructor">NotBlank(<span class="params">username</span>)</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot; and u.userName like ?&quot;</span>);</span><br><span class="line">            <span class="built_in">list</span>.add(<span class="string">&quot;%&quot;</span> + username + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (userRole &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot; and u.userRole = ?&quot;</span>);</span><br><span class="line">            <span class="built_in">list</span>.add(userRole);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//list 转为数组并赋值给 params 数组</span></span><br><span class="line">        Object<span class="literal">[]</span> params = <span class="built_in">list</span>.<span class="keyword">to</span><span class="constructor">Array()</span>;</span><br><span class="line">        rs = <span class="module-access"><span class="module"><span class="identifier">BaseDao</span>.</span></span>execute(connection, pstm, rs, sql.<span class="keyword">to</span><span class="constructor">String()</span>, params);</span><br><span class="line">        <span class="keyword">if</span> (rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">            count = rs.get<span class="constructor">Int(<span class="string">&quot;count&quot;</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">BaseDao</span>.</span></span>release<span class="constructor">Resources(<span class="params">null</span>, <span class="params">pstm</span>, <span class="params">rs</span>)</span>;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;User&gt; get<span class="constructor">UserList(Connection <span class="params">connection</span>, String <span class="params">userName</span>, <span class="params">int</span> <span class="params">userRole</span>, <span class="params">int</span> <span class="params">currentPageNo</span>, <span class="params">int</span> <span class="params">pageSize</span>)</span> throws SQLException &#123;</span><br><span class="line">    PreparedStatement pstm = null;</span><br><span class="line">    ResultSet rs = null;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">    <span class="keyword">if</span> (connection != null) &#123;</span><br><span class="line">        StringBuilder sql = <span class="keyword">new</span> <span class="constructor">StringBuilder()</span>;</span><br><span class="line">        <span class="comment">//不仅将用户表中的信息全部查出来，并且根据上图的需要将角色表中的用户角色也查出来了。</span></span><br><span class="line">        sql.append(<span class="string">&quot;select u.*,r.roleName as userRoleName from smbms_user u, smbms_role r where u.userRole = r.id&quot;</span>);</span><br><span class="line">        List&lt;Object&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>is<span class="constructor">NotBlank(<span class="params">userName</span>)</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot; and u.username like ?&quot;</span>);</span><br><span class="line">            <span class="built_in">list</span>.add(<span class="string">&quot;%&quot;</span> + userName + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (userRole &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot; and u.userRole = ?&quot;</span>);</span><br><span class="line">            <span class="built_in">list</span>.add(userRole);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在数据库中，分页使用 limit startIndex,pageSize</span></span><br><span class="line">        sql.append(<span class="string">&quot; order by creationDate DESC limit ?,?&quot;</span>);</span><br><span class="line">        <span class="built_in">int</span> startIndex = (currentPageNo - <span class="number">1</span>)<span class="operator"> * </span>pageSize;</span><br><span class="line">        <span class="built_in">list</span>.add(startIndex);</span><br><span class="line">        <span class="built_in">list</span>.add(pageSize);</span><br><span class="line">        Object<span class="literal">[]</span> params = <span class="built_in">list</span>.<span class="keyword">to</span><span class="constructor">Array()</span>;</span><br><span class="line">        rs = <span class="module-access"><span class="module"><span class="identifier">BaseDao</span>.</span></span>execute(connection, pstm, rs, sql.<span class="keyword">to</span><span class="constructor">String()</span>, params);</span><br><span class="line">        <span class="keyword">while</span> (rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">            User _user = <span class="keyword">new</span> <span class="constructor">User()</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">_user</span>.</span></span>set<span class="constructor">Id(<span class="params">rs</span>.<span class="params">getInt</span>(<span class="string">&quot;id&quot;</span>)</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">_user</span>.</span></span>set<span class="constructor">UserCode(<span class="params">rs</span>.<span class="params">getString</span>(<span class="string">&quot;userCode&quot;</span>)</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">_user</span>.</span></span>set<span class="constructor">UserName(<span class="params">rs</span>.<span class="params">getString</span>(<span class="string">&quot;userName&quot;</span>)</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">_user</span>.</span></span>set<span class="constructor">Gender(<span class="params">rs</span>.<span class="params">getInt</span>(<span class="string">&quot;gender&quot;</span>)</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">_user</span>.</span></span>set<span class="constructor">Birthday(<span class="params">rs</span>.<span class="params">getDate</span>(<span class="string">&quot;birthday&quot;</span>)</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">_user</span>.</span></span>set<span class="constructor">Phone(<span class="params">rs</span>.<span class="params">getString</span>(<span class="string">&quot;phone&quot;</span>)</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">_user</span>.</span></span>set<span class="constructor">UserRole(<span class="params">rs</span>.<span class="params">getInt</span>(<span class="string">&quot;userRole&quot;</span>)</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">_user</span>.</span></span>set<span class="constructor">UserRoleName(<span class="params">rs</span>.<span class="params">getString</span>(<span class="string">&quot;userRoleName&quot;</span>)</span>);</span><br><span class="line">            userList.add(_user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">BaseDao</span>.</span></span>release<span class="constructor">Resources(<span class="params">null</span>, <span class="params">pstm</span>, <span class="params">rs</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RoleDao"><a href="#RoleDao" class="headerlink" title="RoleDao"></a>RoleDao</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.dao.role;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Role;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取角色列表</span></span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RoleDaoImpl"><a href="#RoleDaoImpl" class="headerlink" title="RoleDaoImpl"></a>RoleDaoImpl</h5><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package ml.guest997.dao.<span class="keyword">role</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.<span class="keyword">Role</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.<span class="keyword">Connection</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> RoleDaoImpl implements RoleDao&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> List&lt;<span class="keyword">Role</span>&gt; getRoleList(<span class="keyword">Connection</span> <span class="keyword">connection</span>) throws SQLException &#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;<span class="keyword">Role</span>&gt; roleList = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">connection</span> != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String <span class="keyword">sql</span> = &quot;select * from smbms_role&quot;;</span><br><span class="line">            <span class="keyword">Object</span>[] params = &#123;&#125;;</span><br><span class="line">            rs = BaseDao.<span class="keyword">execute</span>(<span class="keyword">connection</span>, pstm, rs, <span class="keyword">sql</span>, params);</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                <span class="keyword">Role</span> _role = <span class="built_in">new</span> <span class="keyword">Role</span>();</span><br><span class="line">                _role.setId(rs.getInt(&quot;id&quot;));</span><br><span class="line">                _role.setRoleName(rs.getString(&quot;roleNmae&quot;));</span><br><span class="line">                _role.setRoleCode(rs.getString(&quot;roleCode&quot;));</span><br><span class="line">                roleList.<span class="keyword">add</span>(_role);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        BaseDao.releaseResources(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line">        <span class="keyword">return</span> roleList ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h4><h5 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a>UserService</h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询记录数</span></span><br><span class="line"><span class="built_in">int</span> get<span class="constructor">UserCount(String <span class="params">username</span>,<span class="params">int</span> <span class="params">userRole</span>)</span>;</span><br><span class="line"><span class="comment">//获取用户列表</span></span><br><span class="line">List&lt;User&gt; get<span class="constructor">UserList(String <span class="params">queryUserName</span>, <span class="params">int</span> <span class="params">queryUserRole</span>, <span class="params">int</span> <span class="params">currentPageNo</span>, <span class="params">int</span> <span class="params">pageSize</span>)</span>;</span><br></pre></td></tr></table></figure>

<h5 id="UserServiceImpl"><a href="#UserServiceImpl" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询记录数</span></span><br><span class="line">@Override</span><br><span class="line">public <span class="built_in">int</span> get<span class="constructor">UserCount(String <span class="params">username</span>, <span class="params">int</span> <span class="params">userRole</span>)</span> &#123;</span><br><span class="line">    Connection conn = null;</span><br><span class="line">    <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = <span class="module-access"><span class="module"><span class="identifier">BaseDao</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">        count = userDao.get<span class="constructor">UserCount(<span class="params">conn</span>,<span class="params">username</span>,<span class="params">userRole</span>)</span>;</span><br><span class="line">    &#125; catch (SQLException throwables) &#123;</span><br><span class="line">        throwables.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">BaseDao</span>.</span></span>release<span class="constructor">Resources(<span class="params">conn</span>,<span class="params">null</span>,<span class="params">null</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取用户列表</span></span><br><span class="line">@Override</span><br><span class="line">public List&lt;User&gt; get<span class="constructor">UserList(String <span class="params">queryUserName</span>, <span class="params">int</span> <span class="params">queryUserRole</span>, <span class="params">int</span> <span class="params">currentPageNo</span>, <span class="params">int</span> <span class="params">pageSize</span>)</span> &#123;</span><br><span class="line">    Connection conn = null;</span><br><span class="line">    List&lt;User&gt; userList = null;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = <span class="module-access"><span class="module"><span class="identifier">BaseDao</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">        userList = userDao.get<span class="constructor">UserList(<span class="params">conn</span>,<span class="params">queryUserName</span>,<span class="params">queryUserRole</span>,<span class="params">currentPageNo</span>,<span class="params">pageSize</span>)</span>;</span><br><span class="line">    &#125; catch (SQLException throwables) &#123;</span><br><span class="line">        throwables.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">BaseDao</span>.</span></span>release<span class="constructor">Resources(<span class="params">conn</span>,<span class="params">null</span>,<span class="params">null</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RoleService"><a href="#RoleService" class="headerlink" title="RoleService"></a>RoleService</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service.role;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Role;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取角色列表</span></span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RoleServiceImpl"><a href="#RoleServiceImpl" class="headerlink" title="RoleServiceImpl"></a>RoleServiceImpl</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service.role;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.dao.role.RoleDao;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.dao.role.RoleDaoImpl;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Role;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RoleDao roleDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoleServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        roleDao = <span class="keyword">new</span> RoleDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;Role&gt; roleList = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = BaseDao.getConnection();</span><br><span class="line">            roleList = roleDao.getRoleList(conn);</span><br><span class="line">            <span class="keyword">return</span> roleList;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.releaseResources(conn,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> roleList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Web-层"><a href="#Web-层" class="headerlink" title="Web 层"></a>Web 层</h4><p>为实现 Servlet 复用，修改 <strong>UserServlet.java</strong> 文件。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用户查询（重点、难点）</span></span><br><span class="line">public void query(HttpServletRequest req, HttpServletResponse resp)&#123;</span><br><span class="line">    <span class="comment">//获取前端的参数</span></span><br><span class="line">    String queryUserName = req.get<span class="constructor">Parameter(<span class="string">&quot;queryname&quot;</span>)</span>;</span><br><span class="line">    String temp = req.get<span class="constructor">Parameter(<span class="string">&quot;queryUserRole&quot;</span>)</span>;    <span class="comment">//临时变量，只有在符合条件的时候才赋值给 queryUserRole，否则就使用 queryUserRole 变量的默认值。</span></span><br><span class="line">    String pageIndex = req.get<span class="constructor">Parameter(<span class="string">&quot;pageIndex&quot;</span>)</span>;   <span class="comment">//跟上面的临时变量同理</span></span><br><span class="line">    <span class="built_in">int</span> queryUserRole = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取角色列表并传回给前端</span></span><br><span class="line">    RoleService roleService = <span class="keyword">new</span> <span class="constructor">RoleServiceImpl()</span>;</span><br><span class="line">    List&lt;Role&gt; roleList = roleService.get<span class="constructor">RoleList()</span>;</span><br><span class="line">    req.set<span class="constructor">Attribute(<span class="string">&quot;roleList&quot;</span>,<span class="params">roleList</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取用户列表并传回给前端</span></span><br><span class="line">    UserServiceImpl userService = <span class="keyword">new</span> <span class="constructor">UserServiceImpl()</span>;</span><br><span class="line">    List&lt;User&gt; userList;</span><br><span class="line">    <span class="built_in">int</span> currentPageNo = <span class="number">1</span>;   <span class="comment">//第一次走这个请求，一定是第一页</span></span><br><span class="line">    <span class="built_in">int</span> pageSize = <span class="number">5</span>;        <span class="comment">//页面容量设置个大于0的整数即可</span></span><br><span class="line">    <span class="keyword">if</span> (queryUserName<span class="operator"> == </span>null)&#123;</span><br><span class="line">        queryUserName = <span class="string">&quot;&quot;</span>;      <span class="comment">//查询出所有用户，因为空的时候执行的是没拼接前的 sql 语句。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (temp != null<span class="operator"> &amp;&amp; </span>!temp.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">        queryUserRole = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">temp</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pageIndex != null)&#123;        <span class="comment">//这只是对 currentPageNo 变量的第一次判断操作，还要考虑当页码小于0和大于总页数的情况。所以会在后面才将 currentPageNo 变量传回给前端。</span></span><br><span class="line">        currentPageNo = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">pageIndex</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    userList = userService.get<span class="constructor">UserList(<span class="params">queryUserName</span>, <span class="params">queryUserRole</span>, <span class="params">currentPageNo</span>, <span class="params">pageSize</span>)</span>;</span><br><span class="line">    req.set<span class="constructor">Attribute(<span class="string">&quot;queryUserName&quot;</span>,<span class="params">queryUserName</span>)</span>;</span><br><span class="line">    req.set<span class="constructor">Attribute(<span class="string">&quot;queryUserRole&quot;</span>,<span class="params">queryUserRole</span>)</span>;</span><br><span class="line">    req.set<span class="constructor">Attribute(<span class="string">&quot;userList&quot;</span>,<span class="params">userList</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取用户总数、总页数以及第二次判断操作后的页码数传回给前端</span></span><br><span class="line">    <span class="built_in">int</span> totalCount = userService.get<span class="constructor">UserCount(<span class="params">queryUserName</span>, <span class="params">queryUserRole</span>)</span>;</span><br><span class="line">    PageSupport pageSupport = <span class="keyword">new</span> <span class="constructor">PageSupport()</span>;</span><br><span class="line">    <span class="comment">//下面两步是为了计算总页数而将页面容量和总用户数传回去</span></span><br><span class="line">    pageSupport.set<span class="constructor">PageSize(<span class="params">pageSize</span>)</span>;</span><br><span class="line">    pageSupport.set<span class="constructor">TotalCount(<span class="params">totalCount</span>)</span>;</span><br><span class="line">    <span class="comment">//控制首页和尾页翻页</span></span><br><span class="line">    <span class="built_in">int</span> totalPageCount = pageSupport.get<span class="constructor">TotalPageCount()</span>;</span><br><span class="line">    <span class="comment">//下面就是对 currentPageNo 变量的第二次判断操作</span></span><br><span class="line">    <span class="keyword">if</span>(totalPageCount &lt; <span class="number">1</span>)&#123;       <span class="comment">//如果页码小于1，则显示第一页的内容。</span></span><br><span class="line">        currentPageNo = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currentPageNo &gt; totalPageCount)&#123;     <span class="comment">//如果页码大于总页数，则显示最后一页的内容。</span></span><br><span class="line">        currentPageNo = totalPageCount;</span><br><span class="line">    &#125;</span><br><span class="line">    req.set<span class="constructor">Attribute(<span class="string">&quot;currentPageNo&quot;</span>,<span class="params">currentPageNo</span>)</span>;</span><br><span class="line">    req.set<span class="constructor">Attribute(<span class="string">&quot;totalCount&quot;</span>,<span class="params">totalCount</span>)</span>;</span><br><span class="line">    req.set<span class="constructor">Attribute(<span class="string">&quot;totalPageCount&quot;</span>,<span class="params">totalPageCount</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求转发回用户管理页面</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        req.get<span class="constructor">RequestDispatcher(<span class="string">&quot;userlist.jsp&quot;</span>)</span>.forward(req,resp);</span><br><span class="line">    &#125; catch (ServletException  IOException e) &#123;</span><br><span class="line">        e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(十七)</title>
    <url>/2021/07/23/javaweb-basis17/</url>
    <content><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>文件上传的注意事项：</p>
<ul>
<li>  为保证服务器安全，上传文件应该放在外界无法直接访问的目录下，比如放于 WEB-INF 目录下。</li>
<li>  为防止文件覆盖的现象发生，要为上传的文件生成一个唯一的文件名。</li>
<li>一个目录下不应该存放过多的文件，一般一个目录存放1000个文件就是上限了，如果再多，那么打开目录时就会很卡。我们应该采用某种算法来打散。打散的方法有很多，例如使用日期来打散，每天生成一个目录。也可以使用文件名的首字母来生成目录，相同首字母的文件放到同一目录下。<br>  日期打散算法：如果某一天上传的文件过多，也会出现一个目录文件过多的情况。<br>  首字母打散算法：如果文件名是中文的，因为中文过多，也会导致目录过多的现象。<br>  我们使用的是 hash 打散算法。在 upload 目录下最多生成16个目录，而每个目录下最多再生成16个目录，即256个目录，所有上传的文件都放到这256个目录下。</li>
<li>  要限制上传文件的最大值。</li>
<li>  可以限制上传文件的类型，在收到上传文件名时，判断后缀名是否合法。</li>
</ul>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传组件的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-jsp-页面"><a href="#创建-jsp-页面" class="headerlink" title="创建 jsp 页面"></a>创建 jsp 页面</h3><p>表单必须设置 enctype 属性为 multipart/form-data，且提交方式只能为 post，因为 get 方式上传文件大小有限制。</p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    上传用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">    上传文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">&lt;%--message.jsp（提示信息）--%&gt;</span></span><br><span class="line"><span class="attribute">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;html&gt;</span></span><br><span class="line"><span class="attribute">&lt;head&gt;</span></span><br><span class="line">    <span class="attribute">&lt;title&gt;</span>Title<span class="attribute">&lt;/title&gt;</span></span><br><span class="line"><span class="attribute">&lt;/head&gt;</span></span><br><span class="line"><span class="attribute">&lt;body&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="attribute">&lt;/body&gt;</span></span><br><span class="line"><span class="attribute">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-Servlet"><a href="#创建-Servlet" class="headerlink" title="创建 Servlet"></a>创建 Servlet</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.fileupload.FileItem;</span><br><span class="line">import org.apache.commons.fileupload.FileUploadBase;</span><br><span class="line">import org.apache.commons.fileupload.ProgressListener;</span><br><span class="line">import org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line">import org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Upload extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//判断请求中的是普通表单还是带文件表单</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="module-access"><span class="module"><span class="identifier">ServletFileUpload</span>.</span></span>is<span class="constructor">MultipartContent(<span class="params">req</span>)</span>) &#123;</span><br><span class="line">            return;    <span class="comment">//判断不是带文件表单，终止方法运行。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建文件的保存路径，先不生成目录，后面需要用 hash 算法打散。</span></span><br><span class="line">        String uploadPath = get<span class="constructor">ServletContext()</span>.get<span class="constructor">RealPath(<span class="string">&quot;WEB-INF/upload&quot;</span>)</span>;</span><br><span class="line">        <span class="comment">//创建文件的临时保存路径，当文件超过了预期大小，就将其放入临时文件夹中，过几天自动删除或是永久保存。</span></span><br><span class="line">        String tempPath = get<span class="constructor">ServletContext()</span>.get<span class="constructor">RealPath(<span class="string">&quot;WEB-INF/temp&quot;</span>)</span>;</span><br><span class="line">        File tempFile = <span class="keyword">new</span> <span class="constructor">File(<span class="params">tempPath</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (!tempFile.exists<span class="literal">()</span>) &#123;</span><br><span class="line">            tempFile.mkdir<span class="literal">()</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消息提示变量</span></span><br><span class="line">        String message = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建 DiskFileItemFactory 对象，设置文件上传路径和缓冲区大小。</span></span><br><span class="line">        DiskFileItemFactory diskFileItemFactory = <span class="keyword">new</span> <span class="constructor">DiskFileItemFactory()</span>;</span><br><span class="line">        diskFileItemFactory.set<span class="constructor">SizeThreshold(1024 <span class="operator">*</span> 1024)</span>;       <span class="comment">//创建缓冲区（1M），大于缓冲区时就将文件放入临时文件夹中。</span></span><br><span class="line">        diskFileItemFactory.set<span class="constructor">Repository(<span class="params">tempFile</span>)</span>;     <span class="comment">//设置文件的临时保存路径，需要传入一个 File 对象。</span></span><br><span class="line">        <span class="comment">//ServletFileUpload 对象负责处理上传的文件数据，需要传入一个 DiskFileItemFactory 对象。</span></span><br><span class="line">        ServletFileUpload servletFileUpload = <span class="keyword">new</span> <span class="constructor">ServletFileUpload(<span class="params">diskFileItemFactory</span>)</span>;</span><br><span class="line">        <span class="comment">//监听文件上传进度</span></span><br><span class="line">        servletFileUpload.set<span class="constructor">ProgressListener(<span class="params">new</span> ProgressListener()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void update(long l, long l1, <span class="built_in">int</span> i) &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;总大小：&quot;</span> + l + <span class="string">&quot;已上传：&quot;</span> + l1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//处理乱码问题</span></span><br><span class="line">        servletFileUpload.set<span class="constructor">HeaderEncoding(<span class="string">&quot;UTF-8&quot;</span>)</span>;</span><br><span class="line">        <span class="comment">//设置单个文件最大值</span></span><br><span class="line">        servletFileUpload.set<span class="constructor">FileSizeMax(1024 <span class="operator">*</span> 1024 <span class="operator">*</span> 10)</span>;</span><br><span class="line">        <span class="comment">//设置全部文件最大值</span></span><br><span class="line">        servletFileUpload.set<span class="constructor">SizeMax(1024 <span class="operator">*</span> 1024 <span class="operator">*</span> 10 <span class="operator">*</span> 10)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析前端请求，封装成一个 FileItem 对象。（列表）</span></span><br><span class="line">            List&lt;FileItem&gt; fileItems = servletFileUpload.parse<span class="constructor">Request(<span class="params">req</span>)</span>;</span><br><span class="line">            <span class="keyword">for</span> (FileItem fileItem : fileItems) &#123;</span><br><span class="line">                <span class="comment">//判断 input 标签元素是否为普通表单元素</span></span><br><span class="line">                <span class="keyword">if</span> (fileItem.is<span class="constructor">FormField()</span>)&#123;</span><br><span class="line">                    String name = fileItem.get<span class="constructor">FieldName()</span>;</span><br><span class="line">                    String value = fileItem.get<span class="constructor">String(<span class="string">&quot;UTF-8&quot;</span>)</span>;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(name + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;        <span class="comment">//否则为文件表单元素</span></span><br><span class="line">                    <span class="comment">//文件处理</span></span><br><span class="line">                    <span class="comment">//获取文件名</span></span><br><span class="line">                    String fileItemName = fileItem.get<span class="constructor">Name()</span>;</span><br><span class="line">                    <span class="comment">//文件名去掉首尾空格后为空时，就跳过本次循环，进行下一次循环。</span></span><br><span class="line">                    <span class="keyword">if</span> (fileItemName.trim<span class="literal">()</span>.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//另一种获取文件名的方式</span></span><br><span class="line">                    String fileName = fileItemName.substring(fileItemName.last<span class="constructor">IndexOf(<span class="string">&quot;/&quot;</span>)</span> + <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//同理获取文件名后缀，可以做判断处理，如果不是我们想要的，就直接 return，告诉用户文件类型错误。</span></span><br><span class="line">                    <span class="comment">//String fileExtName = fileItemName.substring(fileItemName.lastIndexOf(&quot;.&quot;) + 1);</span></span><br><span class="line">                    <span class="comment">//随机生成一个唯一识别的通用码 - UUID，保证文件名唯一。</span></span><br><span class="line">                    String saveFileName = <span class="module-access"><span class="module"><span class="identifier">UUID</span>.</span></span>random<span class="constructor">UUID()</span> + <span class="string">&quot;_&quot;</span> + fileName;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//目录处理</span></span><br><span class="line">                    <span class="comment">//hash 打散算法，打散目录。</span></span><br><span class="line">                    <span class="built_in">int</span> hCode = fileName.hash<span class="constructor">Code()</span>;    <span class="comment">//获取文件名的 hashCode</span></span><br><span class="line">                    <span class="comment">//获取 hCode 的低4位，并转换成16进制字符串</span></span><br><span class="line">                    String dir1 = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span><span class="keyword">to</span><span class="constructor">HexString(<span class="params">hCode</span> &amp; 0xF)</span>;</span><br><span class="line">                    <span class="comment">//获取 hCode 的低5~8位，并转换成16进制字符串</span></span><br><span class="line">                    String dir2 = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span><span class="keyword">to</span><span class="constructor">HexString(<span class="params">hCode</span> &gt;&gt;&gt; 4 &amp; 0xF)</span>;</span><br><span class="line">                    <span class="comment">//与文件保存目录连接成完整路径</span></span><br><span class="line">                    uploadPath = uploadPath + <span class="string">&quot;/&quot;</span> + dir1 + <span class="string">&quot;/&quot;</span> + dir2;</span><br><span class="line">                    <span class="comment">//因为这个路径可能不存在，所以创建成 File 对象，再创建目录链，确保目录在保存文件之前已经存在。</span></span><br><span class="line">                    File saveFilePath = <span class="keyword">new</span> <span class="constructor">File(<span class="params">uploadPath</span>)</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!saveFilePath.exists<span class="literal">()</span>)&#123;</span><br><span class="line">                        saveFilePath.mkdirs<span class="literal">()</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//传输处理</span></span><br><span class="line">                    <span class="comment">//获取 fileItem 的上传文件的输入流</span></span><br><span class="line">                    InputStream <span class="keyword">in</span> = fileItem.get<span class="constructor">InputStream()</span>;</span><br><span class="line">                    <span class="comment">//创建一个文件输出流</span></span><br><span class="line">                    FileOutputStream out = <span class="keyword">new</span> <span class="constructor">FileOutputStream(<span class="params">saveFilePath</span> + <span class="string">&quot;/&quot;</span> + <span class="params">saveFileName</span>)</span>;</span><br><span class="line">                    <span class="comment">//创建一个缓冲区</span></span><br><span class="line">                    byte<span class="literal">[]</span> buffer = <span class="keyword">new</span> byte<span class="literal">[<span class="number">1024</span>]</span>;</span><br><span class="line">                    <span class="comment">//判断输入流中的数据是否已经读完的标识</span></span><br><span class="line">                    <span class="built_in">int</span> len = <span class="number">0</span>;</span><br><span class="line">                    <span class="comment">//循环将输入流读入到缓冲区当中，len=in.read(buffer) &gt; 0 就表示 in 里面还有数据。</span></span><br><span class="line">                    <span class="keyword">while</span>((len=<span class="keyword">in</span>.read(buffer)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">in</span>.close<span class="literal">()</span>;</span><br><span class="line">                    out.close<span class="literal">()</span>;</span><br><span class="line">                    message = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                    fileItem.delete<span class="literal">()</span>;      <span class="comment">//上传成功，清除临时文件。</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (FileUploadBase.FileSizeLimitExceededException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">            req.set<span class="constructor">Attribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;单个文件超出最大值！&quot;</span>)</span>;</span><br><span class="line">            req.get<span class="constructor">RequestDispatcher(<span class="string">&quot;/message.jsp&quot;</span>)</span>.forward(req, resp);</span><br><span class="line">            return;</span><br><span class="line">        &#125; catch (FileUploadBase.SizeLimitExceededException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">            req.set<span class="constructor">Attribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;全部文件超出最大值！&quot;</span>)</span>;</span><br><span class="line">            req.get<span class="constructor">RequestDispatcher(<span class="string">&quot;/message.jsp&quot;</span>)</span>.forward(req, resp);</span><br><span class="line">            return;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">            req.set<span class="constructor">Attribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;文件上传失败！&quot;</span>)</span>;</span><br><span class="line">            req.get<span class="constructor">RequestDispatcher(<span class="string">&quot;/message.jsp&quot;</span>)</span>.forward(req, resp);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        req.set<span class="constructor">Attribute(<span class="string">&quot;msg&quot;</span>,<span class="params">message</span>)</span>;</span><br><span class="line">        req.get<span class="constructor">RequestDispatcher(<span class="string">&quot;/message.jsp&quot;</span>)</span>.forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">do</span><span class="constructor">Post(<span class="params">req</span>, <span class="params">resp</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 catch 这些异常时，有时会给用户以响应，通过 request 域设置错误信息，但是当用户上传的文件超过限制的大小时，并不会转发，这是 Tomcat 的 bug。使用低版本的 Tomcat 即可解决这个问题。</p>
<h3 id="添加映射"><a href="#添加映射" class="headerlink" title="添加映射"></a>添加映射</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>upload<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.Upload<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>upload<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/upload<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 基础(十八)</title>
    <url>/2021/07/23/javaweb-basis18/</url>
    <content><![CDATA[<h2 id="邮件发送（了解即可）"><a href="#邮件发送（了解即可）" class="headerlink" title="邮件发送（了解即可）"></a>邮件发送（了解即可）</h2><p><img data-src="/images/javaweb-basis18.md-0.png"></p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--邮件发送组件的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="发送文本邮件"><a href="#发送文本邮件" class="headerlink" title="发送文本邮件"></a>发送文本邮件</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">import com.sun.mail.util.MailSSLSocketFactory;</span><br><span class="line">import jakarta.mail.*;</span><br><span class="line">import jakarta.mail.internet.InternetAddress;</span><br><span class="line">import jakarta.mail.internet.MimeMessage;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> EmailDemo01 &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) throws Exception &#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> <span class="constructor">Properties()</span>;</span><br><span class="line">        prop.set<span class="constructor">Property(<span class="string">&quot;mail.host&quot;</span>,<span class="string">&quot;smtp.qq.com&quot;</span>)</span>;        <span class="comment">//设置 QQ 邮箱服务器</span></span><br><span class="line">        prop.set<span class="constructor">Property(<span class="string">&quot;mail.transport.protocol&quot;</span>,<span class="string">&quot;smtp&quot;</span>)</span>; <span class="comment">//邮件发送协议</span></span><br><span class="line">        prop.set<span class="constructor">Property(<span class="string">&quot;mail.smtp.auth&quot;</span>,<span class="string">&quot;true&quot;</span>)</span>;          <span class="comment">//用户名和密码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//QQ 邮箱还要设置 SSL 加密，其他邮箱大部分不需要。</span></span><br><span class="line">        MailSSLSocketFactory sf = <span class="keyword">new</span> <span class="constructor">MailSSLSocketFactory()</span>;</span><br><span class="line">        sf.set<span class="constructor">TrustAllHosts(<span class="params">true</span>)</span>;</span><br><span class="line">        prop.put(<span class="string">&quot;mail.smtp.ssl.enable&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;mail.smtp.ssl.socketFactory&quot;</span>,sf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建定义整个应用程序所需的环境信息的 Session 对象</span></span><br><span class="line">        <span class="comment">//下面的匿名内部类是 QQ 邮箱验证发件人身份用的，其它邮箱大部分不需要，只需传入 prop 配置即可。</span></span><br><span class="line">        Session session = <span class="module-access"><span class="module"><span class="identifier">Session</span>.</span></span>get<span class="constructor">DefaultInstance(<span class="params">prop</span>, <span class="params">new</span> Authenticator()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected PasswordAuthentication get<span class="constructor">PasswordAuthentication()</span> &#123;</span><br><span class="line">                <span class="comment">//发送人邮件用户名、授权码</span></span><br><span class="line">                return <span class="keyword">new</span> <span class="constructor">PasswordAuthentication(<span class="string">&quot;1036635267@qq.com&quot;</span>, <span class="string">&quot;seqckelxpyxhbbfh&quot;</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启 Session 的 debug 模式，这样就可以查看到程序发送 Email 的运行状态。</span></span><br><span class="line">        session.set<span class="constructor">Debug(<span class="params">true</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过 Session 得到 Transport 对象</span></span><br><span class="line">        Transport ts = session.get<span class="constructor">Transport()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用邮箱的用户名和授权码连上邮件服务器</span></span><br><span class="line">        ts.connect(<span class="string">&quot;smtp.qq.com&quot;</span>,<span class="string">&quot;1036635267@qq.com&quot;</span>,<span class="string">&quot;gayaqoznksadbefe&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建邮件，其实就是写邮件。注意：需要传入 Session 对象。</span></span><br><span class="line">        MimeMessage message = <span class="keyword">new</span> <span class="constructor">MimeMessage(<span class="params">session</span>)</span>;</span><br><span class="line">        <span class="comment">//指明邮件的发送人</span></span><br><span class="line">        message.set<span class="constructor">From(<span class="params">new</span> InternetAddress(<span class="string">&quot;1036635267@qq.com&quot;</span>)</span>);</span><br><span class="line">        <span class="comment">//指明邮件的收件人，可以自己给自己发邮件。</span></span><br><span class="line">        message.set<span class="constructor">Recipient(Message.RecipientType.TO,<span class="params">new</span> InternetAddress(<span class="string">&quot;1036635267@qq.com&quot;</span>)</span>);</span><br><span class="line">        <span class="comment">//邮件的标题</span></span><br><span class="line">        message.set<span class="constructor">Subject(<span class="string">&quot;只包含文本的简单邮件&quot;</span>)</span>;</span><br><span class="line">        <span class="comment">//邮件的文本内容</span></span><br><span class="line">        message.set<span class="constructor">Content(<span class="string">&quot;&lt;h1 style=&#x27;color:red&#x27;&gt;你好!&lt;/h1&gt;&quot;</span>,<span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送邮件</span></span><br><span class="line">        ts.send<span class="constructor">Message(<span class="params">message</span>,<span class="params">message</span>.<span class="params">getAllRecipients</span>()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        ts.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="发送不只有文本的邮件"><a href="#发送不只有文本的邮件" class="headerlink" title="发送不只有文本的邮件"></a>发送不只有文本的邮件</h3><p><img data-src="/images/javaweb-basis18.md-1.png"></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">import com.sun.mail.util.MailSSLSocketFactory;</span><br><span class="line">import jakarta.activation.DataHandler;</span><br><span class="line">import jakarta.activation.FileDataSource;</span><br><span class="line">import jakarta.mail.*;</span><br><span class="line">import jakarta.mail.internet.InternetAddress;</span><br><span class="line">import jakarta.mail.internet.MimeBodyPart;</span><br><span class="line">import jakarta.mail.internet.MimeMessage;</span><br><span class="line">import jakarta.mail.internet.MimeMultipart;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> EmailDemo02 &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) throws Exception &#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> <span class="constructor">Properties()</span>;</span><br><span class="line">        prop.set<span class="constructor">Property(<span class="string">&quot;mail.host&quot;</span>, <span class="string">&quot;smtp.qq.com&quot;</span>)</span>;        <span class="comment">//设置qq邮箱服务器</span></span><br><span class="line">        prop.set<span class="constructor">Property(<span class="string">&quot;mail.transport.protocol&quot;</span>, <span class="string">&quot;smtp&quot;</span>)</span>; <span class="comment">//邮件发送协议</span></span><br><span class="line">        prop.set<span class="constructor">Property(<span class="string">&quot;mail.smtp.auth&quot;</span>, <span class="string">&quot;true&quot;</span>)</span>;          <span class="comment">//需要验证用户名密码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//QQ 邮箱还要设置 SSL 加密，其他邮箱大部分不需要。</span></span><br><span class="line">        MailSSLSocketFactory sf = <span class="keyword">new</span> <span class="constructor">MailSSLSocketFactory()</span>;</span><br><span class="line">        sf.set<span class="constructor">TrustAllHosts(<span class="params">true</span>)</span>;</span><br><span class="line">        prop.put(<span class="string">&quot;mail.smtp.ssl.enable&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;mail.smtp.ssl.socketFactory&quot;</span>, sf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建定义整个应用程序所需的环境信息的 Session 对象</span></span><br><span class="line">        <span class="comment">//下面的匿名内部类是 QQ 邮箱才有的，其它邮箱大部分不需要，只需传入 prop 配置即可。</span></span><br><span class="line">        Session session = <span class="module-access"><span class="module"><span class="identifier">Session</span>.</span></span>get<span class="constructor">DefaultInstance(<span class="params">prop</span>, <span class="params">new</span> Authenticator()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected PasswordAuthentication get<span class="constructor">PasswordAuthentication()</span> &#123;</span><br><span class="line">                <span class="comment">//发送人邮件用户名、授权码</span></span><br><span class="line">                return <span class="keyword">new</span> <span class="constructor">PasswordAuthentication(<span class="string">&quot;1036635267@qq.com&quot;</span>, <span class="string">&quot;seqckelxpyxhbbfh&quot;</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启 Session 的 debug 模式，这样就可以查看到程序发送 Email 的运行状态。</span></span><br><span class="line">        session.set<span class="constructor">Debug(<span class="params">true</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过 Session 得到 Transport 对象</span></span><br><span class="line">        Transport ts = session.get<span class="constructor">Transport()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用邮箱的用户名和授权码连上邮件服务器</span></span><br><span class="line">        ts.connect(<span class="string">&quot;smtp.qq.com&quot;</span>, <span class="string">&quot;1036635267@qq.com&quot;</span>, <span class="string">&quot;gayaqoznksadbefe&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建邮件，其实就是写邮件。注意：需要传入 Session 对象。</span></span><br><span class="line">        MimeMessage message = <span class="keyword">new</span> <span class="constructor">MimeMessage(<span class="params">session</span>)</span>;</span><br><span class="line">        <span class="comment">//指明邮件的发送人</span></span><br><span class="line">        message.set<span class="constructor">From(<span class="params">new</span> InternetAddress(<span class="string">&quot;1036635267@qq.com&quot;</span>)</span>);</span><br><span class="line">        <span class="comment">//指明邮件的收件人，可以自己给自己发邮件。</span></span><br><span class="line">        message.set<span class="constructor">Recipient(Message.RecipientType.TO, <span class="params">new</span> InternetAddress(<span class="string">&quot;1036635267@qq.com&quot;</span>)</span>);</span><br><span class="line">        <span class="comment">//邮件的标题</span></span><br><span class="line">        message.set<span class="constructor">Subject(<span class="string">&quot;不只有文本的复杂邮件&quot;</span>)</span>;</span><br><span class="line">        <span class="comment">//处理图片数据</span></span><br><span class="line">        MimeBodyPart image = <span class="keyword">new</span> <span class="constructor">MimeBodyPart()</span>;</span><br><span class="line">        DataHandler dh = <span class="keyword">new</span> <span class="constructor">DataHandler(<span class="params">new</span> FileDataSource(<span class="string">&quot;E:\\DEMO\\JavaWeb\\src\\main\\resources\\test.png&quot;</span>)</span>);</span><br><span class="line">        image.set<span class="constructor">DataHandler(<span class="params">dh</span>)</span>;</span><br><span class="line">        image.set<span class="constructor">ContentID(<span class="string">&quot;test.png&quot;</span>)</span>;      <span class="comment">//图片设置名字，下面会用到。</span></span><br><span class="line">        <span class="comment">//处理附件数据</span></span><br><span class="line">        MimeBodyPart attachment = <span class="keyword">new</span> <span class="constructor">MimeBodyPart()</span>;</span><br><span class="line">        attachment.set<span class="constructor">DataHandler(<span class="params">new</span> DataHandler(<span class="params">new</span> FileDataSource(<span class="string">&quot;E:\\DEMO\\JavaWeb\\src\\main\\resources\\db.properties&quot;</span>)</span>));</span><br><span class="line">        attachment.set<span class="constructor">FileName(<span class="string">&quot;db.properties&quot;</span>)</span>;      <span class="comment">//附件设置名字</span></span><br><span class="line">        <span class="comment">//处理文本数据</span></span><br><span class="line">        MimeBodyPart text = <span class="keyword">new</span> <span class="constructor">MimeBodyPart()</span>;</span><br><span class="line">        text.set<span class="constructor">Content(<span class="string">&quot;这是一封正文带图片&lt;img src=&#x27;cid:test.png&#x27;&gt;的邮件&quot;</span>,<span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span>;</span><br><span class="line">        <span class="comment">//描述数据关系</span></span><br><span class="line">        MimeMultipart mm = <span class="keyword">new</span> <span class="constructor">MimeMultipart()</span>;</span><br><span class="line">        mm.add<span class="constructor">BodyPart(<span class="params">image</span>)</span>;</span><br><span class="line">        mm.add<span class="constructor">BodyPart(<span class="params">attachment</span>)</span>;</span><br><span class="line">        mm.add<span class="constructor">BodyPart(<span class="params">text</span>)</span>;</span><br><span class="line">        mm.set<span class="constructor">SubType(<span class="string">&quot;mixed&quot;</span>)</span>;</span><br><span class="line">        <span class="comment">//放到消息中并保存修改</span></span><br><span class="line">        message.set<span class="constructor">Content(<span class="params">mm</span>)</span>;</span><br><span class="line">        message.save<span class="constructor">Changes()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送邮件</span></span><br><span class="line">        ts.send<span class="constructor">Message(<span class="params">message</span>, <span class="params">message</span>.<span class="params">getAllRecipients</span>()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        ts.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h3><h4 id="创建-jsp-页面"><a href="#创建-jsp-页面" class="headerlink" title="创建 jsp 页面"></a>创建 jsp 页面</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath&#125;</span><span class="xml"><span class="tag"><span class="string">/register&quot;</span> <span class="attr">method</span>=<span class="string">&quot;p&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">&lt;%--message.jsp--%&gt;</span></span><br><span class="line"><span class="attribute">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span></span><br><span class="line"><span class="attribute">&lt;html&gt;</span></span><br><span class="line"><span class="attribute">&lt;head&gt;</span></span><br><span class="line">    <span class="attribute">&lt;title&gt;</span>Title<span class="attribute">&lt;/title&gt;</span></span><br><span class="line"><span class="attribute">&lt;/head&gt;</span></span><br><span class="line"><span class="attribute">&lt;body&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="attribute">&lt;/body&gt;</span></span><br><span class="line"><span class="attribute">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> username;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> password;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">User</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">User</span>(<span class="params"><span class="built_in">String</span> username, <span class="built_in">String</span> password, <span class="built_in">String</span> email</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getUsername</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setUsername</span>(<span class="params"><span class="built_in">String</span> username</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getPassword</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setPassword</span>(<span class="params"><span class="built_in">String</span> password</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getEmail</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setEmail</span>(<span class="params"><span class="built_in">String</span> email</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建-Servlet"><a href="#创建-Servlet" class="headerlink" title="创建 Servlet"></a>创建 Servlet</h4><p>发送邮件是一件耗时的事情，因此创建一个线程类来发送邮件，提升用户体验。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997;</span><br><span class="line"></span><br><span class="line">import com.sun.mail.util.MailSSLSocketFactory;</span><br><span class="line">import jakarta.mail.*;</span><br><span class="line">import jakarta.mail.internet.InternetAddress;</span><br><span class="line">import jakarta.mail.internet.MimeMessage;</span><br><span class="line">import ml.guest997.pojo.User;</span><br><span class="line">import java.security.GeneralSecurityException;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> SendEmail extends Thread &#123;</span><br><span class="line">    <span class="keyword">private</span> String from = <span class="string">&quot;1036635267@qq.com&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String username = <span class="string">&quot;1036635267@qq.com&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">&quot;seqckelxpyxhbbfh&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">&quot;smtp.qq.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    public <span class="constructor">SendEmail(User <span class="params">user</span>)</span> &#123;</span><br><span class="line">        this.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run<span class="literal">()</span> &#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> <span class="constructor">Properties()</span>;</span><br><span class="line">        prop.set<span class="constructor">Property(<span class="string">&quot;mail.host&quot;</span>,<span class="string">&quot;smtp.qq.com&quot;</span>)</span>;        <span class="comment">//设置 QQ 邮箱服务器</span></span><br><span class="line">        prop.set<span class="constructor">Property(<span class="string">&quot;mail.transport.protocol&quot;</span>,<span class="string">&quot;smtp&quot;</span>)</span>; <span class="comment">//邮件发送协议</span></span><br><span class="line">        prop.set<span class="constructor">Property(<span class="string">&quot;mail.smtp.auth&quot;</span>,<span class="string">&quot;true&quot;</span>)</span>;          <span class="comment">//需要验证用户名密码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//QQ 邮箱还要设置 SSL 加密，其他邮箱大部分不需要。</span></span><br><span class="line">            MailSSLSocketFactory sf = <span class="keyword">new</span> <span class="constructor">MailSSLSocketFactory()</span>;</span><br><span class="line">            sf.set<span class="constructor">TrustAllHosts(<span class="params">true</span>)</span>;</span><br><span class="line">            prop.put(<span class="string">&quot;mail.smtp.ssl.enable&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">            prop.put(<span class="string">&quot;mail.smtp.ssl.socketFactory&quot;</span>,sf);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建定义整个应用程序所需的环境信息的 Session 对象</span></span><br><span class="line">            <span class="comment">//下面的匿名内部类是 QQ 邮箱才有的，其它邮箱大部分不需要，只需传入 prop 配置即可。</span></span><br><span class="line">            Session session = <span class="module-access"><span class="module"><span class="identifier">Session</span>.</span></span>get<span class="constructor">DefaultInstance(<span class="params">prop</span>, <span class="params">new</span> Authenticator()</span> &#123;</span><br><span class="line">                @Override</span><br><span class="line">                protected PasswordAuthentication get<span class="constructor">PasswordAuthentication()</span> &#123;</span><br><span class="line">                    <span class="comment">//发送人邮件用户名、授权码</span></span><br><span class="line">                    return <span class="keyword">new</span> <span class="constructor">PasswordAuthentication(<span class="string">&quot;1036635267@qq.com&quot;</span>, <span class="string">&quot;seqckelxpyxhbbfh&quot;</span>)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开启 Session 的 debug 模式，这样就可以查看到程序发送 Email 的运行状态。</span></span><br><span class="line">            session.set<span class="constructor">Debug(<span class="params">true</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过 Session 得到 Transport 对象</span></span><br><span class="line">            Transport ts = session.get<span class="constructor">Transport()</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用邮箱的用户名和授权码连上邮件服务器</span></span><br><span class="line">            ts.connect(host,username,password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建邮件，其实就是写邮件。注意：需要传入 Session 对象。</span></span><br><span class="line">            MimeMessage message = <span class="keyword">new</span> <span class="constructor">MimeMessage(<span class="params">session</span>)</span>;</span><br><span class="line">            <span class="comment">//指明邮件的发送人</span></span><br><span class="line">            message.set<span class="constructor">From(<span class="params">new</span> InternetAddress(<span class="params">from</span>)</span>);</span><br><span class="line">            <span class="comment">//指明邮件的收件人</span></span><br><span class="line">            message.set<span class="constructor">Recipient(Message.RecipientType.TO,<span class="params">new</span> InternetAddress(<span class="params">user</span>.<span class="params">getEmail</span>()</span>));</span><br><span class="line">            <span class="comment">//邮件的标题</span></span><br><span class="line">            message.set<span class="constructor">Subject(<span class="string">&quot;用户注册邮件&quot;</span>)</span>;</span><br><span class="line">            <span class="comment">//邮件的文本内容</span></span><br><span class="line">            String info = <span class="string">&quot;恭喜您注册成功，您的用户名：&quot;</span> + user.get<span class="constructor">Username()</span> + <span class="string">&quot;,您的密码：&quot;</span> + user.get<span class="constructor">Password()</span> + <span class="string">&quot;，请妥善保管，如有问题请联系网站客服！&quot;</span>;</span><br><span class="line">            message.set<span class="constructor">Content(<span class="params">info</span>,<span class="string">&quot;text/html;charset=UTF-8&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送邮件</span></span><br><span class="line">            ts.send<span class="constructor">Message(<span class="params">message</span>,<span class="params">message</span>.<span class="params">getAllRecipients</span>()</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            ts.close<span class="literal">()</span>;</span><br><span class="line">        &#125; catch (GeneralSecurityException  MessagingException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997.servlet;</span><br><span class="line"></span><br><span class="line">import ml.guest997.SendEmail;</span><br><span class="line">import ml.guest997.pojo.User;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Register extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        String username = req.get<span class="constructor">Parameter(<span class="string">&quot;username&quot;</span>)</span>;</span><br><span class="line">        String password = req.get<span class="constructor">Parameter(<span class="string">&quot;password&quot;</span>)</span>;</span><br><span class="line">        String email = req.get<span class="constructor">Parameter(<span class="string">&quot;email&quot;</span>)</span>;</span><br><span class="line">        User user = <span class="keyword">new</span> <span class="constructor">User()</span>;</span><br><span class="line">        user.set<span class="constructor">Email(<span class="params">email</span>)</span>;</span><br><span class="line">        user.set<span class="constructor">Password(<span class="params">password</span>)</span>;</span><br><span class="line">        user.set<span class="constructor">Username(<span class="params">username</span>)</span>;</span><br><span class="line"></span><br><span class="line">        SendEmail send = <span class="keyword">new</span> <span class="constructor">SendEmail(<span class="params">user</span>)</span>;</span><br><span class="line">        <span class="comment">//启动线程执行 run 方法来发送邮件</span></span><br><span class="line">        send.start<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        req.set<span class="constructor">Attribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;恭喜您，注册成功，我们已经发了一封带了注册信息的电子邮件，请查收，如果没有收到，可能是网络原因，过一会儿就收到了。&quot;</span>)</span>;</span><br><span class="line">        req.get<span class="constructor">RequestDispatcher(<span class="string">&quot;/message.jsp&quot;</span>)</span>.forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">req</span>, HttpServletResponse <span class="params">resp</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">do</span><span class="constructor">Get(<span class="params">req</span>, <span class="params">resp</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加映射"><a href="#添加映射" class="headerlink" title="添加映射"></a>添加映射</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>register<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ml.guest997.servlet.Register<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>register<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/register<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC 详解(一)</title>
    <url>/2021/06/18/jdbc-expound01/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>点击后方链接了解 MySQL_JDBC 的 jar 包的下载与使用。<a href="https://www.cnblogs.com/NyanKoSenSei/p/11510438.html">https://www.cnblogs.com/NyanKoSenSei/p/11510438.html</a></p>
<h2 id="第一个-JDBC-程序（数据库基于之前的-MySQL-文章）"><a href="#第一个-JDBC-程序（数据库基于之前的-MySQL-文章）" class="headerlink" title="第一个 JDBC 程序（数据库基于之前的 MySQL 文章）"></a>第一个 JDBC 程序（数据库基于之前的 MySQL 文章）</h2><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">import java.sql.*;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"><span class="code">    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;</span></span><br><span class="line"><span class="code">        //加载数据库驱动</span></span><br><span class="line"><span class="code">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="code">        //创建用户信息和 url 字符串</span></span><br><span class="line"><span class="code">        String url = &quot;jdbc:mysql://localhost:3306/school?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;;</span></span><br><span class="line"><span class="code">        String username = &quot;root&quot;;</span></span><br><span class="line"><span class="code">        String password = &quot;root&quot;;</span></span><br><span class="line"><span class="code">        //连接数据库</span></span><br><span class="line"><span class="code">        Connection connection = DriverManager.getConnection(url,username,password);</span></span><br><span class="line"><span class="code">        //创建 Statement 对象用于执行 sql 语句</span></span><br><span class="line"><span class="code">        Statement statement = connection.createStatement();</span></span><br><span class="line"><span class="code">        String sql = &quot;select * from `grade`;&quot;;</span></span><br><span class="line"><span class="code">        //获得返回的结果集</span></span><br><span class="line"><span class="code">        ResultSet resultSet = statement.executeQuery(sql);</span></span><br><span class="line"><span class="code">        while (resultSet.next())&#123;</span></span><br><span class="line"><span class="code">            System.out.println(&quot;gradeid=&quot; + resultSet.getObject(&quot;gradeid&quot;));</span></span><br><span class="line"><span class="code">            System.out.println(&quot;gradename=&quot; + resultSet.getObject(&quot;gradename&quot;));</span></span><br><span class="line"><span class="code">            System.out.println(&quot;================&quot;);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        //释放连接</span></span><br><span class="line"><span class="code">        resultSet.close();</span></span><br><span class="line"><span class="code">        statement.close();</span></span><br><span class="line"><span class="code">        connection.close();</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">/*结果为</span><br><span class="line">gradeid=1</span><br><span class="line"><span class="section">gradename=大一</span></span><br><span class="line"><span class="section">================</span></span><br><span class="line">gradeid=2</span><br><span class="line"><span class="section">gradename=大二</span></span><br><span class="line"><span class="section">================</span></span><br><span class="line">gradeid=3</span><br><span class="line"><span class="section">gradename=大三</span></span><br><span class="line"><span class="section">================</span></span><br><span class="line">gradeid=4</span><br><span class="line"><span class="section">gradename=大四</span></span><br><span class="line"><span class="section">================</span></span><br><span class="line">gradeid=5</span><br><span class="line"><span class="section">gradename=预科班</span></span><br><span class="line"><span class="section">================</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h2 id="程序讲解"><a href="#程序讲解" class="headerlink" title="程序讲解"></a>程序讲解</h2><p>Class.forName() 与 new 的区别：Class.forName() 返回的是类，new 返回的是对象。</p>
<p>url 格式：协议://主机:端口//数据库名?参数1&amp;参数2</p>
<p>Statement 对象：</p>
<ul>
<li>  executeQuery()：查询操作，返回的是结果集。</li>
<li>  executeUpdate()：增删改操作，返回受影响的行数。（使用 if 判断受影响的行数是否大于0，即可知道是否操作成功）</li>
<li>  execute()：能够执行全部 SQL 语句，但效率较低。</li>
</ul>
<p>ResultSet 结果集：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>获取数据</span><br><span class="line">resultSet.getObject();   <span class="regexp">//</span>在不知道数据类型的情况下使用</span><br><span class="line"><span class="regexp">//</span>在知道数据类型的情况下使用</span><br><span class="line">resultSet.getString();</span><br><span class="line">resultSet.getInt();</span><br><span class="line">resultSet.getFloat();</span><br><span class="line">resultSet.getDate();</span><br><span class="line"><span class="regexp">//</span>遍历数据（指针）</span><br><span class="line">resultSet.beforeFirst();     <span class="regexp">//</span>移动到最前面</span><br><span class="line">resultSet.afterLast();        <span class="regexp">//</span>移动到最后面</span><br><span class="line">resultSet.<span class="keyword">next</span>();            <span class="regexp">//</span>移动到下一个数据</span><br><span class="line">resultSet.previous();        <span class="regexp">//</span>移动到上一行</span><br><span class="line">resultSet.absolute(row);    <span class="regexp">//</span>移动到指定行</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC 详解(二)</title>
    <url>/2021/07/10/jdbc-expound02/</url>
    <content><![CDATA[<h2 id="JDBC-工具类的封装"><a href="#JDBC-工具类的封装" class="headerlink" title="JDBC 工具类的封装"></a>JDBC 工具类的封装</h2><p>在编写程序时会用到资源绑定器来绑定属性配置文件，实现程序的低耦合度，后期只需修改属性配置文件中的命令即可。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>注意：属性配置文件必须以 properties 结尾，且放在 src 源目录下。</span><br><span class="line"><span class="regexp">//</span>db.properties</span><br><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="regexp">//</span>localhost:<span class="number">3306</span>/school?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JDBCUtil.java</span></span><br><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块，在程序编译的时候执行</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建 Properties 对象</span></span><br><span class="line">            Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取输入流</span></span><br><span class="line">            InputStream in = JDBCUtil.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            <span class="comment">//加载输入流</span></span><br><span class="line">            p.load(in);</span><br><span class="line">            <span class="comment">//获取数据库连接驱动名字</span></span><br><span class="line">            driver = p.getProperty(<span class="string">&quot;driver&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//获取数据库连接地址</span></span><br><span class="line">            url = p.getProperty(<span class="string">&quot;url&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//获取数据库连接用户名</span></span><br><span class="line">            username = p.getProperty(<span class="string">&quot;username&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//获取数据库连接密码</span></span><br><span class="line">            password = p.getProperty(<span class="string">&quot;password&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span>(driver != <span class="keyword">null</span> &amp;&amp; url != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; username != <span class="keyword">null</span> &amp;&amp; password != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//加载驱动</span></span><br><span class="line">                Class.forName(driver);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Connection 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DriverManager.getConnection(url,username,password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接（Connection 连接对象必须在最后关闭）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn Connection 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> st 编译执行对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs 结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(st != <span class="keyword">null</span>)&#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JDBC-工具类的测试"><a href="#JDBC-工具类的测试" class="headerlink" title="JDBC 工具类的测试"></a>JDBC 工具类的测试</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">//Demo02.java</span><br><span class="line">package Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.<span class="keyword">Connection</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.<span class="keyword">Statement</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Demo02 &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="built_in">new</span> Demo02().<span class="keyword">insert</span>();</span><br><span class="line">        <span class="built_in">new</span> Demo02().<span class="keyword">delete</span>();</span><br><span class="line">        <span class="built_in">new</span> Demo02().<span class="keyword">update</span>();</span><br><span class="line">        <span class="built_in">new</span> Demo02().query();</span><br><span class="line">    &#125;</span><br><span class="line">    //插入操作</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">insert</span>()&#123;</span><br><span class="line">        <span class="keyword">Connection</span> conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">Statement</span> st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            conn = JDBCUtil.getConn();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            String <span class="keyword">sql</span> = &quot;insert into `grade`(`gradeid`,`gradename`) values(6,&#x27;无&#x27;);&quot;;</span><br><span class="line">            <span class="type">int</span> i = st.executeUpdate(<span class="keyword">sql</span>);</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;插入成功！&quot;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;插入失败！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtil.<span class="keyword">close</span>(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //删除操作</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">delete</span>()&#123;</span><br><span class="line">        <span class="keyword">Connection</span> conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">Statement</span> st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            conn = JDBCUtil.getConn();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            String <span class="keyword">sql</span> = &quot;delete from `grade` where `gradeid`=6;&quot;;</span><br><span class="line">            <span class="type">int</span> i = st.executeUpdate(<span class="keyword">sql</span>);</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;删除成功！&quot;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;删除失败！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtil.<span class="keyword">close</span>(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //更改操作</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">update</span>()&#123;</span><br><span class="line">        <span class="keyword">Connection</span> conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">Statement</span> st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            conn = JDBCUtil.getConn();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            String <span class="keyword">sql</span> = &quot;update `grade` set `gradename`=&#x27;无&#x27; where `gradeid`=5;&quot;;</span><br><span class="line">            <span class="type">int</span> i = st.executeUpdate(<span class="keyword">sql</span>);</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;更改成功！&quot;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;更改失败！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtil.<span class="keyword">close</span>(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //查询操作</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> query()&#123;</span><br><span class="line">        <span class="keyword">Connection</span> conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">Statement</span> st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            conn = JDBCUtil.getConn();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            //<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> `grade`;</span><br><span class="line">            String <span class="keyword">sql</span> = &quot;select * from `grade`;&quot;;</span><br><span class="line">            rs = st.executeQuery(<span class="keyword">sql</span>);</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;gradeid=&quot; + rs.getString(&quot;gradeid&quot;));</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;gradename=&quot; + rs.getString(&quot;gradename&quot;));</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;================&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtil.<span class="keyword">close</span>(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">插入成功！</span></span><br><span class="line"><span class="comment">删除成功！</span></span><br><span class="line"><span class="comment">更改成功！</span></span><br><span class="line"><span class="comment">gradeid=1</span></span><br><span class="line"><span class="comment">gradename=大一</span></span><br><span class="line"><span class="comment">================</span></span><br><span class="line"><span class="comment">gradeid=2</span></span><br><span class="line"><span class="comment">gradename=大二</span></span><br><span class="line"><span class="comment">================</span></span><br><span class="line"><span class="comment">gradeid=3</span></span><br><span class="line"><span class="comment">gradename=大三</span></span><br><span class="line"><span class="comment">================</span></span><br><span class="line"><span class="comment">gradeid=4</span></span><br><span class="line"><span class="comment">gradename=大四</span></span><br><span class="line"><span class="comment">================</span></span><br><span class="line"><span class="comment">gradeid=5</span></span><br><span class="line"><span class="comment">gradename=无</span></span><br><span class="line"><span class="comment">================</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC 详解(三)</title>
    <url>/2021/07/10/jdbc-expound03/</url>
    <content><![CDATA[<h2 id="SQL-注入问题"><a href="#SQL-注入问题" class="headerlink" title="SQL 注入问题"></a>SQL 注入问题</h2><p>SQL 注入的发生，通常是恶意用户通过在表单中填写包含 SQL 关键字的数据，来使数据库执行非常规逻辑的过程。简单来说，就是数据库越界做了超出代码控制范围的事情。这个问题的来源是，SQL 数据库的操作是通过 SQL 语句来执行的，而无论是执行代码还是数据项都必须写在 SQL 语句之中，这就导致如果我们在数据项中加入了某些 SQL 语句关键字（比如说 SELECT、DROP 等等），这些关键字就有可能在数据库写入或读取数据时得到执行。</p>
<h3 id="准备工作（数据库基于之前的-MySQL-文章）"><a href="#准备工作（数据库基于之前的-MySQL-文章）" class="headerlink" title="准备工作（数据库基于之前的 MySQL 文章）"></a>准备工作（数据库基于之前的 MySQL 文章）</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">USE `school`;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`testmd5`</span>(<span class="symbol">`id`</span>,<span class="symbol">`name`</span>,<span class="symbol">`pwd`</span>) <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;666666&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Demo02.JDBCUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.<span class="keyword">Connection</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.<span class="keyword">Statement</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Demo03 &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="built_in">new</span> Demo03().<span class="keyword">login</span>(&quot;&#x27; or &#x27;1=1&quot;,&quot;&#x27; or &#x27;1=1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //登录业务</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">login</span>(String username,String <span class="keyword">password</span>)&#123;</span><br><span class="line">        <span class="keyword">Connection</span> conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">Statement</span> st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            conn = JDBCUtil.getConn();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            String <span class="keyword">sql</span> = &quot;select * from `testmd5` where `name`=&#x27;&quot; + username + &quot;&#x27; and `pwd`=&#x27;&quot; + <span class="keyword">password</span> + &quot;&#x27;;&quot;;</span><br><span class="line">            rs = st.executeQuery(<span class="keyword">sql</span>);</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;username=&quot; + rs.getString(&quot;name&quot;));</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;password=&quot; + rs.getString(&quot;pwd&quot;));</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;================&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtil.<span class="keyword">close</span>(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">username=Guest997</span></span><br><span class="line"><span class="comment">password=14e1b600b1fd579f47433b88e8d85291</span></span><br><span class="line"><span class="comment">================</span></span><br><span class="line"><span class="comment">username=guest997</span></span><br><span class="line"><span class="comment">password=d5f11ace1096430249d206b8f0a7db9c</span></span><br><span class="line"><span class="comment">================</span></span><br><span class="line"><span class="comment">username=GUEST997</span></span><br><span class="line"><span class="comment">password=e10adc3949ba59abbe56e057f20f883e</span></span><br><span class="line"><span class="comment">================</span></span><br><span class="line"><span class="comment">username=test</span></span><br><span class="line"><span class="comment">password=666666</span></span><br><span class="line"><span class="comment">================</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>可以从结果看出，数据库表中所有的信息都被查询出来。实际执行的 SQL 语句为：select * from <code>testmd5</code> where <code>name</code>=‘’ or ‘1=1’ and <code>pwd</code>=‘’ or ‘1=1’;</p>
<h2 id="SQL-注入问题解决方法"><a href="#SQL-注入问题解决方法" class="headerlink" title="SQL 注入问题解决方法"></a>SQL 注入问题解决方法</h2><p>PreparedStatement 是 Statement 的子接口，Statement 是执行静态 sql 对象，PreparedStatement 是执行预编译 sql 对象，用占位符 ? 动态传参，解决 sql 注入问题。</p>
<h3 id="代码测试-1"><a href="#代码测试-1" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import Demo02.JDBCUtil;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Demo04 &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Demo04()</span>.login(<span class="string">&quot;&#x27; or &#x27;1=1&quot;</span>,<span class="string">&quot;&#x27; or &#x27;1=1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//登录业务</span></span><br><span class="line">    public void login(String username,String password)&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        PreparedStatement pstm = null;</span><br><span class="line">        ResultSet rs = null;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">            String sql = <span class="string">&quot;select * from `testmd5` where `name`=? and `pwd`=?;&quot;</span>;</span><br><span class="line">            pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;      <span class="comment">//这行语句是预编译 sql 对象，所以一定要写在 set... 语句前面，否则就会报错提示找不到对象。</span></span><br><span class="line">            pstm.set<span class="constructor">String(1,<span class="params">username</span>)</span>;     <span class="comment">//表示第一个?传入 username 参数</span></span><br><span class="line">            pstm.set<span class="constructor">String(2,<span class="params">password</span>)</span>;</span><br><span class="line">            rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">            <span class="keyword">while</span> (rs.next<span class="literal">()</span>)&#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;username=&quot;</span> + rs.get<span class="constructor">String(<span class="string">&quot;name&quot;</span>)</span>);</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;password=&quot;</span> + rs.get<span class="constructor">String(<span class="string">&quot;pwd&quot;</span>)</span>);</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为空</span></span><br></pre></td></tr></table></figure>

<p>可以从结果看出，使用 PreparedStatement 对象会使程序更安全，所以建议使用 PreparedStatement 而不使用Statement。</p>
<h2 id="使用-PreparedStatement-实现增删改查"><a href="#使用-PreparedStatement-实现增删改查" class="headerlink" title="使用 PreparedStatement 实现增删改查"></a>使用 PreparedStatement 实现增删改查</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import Demo02.JDBCUtil;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Demo05 &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Demo05()</span>.insert(<span class="number">6</span>,<span class="string">&quot;无&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Demo05()</span>.delete(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Demo05()</span>.update(<span class="number">5</span>,<span class="string">&quot;无&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Demo05()</span>.query(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入操作</span></span><br><span class="line">    public void insert(<span class="built_in">int</span> gradeID,String gradeName)&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        PreparedStatement pstm = null;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">            String sql = <span class="string">&quot;insert into `grade`(`gradeid`,`gradename`) values(?,?);&quot;</span>;</span><br><span class="line">            pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">            pstm.set<span class="constructor">Int(1,<span class="params">gradeID</span>)</span>;</span><br><span class="line">            pstm.set<span class="constructor">String(2,<span class="params">gradeName</span>)</span>;</span><br><span class="line">            <span class="built_in">int</span> i = pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;插入失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn,pstm,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除操作</span></span><br><span class="line">    public void delete(<span class="built_in">int</span> gradeID)&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        PreparedStatement pstm = null;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">            String sql = <span class="string">&quot;delete from `grade` where `gradeid`=?;&quot;</span>;</span><br><span class="line">            pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">            pstm.set<span class="constructor">Int(1,<span class="params">gradeID</span>)</span>;</span><br><span class="line">            <span class="built_in">int</span> i = pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn,pstm,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更改操作</span></span><br><span class="line">    public void update(<span class="built_in">int</span> gradeID,String gradeName)&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        PreparedStatement pstm = null;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">            String sql = <span class="string">&quot;update `grade` set `gradename`=? where `gradeid`=?;&quot;</span>;</span><br><span class="line">            pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">            pstm.set<span class="constructor">String(1,<span class="params">gradeName</span>)</span>;</span><br><span class="line">            pstm.set<span class="constructor">Int(2,<span class="params">gradeID</span>)</span>;</span><br><span class="line">            <span class="built_in">int</span> i = pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;更改成功！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;更改失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn,pstm,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询操作</span></span><br><span class="line">    public void query(<span class="built_in">int</span> gradeID)&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        PreparedStatement pstm = null;</span><br><span class="line">        ResultSet rs = null;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">            String sql = <span class="string">&quot;select * from `grade` where `gradeid`=?;&quot;</span>;</span><br><span class="line">            pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">            pstm.set<span class="constructor">Int(1,<span class="params">gradeID</span>)</span>;</span><br><span class="line">            rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">            <span class="keyword">while</span> (rs.next<span class="literal">()</span>)&#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;gradeid=&quot;</span> + rs.get<span class="constructor">String(<span class="string">&quot;gradeid&quot;</span>)</span>);</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;gradename=&quot;</span> + rs.get<span class="constructor">String(<span class="string">&quot;gradename&quot;</span>)</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC 详解(四)</title>
    <url>/2021/07/10/jdbc-expound04/</url>
    <content><![CDATA[<h2 id="操作事务实现转账功能（数据库基于之前的-MySQL-文章）"><a href="#操作事务实现转账功能（数据库基于之前的-MySQL-文章）" class="headerlink" title="操作事务实现转账功能（数据库基于之前的 MySQL 文章）"></a>操作事务实现转账功能（数据库基于之前的 MySQL 文章）</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>因为用到了 shop 数据库，所以需要将 db.properties 文件中的 url 改为下面的代码。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/shop?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8&amp;useSSL=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import Demo02.JDBCUtil;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Demo06 &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> <span class="constructor">Scanner(System.<span class="params">in</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;正在进行转账操作，请输入你的账号名：&quot;</span>);</span><br><span class="line">        String fromUser = scan.next<span class="constructor">Line()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;请输入转入的账号名：&quot;</span>);</span><br><span class="line">        String toUser = scan.next<span class="constructor">Line()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;请输入要转入的金额：&quot;</span>);</span><br><span class="line">        String money = scan.next<span class="constructor">Line()</span>;</span><br><span class="line"></span><br><span class="line">        Connection conn = null;</span><br><span class="line">        PreparedStatement pstm = null;</span><br><span class="line">        ResultSet rs = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">            <span class="comment">//关闭自动提交，相当于开启事务。</span></span><br><span class="line">            conn.set<span class="constructor">AutoCommit(<span class="params">false</span>)</span>;</span><br><span class="line">            String judgeSql = <span class="string">&quot;select `cash` from `account` where `name`=?;&quot;</span>;</span><br><span class="line">            pstm = conn.prepare<span class="constructor">Statement(<span class="params">judgeSql</span>)</span>;</span><br><span class="line">            pstm.set<span class="constructor">String(1, <span class="params">fromUser</span>)</span>;</span><br><span class="line">            rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">            <span class="comment">//判断是否查出数据</span></span><br><span class="line">            <span class="keyword">if</span> (rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">                <span class="comment">//判断输入的金额是否为正数</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">Float</span>.</span></span>parse<span class="constructor">Float(<span class="params">money</span>)</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//判断余额是否足够</span></span><br><span class="line">                    <span class="built_in">float</span> count = rs.get<span class="constructor">Float(<span class="string">&quot;cash&quot;</span>)</span>;</span><br><span class="line">                    <span class="keyword">if</span> (count &gt;= <span class="module-access"><span class="module"><span class="identifier">Float</span>.</span></span>parse<span class="constructor">Float(<span class="params">money</span>)</span>) &#123;     <span class="comment">//将 money 字符串转为 float 类型</span></span><br><span class="line">                        <span class="comment">//执行转账操作</span></span><br><span class="line">                        String transferFrom = <span class="string">&quot;update `account` set cash=cash-? where `name`=?;&quot;</span>;</span><br><span class="line">                        pstm = conn.prepare<span class="constructor">Statement(<span class="params">transferFrom</span>)</span>;</span><br><span class="line">                        pstm.set<span class="constructor">Float(1, Float.<span class="params">parseFloat</span>(<span class="params">money</span>)</span>);</span><br><span class="line">                        pstm.set<span class="constructor">String(2, <span class="params">fromUser</span>)</span>;</span><br><span class="line">                        <span class="built_in">int</span> flag = pstm.execute<span class="constructor">Update()</span>;    <span class="comment">//此处并不会提交事务</span></span><br><span class="line">                        <span class="keyword">if</span> (flag &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            String transferTo = <span class="string">&quot;update `account` set cash=cash+? where `name`=?;&quot;</span>;</span><br><span class="line">                            pstm = conn.prepare<span class="constructor">Statement(<span class="params">transferTo</span>)</span>;</span><br><span class="line">                            pstm.set<span class="constructor">Float(1, Float.<span class="params">parseFloat</span>(<span class="params">money</span>)</span>);</span><br><span class="line">                            pstm.set<span class="constructor">String(2, <span class="params">toUser</span>)</span>;</span><br><span class="line">                            <span class="keyword">if</span> (pstm.execute<span class="constructor">Update()</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;转账成功！&quot;</span>);</span><br><span class="line">                                <span class="comment">//两次更新账户操作都成功了,我们才认为这次转账操作完毕。</span></span><br><span class="line">                                conn.commit<span class="literal">()</span>;           <span class="comment">//提交事务</span></span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;转账失败，不存在该收款人！&quot;</span>);</span><br><span class="line">                                conn.rollback<span class="literal">()</span>;         <span class="comment">//回滚事务</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;转账失败，余额不足！&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;转账失败，输入的金额为负数！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;转账失败，不存在该汇款人！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//开启自动提交</span></span><br><span class="line">            conn.set<span class="constructor">AutoCommit(<span class="params">true</span>)</span>;</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn, pstm, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">正在进行转账操作，请输入你的账号名：</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">请输入转入的账号名：</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">请输入要转入的金额：</span></span><br><span class="line"><span class="comment">500</span></span><br><span class="line"><span class="comment">转账成功！</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC 详解(五)</title>
    <url>/2021/07/10/jdbc-expound05/</url>
    <content><![CDATA[<p>连接池的作用：资源重用、更快的系统响应速度、新的资源分配手段和统一的连接管理，避免数据库连接泄露。</p>
<h2 id="DBCP-连接池"><a href="#DBCP-连接池" class="headerlink" title="DBCP 连接池"></a>DBCP 连接池</h2><p>需要先导入 commons-dbcp-1.4.jar 和 commons-pool-1.6.jar 包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//dbcp.properties</span><br><span class="line">#连接设置</span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/school?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line"></span><br><span class="line">#<span class="comment">&lt;!-- 初始化连接 --&gt;</span></span><br><span class="line">initialSize=10</span><br><span class="line"></span><br><span class="line">#最大连接数量</span><br><span class="line">maxActive=50</span><br><span class="line"></span><br><span class="line">#<span class="comment">&lt;!-- 最大空闲连接 --&gt;</span></span><br><span class="line">maxIdle=20</span><br><span class="line"></span><br><span class="line">#<span class="comment">&lt;!-- 最小空闲连接 --&gt;</span></span><br><span class="line">minIdle=5</span><br><span class="line"></span><br><span class="line">#<span class="comment">&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;</span></span><br><span class="line">maxWait=60000</span><br><span class="line">#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：【属性名=property;】</span><br><span class="line">#注意：&quot;user&quot; 与 &quot;password&quot; 两个属性会被明确地传递，因此这里不需要包含他们。</span><br><span class="line">connectionProperties=useUnicode=true;characterEncoding=UTF8</span><br><span class="line"></span><br><span class="line">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</span><br><span class="line">defaultAutoCommit=true</span><br><span class="line"></span><br><span class="line">#driver default 指定由连接池所创建的连接的只读（read-only）状态。</span><br><span class="line">#如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）</span><br><span class="line">defaultReadOnly=</span><br><span class="line"></span><br><span class="line">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</span><br><span class="line">#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span><br><span class="line">defaultTransactionIsolation=READ_UNCOMMITTED</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp.BasicDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil_dbcp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块，在程序编译的时候执行</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建 Properties 对象</span></span><br><span class="line">            Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取文件输入流</span></span><br><span class="line">            InputStream in = JDBCUtil_dbcp.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcp.properties&quot;</span>);</span><br><span class="line">            <span class="comment">//加载输入流</span></span><br><span class="line">            p.load(in);</span><br><span class="line">            <span class="comment">//创建数据源</span></span><br><span class="line">            dataSource = BasicDataSourceFactory.createDataSource(p);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Connection 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = dataSource.getConnection();      <span class="comment">//调用的是 dataSource 下的方法</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接（Connection 连接对象必须在最后关闭）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn Connection 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> st 编译执行对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs 结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(st != <span class="keyword">null</span>)&#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.<span class="keyword">Connection</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Demo07 &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="built_in">new</span> Demo07().<span class="keyword">insert</span>(<span class="number">6</span>,&quot;无&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //插入操作（其它操作类似，就不赘述了）</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">insert</span>(<span class="type">int</span> gradeID,String gradeName)&#123;</span><br><span class="line">        <span class="keyword">Connection</span> conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            conn = JDBCUtil_dbcp.getConn();</span><br><span class="line">            //<span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade`(`gradeid`,`gradename`) <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">&#x27;无&#x27;</span>);</span><br><span class="line">            String <span class="keyword">sql</span> = &quot;INSERT INTO `grade`(`gradeid`,`gradename`) VALUES(?,?);&quot;;</span><br><span class="line">            pstm = conn.prepareStatement(<span class="keyword">sql</span>);</span><br><span class="line">            pstm.setInt(<span class="number">1</span>,gradeID);</span><br><span class="line">            pstm.setString(<span class="number">2</span>,gradeName);</span><br><span class="line">            <span class="type">int</span> i = pstm.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;插入成功！&quot;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;插入失败！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtil_dbcp.<span class="keyword">close</span>(conn,pstm,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//结果为 插入成功！</span><br></pre></td></tr></table></figure>

<h2 id="C3P0-连接池"><a href="#C3P0-连接池" class="headerlink" title="C3P0 连接池"></a>C3P0 连接池</h2><p>需要先导入 c3p0-0.9.5.5.jar 和 mchange-commons-java-0.2.19.jar 包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//c3p0-confif.xml   (注意：文件名一定要与下面的标签名一样，否则会报错提示找不到配置)</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/school?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;school&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/school?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil_c3p0</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ComboPooledDataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块，在程序编译的时候执行</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource = <span class="keyword">new</span> ComboPooledDataSource();    <span class="comment">//调用默认配置</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Connection 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接（Connection 连接对象必须在最后关闭）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn Connection 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> st 编译执行对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs 结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(st != <span class="keyword">null</span>)&#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.<span class="keyword">Connection</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Demo08 &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="built_in">new</span> Demo08().<span class="keyword">delete</span>(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    //删除操作</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">delete</span>(<span class="type">int</span> gradeID)&#123;</span><br><span class="line">        <span class="keyword">Connection</span> conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            conn = JDBCUtil_c3p0.getConn();</span><br><span class="line">            //<span class="keyword">DELETE</span> <span class="keyword">FROM</span> `grade` <span class="keyword">WHERE</span> `gradeid`=<span class="number">6</span>;</span><br><span class="line">            String <span class="keyword">sql</span> = &quot;DELETE FROM `grade` WHERE `gradeid`=?;&quot;;</span><br><span class="line">            pstm = conn.prepareStatement(<span class="keyword">sql</span>);</span><br><span class="line">            pstm.setInt(<span class="number">1</span>,gradeID);</span><br><span class="line">            <span class="type">int</span> i = pstm.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;删除成功！&quot;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;删除失败！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtil_c3p0.<span class="keyword">close</span>(conn,pstm,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//结果为 删除成功！</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>百度网盘不限速下载工具</title>
    <url>/2021/01/25/kinhdown/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>KinhDown（加速！永无止境）</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="特点介绍："><a href="#特点介绍：" class="headerlink" title="特点介绍："></a>特点介绍：</h3><ul>
<li>  本软件永久免费，如发现倒卖，请立即退款差评！不要相信卖家所说的辛苦费！你的一个交易订单，就是把软件向死亡又推进一步！</li>
<li>  如果下载文件损毁，请使用网页版！</li>
<li>  几乎有 PanDownLoad 的所有功能（完善中）</li>
<li>  PC端编码表必须为 GBK 才能正常启动软件</li>
<li>  当前下的单可以被限速等岛主什么时候运气爆表再发现个新端口吧</li>
<li>  这么强大的免登录，你可以无需登录账号即可满速下载！</li>
</ul>
<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p>蓝奏云：<a href="https://ubaq.lanzous.com/s/KinhDown">https://ubaq.lanzous.com/s/KinhDown</a></p>
<h3 id="在线解析："><a href="#在线解析：" class="headerlink" title="在线解析："></a>在线解析：</h3><p>KD 官方：<a href="https://pan.kdbaidu.com/">https://pan.kdbaidu.com</a></p>
<h3 id="交流群："><a href="#交流群：" class="headerlink" title="交流群："></a>交流群：</h3><p>本项目没有 Q 群，如果有 Q 群也不是作者创建的！如果入群收费请立即退出！<br>电报频道：<a href="https://t.me/KinhDownLoad">@KinhDownLoad</a><br>电报群：<a href="https://t.me/KinhDownLoadTG">@KinhDownLoadTG</a></p>
<h3 id="在线反馈："><a href="#在线反馈：" class="headerlink" title="在线反馈："></a>在线反馈：</h3><p>在线反馈：<a href="http://uallenqbit.ys168.com/">http://uallenqbit.ys168.com/</a></p>
<h3 id="爱的资源："><a href="#爱的资源：" class="headerlink" title="爱的资源："></a>爱的资源：</h3><p>爱发电（捐赠软件的唯一收入来源）： <a href="https://afdian.net/@Uallen_Qbit">https://afdian.net/@Uallen_Qbit</a></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>官方地址：<a href="https://kinhdown.kinh.cc//">https://kinhdown.kinh.cc//</a></p>
<p>官方文档：<a href="https://kdocs.cn/l/spCwetN1rB4u">https://kdocs.cn/l/spCwetN1rB4u</a></p>
<p>由于软件使用起来挺简单的，就不再赘述使用方法了。作者更新软件的频率很高，所以有时会出现无法直接在软件上进行更新，需到其官网或者交流群重新下载解压。所以建议将官网收藏或是加入交流群。</p>
<p>之前有传出过一些关于 KinhDown 的不好言论，比如盗用 Cookie、恶意盗取公开源代码……（上面的官方文档也有说明）不管其是真是假，我只能说见仁见智，使用与否取决于你自己。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 基础语法</title>
    <url>/2021/03/21/markdown/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>Markdown 是一种用来写作的轻量级标记语言，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用标记语法，来代替常见的排版格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="标题（-号个数决定几级标题）"><a href="#标题（-号个数决定几级标题）" class="headerlink" title="标题（#号个数决定几级标题）"></a>标题（#号个数决定几级标题）</h3><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题</p>
<p>效果如下：</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>**加粗的文字**<br>*倾斜的文字*`<br>***斜体加粗的文字***<br><del>加删除线的文字</del></p>
<p>效果如下：</p>
<p><strong>加粗的文字</strong> _倾斜的文字_` <strong><em>斜体加粗的文字</em></strong> 加删除线的文字</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>&gt; 引用的内容</p>
<p>效果如下：</p>
<blockquote>
<p>引用的内容</p>
</blockquote>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>-–<br>***</p>
<p>效果如下：（默认是黑色的，由于主题使用了夜间模式会看不清，故使用了红色）</p>
<hr>
<hr>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>![图片名字](图片地址)</p>
<p>效果如下：（由于 wordpress 无法显示出来具体效果，故直接截图出来了）<img data-src="/images/markdown.md-0.png"></p>
<h3 id="超链接（Markdown-本身语法不支持链接在新页面中打开）"><a href="#超链接（Markdown-本身语法不支持链接在新页面中打开）" class="headerlink" title="超链接（Markdown 本身语法不支持链接在新页面中打开）"></a>超链接（Markdown 本身语法不支持链接在新页面中打开）</h3><p>[超链接名字](超链接地址)</p>
<p>效果如下：</p>
<p><a href="https://guest997.ml/">点击进入 Guest997 博客</a></p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>1. 内容0<br>2. 内容1<br>3. 内容2<br>注意：序号跟内容之间要有空格</p>
<p>效果如下：</p>
<ol>
<li> 内容0</li>
<li> 内容1</li>
<li> 内容2</li>
</ol>
<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>- 内容0<br>+ 内容1<br>* 内容2<br>注意：- + * 跟内容之间都要有一个空格</p>
<p>效果如下：</p>
<ul>
<li>  内容0</li>
<li>  内容1</li>
<li>  内容2</li>
</ul>
<h3 id="表格（可实现左中右对齐）"><a href="#表格（可实现左中右对齐）" class="headerlink" title="表格（可实现左中右对齐）"></a>表格（可实现左中右对齐）</h3><p>名字地区排行<br>–:–:–:<br>深圳广东1<br>佛山广东2<br>揭阳广东3</p>
<p>效果如下：</p>
<p>名字</p>
<p>地区</p>
<p>排行</p>
<p>深圳</p>
<p>广东</p>
<p>1</p>
<p>佛山</p>
<p>广东</p>
<p>2</p>
<p>揭阳</p>
<p>广东</p>
<p>3</p>
<h3 id="代码块（代码前有三个-号）"><a href="#代码块（代码前有三个-号）" class="headerlink" title="代码块（代码前有三个`号）"></a>代码块（代码前有三个`号）</h3><p>```<br>function fun(){<br>         echo “Hello World!”;<br>    }</p>
<p>fun();</p>
<p>效果如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">         echo <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>```flow<br>st=&gt;start: 开始<br>op=&gt;operation: 我的操作<br>cond=&gt;condition: Yes or No?<br>e=&gt;end<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op</p>
<p>效果如下：（由于 wordpress 无法显示出来具体效果，故直接截图出来了）</p>
<p><img data-src="/images/markdown.md-1.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>推荐一款软件：Typora - 一款支持实时预览的 Markdown 文本编辑器。</p>
<p>上面讲到的其实平常已经完全够用了，如不足还可以通过使用 html 标签进行补充。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>实用</tag>
      </tags>
  </entry>
  <entry>
    <title>愿你在彼岸有吃不尽的草莓</title>
    <url>/2021/01/24/mocha/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>墨茶 Officia_l（1998年4月5日-2021年1月）_，姓陈，男，四川凉山人，B站 UP 主。<br>2021年1月10日10时许，“墨茶 official ”在会理县出租屋内被发现死亡。经会理县公安局勘查，确定其为因病死亡，在会理县殡仪馆火化后，其骨灰由母亲带回西昌，于1月12日安葬。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>最近不管是在哪个国内平台，都会发现全部是墨茶 Official 事件。而事情的缘由是这样的。<br>b站一位年轻up主，22岁的“墨茶 Official”因贫病交加而去世的消息，引发全网关注，而其所得的病如下图，<img data-src="/images/mocha.md-0.jpg"></p>
<h3 id="墨茶父母描述："><a href="#墨茶父母描述：" class="headerlink" title="墨茶父母描述："></a>墨茶父母描述：</h3><p>1月22日，《川观新闻》的记者，在当地采访了他的家人，提供了其中一个版本的故事：</p>
<p><img data-src="/images/mocha.md-1.jpg"></p>
<p>从图中可以简略得知：<br>墨茶的家庭不是贫困户，外公有每月的优抚金和农村养老保险金，单门独户的小院，二层小楼，各种电器齐全，养猪养鸡。</p>
<p>墨茶的父母在其3岁就离异了，他一直跟着母亲生活。性格较为孤僻，爱好网络，职高肄业后，辗转于西昌、会理、成都等地，墨茶的母亲2014年买了车，和人在西昌市区合伙开了足浴店，近几年又在市区买了18.53平方的商业用房和43.11平方的办公用房。因为墨茶成年后，其母不肯给生活费，要求其自食其力，导致母子关系较紧张。</p>
<p>2020年，墨茶的鼻肿瘤切除手术，是他父亲带到医院做的，期间发现，他患糖尿病、高血压等病症。手术后，墨茶与父亲不和，独自外出，不接父母电话，直至2021年1月10日，被发现已在会理县出租屋内去世……</p>
<h3 id="网友描述："><a href="#网友描述：" class="headerlink" title="网友描述："></a>网友描述：</h3><p>高中时学习成绩很好，奶奶重病，欠了一大笔债，父母躲债，自己辍学打工。等到爷爷奶奶的房子要拆迁，狠心的父母又回来，霸占了30万拆迁款，把他赶出家门……</p>
<p>因为患病后身体虚弱，难以高强度工作，在其他网友的同情与帮助下，购置与赠送了电脑和各种直播设备，想做 up 主出道，以此糊口谋生。</p>
<p>2020年，他又被患上了鼻部肿瘤（良性），手术费用需上万元。所以一直拖延了5个月，到11月，在网友们众筹，资助了一部分费用后，才终于被他父亲带到医院进行手术，却又检测出了糖尿病、高血压、肝功能损伤。大概就是手术后，他和父亲又因此大吵一架。住院一个月的住院费也没交齐，还欠了医院两千块，就此到会理县的小出租屋，和父母断了联系。</p>
<p><strong>而本身经济条件不差的父母，也就当真放弃了这个重病的儿子，甚至一直都没有去报案寻找。</strong></p>
<p>最终在1月10日，“墨茶”因糖尿病引发的并发症酮症酸中毒，不幸去世。</p>
<h2 id="个人观点："><a href="#个人观点：" class="headerlink" title="个人观点："></a>个人观点：</h2><p>由于平常使用的是 YouTube，B 站只会是在我看番和教学视频的时候会去翻一下，而得知消息也是在贴吧和公众号上。他在b站从去年起，忙活了大半年，才几百粉丝，能获得的收入约等于零，反而是他去世的消息被传播后，短短3天，粉丝数飞涨到近百万人……</p>
<p>不知该说是很多人还是有怜悯之心的，还是该说其他什么。不管如何，在其还活着的时候，他的疾病，在现有医疗环境下，并不算是真正的不治之症。他所患良性肿瘤，复发与恶变的几率极低，手术后基本可以痊愈。他的糖尿病，<strong>如果能得到正常的医疗救治，</strong>按时注射胰岛素，抑制并发症，<strong>至少还有20年时间，能够让他继续工作、劳动，自谋其生</strong>，却终究死于了<strong>【家庭不和】</strong>与【<strong>贫病交加</strong>】。</p>
<p>他的生前留言，没有任何对不幸境遇的埋怨不公、怨天尤人，反而一直热爱祖国，相信公义，温和待人，乐观处世，一直坚强地自我救助，努力地想生活下去。</p>
<p>我不想去讨论哪个是真相，谁对谁错，因为这对于墨茶来说，已经是毫无意义。而我也希望在彼岸，你不再被病痛折磨，有吃不尽的草莓。愿逝者安息……</p>
<p><img data-src="/images/mocha.md-2.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>文本、图片摘自百度百科和百度TA说：<br><a href="https://baike.baidu.com/item/%E5%A2%A8%E8%8C%B6Official/55872265?fr=aladdin">https://baike.baidu.com/item/%E5%A2%A8%E8%8C%B6Official/55872265?fr=aladdin</a><br><a href="https://baike.baidu.com/tashuo/browse/content?id=b3e54008a704d02773648fef&lemmaId=55872265&fromLemmaModule=pcBottom">https://baike.baidu.com/tashuo/browse/content?id=b3e54008a704d02773648fef&amp;lemmaId=55872265&amp;fromLemmaModule=pcBottom</a></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 详解(一)</title>
    <url>/2021/07/24/mybatis-expound01/</url>
    <content><![CDATA[<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。<br><img data-src="/images/mybatis-expound01.md-0.png"></p>
<h2 id="作用域（Scope）和生命周期"><a href="#作用域（Scope）和生命周期" class="headerlink" title="作用域（Scope）和生命周期"></a>作用域（Scope）和生命周期</h2><p><strong>理解不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。</strong></p>
<h3 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h3><p>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但最好还是不要一直保留着它，以保证所有的 XML 解析资源可以被释放给更重要的事情。</p>
<h3 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h3><p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，因此 SqlSessionFactory 的最佳作用域是应用作用域。</p>
<h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><p>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 详解(二)</title>
    <url>/2021/07/24/mybatis-expound02/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>之前在 <strong>JavaWeb 基础(一)</strong> 中就说过要做啥准备工作，这里就不再次说明了。要新建一个不基于模板的 maven 项目，并添加下面的依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MySQL 数据库连接依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MyBatis 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单元测试依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第一个-MyBatis-程序"><a href="#第一个-MyBatis-程序" class="headerlink" title="第一个 MyBatis 程序"></a>第一个 MyBatis 程序</h2><h3 id="创建名为-mybatis-的数据库和名为-user-的数据库表并插入数据"><a href="#创建名为-mybatis-的数据库和名为-user-的数据库表并插入数据" class="headerlink" title="创建名为 mybatis 的数据库和名为 user 的数据库表并插入数据"></a>创建名为 mybatis 的数据库和名为 user 的数据库表并插入数据</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="symbol">`mybatis`</span>;</span><br><span class="line">USE `mybatis`;</span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`user`</span>(</span><br><span class="line"><span class="symbol">`id`</span> INT(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line"><span class="symbol">`name`</span> VARCHAR(<span class="number">30</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line"><span class="symbol">`pwd`</span> VARCHAR(<span class="number">30</span>) DEFAULT <span class="literal">NULL</span> </span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`user`</span>(<span class="symbol">`id`</span>,<span class="symbol">`name`</span>,<span class="symbol">`pwd`</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Guest997&#x27;</span>,<span class="number">123456</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;GUEST997&#x27;</span>,<span class="number">123456</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;guest997&#x27;</span>,<span class="number">123456</span>);</span><br></pre></td></tr></table></figure>

<h3 id="编写-MyBatis-核心配置文件"><a href="#编写-MyBatis-核心配置文件" class="headerlink" title="编写 MyBatis 核心配置文件"></a>编写 MyBatis 核心配置文件</h3><p>获取数据库连接实例的数据源（DataSource）以及决定事务作用域和控制方式的事务管理器（TransactionManager）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-config.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写-MyBatis-工具类"><a href="#编写-MyBatis-工具类" class="headerlink" title="编写 MyBatis 工具类"></a>编写 MyBatis 工具类</h3><p>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。（这一步其实就是帮我们连接和断开连接数据库，以及创建 SqlSession 对象方便我们执行 sql 语句）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><h4 id="POJO-层"><a href="#POJO-层" class="headerlink" title="POJO 层"></a>POJO 层</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> int id;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">User</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">User</span>(<span class="params">int id, <span class="built_in">String</span> name, <span class="built_in">String</span> pwd</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> long <span class="function"><span class="title">getId</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setId</span>(<span class="params">int id</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setName</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getPwd</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setPwd</span>(<span class="params"><span class="built_in">String</span> pwd</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Mapper-层（相当于之前的-Dao-层）"><a href="#Mapper-层（相当于之前的-Dao-层）" class="headerlink" title="Mapper 层（相当于之前的 Dao 层）"></a>Mapper 层（相当于之前的 Dao 层）</h4><p><strong>注意：接口不能直接运行。但 MyBatis 运用了动态代理技术使得接口能运行起来。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：UserMapper.xml 自动实例化了 UserMapper 接口。（XML 文件名不一定要与接口类名相同，但是为了区别，建议是设置成一样的）sql 语句结尾不要写分号，因为有可能在后面需要拼接 sql 语句。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--UserMapper.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--必须指定命名空间，用于接口绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;ml.guest997.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--下面的参数设置必须与接口中的一一对应。id 就是接口中的方法名，而 resultType 是 sql 语句执行后的返回类型；如果返回的是对象类型，类属性名和数据库字段名必须相同。只有 select 语句有 resultType 属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>maven 由于约定大于配置，配置文件如果不放在 resources 目录下，会无法被导出或者生效。在 pom.xml 文件中添加下面的代码即可解决这个问题。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--解决配置文件无法导出或生效的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>由于 UserMapper.xml 文件中配置了操作数据库的 sql 语句，所以需要在 MyBatis 核心配置文件中添加下面的代码引入 UserMapper.xml 文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个 Mapper.xml 文件都要在 MyBatis 核心配置文件中注册--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;ml/guest997/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试方法</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.<span class="keyword">User</span>;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.<span class="keyword">session</span>.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserMapperTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> getUserList()&#123;</span><br><span class="line">        //获取 SqlSession 对象</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        //通过 SqlSession 对象的 getMapper 方法获取一个 Mapper 接口后，就可以调用它的方法了。而 <span class="keyword">sql</span> 语句是在 MyBatis 核心配置文件加载映射文件时就读取出来了，在需要时再传给 SqlSession 对象。</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.<span class="keyword">class</span>);</span><br><span class="line">        List&lt;<span class="keyword">User</span>&gt; userList = userMapper.getUserList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">User</span> <span class="keyword">user</span> : userList) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">User&#123;id=1, name=&#x27;Guest997&#x27;, pwd=&#x27;123456&#x27;&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=2, name=&#x27;GUEST997&#x27;, pwd=&#x27;123456&#x27;&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=3, name=&#x27;guest997&#x27;, pwd=&#x27;123456&#x27;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 详解(三)</title>
    <url>/2021/07/25/mybatis-expound03/</url>
    <content><![CDATA[<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//修改用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//查询用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--UserMapper.xml--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span></span><br><span class="line"><span class="meta"><span class="xml">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span></span><br><span class="line"><span class="meta"><span class="xml">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--必须指定命名空间，用于接口绑定--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;ml.guest997.mapper.UserMapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--下面的参数设置必须与接口中的一一对应。id 就是接口中的方法名，而 parameterType 是参数类型；如果参数类型是对象类型，类属性名和数据库字段名必须相同；对象属性可以直接取出来--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        insert into mybatis.user (id, name, pwd) values (#</span><span class="template-variable">&#123;id&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;name&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;pwd&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        delete from mybatis.user where id = #</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        update mybatis.user set name = #</span><span class="template-variable">&#123;name&#125;</span><span class="xml">,pwd = #</span><span class="template-variable">&#123;pwd&#125;</span><span class="xml"> where id = #</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--下面的参数设置必须与接口中的一一对应。id 就是接口中的方法名，而 resultType 是 sql 语句执行后的返回类型；如果返回的是对象类型，类属性名和数据库字段名必须相同。只有 select 语句有 resultType 属性--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        select * from mybatis.user</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line">import ml.guest997.pojo.User;</span><br><span class="line">import ml.guest997.util.MyBatisUtil;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> UserMapperTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void add<span class="constructor">User()</span>&#123;</span><br><span class="line">        <span class="comment">//获取 SqlSession 对象</span></span><br><span class="line">        SqlSession sqlSession = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line">        <span class="comment">//通过 SqlSession 对象的 getMapper 方法获取一个 Mapper 接口后，就可以调用它的方法了。而 sql 语句是在 MyBatis 核心配置文件加载映射文件时就读取出来了，在需要时再传给 SqlSession 对象。</span></span><br><span class="line">        UserMapper userMapper = sqlSession.get<span class="constructor">Mapper(UserMapper.<span class="params">class</span>)</span>;</span><br><span class="line">        <span class="built_in">int</span> result = userMapper.add<span class="constructor">User(<span class="params">new</span> User(4, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span>);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;插入失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增删改一定要提交事务，否则是不会持久化到数据库的。</span></span><br><span class="line">        sqlSession.commit<span class="literal">()</span>;</span><br><span class="line">        sqlSession.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void delete<span class="constructor">User()</span>&#123;</span><br><span class="line">        <span class="comment">//获取 SqlSession 对象</span></span><br><span class="line">        SqlSession sqlSession = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line">        <span class="comment">//通过 SqlSession 对象的 getMapper 方法获取一个 Mapper 接口后，就可以调用它的方法了。而 sql 语句是在 MyBatis 核心配置文件加载映射文件时就读取出来了，在需要时再传给 SqlSession 对象。</span></span><br><span class="line">        UserMapper userMapper = sqlSession.get<span class="constructor">Mapper(UserMapper.<span class="params">class</span>)</span>;</span><br><span class="line">        <span class="built_in">int</span> result = userMapper.delete<span class="constructor">User(4)</span>;</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增删改一定要提交事务，否则是不会持久化到数据库的。</span></span><br><span class="line">        sqlSession.commit<span class="literal">()</span>;</span><br><span class="line">        sqlSession.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void update<span class="constructor">User()</span>&#123;</span><br><span class="line">        <span class="comment">//获取 SqlSession 对象</span></span><br><span class="line">        SqlSession sqlSession = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line">        <span class="comment">//通过 SqlSession 对象的 getMapper 方法获取一个 Mapper 接口后，就可以调用它的方法了。而 sql 语句是在 MyBatis 核心配置文件加载映射文件时就读取出来了，在需要时再传给 SqlSession 对象。</span></span><br><span class="line">        UserMapper userMapper = sqlSession.get<span class="constructor">Mapper(UserMapper.<span class="params">class</span>)</span>;</span><br><span class="line">        <span class="built_in">int</span> result = userMapper.update<span class="constructor">User(<span class="params">new</span> User(4, <span class="string">&quot;zyp997&quot;</span>, <span class="string">&quot;666666&quot;</span>)</span>);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增删改一定要提交事务，否则是不会持久化到数据库的。</span></span><br><span class="line">        sqlSession.commit<span class="literal">()</span>;</span><br><span class="line">        sqlSession.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void get<span class="constructor">UserList()</span>&#123;</span><br><span class="line">        <span class="comment">//获取 SqlSession 对象</span></span><br><span class="line">        SqlSession sqlSession = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line">        <span class="comment">//通过 SqlSession 对象的 getMapper 方法获取一个 Mapper 接口后，就可以调用它的方法了。而 sql 语句是在 MyBatis 核心配置文件加载映射文件时就读取出来了，在需要时再传给 SqlSession 对象。</span></span><br><span class="line">        UserMapper userMapper = sqlSession.get<span class="constructor">Mapper(UserMapper.<span class="params">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.get<span class="constructor">UserList()</span>;</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="万能-Map"><a href="#万能-Map" class="headerlink" title="万能 Map"></a>万能 Map</h2><p>关于项目使用 Map 和实体类作为参数的优缺点：<a href="https://blog.csdn.net/qq78827534/article/details/80954178/">https://blog.csdn.net/qq78827534/article/details/80954178/</a></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map 传参增加用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser02</span><span class="params">(Map&lt;<span class="keyword">String</span>,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--Map 中的键不需要与数据库字段名相同，Map 中的键也是可以直接取出来--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser02&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    insert into mybatis.user (id, name, pwd) values (#</span><span class="template-variable">&#123;user_id&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;user_name&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;user_pwd&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.<span class="built_in">getSqlSession</span>();</span><br><span class="line">    UserMapper userMapper = sqlSession.<span class="built_in">getMapper</span>(UserMapper.class);</span><br><span class="line">    Map&lt;<span class="keyword">String</span>, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.<span class="built_in">put</span>(<span class="string">&quot;user_id&quot;</span>,<span class="number">4</span>);</span><br><span class="line">    map.<span class="built_in">put</span>(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    map.<span class="built_in">put</span>(<span class="string">&quot;user_pwd&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.<span class="built_in">addUser02</span>(map);</span><br><span class="line">    <span class="keyword">if</span> (result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;插入失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增删改一定要提交事务，否则是不会持久化到数据库的。</span></span><br><span class="line">    sqlSession.<span class="built_in">commit</span>();</span><br><span class="line">    sqlSession.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><h3 id="参数中带有通配符"><a href="#参数中带有通配符" class="headerlink" title="参数中带有通配符"></a>参数中带有通配符</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模糊查询用户</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUser</span><span class="params">(<span class="keyword">String</span> name)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--只有一个基本类型参数的情况下，可以不写 parameterType 属性--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    select * from mybatis.user where name like #</span><span class="template-variable">&#123;name&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void getUser()&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;<span class="keyword">User</span>&gt; userList = userMapper.getUser(<span class="string">&quot;%g%&quot;</span>);</span><br><span class="line">    for (<span class="keyword">User</span> <span class="keyword">user</span> : userList) &#123;</span><br><span class="line">        System.out.println(<span class="keyword">user</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">/*结果为</span><br><span class="line"><span class="keyword">User</span>&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;Guest997&#x27;</span>, pwd=<span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">User</span>&#123;id=<span class="number">2</span>, name=<span class="string">&#x27;GUEST997&#x27;</span>, pwd=<span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">User</span>&#123;id=<span class="number">3</span>, name=<span class="string">&#x27;guest997&#x27;</span>, pwd=<span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<p>可以从结果看出，MySql 的查询是不区分大小写的。而想要区分大小写，可以在建表时加上 binary 关键字以区分大小写，如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tablename(</span><br><span class="line">   `str` <span class="type">char</span>(<span class="number">20</span>) <span class="type">binary</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>或者是在查询时加上 binary 关键字以区分大小写，如下修改 XML 文件：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=&quot;getUser&quot; resultType=&quot;ml.guest997.pojo.User&quot;&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> mybatis.<span class="keyword">user</span> <span class="keyword">where</span> binary <span class="type">name</span> <span class="keyword">like</span> #&#123;<span class="type">name</span>&#125;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>

<p>修改后的运行结果为：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">User&#123;<span class="attribute">id</span>=3, <span class="attribute">name</span>=<span class="string">&#x27;guest997&#x27;</span>, <span class="attribute">pwd</span>=<span class="string">&#x27;123456&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="sql-语句拼接时带有通配符（可能发生-sql-注入问题）"><a href="#sql-语句拼接时带有通配符（可能发生-sql-注入问题）" class="headerlink" title="sql 语句拼接时带有通配符（可能发生 sql 注入问题）"></a>sql 语句拼接时带有通配符（可能发生 sql 注入问题）</h3><p>由于与上面的代码几乎一样，只是 sql 语句改变了一点以及参数不带通配符，故下面就只给出 sql 语句。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=&quot;getUser&quot; resultType=&quot;ml.guest997.pojo.User&quot;&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> mybatis.<span class="keyword">user</span> <span class="keyword">where</span> binary <span class="type">name</span> <span class="keyword">like</span> &quot;%&quot;#&#123;<span class="type">name</span>&#125;&quot;%&quot;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 详解(四)</title>
    <url>/2021/07/25/mybatis-expound04/</url>
    <content><![CDATA[<h2 id="核心配置文件（知道了解即可）"><a href="#核心配置文件（知道了解即可）" class="headerlink" title="核心配置文件（知道了解即可）"></a>核心配置文件（知道了解即可）</h2><p>更加具体的配置文件说明，可点击后方连接了解。<a href="https://mybatis.org/mybatis-3/zh/configuration.html">https://mybatis.org/mybatis-3/zh/configuration.html</a></p>
<h3 id="环境配置（environments）"><a href="#环境配置（environments）" class="headerlink" title="环境配置（environments）"></a>环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中。</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong>所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。</p>
<p>为了指定创建哪种环境，只要将它作为可选的参数传递给 SqlSessionFactoryBuilder 即可。可以接受环境配置的两个方法签名是：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">SqlSessionFactory <span class="keyword">factory</span> = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, environment);</span><br><span class="line">SqlSessionFactory <span class="keyword">factory</span> = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, environment, properties);</span><br></pre></td></tr></table></figure>

<h4 id="事务管理器（transactionManager）"><a href="#事务管理器（transactionManager）" class="headerlink" title="事务管理器（transactionManager）"></a>事务管理器（transactionManager）</h4><p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBCMANAGED]“）：</p>
<ul>
<li>  JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</li>
<li>  MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。例如:</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;MANAGED&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;closeConnection&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="数据源（dataSource）"><a href="#数据源（dataSource）" class="headerlink" title="数据源（dataSource）"></a>数据源（dataSource）</h4><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。</p>
<p>有三种内建的数据源类型（也就是 type=”[UNPOOLEDPOOLEDJNDI]“）：</p>
<ul>
<li>  <strong>UNPOOLED</strong>：这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。</li>
<li>  <strong>POOLED</strong>：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</li>
<li>  <strong>JNDI</strong>：这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。</li>
</ul>
<h3 id="属性（properties）"><a href="#属性（properties）" class="headerlink" title="属性（properties）"></a>属性（properties）</h3><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。例如：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;properties resource=<span class="string">&quot;db.properties&quot;</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>/&gt;</span><br><span class="line">  &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;root&quot;</span>/&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>

<p>设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。比如:</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;driver&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;url&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;username&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;password&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>如果一个属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：</p>
<ul>
<li>  首先读取在 properties 元素体内指定的属性。</li>
<li>  然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。</li>
<li>  最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。</li>
</ul>
<h3 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a>类型别名（typeAliases）</h3><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;HelloUser&quot;</span> <span class="attr">type</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当这样配置时，HelloUser 可以用在任何使用 ml.guest997.pojo.User 的地方。</p>
<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的实体类。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;ml.guest997.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用实体类的首字母小写的非限定类名来作为它的别名。（其实也能使用大写，但是为了区分是扫描包的，就统一规范使用小写的）比如 ml.guest997.pojo.User 的别名为 user；但是如果想要扫描包之后的特定实体类自定义别名，就可以使用注解，别名就为其注解值，见下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;helloUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="映射器（mappers）"><a href="#映射器（mappers）" class="headerlink" title="映射器（mappers）"></a>映射器（mappers）</h3><p>注册绑定 mapper 文件：告诉 MyBatis 到哪里去找到 sql 语句</p>
<h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用相对于类路径的资源引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;ml/guest997/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="方式二和三"><a href="#方式二和三" class="headerlink" title="方式二和三"></a>方式二和三</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用映射器接口实现类的完全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--将包内的映射器接口实现全部注册为映射器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;ml.guest997.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>要实现上面的两种方法，需要先满足一定的条件：</p>
<ul>
<li>  接口和它的 mapper 配置文件必须同名</li>
<li>  接口和它的 mapper 配置文件必须在同一个包下</li>
</ul>
<p>如果想分离接口和 mapper 配置文件，只需要在 resources 下创建和接口所在相同的包。因为这样编译后的 class 文件就会和 mapper 配置文件在同一个包下。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 详解(五)</title>
    <url>/2021/07/26/mybatis-expound05/</url>
    <content><![CDATA[<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="sql-语句使用-limit-关键字"><a href="#sql-语句使用-limit-关键字" class="headerlink" title="sql 语句使用 limit 关键字"></a>sql 语句使用 limit 关键字</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">&quot;getUserByLimit&quot;</span> parameterType=<span class="string">&quot;map&quot;</span> resultType=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> mybatis.<span class="keyword">user</span> <span class="keyword">limit</span> #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="built_in">List</span>&lt;User&gt; getUserByLimit(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt; <span class="built_in">map</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void getUserByLimitTest() &#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String, Integer&gt; <span class="keyword">map</span> = new HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">map</span>.put(<span class="string">&quot;startIndex&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">map</span>.put(<span class="string">&quot;pageSize&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    List<span class="xml"><span class="tag">&lt;<span class="name">User</span>&gt;</span> userList = userMapper.getUserByLimit(map);</span></span><br><span class="line"><span class="xml">    for (User user : userList) </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">        System.out.println(user);</span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    sqlSession.close();</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">/*结果为</span></span><br><span class="line"><span class="xml">User</span><span class="xquery"><span class="built_in">&#123;id</span>=<span class="number">1</span>,<span class="built_in"> name</span>=<span class="string">&#x27;Guest997&#x27;</span>, pwd=<span class="string">&#x27;123456&#x27;</span>&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">User</span><span class="xquery"><span class="built_in">&#123;id</span>=<span class="number">2</span>,<span class="built_in"> name</span>=<span class="string">&#x27;GUEST997&#x27;</span>, pwd=<span class="string">&#x27;123456&#x27;</span>&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">User</span><span class="xquery"><span class="built_in">&#123;id</span>=<span class="number">3</span>,<span class="built_in"> name</span>=<span class="string">&#x27;guest997&#x27;</span>, pwd=<span class="string">&#x27;123456&#x27;</span>&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="PageHelper-插件"><a href="#PageHelper-插件" class="headerlink" title="PageHelper 插件"></a>PageHelper 插件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pagehelper 插件依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-config.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--分页参数合理化，如果 pageNum&lt;1 会查询第一页，如果 pageNum&gt;pages 会查询最后一页--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reasonable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插件分页查询</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByPageHelper</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">&quot;getUserByPageHelper&quot;</span> resultType=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> mybatis.<span class="keyword">user</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void get<span class="constructor">UserByPageHelper()</span>&#123;</span><br><span class="line">    SqlSession sqlSession = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line">    UserMapper userMapper = sqlSession.get<span class="constructor">Mapper(UserMapper.<span class="params">class</span>)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">PageHelper</span>.</span></span>start<span class="constructor">Page(1, 3)</span>;      <span class="comment">//页数,页面容量</span></span><br><span class="line">    List&lt;User&gt; userList = userMapper.get<span class="constructor">UserByPageHelper()</span>;</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注解实现-CRUD"><a href="#注解实现-CRUD" class="headerlink" title="注解实现 CRUD"></a>注解实现 CRUD</h2><p>映射的语句可以不用 XML 来配置，而可以使用 Java 注解来配置。使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java 注解不仅力不从心，还会让你本就复杂的 sql 语句更加混乱不堪。 因此，如果你需要做一些很复杂的操作，最好用 XML 来映射语句。</p>
<h3 id="修改-MyBatisUtil-文件"><a href="#修改-MyBatisUtil-文件" class="headerlink" title="修改 MyBatisUtil 文件"></a>修改 MyBatisUtil 文件</h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//自动提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">return</span> sqlSessionFactory.<span class="title">openSession</span><span class="params">(<span class="keyword">true</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id = #&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;uid&quot;)</span> <span class="keyword">int</span> id)</span></span>;    <span class="comment">//方法中的基本数据类型参数都使用 @Param 注解提高可读性，sql 语句引用的参数就是注解中的参数，故参数名一定要相同。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update mybatis.user set name = #&#123;name&#125;,pwd = #&#123;pwd&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where binary name = #&#123;name&#125; and pwd = #&#123;pwd&#125;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUser</span><span class="params">(Map&lt;String, String&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-class-属性绑定接口"><a href="#使用-class-属性绑定接口" class="headerlink" title="使用 class 属性绑定接口"></a>使用 class 属性绑定接口</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.mapper.UserMapper02&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.<span class="keyword">User</span>;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.<span class="keyword">session</span>.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserMapper0Test &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> addUser()&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        UserMapper02 userMapper02 = sqlSession.getMapper(UserMapper02.<span class="keyword">class</span>);</span><br><span class="line">        <span class="type">int</span> result = userMapper02.addUser(<span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">5</span>, &quot;test02&quot;, &quot;123456&quot;));</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;插入成功！&quot;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;插入失败！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> deleteUser()&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        UserMapper02 userMapper02 = sqlSession.getMapper(UserMapper02.<span class="keyword">class</span>);</span><br><span class="line">        <span class="type">int</span> result = userMapper02.deleteUser(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;删除成功！&quot;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;删除失败！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> updateUser()&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        UserMapper02 userMapper02 = sqlSession.getMapper(UserMapper02.<span class="keyword">class</span>);</span><br><span class="line">        <span class="type">int</span> result = userMapper02.updateUser(<span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">5</span>, &quot;zyp997&quot;, &quot;666666&quot;));</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;修改成功！&quot;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;修改失败！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> getUser()&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        UserMapper02 userMapper02 = sqlSession.getMapper(UserMapper02.<span class="keyword">class</span>);</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="built_in">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;name&quot;,&quot;guest997&quot;);</span><br><span class="line">        map.put(&quot;pwd&quot;,&quot;123456&quot;);</span><br><span class="line">        List&lt;<span class="keyword">User</span>&gt; userList = userMapper02.getUser(map);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">User</span> <span class="keyword">user</span> : userList) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 详解(六)</title>
    <url>/2021/07/26/mybatis-expound06/</url>
    <content><![CDATA[<h2 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h2><p>Lombok 是一种 Java 实用工具，可用来帮助开发人员消除 Java 的冗长，尤其是对于简单的 Java 对象（POJO）。它通过注解实现这一目的。</p>
<h3 id="安装插件并添加依赖"><a href="#安装插件并添加依赖" class="headerlink" title="安装插件并添加依赖"></a>安装插件并添加依赖</h3><p>IDEA 中已经自动安装了 Lombok 插件，故只需要添加依赖即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--lombok 插件依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ul>
<li>  @Data：注解在类上；提供类的无参构造、所有属性的 get 和 set 方法，此外还提供了 equals、canEqual、hashCode、toString 方法。</li>
<li>  @Setter：注解在属性上；为属性提供 set 方法</li>
<li>  @Getter：注解在属性上；为属性提供 get 方法</li>
<li>  @NoArgsConstructor：注解在类上；为类提供一个无参的构造方法</li>
<li>  @AllArgsConstructor：注解在类上；为类提供一个全参的构造方法，需要注意的是声明有参构造会覆盖掉无参构造，如果想要使用无参构造必须显式声明。</li>
</ul>
<p><img data-src="/images/mybatis-expound06.md-0.png"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 详解(七)</title>
    <url>/2021/07/27/mybatis-expound07/</url>
    <content><![CDATA[<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>一般在程序上线之后，一旦发生异常，第一件事就是要弄清楚当时发生了什么。用户当时做了什么操作，环境有无影响，数据有什么变化，是不是反复发生等，然后再进一步的确定大致是哪个方面的问题。确定是程序的问题之后再交由开发人员去重现、研究、提出解决方案。这时，日志就给我们提供了第一手的资料。</p>
<h3 id="logImpl-属性（默认为未设置）"><a href="#logImpl-属性（默认为未设置）" class="headerlink" title="logImpl 属性（默认为未设置）"></a>logImpl 属性（默认为未设置）</h3><p>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。需要掌握的是 STDOUT_LOGGING 和 LOG4J。</p>
<h4 id="STDOUT-LOGGING"><a href="#STDOUT-LOGGING" class="headerlink" title="STDOUT_LOGGING"></a>STDOUT_LOGGING</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-config.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--标准的日志工厂实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/images/mybatis-expound07.md-0.png"></p>
<h4 id="LOG4J"><a href="#LOG4J" class="headerlink" title="LOG4J"></a>LOG4J</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--log4j 日志依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#log4j.properties</span></span><br><span class="line"><span class="comment">#将等级为 DEBUG 的日志信息输出到控制台和文件中</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=DEBUG,console,file</span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.console</span>=org.apache.log4j.ConsoleAppender</span><br><span class="line"><span class="attr">log4j.appender.console.Target</span>=System.out</span><br><span class="line"><span class="attr">log4j.appender.console.Threshold</span>=DEBUG</span><br><span class="line"><span class="attr">log4j.appender.console.layout</span>=org.apache.log4j.PatternLayout</span><br><span class="line"><span class="attr">log4j.appender.console.layout.ConversionPattern</span>=[%c]-%m%n</span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.file</span>=org.apache.log4j.RollingFileAppender</span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=./log/log4j.log</span><br><span class="line"><span class="attr">log4j.appender.file.MaxFileSize</span>=<span class="number">10</span>mb</span><br><span class="line"><span class="attr">log4j.appender.file.Threshold</span>=DEBUG</span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=org.apache.log4j.PatternLayout</span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis</span>=DEBUG</span><br><span class="line"><span class="attr">log4j.logger.java.sql</span>=DEBUG</span><br><span class="line"><span class="attr">log4j.logger.java.sql.Statement</span>=DEBUG</span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=DEBUG</span><br><span class="line"><span class="attr">log4j.logger.java.sql.PreparedStatement</span>=DEBUG</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-config.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest.class);</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">log4jTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;info:进入了 log4jTest&quot;</span>);</span><br><span class="line">    logger.debug(<span class="string">&quot;debug:进入了 log4jTest&quot;</span>);</span><br><span class="line">    logger.<span class="keyword">error</span>(<span class="string">&quot;error:进入了 log4jTest&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">[ml.guest997.mapper.UserMapperTest]-info:进入了 log4jTest</span></span><br><span class="line"><span class="comment">[ml.guest997.mapper.UserMapperTest]-debug:进入了 log4jTest</span></span><br><span class="line"><span class="comment">[ml.guest997.mapper.UserMapperTest]-error:进入了 log4jTest</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line"><span class="comment">[INFO]</span><span class="comment">[21-06-09]</span><span class="comment">[ml.guest997.mapper.UserMapperTest]</span>info:进入了 log4jTest</span><br><span class="line"><span class="comment">[DEBUG]</span><span class="comment">[21-06-09]</span><span class="comment">[ml.guest997.mapper.UserMapperTest]</span>debug:进入了 log4jTest</span><br><span class="line"><span class="comment">[ERROR]</span><span class="comment">[21-06-09]</span><span class="comment">[ml.guest997.mapper.UserMapperTest]</span>error:进入了 log4jTest</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 详解(八)</title>
    <url>/2021/07/27/mybatis-expound08/</url>
    <content><![CDATA[<h2 id="resultMap（重点）"><a href="#resultMap（重点）" class="headerlink" title="resultMap（重点）"></a>resultMap（重点）</h2><p>resultMap 元素表示结果映射集，是 MyBatis 中最重要也是最强大的元素，主要用来定义映射规则、级联的更新以及定义类型转化器等。</p>
<h3 id="解决属性名和字段名不一致问题"><a href="#解决属性名和字段名不一致问题" class="headerlink" title="解决属性名和字段名不一致问题"></a>解决属性名和字段名不一致问题</h3><p>之前使用 resultType 属性时，必须保证属性名和字段名一样，否则会取不出值，显示为 null。而这个问题就可以通过使用 resultMap 元素解决。（其实还可以通过在 sql 语句中起与类属性相同的别名解决这个问题，不过实际开发中并不会这样用）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> int uid;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> pwd;</span><br><span class="line">    <span class="comment">//省略 get、set 方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User02&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;uid=&quot;</span> + uid +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过 id 查询用户</span></span><br><span class="line">User02 get<span class="constructor">UserById(<span class="params">int</span> <span class="params">i</span>)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">type</span>=<span class="string">&quot;ml.guest997.pojo.User02&quot;</span>&gt;</span>    <span class="comment">&lt;!--指定返回类型--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- property 是类属性，column 是查询结果的列名--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span>    <span class="comment">&lt;!--用于表示哪个列是主键--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--指定 resultMap 的 id--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getUserById&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    select * from mybatis.user where id = #</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> getUserById()&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.<span class="keyword">class</span>);</span><br><span class="line">    User02 <span class="keyword">user</span> = userMapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">    sqlSession.<span class="keyword">close</span>();</span><br><span class="line">&#125;</span><br><span class="line">//结果为 User02&#123;uid=<span class="number">1</span>, <span class="type">name</span>=<span class="string">&#x27;Guest997&#x27;</span>, pwd=<span class="string">&#x27;123456&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="在-mybatis-数据库下创建名为-student-和-teacher-的数据库表并插入数据"><a href="#在-mybatis-数据库下创建名为-student-和-teacher-的数据库表并插入数据" class="headerlink" title="在 mybatis 数据库下创建名为 student 和 teacher 的数据库表并插入数据"></a>在 mybatis 数据库下创建名为 student 和 teacher 的数据库表并插入数据</h4><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`teacher`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> INT(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`name`</span> VARCHAR(<span class="number">30</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`teacher`</span> (<span class="symbol">`id`</span>, <span class="symbol">`name`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;秦老师&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`student`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> INT(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,<span class="symbol">`user`</span></span><br><span class="line">  <span class="symbol">`name`</span> VARCHAR(<span class="number">30</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`tid`</span> INT(<span class="number">10</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="symbol">`fktid`</span> (<span class="symbol">`tid`</span>),</span><br><span class="line">  CONSTRAINT <span class="symbol">`fktid`</span> FOREIGN <span class="keyword">KEY</span> (<span class="symbol">`tid`</span>) REFERENCES <span class="symbol">`teacher`</span> (<span class="symbol">`id`</span>)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`student`</span> (<span class="symbol">`id`</span>, <span class="symbol">`name`</span>, <span class="symbol">`tid`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="number">1</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`student`</span> (<span class="symbol">`id`</span>, <span class="symbol">`name`</span>, <span class="symbol">`tid`</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="number">1</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`student`</span> (<span class="symbol">`id`</span>, <span class="symbol">`name`</span>, <span class="symbol">`tid`</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;小张&#x27;</span>, <span class="number">1</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`student`</span> (<span class="symbol">`id`</span>, <span class="symbol">`name`</span>, <span class="symbol">`tid`</span>) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="number">1</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`student`</span> (<span class="symbol">`id`</span>, <span class="symbol">`name`</span>, <span class="symbol">`tid`</span>) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h4 id="编写-pojo-层实体类"><a href="#编写-pojo-层实体类" class="headerlink" title="编写 pojo 层实体类"></a>编写 pojo 层实体类</h4><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.<span class="keyword">Data</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Student &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String <span class="keyword">name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.<span class="keyword">Data</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Teacher &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String <span class="keyword">name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写-Mapper-层接口和实现类"><a href="#编写-Mapper-层接口和实现类" class="headerlink" title="编写 Mapper 层接口和实现类"></a>编写 Mapper 层接口和实现类</h4><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeacherMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了分离接口和 mapper 配置文件，在 resources 下创建和接口所在相同的包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--StudentMapper.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;ml.guest997.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--TeacherMapper.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;ml.guest997.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注册配置文件"><a href="#注册配置文件" class="headerlink" title="注册配置文件"></a>注册配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包扫描使用别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;ml.guest997.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;ml.guest997.mapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="多对一（查询出指定学生以及对应老师的信息）"><a href="#多对一（查询出指定学生以及对应老师的信息）" class="headerlink" title="多对一（查询出指定学生以及对应老师的信息）"></a>多对一（查询出指定学生以及对应老师的信息）</h3><p>Stedent 实体类中添加 Teacher 对象属性。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Teacher teacher;    <span class="comment">//学生需要关联一个老师</span></span><br></pre></td></tr></table></figure>

<h4 id="按照查询嵌套处理（子查询）"><a href="#按照查询嵌套处理（子查询）" class="headerlink" title="按照查询嵌套处理（子查询）"></a>按照查询嵌套处理（子查询）</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Student</span> <span class="selector-tag">getStudent</span>(<span class="variable">@Param</span>(<span class="string">&quot;id&quot;</span>) int id);</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.根据 id 查询出指定学生信息</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.再根据学生的 tid 字段查询出相应的老师信息</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    select * from student where id = #</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--属性是一个对象使用 association 属性处理--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    select * from teacher where id = #</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.<span class="keyword">session</span>.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> StudentMapperTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> getStudent()&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.<span class="keyword">class</span>);</span><br><span class="line">        Student student = studentMapper.getStudent(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(student);</span><br><span class="line">        sqlSession.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//结果为 Student(id=<span class="number">1</span>, <span class="type">name</span>=小明, teacher=Teacher(id=<span class="number">1</span>, <span class="type">name</span>=秦老师))</span><br></pre></td></tr></table></figure>

<h4 id="按照结果查询嵌套处理（连接查询）"><a href="#按照结果查询嵌套处理（连接查询）" class="headerlink" title="按照结果查询嵌套处理（连接查询）"></a>按照结果查询嵌套处理（连接查询）</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Student</span> <span class="selector-tag">getStudent02</span>(<span class="variable">@Param</span>(<span class="string">&quot;id&quot;</span>) int id);</span><br></pre></td></tr></table></figure>

<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="comment">--使用完整的 sql 语句，在 sql 语句中给字段起别名，这样就能通过嵌套结果映射来去除重复的数据--&gt;</span></span><br><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getStudent02&quot;</span> resultMap=<span class="string">&quot;StudentTeacher02&quot;</span>&gt;</span><br><span class="line">    select s.<span class="built_in">id</span> sid,s.<span class="built_in">name</span> sname,t.<span class="built_in">id</span> tid,t.<span class="built_in">name</span> tname <span class="keyword">from</span> student s,teacher t <span class="keyword">where</span> s.tid=t.<span class="built_in">id</span> <span class="keyword">and</span> s.<span class="built_in">id</span> = <span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;resultMap <span class="built_in">id</span>=<span class="string">&quot;StudentTeacher02&quot;</span> type=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">id</span> <span class="keyword">property</span>=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;sid&quot;</span>/&gt;</span><br><span class="line">    &lt;<span class="literal">result</span> <span class="keyword">property</span>=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;sname&quot;</span>/&gt;</span><br><span class="line">    &lt;association <span class="keyword">property</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">id</span> <span class="keyword">property</span>=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;tid&quot;</span>/&gt;</span><br><span class="line">        &lt;<span class="literal">result</span> <span class="keyword">property</span>=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;tname&quot;</span>/&gt;</span><br><span class="line">    &lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void get<span class="constructor">Student02()</span>&#123;</span><br><span class="line">    SqlSession sqlSession = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line">    StudentMapper studentMapper = sqlSession.get<span class="constructor">Mapper(StudentMapper.<span class="params">class</span>)</span>;</span><br><span class="line">    Student student = studentMapper.get<span class="constructor">Student02(1)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(student);</span><br><span class="line">    sqlSession.close<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 Student(id=1, name=小明, teacher=Teacher(id=1, name=秦老师))</span></span><br></pre></td></tr></table></figure>

<h3 id="一对多（查询出指定老师以及对应学生的信息）"><a href="#一对多（查询出指定老师以及对应学生的信息）" class="headerlink" title="一对多（查询出指定老师以及对应学生的信息）"></a>一对多（查询出指定老师以及对应学生的信息）</h3><p><strong>注意：需要新建一个子项目或者把上面多对一的文件删除，要不然会报错。注释掉 Student 实体类中的 Teacher 对象属性，添加 tid 属性；然后在 Teacher 实体类中添加以 List 封装的多个 Student 对象属性。</strong></p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.<span class="keyword">Data</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Student &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String <span class="keyword">name</span>;</span><br><span class="line">//    <span class="keyword">private</span> Teacher teacher;    //学生需要关联一个老师</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">Student</span>&gt; students;     <span class="comment">//老师下有多个学生</span></span><br></pre></td></tr></table></figure>

<h4 id="按照查询嵌套处理（子查询）-1"><a href="#按照查询嵌套处理（子查询）-1" class="headerlink" title="按照查询嵌套处理（子查询）"></a>按照查询嵌套处理（子查询）</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Teacher</span> <span class="selector-tag">getTeacher</span>(<span class="variable">@Param</span>(<span class="string">&quot;id&quot;</span>) int id);</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.根据 id 查询出指定老师信息</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.再根据老师的 id 字段查询出与 tid 字段相等的多个学生</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudents&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    select * from teacher where id = #</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudents&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--属性是一个集合使用 collection 属性处理--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    select * from student where tid = #</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">package ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line">import ml.guest997.pojo.Teacher;</span><br><span class="line">import ml.guest997.util.MyBatisUtil;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class TeacherMapperTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void getTeacher<span class="params">()</span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession<span class="params">()</span>;</span><br><span class="line">        TeacherMapper teacherMapper = sqlSession.getMapper<span class="params">(TeacherMapper.class)</span>;</span><br><span class="line">        Teacher teacher = teacherMapper.getTeacher<span class="params">(1)</span>;</span><br><span class="line">        System.out.println<span class="params">(teacher)</span>;</span><br><span class="line">        sqlSession.close<span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*结果为</span><br><span class="line">Teacher<span class="params">(<span class="attr">id</span>=1, <span class="attr">name</span>=秦老师, <span class="attr">students</span>=[</span></span><br><span class="line"><span class="params">Student(<span class="attr">id</span>=1, <span class="attr">name</span>=小明, <span class="attr">tid</span>=1)</span>, </span><br><span class="line">Student<span class="params">(<span class="attr">id</span>=2, <span class="attr">name</span>=小红, <span class="attr">tid</span>=1)</span>, </span><br><span class="line">Student<span class="params">(<span class="attr">id</span>=3, <span class="attr">name</span>=小张, <span class="attr">tid</span>=1)</span>, </span><br><span class="line">Student<span class="params">(<span class="attr">id</span>=4, <span class="attr">name</span>=小李, <span class="attr">tid</span>=1)</span>, </span><br><span class="line">Student<span class="params">(<span class="attr">id</span>=5, <span class="attr">name</span>=小王, <span class="attr">tid</span>=1)</span></span><br><span class="line">])</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h4 id="按照结果查询嵌套处理（连接查询）-1"><a href="#按照结果查询嵌套处理（连接查询）-1" class="headerlink" title="按照结果查询嵌套处理（连接查询）"></a>按照结果查询嵌套处理（连接查询）</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Teacher</span> <span class="selector-tag">getTeacher02</span>(<span class="variable">@Param</span>(<span class="string">&quot;id&quot;</span>) int id);</span><br></pre></td></tr></table></figure>

<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getTeacher02&quot;</span> resultMap=<span class="string">&quot;TeacherStudents02&quot;</span>&gt;</span><br><span class="line">    select t.<span class="built_in">id</span> tid,t.<span class="built_in">name</span> tname,s.<span class="built_in">id</span> sid,s.<span class="built_in">name</span> sname <span class="keyword">from</span> student s,teacher t <span class="keyword">where</span> t.<span class="built_in">id</span>=s.tid <span class="keyword">and</span> t.<span class="built_in">id</span>=<span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;resultMap <span class="built_in">id</span>=<span class="string">&quot;TeacherStudents02&quot;</span> type=<span class="string">&quot;teacher&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">id</span> <span class="keyword">property</span>=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;tid&quot;</span>/&gt;</span><br><span class="line">    &lt;<span class="literal">result</span> <span class="keyword">property</span>=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;tname&quot;</span>/&gt;</span><br><span class="line">    &lt;collection <span class="keyword">property</span>=<span class="string">&quot;students&quot;</span> ofType=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">id</span> <span class="keyword">property</span>=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;sid&quot;</span>/&gt;</span><br><span class="line">        &lt;<span class="literal">result</span> <span class="keyword">property</span>=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;sname&quot;</span>/&gt;</span><br><span class="line">        &lt;<span class="literal">result</span> <span class="keyword">property</span>=<span class="string">&quot;tid&quot;</span> column=<span class="string">&quot;tid&quot;</span>/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void getTeacher02<span class="params">()</span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession<span class="params">()</span>;</span><br><span class="line">    TeacherMapper teacherMapper = sqlSession.getMapper<span class="params">(TeacherMapper.class)</span>;</span><br><span class="line">    Teacher teacher = teacherMapper.getTeacher02<span class="params">(1)</span>;</span><br><span class="line">    System.out.println<span class="params">(teacher)</span>;</span><br><span class="line">    sqlSession.close<span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line">/*结果为</span><br><span class="line">Teacher<span class="params">(<span class="attr">id</span>=1, <span class="attr">name</span>=秦老师, <span class="attr">students</span>=[</span></span><br><span class="line"><span class="params">Student(<span class="attr">id</span>=1, <span class="attr">name</span>=小明, <span class="attr">tid</span>=1)</span>, </span><br><span class="line">Student<span class="params">(<span class="attr">id</span>=2, <span class="attr">name</span>=小红, <span class="attr">tid</span>=1)</span>, </span><br><span class="line">Student<span class="params">(<span class="attr">id</span>=3, <span class="attr">name</span>=小张, <span class="attr">tid</span>=1)</span>, </span><br><span class="line">Student<span class="params">(<span class="attr">id</span>=4, <span class="attr">name</span>=小李, <span class="attr">tid</span>=1)</span>, </span><br><span class="line">Student<span class="params">(<span class="attr">id</span>=5, <span class="attr">name</span>=小王, <span class="attr">tid</span>=1)</span></span><br><span class="line">])</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 详解(九)</title>
    <url>/2021/07/28/mybatis-expound09/</url>
    <content><![CDATA[<h2 id="动态-SQL-语句"><a href="#动态-SQL-语句" class="headerlink" title="动态 SQL 语句"></a>动态 SQL 语句</h2><p>MyBatis 的动态 SQL 元素与 JSTL 或 XML 文本处理器相似，常用 if、choose、when、otherwise、trim、where、set、foreach 和 bind 等元素。</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="在-mybatis-数据库下创建名为-blog-的数据库表"><a href="#在-mybatis-数据库下创建名为-blog-的数据库表" class="headerlink" title="在 mybatis 数据库下创建名为 blog 的数据库表"></a>在 mybatis 数据库下创建名为 blog 的数据库表</h4><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`blog`</span>(</span><br><span class="line"><span class="symbol">`id`</span> VARCHAR(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line"><span class="symbol">`title`</span> VARCHAR(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line"><span class="symbol">`author`</span> VARCHAR(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line"><span class="symbol">`create_time`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line"><span class="symbol">`views`</span> INT(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure>

<h4 id="编写-pojo-层实体类"><a href="#编写-pojo-层实体类" class="headerlink" title="编写 pojo 层实体类"></a>编写 pojo 层实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;      <span class="comment">//id 是用 UUID 处理后生成的</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;    <span class="comment">//属性名与字段名不一致，需要在核心配置文件中开启驼峰命名自动映射</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写工具类"><a href="#编写工具类" class="headerlink" title="编写工具类"></a>编写工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写-Mapper-层接口和实现类"><a href="#编写-Mapper-层接口和实现类" class="headerlink" title="编写 Mapper 层接口和实现类"></a>编写 Mapper 层接口和实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBlog</span><span class="params">(Blog blog)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--BlogMapper.xml--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span></span><br><span class="line"><span class="meta"><span class="xml">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span></span><br><span class="line"><span class="meta"><span class="xml">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;ml.guest997.mapper.BlogMapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        insert into blog (id, title, author, create_time, views) values (#</span><span class="template-variable">&#123;id&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;title&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;author&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;createTime&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;views&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="注册配置文件"><a href="#注册配置文件" class="headerlink" title="注册配置文件"></a>注册配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启驼峰命名自动映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包扫描使用别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;ml.guest997.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.mapper.BlogMapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line">import ml.guest997.pojo.Blog;</span><br><span class="line">import ml.guest997.util.IDUtil;</span><br><span class="line">import ml.guest997.util.MyBatisUtil;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> BlogMapperTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void add<span class="constructor">Blog()</span>&#123;</span><br><span class="line">        SqlSession sqlSession = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line">        BlogMapper blogMapper = sqlSession.get<span class="constructor">Mapper(BlogMapper.<span class="params">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        Blog blog = <span class="keyword">new</span> <span class="constructor">Blog()</span>;</span><br><span class="line">        blog.set<span class="constructor">Id(IDUtil.<span class="params">getId</span>()</span>);</span><br><span class="line">        blog.set<span class="constructor">Title(<span class="string">&quot;Mybatis&quot;</span>)</span>;</span><br><span class="line">        blog.set<span class="constructor">Author(<span class="string">&quot;Guest997&quot;</span>)</span>;</span><br><span class="line">        blog.set<span class="constructor">CreateTime(<span class="params">new</span> Date()</span>);</span><br><span class="line">        blog.set<span class="constructor">Views(9999)</span>;</span><br><span class="line">        blogMapper.add<span class="constructor">Blog(<span class="params">blog</span>)</span>;</span><br><span class="line"></span><br><span class="line">        blog.set<span class="constructor">Id(IDUtil.<span class="params">getId</span>()</span>);</span><br><span class="line">        blog.set<span class="constructor">Title(<span class="string">&quot;Java&quot;</span>)</span>;</span><br><span class="line">        blogMapper.add<span class="constructor">Blog(<span class="params">blog</span>)</span>;</span><br><span class="line"></span><br><span class="line">        blog.set<span class="constructor">Id(IDUtil.<span class="params">getId</span>()</span>);</span><br><span class="line">        blog.set<span class="constructor">Title(<span class="string">&quot;MySQL&quot;</span>)</span>;</span><br><span class="line">        blogMapper.add<span class="constructor">Blog(<span class="params">blog</span>)</span>;</span><br><span class="line"></span><br><span class="line">        blog.set<span class="constructor">Id(IDUtil.<span class="params">getId</span>()</span>);</span><br><span class="line">        blog.set<span class="constructor">Title(<span class="string">&quot;JavaWeb&quot;</span>)</span>;</span><br><span class="line">        blogMapper.add<span class="constructor">Blog(<span class="params">blog</span>)</span>;</span><br><span class="line"></span><br><span class="line">        sqlSession.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if-标签"><a href="#if-标签" class="headerlink" title="if 标签"></a>if 标签</h3><p>在 MyBatis 中 if 元素是最常用的元素，它类似于 Java 中的 if 语句。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">getBlogByIf</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--where 1=1 是为了避免 where 关键字后面的第一个词直接就是 and 而导致语法错误。where 后面总要有语句，加上了1=1后就可以保证语法不会出错。--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBlogByIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    select * from blog where 1=1</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        and title =#</span><span class="template-variable">&#123;title&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        and author =#</span><span class="template-variable">&#123;author&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBlogByIf</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.<span class="built_in">getSqlSession</span>();</span><br><span class="line">    BlogMapper blogMapper = sqlSession.<span class="built_in">getMapper</span>(BlogMapper.class);</span><br><span class="line">    Map map = <span class="keyword">new</span> <span class="built_in">HashMap</span>();    <span class="comment">//只创建对象，不插入键值对，会查询出所有记录。</span></span><br><span class="line">    map.<span class="built_in">put</span>(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">    map.<span class="built_in">put</span>(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;Guest997&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; blogList = blogMapper.<span class="built_in">getBlogByIf</span>(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogList) &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 Blog(id=ec982a0455964dfc9c6ae486ddf45719, title=Java, author=Guest997, createTime=Sat Jun 12 11:57:51 CST 2021, views=9999)</span></span><br></pre></td></tr></table></figure>

<h3 id="choose、when、otherwise-标签"><a href="#choose、when、otherwise-标签" class="headerlink" title="choose、when、otherwise 标签"></a>choose、when、otherwise 标签</h3><p>MyBatis 提供了 choose 元素，它类似于 Java 中的 switch 语句。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">getBlogByChoose</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBlogByChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    select * from blog where 1=1</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            and title =#</span><span class="template-variable">&#123;title&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            and author =#</span><span class="template-variable">&#123;author&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span></span><br><span class="line"><span class="xml">            and views = #</span><span class="template-variable">&#123;views&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBlogByChoose</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.<span class="built_in">getSqlSession</span>();</span><br><span class="line">    BlogMapper blogMapper = sqlSession.<span class="built_in">getMapper</span>(BlogMapper.class);</span><br><span class="line">    Map map = <span class="keyword">new</span> <span class="built_in">HashMap</span>();</span><br><span class="line">    <span class="comment">//会选择其中的一个条件进行筛选，可以分别注释掉下面的代码来测试。</span></span><br><span class="line">    map.<span class="built_in">put</span>(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">    map.<span class="built_in">put</span>(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;Guest997&quot;</span>);</span><br><span class="line">    map.<span class="built_in">put</span>(<span class="string">&quot;views&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">    List&lt;Blog&gt; blogList = blogMapper.<span class="built_in">getBlogByChoose</span>(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogList) &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 Blog(id=ec982a0455964dfc9c6ae486ddf45719, title=Java, author=Guest997, createTime=Sat Jun 12 11:57:51 CST 2021, views=9999)</span></span><br></pre></td></tr></table></figure>

<h3 id="where、set、trim-标签"><a href="#where、set、trim-标签" class="headerlink" title="where、set、trim 标签"></a>where、set、trim 标签</h3><p>where 元素只会在子元素返回任何内容的情况下才插入 WHERE 子句。而且，若子句的开头为 AND 或 OR，where 元素也会将它们去除。（where 1=1 这种语句实际中很少有，都是用 where 标签，故修改上面的 if 标签的配置文件）</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBlogByIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    select * from blog</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            title =#</span><span class="template-variable">&#123;title&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            and author =#</span><span class="template-variable">&#123;author&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateBlog</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    update blog</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            title =#</span><span class="template-variable">&#123;title&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            author =#</span><span class="template-variable">&#123;author&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span></span><br><span class="line"><span class="xml">    where id = #</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBlog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.<span class="built_in">getSqlSession</span>();</span><br><span class="line">    BlogMapper blogMapper = sqlSession.<span class="built_in">getMapper</span>(BlogMapper.class);</span><br><span class="line">    Map map = <span class="keyword">new</span> <span class="built_in">HashMap</span>();</span><br><span class="line">    <span class="comment">//至少得传入一个 set 的字段键值对，否则构不成 update 语句。</span></span><br><span class="line">    map.<span class="built_in">put</span>(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;Java02&quot;</span>);</span><br><span class="line">    map.<span class="built_in">put</span>(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;zyp997&quot;</span>);</span><br><span class="line">    map.<span class="built_in">put</span>(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;ec982a0455964dfc9c6ae486ddf45719&quot;</span>);    <span class="comment">//id 如果不要，会修改全部记录。</span></span><br><span class="line">    <span class="keyword">int</span> result = blogMapper.<span class="built_in">updateBlog</span>(map);</span><br><span class="line">    <span class="keyword">if</span>(result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>trim 元素的主要功能是可以在自己包含的内容前加上某些前缀，也可以在其后加上某些后缀，与之对应的属性是 prefix 和 suffix。可以把包含内容的首部或尾部的某些内容覆盖，对应的属性是 prefixOverrides 和 suffixOverrides。正因为 trim 元素有这样的功能，所以也可以非常简单地利用 trim 来代替 where 和 set 元素的功能。尝试修改上面的 where 和 set 的配置文件。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBlogByIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    select * from blog</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">prefixOverrides</span> = <span class="string">&quot;and  or&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            title =#</span><span class="template-variable">&#123;title&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            and author =#</span><span class="template-variable">&#123;author&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    update blog</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            title =#</span><span class="template-variable">&#123;title&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            author =#</span><span class="template-variable">&#123;author&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span></span><br><span class="line"><span class="xml">    where id = #</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="SQL-片段"><a href="#SQL-片段" class="headerlink" title="SQL 片段"></a>SQL 片段</h3><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！就比如上面的 if 判断，多个标签中都使用到了，我们就能抽取出来实现复用。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        title =#</span><span class="template-variable">&#123;title&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        and author =#</span><span class="template-variable">&#123;author&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    select * from blog</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h3><p>foreach 元素主要用在构建 in 条件中，它可以在 sql 语句中迭代一个集合。</p>
<p>foreach 元素的属性主要有 item、index、collection、open、separator、close。</p>
<ul>
<li>  item：表示集合中每一个元素进行迭代时的别名。</li>
<li>  index：指定一个名字，用于表示在迭代过程中每次迭代到的位置。</li>
<li>  open：表示语句以什么开始。</li>
<li>  separator：表示在每次进行迭代之间以什么符号作为分隔符。</li>
<li>  close：表示语句以什么结束。</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询前三个博客信息（为了方便测试，把博客表的 id 改为1）</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">getBlogByForeach</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="comment">--</span></span><br><span class="line">下面的两个语句都能用，选其中一种进行测试。</span><br><span class="line">select * <span class="keyword">from</span> blog <span class="keyword">where</span> <span class="built_in">id</span>=<span class="number">1</span> <span class="keyword">or</span> <span class="built_in">id</span>=<span class="number">2</span> <span class="keyword">or</span> <span class="built_in">id</span>=<span class="number">3</span></span><br><span class="line">select * <span class="keyword">from</span> blog <span class="keyword">where</span> <span class="built_in">id</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getBlogByForeach&quot;</span> parameterType=<span class="string">&quot;map&quot;</span> resultType=<span class="string">&quot;blog&quot;</span>&gt;</span><br><span class="line">    select * <span class="keyword">from</span> blog</span><br><span class="line">    &lt;<span class="keyword">where</span>&gt;</span><br><span class="line">        &lt;foreach collection=<span class="string">&quot;ids&quot;</span> <span class="built_in">item</span>=<span class="string">&quot;id&quot;</span> separator=<span class="string">&quot;or&quot;</span>&gt;</span><br><span class="line">            <span class="built_in">id</span> = <span class="comment">#&#123;id&#125;</span></span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">    &lt;/<span class="keyword">where</span>&gt;</span><br><span class="line"></span><br><span class="line">    select * <span class="keyword">from</span> blog <span class="keyword">where</span> <span class="built_in">id</span> <span class="keyword">in</span></span><br><span class="line">    &lt;foreach collection=<span class="string">&quot;ids&quot;</span> <span class="built_in">item</span>=<span class="string">&quot;id&quot;</span> open=<span class="string">&quot;(&quot;</span> close=<span class="string">&quot;)&quot;</span> separator=<span class="string">&quot;,&quot;</span>&gt;</span><br><span class="line">        <span class="built_in">id</span> = <span class="comment">#&#123;id&#125;</span></span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void getBlogByForeach()&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="keyword">BlogMapper </span><span class="keyword">blogMapper </span>= sqlSession.getMapper(<span class="keyword">BlogMapper.class);</span></span><br><span class="line"><span class="keyword"></span>    Map map = new HashMap();</span><br><span class="line">    ArrayList&lt;Integer&gt; ids = new ArrayList&lt;&gt;();</span><br><span class="line">    ids.<span class="keyword">add(1);</span></span><br><span class="line"><span class="keyword"></span>    ids.<span class="keyword">add(2);</span></span><br><span class="line"><span class="keyword"></span>    ids.<span class="keyword">add(3);</span></span><br><span class="line"><span class="keyword"></span>    map.put(<span class="string">&quot;ids&quot;</span>,ids);</span><br><span class="line">    List&lt;<span class="keyword">Blog&gt; </span><span class="keyword">blogList </span>= <span class="keyword">blogMapper.getBlogByForeach(map);</span></span><br><span class="line"><span class="keyword"></span>    for (<span class="keyword">Blog </span><span class="keyword">blog </span>: <span class="keyword">blogList) </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">blog);</span></span><br><span class="line"><span class="keyword"></span>    &#125;</span><br><span class="line">    sqlSession.<span class="keyword">close();</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 详解(十)</title>
    <url>/2021/07/28/mybatis-expound10/</url>
    <content><![CDATA[<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>什么是缓存（Cache）</p>
<ul>
<li>  存在内存中的临时数据</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去査询数据就不用从磁盘上（关系型数据库数据文件）查<br>  询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能可题。</li>
</ul>
<p>为什么使用缓存</p>
<ul>
<li>  减少和数据库的交互次数，减少系统开销，提高系统效率。</li>
</ul>
<p>什么样的数据能使用缓存</p>
<ul>
<li>  经常查询并且不经常改变的数据。</li>
</ul>
<h3 id="MyBatis-缓存"><a href="#MyBatis-缓存" class="headerlink" title="MyBatis 缓存"></a>MyBatis 缓存</h3><p>MyBatis 系统中默认定义了两级缓存：<strong>一级缓存</strong> 和 <strong>二级缓存</strong></p>
<ul>
<li>  默认情况下，只有一级缓存开启。（SqlSession 级别的缓存，也称为本地缓存）</li>
<li>  二级缓存需要手动开启和配置，他是基于 namespace 级别的缓存。</li>
<li>  为了提高扩展性， MyBatis 定义了缓存接口 Cache。我们可以通过实现 Cache 接口来自定义二级缓存。</li>
</ul>
<h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Select</span>(<span class="string">&quot;select * from user where id=#&#123;id&#125;&quot;</span>)</span><br><span class="line">User getUserById(<span class="variable">@Param</span>(<span class="string">&quot;id&quot;</span>) int id);</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void user<span class="constructor">Test()</span>&#123;</span><br><span class="line">    SqlSession sqlSession = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line">    UserMapper02 userMapper02 = sqlSession.get<span class="constructor">Mapper(UserMapper02.<span class="params">class</span>)</span>;</span><br><span class="line">    User user = userMapper02.get<span class="constructor">UserById(1)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">    <span class="comment">//sqlSession.clearCache();    //手动清理缓存</span></span><br><span class="line">    User user02 = userMapper02.get<span class="constructor">UserById(1)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(user<span class="operator"> == </span>user02);</span><br><span class="line">    sqlSession.close<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/mybatis-expound10.md-0.png"></p>
<p>可以从上图看出，getUserById 方法执行了两次，但是 sql 语句却只执行了一次，而且对象的引用地址也是一样的。这就说明第二次的查询是从缓存中取出来的。</p>
<p>但是缓存也有失效的情况：（也可以说是一开始就不存在）</p>
<ul>
<li>  不在同一个 SqlSession 对象中</li>
<li>  查询参数不同</li>
<li>  増删改操作，可能会改变原来的数据，所以必定要刷新缓存。<img data-src="/images/mybatis-expound10.md-1.png"></li>
<li>  查询不同的 Mapper.xml</li>
<li>  手动清理缓存</li>
</ul>
<h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><p>一级缓存作用域太低了，所以诞生了二级缓存。一个会话查询数据，数据就会被放在当前会话的缓存中；如果当前会话关闭了，这个会话对应的一级缓存就没了；会话关闭了，一级缓存中的数据会被保存到二级缓存中。新的会话查询信息，就可以从二级缓存中获取内容。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">User</span> <span class="selector-tag">getUserById02</span>(<span class="variable">@Param</span>(<span class="string">&quot;id&quot;</span>) int id);</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--UserMapper02.xml--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span></span><br><span class="line"><span class="meta"><span class="xml">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span></span><br><span class="line"><span class="meta"><span class="xml">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;ml.guest997.mapper.UserMapper02&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</span></span></span><br><span class="line"><span class="comment"><span class="xml">        可用的清除策略有：</span></span></span><br><span class="line"><span class="comment"><span class="xml">        LRU – 最近最少使用：移除最长时间不被使用的对象。</span></span></span><br><span class="line"><span class="comment"><span class="xml">        FIFO – 先进先出：按对象进入缓存的顺序来移除它们。</span></span></span><br><span class="line"><span class="comment"><span class="xml">        SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。</span></span></span><br><span class="line"><span class="comment"><span class="xml">        WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">           <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">           <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">           <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById02&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        select * from user where id=#</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void user<span class="constructor">Test02()</span>&#123;</span><br><span class="line">    <span class="comment">//创建两个 SqlSession 对象</span></span><br><span class="line">    SqlSession sqlSession = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line">    SqlSession sqlSession02 = <span class="module-access"><span class="module"><span class="identifier">MyBatisUtil</span>.</span></span>get<span class="constructor">SqlSession()</span>;</span><br><span class="line">    UserMapper02 userMapper02 = sqlSession.get<span class="constructor">Mapper(UserMapper02.<span class="params">class</span>)</span>;</span><br><span class="line">    UserMapper02 userMapper022 = sqlSession02.get<span class="constructor">Mapper(UserMapper02.<span class="params">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user = userMapper02.get<span class="constructor">UserById02(1)</span>;</span><br><span class="line">    sqlSession.close<span class="literal">()</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">    User user02 = userMapper022.get<span class="constructor">UserById02(1)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(user<span class="operator"> == </span>user02);</span><br><span class="line">    sqlSession02.close<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/mybatis-expound10.md-2.png"></p>
<p>只有当会话提交或关闭时，才会转存到二级缓存中。用户查询数据时，会先从二级缓存中找，没有就到一级缓存中找，还是没有就会连接数据库执行 sql 语句。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 详解(十一)</title>
    <url>/2021/07/29/mybatis-expound11/</url>
    <content><![CDATA[<h2 id="重构-SMBMS-项目"><a href="#重构-SMBMS-项目" class="headerlink" title="重构 SMBMS 项目"></a>重构 SMBMS 项目</h2><p>之前在 JavaWeb 中用的是底层代码进行数据库的操作，现在使用 MyBatis 框架进行重构。项目源码会放在我的网盘 <strong>学习-MyBatis</strong> 目录下的 <strong>smbms-mybatis</strong> 压缩包。<br><strong>在重构的时候，根据接口编写 XML 配置文件代码即可。测试类中只是随便传参进去的，实际中会从前端获取参数。所以可能不完全是契合前端的功能的，这个就当作练习即可。</strong></p>
<p><img data-src="/images/mybatis-expound11.md-0.png"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(一)</title>
    <url>/2021/05/25/mysql-basis01/</url>
    <content><![CDATA[<h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><ul>
<li>关系型数据库 (SQL)<ul>
<li>  MySQL , Oracle , SQL Server …</li>
<li>  关系型数据库通过外键关联来建立表与表之间的关系。</li>
</ul>
</li>
<li>非关系型数据库 (NOSQL - Not Only SQL)<ul>
<li>  Redis , MongoDB …</li>
<li>  非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定。</li>
</ul>
</li>
</ul>
<h2 id="DBMS"><a href="#DBMS" class="headerlink" title="DBMS"></a>DBMS</h2><p>数据库管理系统 ( <strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem )</p>
<p>数据库管理软件 , 科学组织和存储数据 , 高效地获取和维护数据。MySQL 就算是一个数据库管理系统。</p>
<h2 id="语言分类"><a href="#语言分类" class="headerlink" title="语言分类"></a>语言分类</h2><p>名称</p>
<p>解释</p>
<p>命令</p>
<p>DDL（数据定义语言）</p>
<p>定义和管理数据对象，如数据库、数据表等</p>
<p>CREATE、DROP、 ALTER</p>
<p>DML（数据操作语言）</p>
<p>用于操作数据库对象中所包含的数据</p>
<p>INSERT、 UPDATE、 DELETE</p>
<p>DQL（数据查询语言）</p>
<p>用于查询数据库数据</p>
<p>SELECT</p>
<p>DCL（数据控制语言）</p>
<p>用于管理数据库的语言，包括管理权限及数据更改</p>
<p>GRANT、 commit、 rollback</p>
<h2 id="基本的数据库操作命令"><a href="#基本的数据库操作命令" class="headerlink" title="基本的数据库操作命令"></a>基本的数据库操作命令</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">password</span>=<span class="keyword">password</span>(<span class="string">&#x27;123456&#x27;</span>)<span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">&#x27;root&#x27;</span>;   <span class="comment">-- 修改密码</span></span><br><span class="line">flush <span class="keyword">privileges</span>;        <span class="comment">-- 刷新权限</span></span><br><span class="line"><span class="keyword">exit</span>;                    <span class="comment">-- 退出 MySQL</span></span><br><span class="line"><span class="comment">--                       -- 单行注释</span></span><br><span class="line"><span class="comment">/**/</span>                     <span class="comment">-- 多行注释</span></span><br></pre></td></tr></table></figure>

<h2 id="熟悉-SQLyog-软件使用"><a href="#熟悉-SQLyog-软件使用" class="headerlink" title="熟悉 SQLyog 软件使用"></a>熟悉 SQLyog 软件使用</h2><p>使用 SQLyog 软件完成以下操作：（在历史记录中可以看到数据库的操作语句）</p>
<ul>
<li>  连接本地 MySQL 数据库</li>
<li>  新建名为 myschool 的数据库</li>
<li>  新建名为 grade 的数据库表</li>
<li>  数据字段和属性：GradeID : int(11)、主键；GradeName : varchar(50)、非空<img data-src="/images/mysql-basis01.md-0.png"><img data-src="/images/mysql-basis01.md-1.png"></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(二)</title>
    <url>/2021/05/27/mysql-basis02/</url>
    <content><![CDATA[<h2 id="操作数据库（-里的内容表示可选）"><a href="#操作数据库（-里的内容表示可选）" class="headerlink" title="操作数据库（[ ]里的内容表示可选）"></a>操作数据库（[ ]里的内容表示可选）</h2><p><strong>注意：MySQL 关键字不区分大小写。</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;          <span class="comment">-- 显示所有数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名;  <span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">exists</span>] 数据库名;      <span class="comment">-- 删除数据库</span></span><br><span class="line">use 数据库名；             <span class="comment">-- 使用某个数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> 数据库名;    <span class="comment">-- 显示某个数据库的定义</span></span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>点击下方链接了解 MySQL 的数据类型。<br><a href="https://www.runoob.com/mysql/mysql-data-types.html">https://www.runoob.com/mysql/mysql-data-types.html</a></p>
<h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><ul>
<li>  理解为 <strong>没有值</strong> 或 <strong>未知值</strong>。</li>
<li>  不要用 NULL 进行算术运算 , 结果仍为 NULL。</li>
</ul>
<h2 id="数据字段属性"><a href="#数据字段属性" class="headerlink" title="数据字段属性"></a>数据字段属性</h2><h3 id="UnSigned"><a href="#UnSigned" class="headerlink" title="UnSigned"></a>UnSigned</h3><p>无符号的 - 数据不允许为负数</p>
<h3 id="ZEROFILL"><a href="#ZEROFILL" class="headerlink" title="ZEROFILL"></a>ZEROFILL</h3><p>0填充的 - 不足位数的用0来填充 , 如 int(3)，7则为007。</p>
<h3 id="Auto-InCrement"><a href="#Auto-InCrement" class="headerlink" title="Auto_InCrement"></a>Auto_InCrement</h3><p>自动增长的 - 每添加一条数据，自动基于上一个记录数值上加1(默认)。</p>
<ul>
<li>  通常用于设置 <strong>主键</strong>，且为整数类型。</li>
<li>  可定义起始值和步长。</li>
</ul>
<h3 id="NULL-和-NOT-NULL"><a href="#NULL-和-NOT-NULL" class="headerlink" title="NULL 和 NOT NULL"></a>NULL 和 NOT NULL</h3><ul>
<li>  默认为 NULL , 即没有插入该列的数值。</li>
<li>  如果设置为 NOT NULL , 则该列必须有值。</li>
</ul>
<h3 id="DEFAULT"><a href="#DEFAULT" class="headerlink" title="DEFAULT"></a>DEFAULT</h3><p>用于设置默认值</p>
<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>做项目必须要有以下的五个字段。</p>
<ul>
<li>  id 主键</li>
<li>  version 乐观锁</li>
<li>  is_delete 伪删除</li>
<li>  gmt_create 创建时间</li>
<li>  gmt_update 修改时间</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(三)</title>
    <url>/2021/05/30/mysql-basis03/</url>
    <content><![CDATA[<h2 id="数据库表类型"><a href="#数据库表类型" class="headerlink" title="数据库表类型"></a>数据库表类型</h2><p>常见的 MyISAM 与 InnoDB 类型对比：</p>
<p>名称</p>
<p>MYISAM</p>
<p>InnoDB</p>
<p>事务处理</p>
<p>不支持</p>
<p>支持</p>
<p>数据行锁定</p>
<p>不支持</p>
<p>支持</p>
<p>外键约束</p>
<p>不支持</p>
<p>支持</p>
<p>全文索引</p>
<p>支持</p>
<p>不支持</p>
<p>表空间大小</p>
<p>较小</p>
<p>较大，约为 MYISAM 的2倍</p>
<p>各自的优点：</p>
<ul>
<li>  MyISAM：节约空间、相应速度快</li>
<li>  InnoDB：安全性高 , 支持事务处理、支持多个用户操作多个数据库表</li>
</ul>
<h2 id="创建数据库表语法"><a href="#创建数据库表语法" class="headerlink" title="创建数据库表语法"></a>创建数据库表语法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">create <span class="selector-tag">table</span> <span class="selector-attr">[if not exists]</span> 表名(-- 字段名 数据类型 <span class="selector-attr">[属性]</span> <span class="selector-attr">[注释]</span>)<span class="selector-attr">[引擎(数据表类型)]</span> <span class="selector-attr">[字符集]</span></span><br></pre></td></tr></table></figure>

<h2 id="创建数据库表练习"><a href="#创建数据库表练习" class="headerlink" title="创建数据库表练习"></a>创建数据库表练习</h2><p>要求：使用 SQL 语句创建 school 数据库下的 student 表。 引擎为 innodb，字符集为 utf-8。 数据的字段名、类型及属性如下：</p>
<ul>
<li>  学号：int(15) 主键 非空 自增</li>
<li>  姓名：varchar(30) 非空</li>
<li>  密码：varchar(20) 非空</li>
<li>  性别：varchar(2) 非空</li>
<li>  出生日期：datetime 非空</li>
<li>  住址：varchar(100) 默认值为：空</li>
<li>  邮件地址：varchar(50) 默认值为：空</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> school;</span><br><span class="line"><span class="comment">-- 注意：数据库表名和数据字段名建议用 ` ` 包裹住，避免与 MySQL 关键字冲突。</span></span><br><span class="line"><span class="comment">-- 字符串用 &#x27; &#x27; 包裹住。 </span></span><br><span class="line"><span class="comment">-- ()里每行语句结束后都要用 , 结束，最后一行不需要。</span></span><br><span class="line">use school;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`<span class="type">name</span>` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birth` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;邮件地址&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY KEY</span>(`id`)</span><br><span class="line">)ENGINE=INNODB CHARSET=utf8</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/mysql-basis03.md-0.png"></p>
<h2 id="修改数据库表（alter-table）"><a href="#修改数据库表（alter-table）" class="headerlink" title="修改数据库表（alter table）"></a>修改数据库表（alter table）</h2><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="meta">alter</span> <span class="meta">table</span> 旧表名 <span class="meta">rename</span> <span class="meta">as</span> 新表名;      -- 修改数据库表名<span class="meta">alter</span> <span class="meta">table</span> 表名 <span class="meta">add</span> 字段名 数据类型 [属性];      -- 添加数据库表字段-- <span class="meta">modify</span> 和 change 区别在于 change 能修改字段名，而 <span class="meta">modify</span> 不行。<span class="meta">alter</span> <span class="meta">table</span> 表名 <span class="meta">modify</span> 字段名 数据类型 [属性];   -- 修改数据库表字段<span class="meta">alter</span> <span class="meta">table</span> 表名 change 旧字段名 新字段名 数据类型 [属性];   -- 修改数据库表字段<span class="meta">alter</span> <span class="meta">table</span> 表名 <span class="meta">drop</span> 字段名;          -- 删除数据库表字段</span><br></pre></td></tr></table></figure>

<h2 id="删除数据库表"><a href="#删除数据库表" class="headerlink" title="删除数据库表"></a>删除数据库表</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [<span class="keyword">if</span> <span class="keyword">exists</span>] 表名;     <span class="comment">-- 删除数据库表</span></span><br></pre></td></tr></table></figure>

<h2 id="数据库表常用命令"><a href="#数据库表常用命令" class="headerlink" title="数据库表常用命令"></a>数据库表常用命令</h2><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">show</span> <span class="comment">tables;</span> <span class="comment"> </span> <span class="comment"> </span> <span class="comment"> </span> <span class="comment"> </span> <span class="comment"> </span> <span class="comment"> </span> -- <span class="comment">显示数据库中所有的表describe</span> <span class="comment">表名;</span> <span class="comment"> </span> <span class="comment"> </span> <span class="comment"> </span>-- <span class="comment">显示数据库中某张表的结构show</span> <span class="comment">create</span> <span class="comment">table</span> <span class="comment">表名;</span> <span class="comment"> </span> <span class="comment"> </span> <span class="comment"> </span>-- <span class="comment">显示数据库中某张表的定义</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(四)</title>
    <url>/2021/06/02/mysql-basis04/</url>
    <content><![CDATA[<h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p>保持数据<strong>一致性</strong>、<strong>完整性</strong>，主要目的是控制存储在外键表中的数据、<strong>约束</strong>。使两张表形成关联。外键名可以不同于主表，但值只能引用主表的或使用空值。</p>
<p><strong>注意：以下的操作都是物理外键。数据库级别的外键，不建议使用。至于为什么，请点击下方链接了解。<a href="https://blog.csdn.net/qq_22136439/article/details/103714369">https://blog.csdn.net/qq_22136439/article/details/103714369</a></strong></p>
<h2 id="创建外键练习"><a href="#创建外键练习" class="headerlink" title="创建外键练习"></a>创建外键练习</h2><p>在上一篇文章的基础上，创建一个 grade 表并定义主键 gradeid，SQL 语句如下：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> grade(</span><br><span class="line"><span class="symbol">`gradeid`</span> INT(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>(<span class="symbol">`gradeid`</span>)</span><br><span class="line">)ENGINE=INNODB CHARSET=utf8</span><br></pre></td></tr></table></figure>

<p>执行下面的 SQL 语句，为 student 表定义外键并执行引用。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> `gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级id&#x27;</span>; </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY (`gradeid`) <span class="keyword">REFERENCES</span> `grade` (`gradeid`);</span><br></pre></td></tr></table></figure>

<p><strong>注意：要想删主表，得先删子表，才能删主表。否则就会报错。<br>或者是删除子表的外键和索引之后，就能删主表了。SQL 命令如下：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY `FK_gradeid`;</span><br><span class="line"><span class="comment">-- 删除索引，这个索引是建立外键的时候默认生成的。</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> INDEX `FK_gradeid`;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(五)</title>
    <url>/2021/06/04/mysql-basis05/</url>
    <content><![CDATA[<h2 id="DML包括：（重点）"><a href="#DML包括：（重点）" class="headerlink" title="DML包括：（重点）"></a>DML包括：（重点）</h2><ul>
<li>  INSERT（添加数据语句）</li>
<li>  UPDATE（更新数据语句）</li>
<li>  DELETE（删除数据语句）</li>
</ul>
<h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><p>语法：（<strong>注意：字段虽然能省略，但是添加的值必须要与字段一一对应</strong>）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 [(字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span>,...)] <span class="keyword">values</span> (<span class="string">&#x27;值1&#x27;</span>,<span class="string">&#x27;值2&#x27;</span>,<span class="string">&#x27;值3&#x27;</span>),(<span class="string">&#x27;值1&#x27;</span>,<span class="string">&#x27;值2&#x27;</span>,<span class="string">&#x27;值3&#x27;</span>),...;</span><br></pre></td></tr></table></figure>

<p>在之前文章的基础上，在 student 表下插入两条数据。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`student`</span> (<span class="symbol">`name`</span>,<span class="symbol">`pwd`</span>,<span class="symbol">`sex`</span>,<span class="symbol">`birth`</span>,<span class="symbol">`gradeid`</span>) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;Guest997&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;1999-06-01&#x27;</span>,<span class="string">&#x27;1&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;guest997&#x27;</span>,<span class="string">&#x27;456789&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;1999-06-01&#x27;</span>,<span class="string">&#x27;2&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="where-条件子句"><a href="#where-条件子句" class="headerlink" title="where 条件子句"></a>where 条件子句</h3><p>用于检索数据表中符合条件的记录，检索条件可由一个或多个逻辑表达式组成，会返回布尔值。</p>
<p>操作符</p>
<p>含义</p>
<p>=</p>
<p>等于</p>
<p>&lt;&gt; 或 !=</p>
<p>不等于</p>
<p>&gt;</p>
<p>大于</p>
<p>&lt;</p>
<p>小于</p>
<p>&gt;=</p>
<p>大于等于</p>
<p>&lt;=</p>
<p>小于等于</p>
<p>and 或 &amp;&amp;</p>
<p>且</p>
<p>or 或</p>
<p>或</p>
<p>not 或 !</p>
<p>非</p>
<p>between…and…</p>
<p>在某个范围之间</p>
<h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>语法：（<strong>注意：如果不加 [where 筛选条件]，会改变表中所有的数据！</strong>）</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">update 表名 <span class="builtin-name">set</span> 列名1,=<span class="string">&#x27;值1&#x27;</span>,列名<span class="attribute">2</span>=<span class="string">&#x27;值2&#x27;</span>,... [where 筛选条件];</span><br></pre></td></tr></table></figure>

<p>在上面的的基础上，修改其中的一条数据。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="symbol">`student`</span> <span class="keyword">SET</span> <span class="symbol">`pwd`</span>=<span class="string">&#x27;6666&#x27;</span>,<span class="symbol">`address`</span>=<span class="string">&#x27;中国&#x27;</span> <span class="keyword">WHERE</span> <span class="symbol">`id`</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>语法：（<strong>注意：如果不加 [where 筛选条件]，会删除表中所有的数据！</strong>）</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 筛选条件]</span><br></pre></td></tr></table></figure>

<p>在上面的的基础上，删除其中的一条数据。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">WHERE</span> <span class="symbol">`gradeid`</span>=<span class="string">&#x27;2&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="TRUNCATE"><a href="#TRUNCATE" class="headerlink" title="TRUNCATE"></a>TRUNCATE</h3><p>用于完全清空数据库表数据，但表结构、索引、约束等不变。</p>
<p>语法：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> [<span class="keyword">table</span>] 表名; </span><br></pre></td></tr></table></figure>

<p>与 DELETE 的异同：</p>
<ul>
<li>  相同：都能清空数据库表数据但不删除数据库表结构，TRUNCATE 速度更快。</li>
<li>  不同：</li>
<li>  使用 TRUNCATE 会重置 AUTO_INCREMENT 计数器。</li>
<li>  使用 TRUNCATE 不会对事务有影响。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(六)</title>
    <url>/2021/06/04/mysql-basis06/</url>
    <content><![CDATA[<h2 id="DQL（最重点）"><a href="#DQL（最重点）" class="headerlink" title="DQL（最重点）"></a>DQL（最重点）</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>因为要学习查询语句，得先把数据存入。记得把之前创建的数据库都删掉。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 创建并使用 school 数据库</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> <span class="symbol">`school`</span>;</span><br><span class="line">use `school`;</span><br><span class="line">-- 创建 student 表</span><br><span class="line"><span class="keyword">create</span> table <span class="symbol">`student`</span>(</span><br><span class="line"><span class="symbol">`studentno`</span> int(<span class="number">4</span>) <span class="keyword">not</span> <span class="literal">null</span> comment <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line"><span class="symbol">`loginpwd`</span> varchar(<span class="number">20</span>) default <span class="literal">null</span>,</span><br><span class="line"><span class="symbol">`studentname`</span> varchar(<span class="number">20</span>) default <span class="literal">null</span> comment <span class="string">&#x27;学生姓名&#x27;</span>,</span><br><span class="line"><span class="symbol">`sex`</span> tinyint(<span class="number">1</span>) default <span class="literal">null</span> comment <span class="string">&#x27;性别，0或1&#x27;</span>,</span><br><span class="line"><span class="symbol">`gradeid`</span> int(<span class="number">11</span>) default <span class="literal">null</span> comment <span class="string">&#x27;年级编号&#x27;</span>,</span><br><span class="line"><span class="symbol">`phone`</span> varchar(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> comment <span class="string">&#x27;联系电话，允许为空&#x27;</span>,</span><br><span class="line"><span class="symbol">`address`</span> varchar(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span> comment <span class="string">&#x27;地址，允许为空&#x27;</span>,</span><br><span class="line"><span class="symbol">`borndate`</span> datetime default <span class="literal">null</span> comment <span class="string">&#x27;出生时间&#x27;</span>,</span><br><span class="line"><span class="symbol">`email`</span> varchar (<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> comment <span class="string">&#x27;邮箱账号允许为空&#x27;</span>,</span><br><span class="line"><span class="symbol">`identitycard`</span> varchar(<span class="number">18</span>) default <span class="literal">null</span> comment <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> <span class="keyword">key</span> (<span class="symbol">`studentno`</span>),</span><br><span class="line"><span class="keyword">unique</span> <span class="keyword">key</span> <span class="symbol">`identitycard`</span>(<span class="symbol">`identitycard`</span>),</span><br><span class="line"><span class="keyword">key</span> <span class="symbol">`email`</span> (<span class="symbol">`email`</span>)</span><br><span class="line">)engine=myisam default charset=utf8;</span><br><span class="line">-- 创建 grade 表</span><br><span class="line"><span class="keyword">create</span> table <span class="symbol">`grade`</span>(</span><br><span class="line"><span class="symbol">`gradeid`</span> int(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment comment <span class="string">&#x27;年级编号&#x27;</span>,</span><br><span class="line"><span class="symbol">`gradename`</span> varchar(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> comment <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> <span class="keyword">key</span> (<span class="symbol">`gradeid`</span>)</span><br><span class="line">)engine=innodb auto_increment = <span class="number">6</span> default charset = utf8;</span><br><span class="line">-- 创建 subject 表</span><br><span class="line"><span class="keyword">create</span> table <span class="symbol">`subject`</span>(</span><br><span class="line"><span class="symbol">`subjectno`</span>int(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment comment <span class="string">&#x27;课程编号&#x27;</span>,</span><br><span class="line"><span class="symbol">`subjectname`</span> varchar(<span class="number">50</span>) default <span class="literal">null</span> comment <span class="string">&#x27;课程名称&#x27;</span>,</span><br><span class="line"><span class="symbol">`classhour`</span> int(<span class="number">4</span>) default <span class="literal">null</span> comment <span class="string">&#x27;学时&#x27;</span>,</span><br><span class="line"><span class="symbol">`gradeid`</span> int(<span class="number">4</span>) default <span class="literal">null</span> comment <span class="string">&#x27;年级编号&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> <span class="keyword">key</span> (<span class="symbol">`subjectno`</span>)</span><br><span class="line">)engine = innodb auto_increment = <span class="number">19</span> default charset = utf8;</span><br><span class="line">-- 创建 result 表</span><br><span class="line"><span class="keyword">create</span> table <span class="symbol">`result`</span>(</span><br><span class="line"><span class="symbol">`studentno`</span> int(<span class="number">4</span>) <span class="keyword">not</span> <span class="literal">null</span> comment <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line"><span class="symbol">`subjectno`</span> int(<span class="number">4</span>) <span class="keyword">not</span> <span class="literal">null</span> comment <span class="string">&#x27;课程编号&#x27;</span>,</span><br><span class="line"><span class="symbol">`examdate`</span> datetime <span class="keyword">not</span> <span class="literal">null</span> comment <span class="string">&#x27;考试日期&#x27;</span>,</span><br><span class="line"><span class="symbol">`studentresult`</span> int (<span class="number">4</span>) <span class="keyword">not</span> <span class="literal">null</span> comment <span class="string">&#x27;考试成绩&#x27;</span>,</span><br><span class="line"><span class="keyword">key</span> <span class="symbol">`subjectno`</span> (<span class="symbol">`subjectno`</span>)</span><br><span class="line">)engine = innodb default charset = utf8;</span><br></pre></td></tr></table></figure>

<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 插入 student 数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="symbol">`student`</span> (<span class="symbol">`studentno`</span>,<span class="symbol">`loginpwd`</span>,<span class="symbol">`studentname`</span>,<span class="symbol">`sex`</span>,<span class="symbol">`gradeid`</span>,<span class="symbol">`phone`</span>,<span class="symbol">`address`</span>,<span class="symbol">`borndate`</span>,<span class="symbol">`email`</span>,<span class="symbol">`identitycard`</span>)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="number">1000</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;张伟&#x27;</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;13800001234&#x27;</span>,<span class="string">&#x27;北京朝阳&#x27;</span>,<span class="string">&#x27;1980-1-1&#x27;</span>,<span class="string">&#x27;text123@qq.com&#x27;</span>,<span class="string">&#x27;123456198001011234&#x27;</span>),</span><br><span class="line">(<span class="number">1001</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;赵强&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="string">&#x27;13800002222&#x27;</span>,<span class="string">&#x27;广东深圳&#x27;</span>,<span class="string">&#x27;1990-1-1&#x27;</span>,<span class="string">&#x27;text111@qq.com&#x27;</span>,<span class="string">&#x27;123456199001011233&#x27;</span>),</span><br><span class="line">(<span class="number">1002</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;张伟大&#x27;</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="string">&#x27;13800006666&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>,<span class="literal">null</span>,<span class="string">&#x27;text666@qq.com&#x27;</span>,<span class="literal">null</span>);</span><br><span class="line">-- 插入 result 数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="symbol">`result`</span>(<span class="symbol">`studentno`</span>,<span class="symbol">`subjectno`</span>,<span class="symbol">`examdate`</span>,<span class="symbol">`studentresult`</span>)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="number">1000</span>,<span class="number">1</span>,<span class="string">&#x27;2013-11-11 16:00:00&#x27;</span>,<span class="number">85</span>),</span><br><span class="line">(<span class="number">1000</span>,<span class="number">2</span>,<span class="string">&#x27;2013-11-12 16:00:00&#x27;</span>,<span class="number">70</span>),</span><br><span class="line">(<span class="number">1000</span>,<span class="number">3</span>,<span class="string">&#x27;2013-11-11 09:00:00&#x27;</span>,<span class="number">68</span>),</span><br><span class="line">(<span class="number">1000</span>,<span class="number">4</span>,<span class="string">&#x27;2013-11-13 16:00:00&#x27;</span>,<span class="number">98</span>),</span><br><span class="line">(<span class="number">1000</span>,<span class="number">5</span>,<span class="string">&#x27;2013-11-14 16:00:00&#x27;</span>,<span class="number">58</span>),</span><br><span class="line">(<span class="number">1001</span>,<span class="number">1</span>,<span class="string">&#x27;2013-11-11 16:00:00&#x27;</span>,<span class="number">60</span>),</span><br><span class="line">(<span class="number">1001</span>,<span class="number">2</span>,<span class="string">&#x27;2013-11-12 16:00:00&#x27;</span>,<span class="number">70</span>),</span><br><span class="line">(<span class="number">1001</span>,<span class="number">3</span>,<span class="string">&#x27;2013-11-11 09:00:00&#x27;</span>,<span class="number">80</span>),</span><br><span class="line">(<span class="number">1001</span>,<span class="number">4</span>,<span class="string">&#x27;2013-11-13 16:00:00&#x27;</span>,<span class="number">90</span>),</span><br><span class="line">(<span class="number">1001</span>,<span class="number">5</span>,<span class="string">&#x27;2013-11-14 16:00:00&#x27;</span>,<span class="number">100</span>);</span><br><span class="line">-- 插入 grade 数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="symbol">`grade`</span> (<span class="symbol">`gradeid`</span>,<span class="symbol">`gradename`</span>)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;大一&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;大二&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;大三&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;大四&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;预科班&#x27;</span>);</span><br><span class="line">-- 插入 subject 数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="symbol">`subject`</span>(<span class="symbol">`subjectno`</span>,<span class="symbol">`subjectname`</span>,<span class="symbol">`classhour`</span>,<span class="symbol">`gradeid`</span>)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;高等数学-1&#x27;</span>,<span class="number">110</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;高等数学-2&#x27;</span>,<span class="number">110</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;高等数学-3&#x27;</span>,<span class="number">100</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;高等数学-4&#x27;</span>,<span class="number">130</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;C语言-1&#x27;</span>,<span class="number">110</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;C语言-2&#x27;</span>,<span class="number">110</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;C语言-3&#x27;</span>,<span class="number">100</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">&#x27;C语言-4&#x27;</span>,<span class="number">130</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="string">&#x27;Java程序设计-1&#x27;</span>,<span class="number">110</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;Java程序设计-2&#x27;</span>,<span class="number">110</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">11</span>,<span class="string">&#x27;Java程序设计-3&#x27;</span>,<span class="number">100</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">12</span>,<span class="string">&#x27;Java程序设计-4&#x27;</span>,<span class="number">130</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">13</span>,<span class="string">&#x27;数据库结构-1&#x27;</span>,<span class="number">110</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">14</span>,<span class="string">&#x27;数据库结构-2&#x27;</span>,<span class="number">110</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">15</span>,<span class="string">&#x27;数据库结构-3&#x27;</span>,<span class="number">100</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">16</span>,<span class="string">&#x27;数据库结构-4&#x27;</span>,<span class="number">130</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">17</span>,<span class="string">&#x27;C#基础&#x27;</span>,<span class="number">130</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="select-语法"><a href="#select-语法" class="headerlink" title="select 语法"></a>select 语法</h3><p>[ ] 里的内容表示可选的，{ } 里的内容表示必选的。<strong>注意：关键字之间都是有固定顺序的。</strong></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [<span class="keyword">all</span>  <span class="keyword">distinct</span>]</span><br><span class="line">&#123;*  table.*  [table.字段名<span class="number">1</span>[<span class="keyword">as</span> 别名<span class="number">1</span>] [,table.字段名<span class="number">2</span>[<span class="keyword">as</span> 别名<span class="number">2</span>]] [,...] ]&#125;</span><br><span class="line"><span class="keyword">from</span> 表名<span class="number">01</span> [<span class="keyword">as</span> 表别名]</span><br><span class="line">[<span class="keyword">left</span>  <span class="keyword">right</span>  <span class="keyword">inner</span> <span class="keyword">join</span> 表名<span class="number">02</span>]  -- 连接查询</span><br><span class="line">[<span class="keyword">where</span> ...]     -- 指定结果需满足的条件</span><br><span class="line">[<span class="keyword">group</span> <span class="keyword">by</span> ...]  -- 指定结果按照哪几个字段来分组</span><br><span class="line">[<span class="keyword">having</span>]          -- 过滤分组的记录必须满足的次要条件</span><br><span class="line">[<span class="keyword">order</span> <span class="keyword">by</span> ...]  -- 指定查询记录按一个或多个条件排序</span><br><span class="line">[<span class="keyword">limit</span> &#123;起始行数  每页行数&#125;];     -- 可实现将查询的记录进行分页</span><br></pre></td></tr></table></figure>

<h3 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 查询所有学生信息</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="symbol">`student`</span>;</span><br><span class="line">-- 查询指定列</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span> <span class="keyword">FROM</span> <span class="symbol">`student`</span>;</span><br></pre></td></tr></table></figure>

<h4 id="AS（as-关键字可省略）"><a href="#AS（as-关键字可省略）" class="headerlink" title="AS（as 关键字可省略）"></a>AS（as 关键字可省略）</h4><ul>
<li>  给数据列取一个新别名</li>
<li>  给数据库表取一个新别名</li>
<li>  给经计算或总结的结果取一个新别名</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 数据列取别名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span> <span class="keyword">AS</span> <span class="string">&#x27;学号&#x27;</span>,<span class="symbol">`studentname`</span> <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span> <span class="keyword">FROM</span> <span class="symbol">`student`</span>;</span><br><span class="line">-- 数据库表取别名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span> <span class="keyword">AS</span> <span class="string">&#x27;学号&#x27;</span>,<span class="symbol">`studentname`</span> <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span> <span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s;</span><br><span class="line">-- concat() 函数拼接字符串</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名：&#x27;</span>,<span class="symbol">`studentname`</span>) <span class="keyword">AS</span> <span class="string">&#x27;新姓名&#x27;</span> <span class="keyword">FROM</span> <span class="symbol">`student`</span>;</span><br></pre></td></tr></table></figure>

<h4 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h4><p>去掉 SELECT 查询返回的记录结果中重复的记录（列的值相同的记录），只返回一条。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 查看哪些同学参加了考试</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span> <span class="keyword">FROM</span> <span class="symbol">`result`</span>;    -- 会发现有重复的数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="symbol">`studentno`</span> <span class="keyword">FROM</span> <span class="symbol">`result`</span>;   -- 使用 DISTINCT 关键字去重</span><br></pre></td></tr></table></figure>

<h4 id="使用表达式的列"><a href="#使用表达式的列" class="headerlink" title="使用表达式的列"></a>使用表达式的列</h4><p>数据库中的表达式：一般由文本值、列值、NULL、函数和操作符等组成。</p>
<p>应用场景 :</p>
<ul>
<li>  SELECT 语句返回结果在列中使用</li>
<li>  SELECT 语句中的 ORDER BY、HAVING 等子句中使用</li>
<li>  DML 语句中的 WHERE 条件语句中使用表达式</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @@auto_increment_increment; -- 查询自增步长</span><br><span class="line"><span class="keyword">SELECT</span> VERSION(); -- 查询版本号</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>*<span class="number">3</span><span class="number">-1</span> <span class="keyword">AS</span> <span class="string">&#x27;计算结果&#x27;</span>; -- 表达式</span><br><span class="line"></span><br><span class="line">-- 考试成绩集体提一分查看</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentresult`</span>+<span class="number">1</span> <span class="keyword">AS</span> <span class="string">&#x27;提分后&#x27;</span> <span class="keyword">FROM</span> <span class="symbol">`result`</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(八)</title>
    <url>/2021/06/07/mysql-basis08/</url>
    <content><![CDATA[<h2 id="DQL-续二"><a href="#DQL-续二" class="headerlink" title="DQL(续二)"></a>DQL(续二)</h2><h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h3><p>根据指定的列对结果集进行排序。默认按照 ASC（升序）方式对记录进行排序，降序则使用 DESC 关键字。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 成绩降序，查询高等数学-1课程的所有考试结果(学号,学生姓名,科目名,分数)</span><br><span class="line"><span class="keyword">SELECT</span> s1.<span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span>,<span class="symbol">`subjectname`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s1.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`subject`</span> <span class="keyword">AS</span> s2</span><br><span class="line"><span class="keyword">ON</span> r.<span class="symbol">`subjectno`</span>=s2.<span class="symbol">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="symbol">`subjectname`</span>=<span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="symbol">`studentresult`</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h3 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h3><p>将结果集进行分页</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 将 subject 表从第二行开始分页且每页有五行</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`subjectno`</span>,<span class="symbol">`subjectname`</span>,<span class="symbol">`classhour`</span>,<span class="symbol">`gradeid`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`subject`</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>推导：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">第一页 : <span class="type">limit</span> <span class="number">0</span>,<span class="number">5</span></span><br><span class="line">第二页 : <span class="type">limit</span> <span class="number">5</span>,<span class="number">5</span></span><br><span class="line">第三页 : <span class="type">limit</span> <span class="number">10</span>,<span class="number">5</span></span><br><span class="line">......</span><br><span class="line">第 N 页 : <span class="type">limit</span> (N-<span class="number">1</span>)*页行数,页行数</span><br></pre></td></tr></table></figure>

<p>练习</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 查询高等数学-1课程成绩前10名并且分数大于<span class="number">80</span>的学生信息(学号,姓名,科目名,分数)</span><br><span class="line"><span class="keyword">SELECT</span> s1.<span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span>,<span class="symbol">`subjectname`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s1.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`subject`</span> <span class="keyword">AS</span> s2</span><br><span class="line"><span class="keyword">ON</span> r.<span class="symbol">`subjectno`</span>=s2.<span class="symbol">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="symbol">`subjectname`</span>=<span class="string">&#x27;高等数学-1&#x27;</span> <span class="keyword">AND</span> <span class="symbol">`studentresult`</span>&gt;<span class="number">80</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="symbol">`studentresult`</span> <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>在查询语句中的 where 条件子句中，又嵌套了另一个查询语句。嵌套查询可由多个子查询组成，求解的方式是由里及外。子查询返回的结果一般都是集合，故而建议使用 IN 关键字。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 成绩降序，查询高等数学-1课程的所有考试结果(学号,科目编号,成绩)</span><br><span class="line">-- 方式一：连接查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,r.<span class="symbol">`subjectno`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`subject`</span> <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">ON</span> r.<span class="symbol">`subjectno`</span>=s.<span class="symbol">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="symbol">`subjectname`</span>=<span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="symbol">`studentresult`</span> <span class="keyword">DESC</span>;</span><br><span class="line">-- 方式二：子查询（执行顺序：由里及外）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`subjectno`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`result`</span>        -- 到这行为止只是查询出了所有考试结果，还需要筛选出其中的高等数学<span class="number">-1</span>课程。</span><br><span class="line"><span class="keyword">WHERE</span> <span class="symbol">`subjectno`</span>=(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`subjectno`</span> <span class="keyword">FROM</span> <span class="symbol">`subject`</span> <span class="keyword">WHERE</span> <span class="symbol">`subjectname`</span>=<span class="string">&#x27;高等数学-1&#x27;</span>   -- 仅执行这行语句，得出的结果是 subjectno 为<span class="number">1</span>。</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="symbol">`studentresult`</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p>练习</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 查询张伟同学所在的年级名称</span><br><span class="line">-- 方法一：使用连接查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`gradename`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`grade`</span> <span class="keyword">AS</span> g</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">ON</span> g.<span class="symbol">`gradeid`</span>=s.<span class="symbol">`gradeid`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="symbol">`studentname`</span>=<span class="string">&#x27;张伟&#x27;</span>;</span><br><span class="line">-- 方法二：使用子查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`gradename`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`grade`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="symbol">`gradeid`</span> =(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`gradeid`</span> <span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">WHERE</span> <span class="symbol">`studentname`</span>=<span class="string">&#x27;张伟&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 查询高等数学-1课程分数大于80的学生信息(学号,姓名)</span><br><span class="line">-- 方法一：只使用连接查询</span><br><span class="line"><span class="keyword">SELECT</span> s1.<span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s1.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`subject`</span> <span class="keyword">AS</span> s2</span><br><span class="line"><span class="keyword">ON</span> r.<span class="symbol">`subjectno`</span>=s2.<span class="symbol">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="symbol">`subjectname`</span>=<span class="string">&#x27;高等数学-1&#x27;</span> <span class="keyword">AND</span> <span class="symbol">`studentresult`</span>&gt;<span class="number">80</span></span><br><span class="line">-- 方法二：使用连接查询+子查询</span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="symbol">`studentresult`</span>&gt;<span class="number">80</span> <span class="keyword">AND</span> <span class="symbol">`subjectno`</span>=(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`subjectno`</span> <span class="keyword">FROM</span> <span class="symbol">`subject`</span> <span class="keyword">WHERE</span> <span class="symbol">`subjectname`</span>=<span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line">);</span><br><span class="line">-- 方法三：只使用子查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="symbol">`studentno`</span> <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span> <span class="keyword">FROM</span> <span class="symbol">`result`</span> <span class="keyword">WHERE</span> <span class="symbol">`studentresult`</span>&gt;<span class="number">80</span> <span class="keyword">AND</span> <span class="symbol">`subjectno`</span> <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`subjectno`</span> <span class="keyword">FROM</span> <span class="symbol">`subject`</span> <span class="keyword">WHERE</span> <span class="symbol">`subjectname`</span>=<span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(七)</title>
    <url>/2021/06/06/mysql-basis07/</url>
    <content><![CDATA[<h2 id="DQL-续一"><a href="#DQL-续一" class="headerlink" title="DQL(续一)"></a>DQL(续一)</h2><h3 id="where-条件子句"><a href="#where-条件子句" class="headerlink" title="where 条件子句"></a>where 条件子句</h3><p>用于检索数据表中符合条件的记录，检索条件可由一个或多个逻辑表达式组成，会返回布尔值。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 查询考试成绩在95-100之间的同学的学号及成绩</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentresult`</span> <span class="keyword">FROM</span> <span class="symbol">`result`</span> <span class="keyword">WHERE</span> <span class="symbol">`studentresult`</span>&gt;=<span class="number">95</span> <span class="keyword">AND</span> <span class="symbol">`studentresult`</span>&lt;=<span class="number">100</span>;</span><br><span class="line">-- 模糊查询(对应的：精确查询)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentresult`</span> <span class="keyword">FROM</span> <span class="symbol">`result`</span> <span class="keyword">WHERE</span> <span class="symbol">`studentresult`</span> <span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br><span class="line">-- 除了1000号同学，要其他同学的成绩。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentresult`</span> <span class="keyword">FROM</span> <span class="symbol">`result`</span> <span class="keyword">WHERE</span> <span class="symbol">`studentno`</span>!=<span class="number">1000</span>;</span><br><span class="line">-- 使用 NOT 关键字查询上条语句。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentresult`</span> <span class="keyword">FROM</span> <span class="symbol">`result`</span> <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="symbol">`studentno`</span>=<span class="number">1000</span>;</span><br></pre></td></tr></table></figure>

<h4 id="模糊查询：比较操作符"><a href="#模糊查询：比较操作符" class="headerlink" title="模糊查询：比较操作符"></a>模糊查询：比较操作符</h4><p>操作符名称</p>
<p>语法</p>
<p>is null</p>
<p>a IS NULL</p>
<p>not null</p>
<p>a NOT NULL</p>
<p>between…and…</p>
<p>A BETWEEN b AND C</p>
<p>like</p>
<p>A LIKE b</p>
<p>in</p>
<p>A IN (a1,a2,a3,…)</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 查询出生日期没有填写的同学的学号及姓名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span> <span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">WHERE</span> <span class="symbol">`borndate`</span> <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line">-- 查询出生日期填写了的同学的学号及姓名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span> <span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">WHERE</span> <span class="symbol">`borndate`</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line">-- 查询没有写身份证号的同学的学号及姓名(空字符串不等于 null)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span> <span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">WHERE</span> <span class="symbol">`identitycard`</span>=<span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="symbol">`identitycard`</span> <span class="keyword">IS</span> <span class="literal">NULL</span>;   -- 不能直接写 =NULL，这是代表错误的，要用 is null。</span><br></pre></td></tr></table></figure>

<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 查询年级 id 在1~5之间的年级的 id 和名字</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`gradeid`</span>,<span class="symbol">`gradename`</span> <span class="keyword">FROM</span> <span class="symbol">`grade`</span> <span class="keyword">WHERE</span> <span class="symbol">`gradeid`</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">5</span>;</span><br><span class="line">-- 查询年级 id 为1、3、5的年级的 id 和名字</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`gradeid`</span>,<span class="symbol">`gradename`</span> <span class="keyword">FROM</span> <span class="symbol">`grade`</span> <span class="keyword">WHERE</span> <span class="symbol">`gradeid`</span> <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">-- 查询地址在北京、北京朝阳、广东的同学的学号及姓名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span> <span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">WHERE</span> <span class="symbol">`address`</span> <span class="keyword">IN</span> (<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;北京朝阳&#x27;</span>,<span class="string">&#x27;广东&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- like 结合使用的通配符：% (代表任意个字符) ；_ (一个字符)</span><br><span class="line">-- 查询姓张的同学的学号及姓名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span> <span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">WHERE</span> <span class="symbol">`studentname`</span> <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>;</span><br><span class="line">-- 查询姓张且名字只有两个字的同学的学号及姓名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span> <span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">WHERE</span> <span class="symbol">`studentname`</span> <span class="keyword">LIKE</span> <span class="string">&#x27;张_&#x27;</span>;</span><br><span class="line">-- 查询姓名中含有 强 字的同学的学号及姓名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span> <span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">WHERE</span> <span class="symbol">`studentname`</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%强%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="内、左、右连接"><a href="#内、左、右连接" class="headerlink" title="内、左、右连接"></a>内、左、右连接</h4><p><img data-src="/images/mysql-basis07.md-0.png"></p>
<p><strong>注意：看完上面的图，请点击下方链接了解三种连接查询的区别。</strong> <a href="https://www.cnblogs.com/pcjim/articles/799302.html">https://www.cnblogs.com/pcjim/articles/799302.html</a></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)</span><br><span class="line">-- 等值连接</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span>,<span class="symbol">`subjectno`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s,<span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">WHERE</span> s.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span>;</span><br><span class="line">-- 上面的代码会报错，因为 studentno 在两个表中都会被查找，所以需要指定去到其中一个表中查找。</span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span>,<span class="symbol">`subjectno`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s,<span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">WHERE</span> s.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 使用连接查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)</span><br><span class="line">-- 内连接（和等值连接相同，都是查交集）</span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span>,<span class="symbol">`subjectno`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span>;</span><br><span class="line">-- 左连接</span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span>,<span class="symbol">`subjectno`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span>;</span><br><span class="line">-- 从结果可以看出，左连接会把左表（即 student 表）所有记录查出来，但是在右表（即 result 表）中不存在的记录的字段值会变为 null。就是说没有参加考试的学生也被查找出来了，且科目编号和分数都为 null。</span><br><span class="line">-- 左连接修改</span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span>,<span class="symbol">`subjectno`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="symbol">`studentresult`</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line">-- 右连接（跟上面左连接有相似的特性）</span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span>,<span class="symbol">`subjectno`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span>;</span><br></pre></td></tr></table></figure>

<p>额外练习（三表连接）</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span><br><span class="line">-- 等值连接</span><br><span class="line"><span class="keyword">SELECT</span> s1.<span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span>,<span class="symbol">`subjectname`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s1,<span class="symbol">`result`</span> <span class="keyword">AS</span> r,<span class="symbol">`subject`</span> <span class="keyword">AS</span> s2</span><br><span class="line"><span class="keyword">WHERE</span> s1.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span> <span class="keyword">AND</span> r.<span class="symbol">`subjectno`</span>=s2.<span class="symbol">`subjectno`</span>;</span><br><span class="line">-- 内连接</span><br><span class="line"><span class="keyword">SELECT</span> s1.<span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span>,<span class="symbol">`subjectname`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s1.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`subject`</span> <span class="keyword">AS</span> s2</span><br><span class="line"><span class="keyword">ON</span> r.<span class="symbol">`subjectno`</span>=s2.<span class="symbol">`subjectno`</span>;</span><br><span class="line">-- 左连接</span><br><span class="line"><span class="keyword">SELECT</span> s1.<span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span>,<span class="symbol">`subjectname`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s1.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="symbol">`subject`</span> <span class="keyword">AS</span> s2</span><br><span class="line"><span class="keyword">ON</span> r.<span class="symbol">`subjectno`</span>=s2.<span class="symbol">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="symbol">`studentresult`</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line">-- 右连接</span><br><span class="line"><span class="keyword">SELECT</span> s1.<span class="symbol">`studentno`</span>,<span class="symbol">`studentname`</span>,<span class="symbol">`subjectname`</span>,<span class="symbol">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">AS</span> s1 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s1.<span class="symbol">`studentno`</span>=r.<span class="symbol">`studentno`</span></span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="symbol">`subject`</span> <span class="keyword">AS</span> s2</span><br><span class="line"><span class="keyword">ON</span> r.<span class="symbol">`subjectno`</span>=s2.<span class="symbol">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="symbol">`studentresult`</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<h4 id="on-和-where-关键字的区别"><a href="#on-和-where-关键字的区别" class="headerlink" title="on 和 where 关键字的区别"></a>on 和 where 关键字的区别</h4><p>先执行 on，后执行 where；on 是建立关联关系，where 是对关联关系的筛选。</p>
<h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>核心思想：把一张表看成两张一模一样的表，然后将这两张表连接查询。</p>
<p>准备工作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use `school`;</span><br><span class="line"><span class="comment">-- 创建 category 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> category (</span><br><span class="line">categoryid <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主题ID&#x27;</span>,</span><br><span class="line">pid <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;父ID&#x27;</span>,</span><br><span class="line">categoryname <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主题名字&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(categoryid)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">9</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"><span class="comment">-- 插入 category 数据（pid 为1就表示父级，其它的就都是子级）</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category(categoryid,pid,categoryname)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;信息技术&#x27;</span>),(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;软件开发&#x27;</span>),(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;数据库&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;美术设计&#x27;</span>),(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;web开发&#x27;</span>),(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;PS技术&#x27;</span>),(<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;办公信息&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 当我们进行自连接不加任何筛选条件时</span><br><span class="line"><span class="keyword">SELECT</span> c1.<span class="symbol">`categoryname`</span>,c2.<span class="symbol">`categoryname`</span></span><br><span class="line"><span class="keyword">FROM</span> category <span class="keyword">AS</span> c1,category <span class="keyword">AS</span> c2;</span><br><span class="line">-- 结果可以看出，一张表的每个 categoryname 会对应“另一张表”（其实是同一张表）的所有的 categoryname。</span><br><span class="line">-- 加上筛选条件后</span><br><span class="line"><span class="keyword">SELECT</span> c1.<span class="symbol">`categoryname`</span> <span class="keyword">AS</span> <span class="string">&#x27;父级名字&#x27;</span>,c2.<span class="symbol">`categoryname`</span> <span class="keyword">AS</span> <span class="string">&#x27;子级名字&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> category <span class="keyword">AS</span> c1,category <span class="keyword">AS</span> c2</span><br><span class="line"><span class="keyword">WHERE</span> c1.<span class="symbol">`categoryid`</span>=c2.<span class="symbol">`pid`</span>;</span><br></pre></td></tr></table></figure>

<p>原表</p>
<p>categoryid</p>
<p>pid</p>
<p>categoryname</p>
<p>2</p>
<p>1</p>
<p>信息技术</p>
<p>3</p>
<p>1</p>
<p>软件开发</p>
<p>4</p>
<p>3</p>
<p>数据库</p>
<p>5</p>
<p>1</p>
<p>美术设计</p>
<p>6</p>
<p>3</p>
<p>web开发</p>
<p>7</p>
<p>5</p>
<p>PS技术</p>
<p>8</p>
<p>2</p>
<p>办公信息</p>
<p>拆分成父表和子表</p>
<p>categoryid</p>
<p>categoryname</p>
<p>2</p>
<p>信息技术</p>
<p>3</p>
<p>软件开发</p>
<p>5</p>
<p>美术设计</p>
<p>pid</p>
<p>categoryid</p>
<p>categoryname</p>
<p>3</p>
<p>4</p>
<p>数据库</p>
<p>3</p>
<p>6</p>
<p>web开发</p>
<p>5</p>
<p>7</p>
<p>PS技术</p>
<p>2</p>
<p>8</p>
<p>办公信息</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(九)</title>
    <url>/2021/06/07/mysql-basis09/</url>
    <content><![CDATA[<h2 id="常见函数（了解即可）"><a href="#常见函数（了解即可）" class="headerlink" title="常见函数（了解即可）"></a>常见函数（了解即可）</h2><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">SELECT</span> ABS(-<span class="number">8</span>);       -- 绝对值   <span class="number">8</span></span><br><span class="line"><span class="attribute">SELECT</span> FORMAT(<span class="number">123</span>.<span class="number">45</span>,<span class="number">0</span>);   -- 格式化数值（四舍五入）  <span class="number">123</span></span><br><span class="line"><span class="attribute">SELECT</span> ROUND(<span class="number">123</span>.<span class="number">45</span>)  -- 取整（四舍五入）  <span class="number">123</span></span><br><span class="line"><span class="attribute">SELECT</span> CEILING(<span class="number">9</span>.<span class="number">4</span>);  -- 向上取整   <span class="number">10</span></span><br><span class="line"><span class="attribute">SELECT</span> FLOOR(<span class="number">9</span>.<span class="number">4</span>);    -- 向下取整   <span class="number">9</span></span><br><span class="line"><span class="attribute">SELECT</span> MOD(<span class="number">9</span>,<span class="number">2</span>);      -- 取余数     <span class="number">1</span></span><br><span class="line"><span class="attribute">SELECT</span> PI();          -- 获得圆周率 <span class="number">3</span>.<span class="number">141593</span></span><br><span class="line"><span class="attribute">SELECT</span> POW(<span class="number">3</span>,<span class="number">6</span>);      -- 求次方     <span class="number">729</span></span><br><span class="line"><span class="attribute">SELECT</span> SQRT(<span class="number">9</span>);       -- 求算术平方根  <span class="number">3</span></span><br><span class="line"><span class="attribute">SELECT</span> RAND();        -- 返回一个<span class="number">0</span>-<span class="number">1</span>之间的随机数     <span class="number">0</span>.<span class="number">4755636513936926</span></span><br><span class="line"><span class="attribute">SELECT</span> TRUNCATE(<span class="number">123</span>.<span class="number">45</span>,<span class="number">1</span>);     -- 截取到某位小数     <span class="number">123</span>.<span class="number">4</span></span><br><span class="line"><span class="attribute">SELECT</span> SIGN(<span class="number">0</span>);       -- 符号函数：负数返回-<span class="number">1</span>，正数返回<span class="number">1</span>，<span class="number">0</span>返回<span class="number">0</span>。     <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LENGTH(<span class="string">&#x27;我爱你&#x27;</span>);             <span class="comment">-- 返回以字节为单位的字符串的长度   9</span></span><br><span class="line"><span class="keyword">SELECT</span> CHAR_LENGTH(<span class="string">&#x27;Guest997&#x27;</span>);     <span class="comment">-- 返回以字符为单位的字符串的长度   8</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;我爱&#x27;</span>,<span class="string">&#x27;你&#x27;</span>);          <span class="comment">-- 合并字符串       我爱你</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;我爱你&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;不爱&#x27;</span>);  <span class="comment">-- 替换字符串，从某个位置开始替换某个长度。    我不爱你</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;Guest997&#x27;</span>,<span class="string">&#x27;9&#x27;</span>);       <span class="comment">-- 返回某个字符首次在字符串中出现的位置        6</span></span><br><span class="line"><span class="keyword">SELECT</span> LOCATE(<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;Guest997&#x27;</span>,<span class="number">7</span>);    <span class="comment">-- 类似 instr()，但可指定开始位置。    7</span></span><br><span class="line"><span class="keyword">SELECT</span> CHARSET(<span class="string">&#x27;我爱你&#x27;</span>);           <span class="comment">-- 返回字符串字符集     utf8</span></span><br><span class="line"><span class="keyword">SELECT</span> LOWER(<span class="string">&#x27;Guest997&#x27;</span>);           <span class="comment">-- 字符串转小写字母    guest997</span></span><br><span class="line"><span class="keyword">SELECT</span> UPPER(<span class="string">&#x27;Guest997&#x27;</span>);           <span class="comment">-- 字符串转大写字母    GUEST997</span></span><br><span class="line"><span class="keyword">SELECT</span> LEFT(<span class="string">&#x27;hello,world&#x27;</span>,<span class="number">5</span>);       <span class="comment">-- 从左边截取到某个位置   hello</span></span><br><span class="line"><span class="keyword">SELECT</span> RIGHT(<span class="string">&#x27;hello,world&#x27;</span>,<span class="number">5</span>);      <span class="comment">-- 从右边截取到某个位置   world</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;坚持就能成功&#x27;</span>,<span class="string">&#x27;坚持&#x27;</span>,<span class="string">&#x27;努力&#x27;</span>);   <span class="comment">-- 替换字符串  努力就能成功</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;坚持就能成功&#x27;</span>,<span class="number">4</span>,<span class="number">2</span>);   <span class="comment">-- 截取字符串，从某个位置开始截取某个长度。     能成</span></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;坚持就能成功&#x27;</span>);      <span class="comment">-- 反转字符串     功成能就持坚</span></span><br><span class="line"><span class="keyword">SELECT</span> LPAD(<span class="string">&#x27;Guest997&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;努力坚持&#x27;</span>);        <span class="comment">-- 指定某个字符串重复地加在原字符串开头，直到达到指定的字符串长度。          努力坚持努力坚持努力坚持努Guest997</span></span><br><span class="line"><span class="keyword">SELECT</span> RPAD(<span class="string">&#x27;Guest997&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;努力坚持&#x27;</span>);        <span class="comment">-- 类似 lpad()，加在原字符串结尾。    Guest997努力坚持努力坚持努力坚持努</span></span><br><span class="line"><span class="keyword">SELECT</span> LTRIM(<span class="string">&#x27;     Guest   997   &#x27;</span>);         <span class="comment">-- 去除字符串前端空格     Guest   997   </span></span><br><span class="line"><span class="keyword">SELECT</span> RTRIM(<span class="string">&#x27;     Guest   997   &#x27;</span>);         <span class="comment">-- 去除字符串后端空格          Guest   997</span></span><br><span class="line"><span class="keyword">SELECT</span> REPEAT(<span class="string">&#x27;Guest997&#x27;</span>,<span class="number">3</span>);        <span class="comment">-- 字符串重复指定次数         Guest997Guest997Guest997</span></span><br><span class="line"><span class="keyword">SELECT</span> STRCMP(<span class="string">&#x27;Guest997&#x27;</span>,<span class="string">&#x27;guest997&#x27;</span>);        <span class="comment">-- 逐字符比较两字符串长度。设这两个字符串为 str1，str2，若str1=str2，则返回零；若 str1&gt;str2，则返回正数；若 str1&lt;str2，则返回负数。      0</span></span><br><span class="line"><span class="keyword">SELECT</span> LOAD_FILE(file_name);    <span class="comment">-- 从文件读取内容</span></span><br></pre></td></tr></table></figure>

<h3 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>();   <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE();        <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW();            <span class="comment">-- 获取当前日期和时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>();      <span class="comment">-- 获取当前日期和时间</span></span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE();        <span class="comment">-- 获取当前日期和时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span>();    <span class="comment">-- 获取当前日期和时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">DATE</span>(<span class="string">&#x27;2021-04-23 12:00:00&#x27;</span>);    <span class="comment">-- 获取日期部分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">DATE</span>(<span class="string">&#x27;2021-04-23 12:00:00&#x27;</span>);    <span class="comment">-- 获取时间部分</span></span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(<span class="type">date</span>,<span class="keyword">format</span>);       <span class="comment">-- 格式化日期和时间   由于 format 参数很多，故给出网址可以去了解一下：https://www.w3school.com.cn/sql/func_date_format.asp</span></span><br><span class="line"><span class="keyword">SELECT</span> UNIX_TIMESTAMP(); <span class="comment">-- 获得 unix 时间戳</span></span><br><span class="line">FROM_UNIXTIME(unix_timestamp,<span class="keyword">format</span>)   <span class="comment">-- 从时间戳获得时间并格式化</span></span><br><span class="line"><span class="comment">-- 获取年、月、日、时、分、秒</span></span><br><span class="line"><span class="keyword">SELECT</span> YEAR(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> MONTH(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> DAY(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> HOUR(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> MINUTE(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> SECOND(NOW());</span><br></pre></td></tr></table></figure>

<h3 id="系统信息函数"><a href="#系统信息函数" class="headerlink" title="系统信息函数"></a>系统信息函数</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> VERSION();    <span class="comment">-- 获取版本</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();       <span class="comment">-- 获取用户</span></span><br></pre></td></tr></table></figure>

<h2 id="聚合函数（常用）"><a href="#聚合函数（常用）" class="headerlink" title="聚合函数（常用）"></a>聚合函数（常用）</h2><p>聚合函数就是对一组（多条）数据操作的函数，大多数时候都是需要配合 group by 关键字来使用。</p>
<p>函数名称</p>
<p>描述</p>
<p>count()</p>
<p>返回满足 select 条件的记录的总和数</p>
<p>sum()</p>
<p>返回数值字段或表达式列作统计，返回一列的总和。</p>
<p>avg()</p>
<p>通常为数值字段或表达式列作统计，返回一列的平均值。</p>
<p>max()</p>
<p>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</p>
<p>min()</p>
<p>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</p>
<p>group_concat()</p>
<p>返回带有来自一个组的连接的非 NULL 值的字符串结果</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 查询一共有几个学生</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="symbol">`studentno`</span>) <span class="keyword">FROM</span> <span class="symbol">`student`</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(*) <span class="keyword">FROM</span> <span class="symbol">`student`</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> <span class="symbol">`student`</span>;    -- 推荐</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">count(字段名)：会统计该字段在表中出现的次数，不统计字段为 null 的记录。</span></span><br><span class="line"><span class="comment">count(*)：包括了所有的列，相当于行数，在统计结果的时候，包含字段为 null 的记录。</span></span><br><span class="line"><span class="comment">count(1)：用1代表数据行，在统计结果的时候，包含字段为 null 的记录。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">很多人认为 count(1) 执行的效率会比 count(*) 高，原因是 count(*) 会存在全表扫描，而 count(1) 可以针对一个字段进行查询。其实不然，count(1) 和 count(*) 都会对全表进行扫描，统计所有记录的条数，包括那些为 null 的记录，因此，它们的效率可以说是相差无几。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">它们之间的一些对比：</span></span><br><span class="line"><span class="comment">1）在表没有主键时，count(1) 比 count(*) 快。</span></span><br><span class="line"><span class="comment">2）有主键时，主键作为计算条件，count(主键)效率最高。</span></span><br><span class="line"><span class="comment">3）若表格只有一个字段，则 count(*) 效率较高。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">-- 查询学生成绩的总和分、平均分、最高分、最低分</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="symbol">`studentresult`</span>) <span class="keyword">AS</span> 总和分 <span class="keyword">FROM</span> <span class="symbol">`result`</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(<span class="symbol">`studentresult`</span>) <span class="keyword">AS</span> 平均分 <span class="keyword">FROM</span> <span class="symbol">`result`</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(<span class="symbol">`studentresult`</span>) <span class="keyword">AS</span> 最高分 <span class="keyword">FROM</span> <span class="symbol">`result`</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(<span class="symbol">`studentresult`</span>) <span class="keyword">AS</span> 最低分 <span class="keyword">FROM</span> <span class="symbol">`result`</span>;</span><br></pre></td></tr></table></figure>

<p>练习</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 查询各学生成绩，并显示在一行中且为降序。（需要使用 group by 关键字将学生编号分组）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`studentno`</span>,GROUP_CONCAT(<span class="symbol">`studentresult`</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="symbol">`studentresult`</span> <span class="keyword">DESC</span>)</span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`result`</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="symbol">`studentno`</span>;</span><br><span class="line">-- 查询不同课程的平均分,最高分,最低分（需要使用 group by 关键字将课程分组）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`subjectname`</span>,<span class="built_in">AVG</span>(<span class="symbol">`studentresult`</span>) <span class="keyword">AS</span> <span class="string">&#x27;平均分&#x27;</span>,<span class="built_in">MAX</span>(<span class="symbol">`studentresult`</span>) <span class="keyword">AS</span> <span class="string">&#x27;最高分&#x27;</span>,<span class="built_in">MIN</span>(<span class="symbol">`studentresult`</span>) <span class="keyword">AS</span> <span class="string">&#x27;最低分&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`subject`</span> <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="symbol">`subjectno`</span>=r.<span class="symbol">`subjectno`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="symbol">`subjectname`</span>;</span><br><span class="line">-- 在上面的基础上添加筛选条件，比如平均分大于等于60分的课程就不查询出来。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="symbol">`subjectname`</span>,<span class="built_in">AVG</span>(<span class="symbol">`studentresult`</span>) <span class="keyword">AS</span> <span class="string">&#x27;平均分&#x27;</span>,<span class="built_in">MAX</span>(<span class="symbol">`studentresult`</span>) <span class="keyword">AS</span> <span class="string">&#x27;最高分&#x27;</span>,<span class="built_in">MIN</span>(<span class="symbol">`studentresult`</span>) <span class="keyword">AS</span> <span class="string">&#x27;最低分&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="symbol">`subject`</span> <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="symbol">`result`</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.<span class="symbol">`subjectno`</span>=r.<span class="symbol">`subjectno`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="symbol">`subjectname`</span></span><br><span class="line"><span class="keyword">HAVING</span> 平均分&lt;<span class="number">60</span>;         -- 不能使用&#x27;&#x27;将平均分三个字包裹起来，否则这条语句就失效了。当然也能使用 AVG(`studentresult`) 代替平均分三个字。</span><br></pre></td></tr></table></figure>

<h3 id="where-关键字与-having-关键字的区别"><a href="#where-关键字与-having-关键字的区别" class="headerlink" title="where 关键字与 having 关键字的区别"></a>where 关键字与 having 关键字的区别</h3><ul>
<li>where 关键字：<br>  where 是一个约束声明，使用 where 约束来自数据库的数据；<br>  where 是在结果返回之前起作用的；（执行顺序：where 早于 group by）<br>  where 中不能使用聚合函数，因为表中不存在这样经过函数处理的记录。</li>
<li>having 关键字：<br>  having 是一个过滤声明，使用 having 过滤来自查询结果的数据；<br>  having 是在结果返回之后起作用的；（执行顺序：having 晚于 group by）<br>  having 中可以使用聚合函数，因为结果中存在这样经过函数处理的记录。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(十)</title>
    <url>/2021/06/11/mysql-basis10/</url>
    <content><![CDATA[<h2 id="MD5-加密"><a href="#MD5-加密" class="headerlink" title="MD5 加密"></a>MD5 加密</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE `school`;</span><br><span class="line"><span class="comment">-- 创建 testmd5 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `testmd5` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="comment">-- 插入 testmd5 数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> testmd5 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;Guest997&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;guest997&#x27;</span>,<span class="string">&#x27;456789&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>可以多次加密</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 对所有密码进行加密</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="symbol">`testmd5`</span> <span class="keyword">SET</span> <span class="symbol">`pwd`</span> = MD5(<span class="symbol">`pwd`</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="symbol">`testmd5`</span>;</span><br><span class="line">-- 单独对某个用户的密码加密</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="symbol">`testmd5`</span> <span class="keyword">SET</span> <span class="symbol">`pwd`</span> = MD5(<span class="symbol">`pwd`</span>) <span class="keyword">WHERE</span> <span class="symbol">`name`</span> = <span class="string">&#x27;Guest997&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="symbol">`testmd5`</span>;</span><br><span class="line">-- 插入新的数据时加密</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`testmd5`</span> <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;GUEST997&#x27;</span>,MD5(<span class="string">&#x27;123456&#x27;</span>));</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="symbol">`testmd5`</span>;</span><br><span class="line">-- 验证加密后的密码</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="symbol">`testmd5`</span> <span class="keyword">WHERE</span> <span class="symbol">`name`</span>=<span class="string">&#x27;GUEST997&#x27;</span> <span class="keyword">AND</span> <span class="symbol">`pwd`</span>=MD5(<span class="string">&#x27;123456&#x27;</span>);     -- 能够查询出来就说明对上了</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(十一)</title>
    <url>/2021/06/11/mysql-basis11/</url>
    <content><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul>
<li>  事务就是将一组 SQL 语句放在同一批次内去执行</li>
<li>  MySQL 事务处理只支持 InnoDB 和 BDB 数据表类型</li>
</ul>
<h3 id="事务的-ACID-原则"><a href="#事务的-ACID-原则" class="headerlink" title="事务的 ACID 原则"></a>事务的 ACID 原则</h3><ul>
<li>  原子性（Atomic）：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
<li>  一致性（Consist）：一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)。以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在 A 与 B 账户之间转账5元，在 C 与 D 账户之间转账10元，在 B 与 E 之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。</li>
<li>  隔离性（Isolated）：隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。事务的四种隔离级别与并发事务异常：<a href="https://blog.csdn.net/qq/_38718258/article/details/105434612">https://blog.csdn.net/qq\_38718258/article/details/105434612</a></li>
<li>  持久性（Durable）：在事务完成以后，该事务对数据库所作的更改便持久得保存在数据库之中，并不会被回滚。</li>
</ul>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用set语句来改变自动提交模式</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>;   <span class="comment">-- 关闭事务自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>;   <span class="comment">-- 开启事务自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：MySQL 中默认是事务自动提交，使用事务时应先关闭事务自动提交。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开始一个事务，标记事务的起始点</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交一个事务给数据库</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将事务回滚，数据回到本次事务的初始状态</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 还原 MySQL 数据库的事务自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 保存点</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名称             <span class="comment">-- 设置一个事务保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名称     <span class="comment">-- 删除保存点</span></span><br></pre></td></tr></table></figure>

<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*创建数据库 shop 和数据库表 account 并插入2条数据</span></span><br><span class="line"><span class="comment">模拟转账：</span></span><br><span class="line"><span class="comment">A 的银行卡余额为2000，A 在线买一款价格为500元的商品。</span></span><br><span class="line"><span class="comment">商家 B 的银行卡余额为10000元，需要给商家 B 支付500元。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="symbol">`shop`</span> CHARACTER <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line">USE `shop`;</span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`account`</span> (</span><br><span class="line"><span class="symbol">`id`</span> INT(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="symbol">`name`</span> VARCHAR(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="symbol">`cash`</span> DECIMAL(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`account`</span> (<span class="symbol">`name`</span>,<span class="symbol">`cash`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;A&#x27;</span>,<span class="number">2000.00</span>),(<span class="string">&#x27;B&#x27;</span>,<span class="number">10000.00</span>);</span><br><span class="line">SET autocommit = 0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> cash=cash<span class="number">-500</span> <span class="keyword">WHERE</span> <span class="symbol">`name`</span>=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> cash=cash+<span class="number">500</span> <span class="keyword">WHERE</span> <span class="symbol">`name`</span>=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">COMMIT;</span><br><span class="line">SET autocommit = 1;</span><br></pre></td></tr></table></figure>

<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul>
<li>  提高查询速度</li>
<li>  确保数据的唯一性</li>
<li>  可以加速表和表之间的连接 , 实现表与表之间的参照完整性。</li>
<li>  使用分组和排序子句进行数据检索时，可以显著减少分组和排序的时间。</li>
<li>  全文检索字段进行搜索优化</li>
</ul>
<h3 id="准则："><a href="#准则：" class="headerlink" title="准则："></a>准则：</h3><ul>
<li>  索引不是越多越好</li>
<li>  不要对经常变动的数据加索引</li>
<li>  小数据量的表建议不要加索引</li>
<li>  索引一般应加在查找条件的字段</li>
</ul>
<h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p>主键：某一个属性组能唯一标识一条记录</p>
<p>特点：</p>
<ul>
<li>  最常见的索引类型</li>
<li>  确保数据记录的唯一性</li>
<li>  确定特定数据记录在数据库中的位置</li>
</ul>
<h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><p>作用：避免同一个表中某数据列中的值重复</p>
<p>与主键索引的区别：</p>
<ul>
<li>  主键索引只能有一个</li>
<li>  唯一索引可能有多个</li>
</ul>
<h4 id="常规索引"><a href="#常规索引" class="headerlink" title="常规索引"></a>常规索引</h4><p>作用：快速定位特定数据</p>
<p>注意 ：</p>
<ul>
<li>  index 和 key 关键字都可以设置常规索引</li>
<li>  应加在查询找条件的字段</li>
<li>  不宜添加太多常规索引，影响数据的插入、删除和修改操作。</li>
<li>  适合数值型和短文本字段</li>
</ul>
<h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><p>作用：快速定位特定数据</p>
<p>注意：</p>
<ul>
<li>  MySQL 5.6 以前的版本，只有 MyISAM 存储引擎支持全文索引。</li>
<li>  MySQL 5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引。</li>
<li>  只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。</li>
<li>  适合大型数据集</li>
</ul>
<h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">/*创建索引：</span><br><span class="line">方法一：</span><br><span class="line">create table 表名 (</span><br><span class="line">字段名1 数据类型 <span class="comment">[完整性约束条件…]</span>,</span><br><span class="line">字段名2 数据类型 <span class="comment">[完整性约束条件…]</span>,</span><br><span class="line"><span class="comment">[unique  fulltext  spatial ]</span> index  key</span><br><span class="line"><span class="comment">[索引名]</span> (字段名<span class="comment">[(长度)]</span> <span class="comment">[asc  desc]</span>)</span><br><span class="line">);</span><br><span class="line">方法二：</span><br><span class="line">create <span class="comment">[unique  fulltext  spatial ]</span> index 索引名 on 表名 (字段名<span class="comment">[(长度)]</span> <span class="comment">[asc  desc]</span>);</span><br><span class="line">方法三：</span><br><span class="line">alter table 表名 ADD <span class="comment">[unique  fulltext  spatial ]</span> index 索引名 (字段名<span class="comment">[(长度)]</span> <span class="comment">[asc  desc]</span>);</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">-- 删除索引：drop index 索引名 on 表名字;</span><br><span class="line">-- 删除主键索引: alter table 表名 drop primary key;</span><br><span class="line"></span><br><span class="line">-- 显示索引信息: show index from `student`;</span><br></pre></td></tr></table></figure>

<h3 id="全文索引练习"><a href="#全文索引练习" class="headerlink" title="全文索引练习"></a>全文索引练习</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 创建全文索引</span><br><span class="line">ALTER TABLE `school`.`student` ADD FULLTEXT <span class="keyword">INDEX</span> <span class="symbol">`studentname`</span>(<span class="symbol">`studentname`</span>);</span><br><span class="line">-- 分析 SQL 语句执行性能（如下图）</span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">WHERE</span> <span class="symbol">`studentno`</span>=<span class="string">&#x27;1000&#x27;</span>;</span><br><span class="line"><span class="comment">/*使用全文索引：</span></span><br><span class="line"><span class="comment">1.全文搜索通过 MATCH() 完成。</span></span><br><span class="line"><span class="comment">2.搜索字符串作为 against() 的参数被给定。搜索以忽略字母大小写的方式执行。对于表中的每个记录行，MATCH() 返回一个相关性值。即在搜索字符串与记录行在 MATCH() 列表中指定的列的文本之间的相似性尺度。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="symbol">`student`</span> <span class="keyword">WHERE</span> MATCH(<span class="symbol">`studentname`</span>) AGAINST(<span class="string">&#x27;love&#x27;</span>);     -- 注意：不支持中文参数</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/mysql-basis11.md-0.png"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(十二)</title>
    <url>/2021/06/13/mysql-basis12/</url>
    <content><![CDATA[<h2 id="索引效率测试"><a href="#索引效率测试" class="headerlink" title="索引效率测试"></a>索引效率测试</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `app_user` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`<span class="type">name</span>` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">`email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户邮箱&#x27;</span>,</span><br><span class="line">`phone` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">`gender` tinyint(<span class="number">4</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;性别（0:男；1：女）&#x27;</span>,</span><br><span class="line">`<span class="keyword">password</span>` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`age` tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">`create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">`update_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">&#x27;app用户表&#x27;</span></span><br><span class="line"><span class="comment">-- 自定义函数批量插入100万条数据</span></span><br><span class="line"><span class="keyword">DELIMITER</span> $$<span class="pgsql"></span></span><br><span class="line"><span class="pgsql"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data()</span></span><br><span class="line"><span class="pgsql"><span class="keyword">RETURNS</span> <span class="type">INT</span></span></span><br><span class="line"><span class="pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="pgsql"><span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span></span><br><span class="line"><span class="pgsql"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="pgsql"><span class="keyword">WHILE</span> i &lt; num <span class="keyword">DO</span></span></span><br><span class="line"><span class="pgsql">    <span class="comment">-- 插入18开头的手机号（中国手机号为11位）</span></span></span><br><span class="line"><span class="pgsql">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> app_user(`<span class="type">name</span>`,`email`,`phone`,`gender`,`<span class="keyword">password</span>`,`age`)</span></span><br><span class="line"><span class="pgsql">    <span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;用户&#x27;</span>,i), <span class="string">&#x27;24736743@qq.com&#x27;</span>, CONCAT(<span class="string">&#x27;18&#x27;</span>,FLOOR(RAND()*(<span class="number">999999999</span><span class="number">-100000000</span>)+<span class="number">100000000</span>)),FLOOR(RAND()*<span class="number">2</span>),<span class="type">UUID</span>(), FLOOR(RAND()*<span class="number">100</span>));    <span class="comment">-- rand()会生成0~1的数，乘以899999999就是0~899999999，再加上100000000就是0~999999999</span></span></span><br><span class="line"><span class="pgsql">    <span class="keyword">SET</span> i = i + <span class="number">1</span>;</span></span><br><span class="line"><span class="pgsql"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span></span><br><span class="line"><span class="pgsql"><span class="keyword">RETURN</span> i;</span></span><br><span class="line"><span class="pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="pgsql"><span class="comment">-- 调用函数</span></span></span><br><span class="line"><span class="pgsql"><span class="keyword">SELECT</span> mock_data();</span></span><br></pre></td></tr></table></figure>

<h3 id="无索引检索数据"><a href="#无索引检索数据" class="headerlink" title="无索引检索数据"></a>无索引检索数据</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="symbol">`app_user`</span> <span class="keyword">WHERE</span> <span class="symbol">`name`</span> = <span class="string">&#x27;用户9999&#x27;</span>; -- 执行耗时 : 1.157 sec</span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="symbol">`app_user`</span> <span class="keyword">WHERE</span> <span class="symbol">`name`</span> = <span class="string">&#x27;用户9999&#x27;</span>;    -- 结果如下图，rows 字段表示找出结果所遍历的行数。</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/mysql-basis12.md-0.png"></p>
<h3 id="有索引检索数据"><a href="#有索引检索数据" class="headerlink" title="有索引检索数据"></a>有索引检索数据</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- 创建索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> <span class="symbol">`idx_app_user_name`</span> <span class="keyword">ON</span> <span class="symbol">`app_user`</span>(<span class="symbol">`name`</span>);</span><br><span class="line">-- 检索数据</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="symbol">`app_user`</span> <span class="keyword">WHERE</span> <span class="symbol">`name`</span> = <span class="string">&#x27;用户9999&#x27;</span>; -- 执行耗时 : 0.004 sec</span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="symbol">`app_user`</span> <span class="keyword">WHERE</span> <span class="symbol">`name`</span> = <span class="string">&#x27;用户9999&#x27;</span>;    -- 结果如下图</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/mysql-basis12.md-1.png"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(十三)</title>
    <url>/2021/06/16/mysql-basis13/</url>
    <content><![CDATA[<h2 id="用户管理基本命令"><a href="#用户管理基本命令" class="headerlink" title="用户管理基本命令"></a>用户管理基本命令</h2><p>数据库用户信息表：mysql 数据库下的 user 表（可以看到主机、用户名和权限……）</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 增加用户</span></span><br><span class="line"><span class="comment">-- 必须拥有 MySQL 数据库的全局 CREATE USER 或 INSERT 权限，才能创建用户。</span></span><br><span class="line"><span class="comment">-- 使用用户名要注意加引号：如 &#x27;user_name&#x27;@&#x27;192.168.1.1&#x27;</span></span><br><span class="line"><span class="comment">-- 密码是字符串，所以一定要加&#x27;&#x27;。</span></span><br><span class="line"><span class="comment">-- 要在纯文本中指定密码，需忽略 password 关键词。要把密码指定为由 password() 函数返回的混编值，需包含 password 关键字</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> 用户名 identified <span class="keyword">by</span> [<span class="keyword">password</span>] 密码;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名用户名</span></span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">user</span> 旧名 <span class="keyword">TO</span> 新名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> = <span class="keyword">password</span>(密码);    <span class="comment">-- 为当前用户设置密码</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> <span class="keyword">for</span> 用户名 = <span class="keyword">password</span>(密码);    <span class="comment">-- 为指定用户设置密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> 用户名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分配权限/添加用户</span></span><br><span class="line"><span class="comment">-- all privileges 表示所有权限</span></span><br><span class="line"><span class="comment">-- 库名.表名 表示某库下面的某表</span></span><br><span class="line"><span class="comment">-- *.* 表示所有库的所有表</span></span><br><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 表名 <span class="keyword">to</span> 用户名 [identified <span class="keyword">by</span> [<span class="keyword">password</span>] 密码];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看权限</span></span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> 用户名@主机;</span><br><span class="line"><span class="comment">-- 查看当前用户权限</span></span><br><span class="line"><span class="keyword">show</span> grants;</span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="built_in">current_user</span>;</span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="built_in">current_user</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤消权限</span></span><br><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 表名 <span class="keyword">from</span> 用户名;</span><br><span class="line"><span class="comment">-- 撤销所有权限</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> <span class="keyword">privileges</span>,<span class="keyword">grant</span> <span class="keyword">option</span> <span class="keyword">from</span> 用户名;</span><br></pre></td></tr></table></figure>

<h2 id="权限列表"><a href="#权限列表" class="headerlink" title="权限列表"></a>权限列表</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">all</span> [<span class="keyword">privileges</span>]    <span class="comment">-- 设置除 grant option 之外的所有简单权限</span></span><br><span class="line"><span class="keyword">alter</span>               <span class="comment">-- 允许使用 alter table</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">routine</span>       <span class="comment">-- 更改或取消已存储的子程序</span></span><br><span class="line"><span class="keyword">create</span>                <span class="comment">-- 允许使用 create table</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">routine</span>      <span class="comment">-- 创建已存储的子程序</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">tables</span>        <span class="comment">-- 允许使用 create temporary table</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span>                    <span class="comment">-- 允许使用 create user、drop user、rename user 和 revoke all privileges。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span>         <span class="comment">-- 允许使用 create view</span></span><br><span class="line"><span class="keyword">delete</span>               <span class="comment">-- 允许使用 delete</span></span><br><span class="line"><span class="keyword">drop</span>               <span class="comment">-- 允许使用 drop table</span></span><br><span class="line"><span class="keyword">execute</span>               <span class="comment">-- 允许用户运行已存储的子程序</span></span><br><span class="line">file               <span class="comment">-- 允许使用 select...into outfile 和 load data infile</span></span><br><span class="line"><span class="keyword">index</span>                <span class="comment">-- 允许使用 create index 和 drop index</span></span><br><span class="line"><span class="keyword">insert</span>               <span class="comment">-- 允许使用 insert</span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">tables</span>        <span class="comment">-- 允许对您拥有 select 权限的表使用 lock tables</span></span><br><span class="line">process            <span class="comment">-- 允许使用 show full processlist</span></span><br><span class="line"><span class="keyword">references</span>           <span class="comment">-- 未被实施</span></span><br><span class="line">reload              <span class="comment">-- 允许使用 flush</span></span><br><span class="line"><span class="keyword">replication</span> client              <span class="comment">-- 允许用户询问从属服务器或主服务器的地址</span></span><br><span class="line"><span class="keyword">replication</span> slave              <span class="comment">-- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span></span><br><span class="line"><span class="keyword">select</span>               <span class="comment">-- 允许使用 select</span></span><br><span class="line"><span class="keyword">show</span> databases     <span class="comment">-- 显示所有数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">view</span>           <span class="comment">-- 允许使用 show create view</span></span><br><span class="line">shutdown           <span class="comment">-- 允许使用 mysqladmin shutdown</span></span><br><span class="line">super              <span class="comment">-- 允许使用 change master、kill、purge master logs、set global 和 mysqladmin debug 命令；允许您连接（一次），即使已达到 max_connections。</span></span><br><span class="line"><span class="keyword">update</span>               <span class="comment">-- 允许使用 update</span></span><br><span class="line"><span class="keyword">usage</span>               <span class="comment">-- 无权限的同义词</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">option</span>       <span class="comment">-- 允许授予权限</span></span><br></pre></td></tr></table></figure>

<h2 id="表维护"><a href="#表维护" class="headerlink" title="表维护"></a>表维护</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分析和存储表的关键字分布</span></span><br><span class="line"><span class="keyword">analyze</span> [<span class="keyword">local</span>  no_write_to_binlog] <span class="keyword">table</span> 表名;</span><br><span class="line"><span class="comment">-- 检查一个或多个表是否有错误</span></span><br><span class="line"><span class="comment">-- option = &#123;quick  fast  medium  extended  changed&#125;</span></span><br><span class="line"><span class="keyword">check</span> <span class="keyword">table</span> 表名 [<span class="keyword">option</span>];</span><br><span class="line"><span class="comment">-- 整理数据文件的碎片</span></span><br><span class="line">optimize [<span class="keyword">local</span>  no_write_to_binlog] <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础(十四)</title>
    <url>/2021/06/16/mysql-basis14/</url>
    <content><![CDATA[<h2 id="备份和还原"><a href="#备份和还原" class="headerlink" title="备份和还原"></a>备份和还原</h2><p>数据库备份的必要性：</p>
<ul>
<li>  保证重要数据不丢失</li>
<li>  数据转移</li>
</ul>
<p>MySQL 数据库备份方法：</p>
<ul>
<li>  mysqldump 备份工具</li>
<li>  数据库管理工具，如 SQLyog。</li>
<li>  直接拷贝数据库文件和相关配置文件</li>
</ul>
<p>mysqldump 客户端</p>
<ul>
<li>  转储数据库</li>
<li>  搜集数据库进行备份</li>
<li>  将数据转移到另一个 SQL 服务器，不一定是 MySQL 服务器。</li>
</ul>
<h3 id="导出（可以输入-w-添加导出条件）"><a href="#导出（可以输入-w-添加导出条件）" class="headerlink" title="导出（可以输入 -w 添加导出条件）"></a>导出（可以输入 -w 添加导出条件）</h3><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">##命令行输入下面的命令</span><br><span class="line">##导出一张表</span><br><span class="line">mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)</span><br><span class="line">##导出所有表</span><br><span class="line">mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/b.sql)</span><br><span class="line">##导出一个库</span><br><span class="line">mysqldump -u用户名 -p密码 -B 库名 &gt; 文件名(D:/c.sql)</span><br></pre></td></tr></table></figure>

<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">##命令行输入下面的命令</span><br><span class="line">##未登录</span><br><span class="line">mysql -u用户名 -p密码 [库名] &lt; 文件名(D:/a.sql)</span><br><span class="line">##已登录</span><br><span class="line">source 文件名(D:/b.sql)</span><br></pre></td></tr></table></figure>

<h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><p><strong>如果不能明白下面的三大范式，可以点击下方链接了解一下。<br><a href="https://www.cnblogs.com/wsg25/p/9615100.html">https://www.cnblogs.com/wsg25/p/9615100.html</a></strong></p>
<ul>
<li>  第一范式 （1st NF） 第一范式的目标是确保每列的原子性，如果每列都是不可再分的最小数据单元，则满足第一范式。</li>
<li>  第二范式（2nd NF） 满足第二范式前必须先满足第一范式。第二范式要求每个表只描述一件事情。</li>
<li>  第三范式（3rd NF） 满足第三范式前必须先满足第二范式。第三范式要求数据表中的每一列数据都和主键直接相关，而不能间接相关。</li>
</ul>
<h2 id="规范化和性能的关系"><a href="#规范化和性能的关系" class="headerlink" title="规范化和性能的关系"></a>规范化和性能的关系</h2><p>有时为满足某种商业目标，数据库性能比规范化数据库更重要。在数据规范化的同时，要综合考虑数据库的性能。</p>
<p>通过在给定的表中添加额外的字段，以大量减少需要从中搜索信息所需的时间。通过在给定的表中插入计算列，以方便查询。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈正向代理、反向代理和 CDN</title>
    <url>/2021/01/31/proxy-cdn/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p><strong>代理</strong> 顾名思义，就是不通过自己，而是通过第三方去代替自己去执行自己要做的事情。可以想象成在本机和目标服务器中又多了一个中间服务器。（代理服务器）</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>正向代理是一个位于客户端和原始服务器之间的服务器（代理服务器）。<strong>客户端必须先进行一些必要设置（必须知道代理服务器的IP和端口），</strong>将每一次请求先发送到代理服务器上，代理服务器转发到真实服务器并取得响应结果后，返回给客户端。简单说明，就是代理服务器代替客户端去访问目标服务器。（<strong>隐藏客户端</strong>）</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理正好相反，对于客户端而言它就像是原始服务器，并且<strong>客户端不需要进行任何特别的设置</strong>。客户端向反向代理发送普通请求，接着反向代理将判断向原始服务器转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。简单说明，就是代理服务器代替目标服务器去接受并返回客户端的请求。（<strong>隐藏目标服务器</strong>）</p>
<h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>CDN 的全称是 Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN 系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet 网络拥挤的状况，提高用户访问网站的响应速度。</p>
<h3 id="正向代理与反向代理的区别"><a href="#正向代理与反向代理的区别" class="headerlink" title="正向代理与反向代理的区别"></a>正向代理与反向代理的区别</h3><p>正向代理：代理端代理的是客户端。 反向代理：代理端代理的是服务端。<img data-src="/images/proxy-cdn.md-0.png"></p>
<h3 id="反向代理与-CDN-的区别"><a href="#反向代理与-CDN-的区别" class="headerlink" title="反向代理与 CDN 的区别"></a>反向代理与 CDN 的区别</h3><p>简单来说，CDN 是现在一种网络加速的<strong>解决方案</strong>，反向代理是将用户的请求转发给后端服务器的<strong>技术。</strong>CDN 是用到了反向代理的技术原理，其最关键的核心技术是智能 DNS 等。</p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>把你的鼠标中间键变成瑞士军刀</title>
    <url>/2021/01/24/quciker/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>Quicker - 一个全新的Windows效率神器</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="初识-Quicker"><a href="#初识-Quicker" class="headerlink" title="初识 Quicker"></a>初识 Quicker</h3><p>Quicker 是一款鼠标的增强工具，我们使用鼠标的侧键或者一个电脑键盘按键组合等快速召唤一个我们已设置好的菜单，其中有一些好用的小工具或者快速打开软件，快速打开文件夹，快速搜索等功能。。</p>
<p><img data-src="/images/quciker.md-0.gif"></p>
<p><img data-src="/images/quciker.md-1.gif"></p>
<h3 id="为各软件中最常用的操作建立捷径"><a href="#为各软件中最常用的操作建立捷径" class="headerlink" title="为各软件中最常用的操作建立捷径"></a>为各软件中最常用的操作建立捷径</h3><p>每个Winodws软件里，总有一些操作比其他功能更常用一些。你可以在Quicker中为这些操作创建快捷按钮。Quicker会根据你正在使用的软件，加载对应的快捷按钮。比如，在浏览器中，会有一些每天都要访问的网址，也会经常查看一下已下载的文件，可以把它们加入 Quicker 面板中；在 Excel 中，可能会经常使用筛选数据、添加框线或冻结窗格的功能，也可以把它们加入到 Quicker 面板中。</p>
<p><img data-src="/images/quciker.md-2.gif"></p>
<h3 id="为跨软件的操作建立捷径"><a href="#为跨软件的操作建立捷径" class="headerlink" title="为跨软件的操作建立捷径"></a>为跨软件的操作建立捷径</h3><p>Quicker提供一种机制可以获取选中的文本，然后作为参数传递给下一个步骤。你可能经常需要在一个软件里复制后，在另外一个软件里粘贴。通过 Quicker，这些可以一键完成。</p>
<p><img data-src="/images/quciker.md-3.gif"></p>
<h3 id="为多个相关的操作建立捷径"><a href="#为多个相关的操作建立捷径" class="headerlink" title="为多个相关的操作建立捷径"></a>为多个相关的操作建立捷径</h3><p>当你每天打开电脑的时候，可能有几个软件、文档需要开启准备工作环境，可能有几个网站需要浏览获取信息的更新。通过在Quicker中创建组合动作，可以实现一键达成目标。类似的，也可以实现在Excel中一键完成添加黑色框线、设置打印区域、打开打印设置窗口的这一串动作。</p>
<p><img data-src="/images/quciker.md-4.gif"></p>
<p><img data-src="/images/quciker.md-5.gif"></p>
<h3 id="共享库"><a href="#共享库" class="headerlink" title="共享库"></a>共享库</h3><p>重复性的劳动是最大的浪费。为了不让每个人都对自己使用的软件重新配置快捷动作，Quicker 设计了共享库。你可以把自己配置的快捷动作分享给其他人，也可以很方便的使用其他人分享的动作。</p>
<p><img data-src="/images/quciker.md-6.png"></p>
<p><img data-src="/images/quciker.md-7.gif"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>官方地址：<a href="https://getquicker.net/">https://getquicker.net</a></p>
<p>文本、图片摘自少数派：<a href="https://sspai.com/post/47776">https://sspai.com/post/47776</a></p>
<p>软件是国内作者原创，设有收费机制，免费用户会限制动作的页数，也就是动作不能设置的太多，我认为也是已经够用了，并不影响大家使用。而且软件收费一个月也才4.8元，也就一瓶饮料的价格，如果大家觉得好用的话，那也不妨支持一下作者。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 reSmush.it 插件压缩图片</title>
    <url>/2021/03/24/resmush-it/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>reSmush.it 是国外专门提供免费图片压缩优化服务api接口，它提供了基于几种高级算法的图片压缩功能，支持 jpg、png和 gif 文件，单张图片最大支持5MB。对图片数量没有任何限制。该插件提供了一键批量优化已有图片的功能，还支持设置上传时优化图片，或者定时优化图片，可以选择保留图片的 EXIF 信息，以及删除原图等。</p>
<h2 id="正文：（插件安装过程就不赘述了）"><a href="#正文：（插件安装过程就不赘述了）" class="headerlink" title="正文：（插件安装过程就不赘述了）"></a>正文：（插件安装过程就不赘述了）</h2><p>使用非常得简单。安装完插件之后，进入其插件设置界面，如下设置即可。（可以根据自己的需要进行设置）<img data-src="/images/resmush-it.md-0.png"></p>
<p>设置完之后点击 <strong>手动优化所有图片</strong>。等优化结束之后，可以在媒体库中查看优化的结果如何。（如果觉得优化得不够好，还可以 <strong>强制重新优化</strong>）<br><img data-src="/images/resmush-it.md-1.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>压缩图片感觉对于网站运维还是很重要的，毕竟占资源的大多都是些媒体文件。之前其实有用其它插件压缩图片，但是总会有报错，而这个软件就不会。如果你也遇到了和我一样的问题，不妨试下这个插件。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 详解(一)</title>
    <url>/2021/07/29/spring-expound01/</url>
    <content><![CDATA[<h2 id="IoC（重点）"><a href="#IoC（重点）" class="headerlink" title="IoC（重点）"></a>IoC（重点）</h2><p>控制反转 - IoC（Inversion of Control）是一种设计思想，DI（依赖注入）是实现 IoC 的一种方法。在没有 IoC 的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方。可以点击后方链接了解 IoC。<a href="https://zhuanlan.zhihu.com/p/75029076">https://zhuanlan.zhihu.com/p/75029076</a></p>
<p>Spring 容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从 Ioc 容器中取出需要的对象。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>之前在 <strong>JavaWeb 基础(一)</strong> 中就说过要做啥准备工作，这里就不再次说明了。新建一个不基于模板的 maven 项目，并添加下面的依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单元测试依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="分析-IoC-实现"><a href="#分析-IoC-实现" class="headerlink" title="分析 IoC 实现"></a>分析 IoC 实现</h2><h3 id="之前的项目"><a href="#之前的项目" class="headerlink" title="之前的项目"></a>之前的项目</h3><p>Dao 层只有一个接口一个实现类，Service 层同样也是。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取用户数据。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    userService.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="现在的项目"><a href="#现在的项目" class="headerlink" title="现在的项目"></a>现在的项目</h3><p>如果 Dao 的接口有多个实现类时，UserServiceImpl 代码该如何修改？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加新的 Dao 实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoMySqlImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySql 获取用户数据。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoMySqlImpl();    <span class="comment">//new 的对象变成了一个新的 Dao 实现类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就需要在 Service 层的实现类修改对应的实现，假设我们的这种需求非常大，这种方式就根本不适用了。每次变动 , 都需要修改大量代码，这种设计的耦合性太高，牵一发而动全身。</p>
<p>那我们如何去解决呢？我们可以在 Service 层的实现类创建 Dao 的引用属性，不去实例化 Dao 对象，而是留一个 set 方法，通过 set 方法传入不同的 Dao 实现类对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line">@Test</span><br><span class="line">public void test<span class="literal">()</span>&#123;</span><br><span class="line">    UserServiceImpl userService = <span class="keyword">new</span> <span class="constructor">UserServiceImpl()</span>;</span><br><span class="line">    <span class="comment">//通过 set 方法传入不同的 Dao 实现类对象</span></span><br><span class="line">    userService.set<span class="constructor">UserDao(<span class="params">new</span> UserDaoImpl()</span>);</span><br><span class="line">    userService.get<span class="constructor">User()</span>;</span><br><span class="line">    userService.set<span class="constructor">UserDao(<span class="params">new</span> UserDaoMySqlImpl()</span>);</span><br><span class="line">    userService.get<span class="constructor">User()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这种思想从本质上解决了问题，我们程序员不再去管理对象的创建，更多的是去关注业务的实现，耦合性大大降低，这也就是 IoC 的原型。</strong></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 详解(二)</title>
    <url>/2021/07/30/spring-expound02/</url>
    <content><![CDATA[<h2 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setName</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--beans.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用 bean 标签创建对象</span></span><br><span class="line"><span class="comment">    以前：类型 变量名 = new 类型(属性值,属性值...);</span></span><br><span class="line"><span class="comment">    现在：id 就是变量名，class 就是类型，property 中的 name 就是属性名，value 就是属性值。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//可以配置多个 xml 文件</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//以 id 获取 bean 并强转成 Hello 对象</span></span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        hello.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-bean-实现解耦（基于上篇文章）"><a href="#使用-bean-实现解耦（基于上篇文章）" class="headerlink" title="使用 bean 实现解耦（基于上篇文章）"></a>使用 bean 实现解耦（基于上篇文章）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;DaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.dao.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;MysqlImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.dao.UserDaoMySqlImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 ref 属性引用另外一个 bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name=&quot;userDao&quot; ref=&quot;DaoImpl&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;MysqlImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    UserServiceImpl userService = (UserServiceImpl) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    userService.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要实现不同的操作，只需要在 XML 配置文件中进行修改。所谓的 IoC 就是：<strong>对象由 Spring 来创建、管理、装配</strong>。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 详解(三)</title>
    <url>/2021/07/30/spring-expound03/</url>
    <content><![CDATA[<h2 id="IoC-创建对象方式"><a href="#IoC-创建对象方式" class="headerlink" title="IoC 创建对象方式"></a>IoC 创建对象方式</h2><h3 id="通过无参构造方法来创建"><a href="#通过无参构造方法来创建" class="headerlink" title="通过无参构造方法来创建"></a>通过无参构造方法来创建</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> <span class="keyword">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    private String <span class="type">name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">User</span>() &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;无参构造方法。&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> setName(String <span class="type">name</span>) &#123;</span><br><span class="line">        this.name = <span class="type">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">show</span>()&#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;name=&quot; + <span class="type">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;user&quot;</span> <span class="built_in">class</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;Guest997&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> userTest()&#123;</span><br><span class="line">        ApplicationContext context = <span class="built_in">new</span> ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">        <span class="keyword">User</span> <span class="keyword">user</span> = (<span class="keyword">User</span>) context.getBean(&quot;user&quot;);</span><br><span class="line">        <span class="keyword">user</span>.<span class="keyword">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//结果为 无参构造方法。<span class="type">name</span>=Guest997</span><br></pre></td></tr></table></figure>

<p>从结果可以发现，在调用 show 方法之前，User 对象已经通过无参构造方法被创建出来了。</p>
<h3 id="通过有参构造方法来创建"><a href="#通过有参构造方法来创建" class="headerlink" title="通过有参构造方法来创建"></a>通过有参构造方法来创建</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">User</span>(String <span class="type">name</span>) &#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;有参构造方法。&quot;);</span><br><span class="line">    this.name = <span class="type">name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据参数下标设置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;guest997&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--根据参数名字设置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;guest997&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--根据参数类型设置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;guest997&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> userTest02()&#123;</span><br><span class="line">    ApplicationContext context = <span class="built_in">new</span> ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">    <span class="keyword">User</span> user02 = (<span class="keyword">User</span>) context.getBean(&quot;user02&quot;);</span><br><span class="line">    user02.<span class="keyword">show</span>();</span><br><span class="line">&#125;</span><br><span class="line">//结果为 无参构造方法。有参构造方法。<span class="type">name</span>=guest997</span><br></pre></td></tr></table></figure>

<p>从结果可以发现，在配置文件加载的时候。其中管理的对象都已经初始化了。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>在获取 bean 的时候可以使用别名获取。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用 bean 标签的 name 属性，多个别名使用逗号隔开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userNew&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用 alias 标签，name 属性为 bean id，alias 属性为别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>假如有多个 xml 配置文件，可以通过 import 标签整合到一个 xml 配置文件中。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;path&#125;</span><span class="xml"><span class="tag"><span class="string">/beans.xml&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 详解(四)</title>
    <url>/2021/07/31/spring-expound04/</url>
    <content><![CDATA[<h2 id="依赖注入-DI"><a href="#依赖注入-DI" class="headerlink" title="依赖注入(DI)"></a>依赖注入(DI)</h2><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><p>上篇文章中已经讲过了，这里就不赘述了。</p>
<h3 id="Set-注入-（重点）"><a href="#Set-注入-（重点）" class="headerlink" title="Set 注入 （重点）"></a>Set 注入 （重点）</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getAddress</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setAddress</span>(<span class="params"><span class="built_in">String</span> address</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span>[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">String</span>&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt; card;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; games;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setName</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="function"><span class="title">getAddress</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setAddress</span>(<span class="params">Address address</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span>[] <span class="function"><span class="title">getBooks</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setBooks</span>(<span class="params"><span class="built_in">String</span>[] books</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">String</span>&gt; <span class="function"><span class="title">getHobbies</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setHobbies</span>(<span class="params">List&lt;<span class="built_in">String</span>&gt; hobbies</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; <span class="function"><span class="title">getCard</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setCard</span>(<span class="params"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; card</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; <span class="function"><span class="title">getGames</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setGames</span>(<span class="params"><span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; games</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.games = games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getWife</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setWife</span>(<span class="params"><span class="built_in">String</span> wife</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="function"><span class="title">getInfo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setInfo</span>(<span class="params">Properties info</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address.getAddress() +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">&quot;, hobbies=&quot;</span> + hobbies +</span><br><span class="line">                <span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line">                <span class="string">&quot;, games=&quot;</span> + games +</span><br><span class="line">                <span class="string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, info=&quot;</span> + info +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;深圳&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--常量注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Guest997&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--bean 注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--list 注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set 注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--map 注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111222333344445566&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;学生证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11223344556&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--properties 注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>00000000<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--null 注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> StudentTest &#123;</span><br><span class="line">    <span class="keyword">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> studentTest()&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        Student student = context.getBean(<span class="string">&quot;student&quot;</span>, Student.<span class="keyword">class</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">Student&#123;name=&#x27;Guest997&#x27;, </span></span><br><span class="line"><span class="comment">address=深圳, </span></span><br><span class="line"><span class="comment">books=[西游记, 红楼梦, 水浒传, 三国演义], </span></span><br><span class="line"><span class="comment">hobbies=[听歌, 睡觉], </span></span><br><span class="line"><span class="comment">card=&#123;身份证=111222333344445566, 学生证=11223344556&#125;, </span></span><br><span class="line"><span class="comment">games=[LOL, CF], </span></span><br><span class="line"><span class="comment">wife=&#x27;null&#x27;, </span></span><br><span class="line"><span class="comment">info=&#123;学号=00000000, 性别=男&#125;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="p-命名空间和-c-命名空间注入"><a href="#p-命名空间和-c-命名空间注入" class="headerlink" title="p 命名空间和 c 命名空间注入"></a>p 命名空间和 c 命名空间注入</h3><p>p 命名空间注入就是属性值注入，c 命名空间注入就是有参构造器注入。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Teacher</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Teacher</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setName</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--p 命名空间注入基于无参构造器</span></span><br><span class="line"><span class="comment">导入约束：xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Teacher&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;Guest997&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--c 命名空间注入基于有参构造器</span></span><br><span class="line"><span class="comment">导入约束：xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Teacher&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;guest997&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TeacherTest &#123;</span><br><span class="line">    <span class="keyword">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> teacherTest()&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        Teacher teacher = (Teacher) context.getBean(<span class="string">&quot;teacher&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(teacher);</span><br><span class="line">        Teacher teacher02 = (Teacher) context.getBean(<span class="string">&quot;teacher02&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(teacher02);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">无参构造方法。</span></span><br><span class="line"><span class="comment">有参构造方法。</span></span><br><span class="line"><span class="comment">Teacher&#123;name=&#x27;Guest997&#x27;&#125;</span></span><br><span class="line"><span class="comment">Teacher&#123;name=&#x27;guest997&#x27;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 详解(五)</title>
    <url>/2021/07/31/spring-expound05/</url>
    <content><![CDATA[<h2 id="bean-的作用域"><a href="#bean-的作用域" class="headerlink" title="bean 的作用域"></a>bean 的作用域</h2><p><img data-src="/images/spring-expound05.md-0.png"></p>
<h2 id="bean-的装配"><a href="#bean-的装配" class="headerlink" title="bean 的装配"></a>bean 的装配</h2><p>Spring 会在应用上下文中为某个 bean 寻找其依赖的 bean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;miao~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wang~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="function"><span class="title">getCat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setCat</span>(<span class="params">Cat cat</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="function"><span class="title">getDog</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setDog</span>(<span class="params">Dog dog</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">personTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        Person person = (Person) context.getBean(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">        person.getCat().shout();</span><br><span class="line">        person.getDog().shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="手动装配-bean"><a href="#手动装配-bean" class="headerlink" title="手动装配 bean"></a>手动装配 bean</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;cat&quot;</span> <span class="built_in">class</span>=<span class="string">&quot;ml.guest997.pojo.Cat&quot;</span>/&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;dog&quot;</span> <span class="built_in">class</span>=<span class="string">&quot;ml.guest997.pojo.Dog&quot;</span>/&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;person&quot;</span> <span class="built_in">class</span>=<span class="string">&quot;ml.guest997.pojo.Person&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;cat&quot;</span> <span class="keyword">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;dog&quot;</span> <span class="keyword">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<h3 id="自动装配-bean"><a href="#自动装配-bean" class="headerlink" title="自动装配 bean"></a>自动装配 bean</h3><h4 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--按名称自动装配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Guest997&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果修改了 cat 或 dog 的 id，会报空指针异常。必须保证 Person 类中的属性名和对应的 id 属性一样。</p>
<h4 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--按类型自动装配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Guest997&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果增加了新的 bean 对应 Cat 类，会报不唯一异常。必须保证引用类的 bean id 只有一个。</p>
<h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p>新建 applicationContext.xml 文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改 PersonTest 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">personTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        Person person = (Person) context.getBean(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">        person.getCat().shout();</span><br><span class="line">        person.getDog().shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h5><ol>
<li> 在使用 @Autowired 时，首先在容器中查询对应类型的 bean。</li>
<li> 如果查询结果刚好为一个，就将该 bean 装配给 @Autowired 指定的数据。</li>
<li> 如果查询的结果不止一个，那么 @Autowired 会根据名称来查找。</li>
<li> 如果查询的结果为空，那么会抛出异常。解决方法是使用 @Autowired(required = false)，说明对象可以为 null。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="function"><span class="title">getCat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setCat</span>(<span class="params">Cat cat</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="function"><span class="title">getDog</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setDog</span>(<span class="params">Dog dog</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--xml 配置文件只专注于注册 bean，依赖注入就交给注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.pojo.Person&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h5><p>当 XML 配置文件中一个类配置了多个 bean，且 id 不为引用类属性名，如下</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;cat1&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;ml.guest997.pojo.Cat&quot;</span>/&gt;</span><br><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;cat2&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;ml.guest997.pojo.Cat&quot;</span>/&gt;</span><br><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;ml.guest997.pojo.Dog&quot;</span>/&gt;</span><br><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;person&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;ml.guest997.pojo.Person&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>单单使用 @Autowired 注解是无法实现指定 bean 进行依赖注入的，但是可以配合使用 @Qualifier 注解实现这样的需求。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">&quot;cat1&quot;</span>)</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="function"><span class="title">getCat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setCat</span>(<span class="params">Cat cat</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="function"><span class="title">getDog</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setDog</span>(<span class="params">Dog dog</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h5><ol>
<li> 在使用 @Resource 时，首先在容器中查询对应名称的 bean。</li>
<li> 如果查询结果刚好为一个，就将该 bean 装配给 @Resource 指定的数据。</li>
<li> 如果查询的结果不止一个，那么 @Resource 会根据类型来查找。</li>
</ol>
<p>导入 java 的注解依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--java 注解依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当 XML 配置文件中一个类配置了多个 bean，且 id 不为引用类属性名，可以通过 @Resource(name = “xxx”) 实现指定 bean 的依赖注入。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;ml.guest997.pojo.Cat&quot;</span>/&gt;</span><br><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;dog1&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;ml.guest997.pojo.Dog&quot;</span>/&gt;</span><br><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;dog2&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;ml.guest997.pojo.Dog&quot;</span>/&gt;</span><br><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;person&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;ml.guest997.pojo.Person&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">&quot;dog1&quot;</span>)</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="function"><span class="title">getCat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setCat</span>(<span class="params">Cat cat</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="function"><span class="title">getDog</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setDog</span>(<span class="params">Dog dog</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 详解(六)</title>
    <url>/2021/08/01/spring-expound06/</url>
    <content><![CDATA[<h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p><strong>以前都是在 XML 配置文件中进行 bean 的注册和依赖注入，但是在实际开发中，我们一般都会使用注解实现！</strong>（XML 配置文件可以适用任何场景，注解不是自己的类使用不了）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描指定包注解，如果使用了下行代码，就可以删掉上行代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ml.guest997.pojo&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//相当于：&lt;bean id=&quot;user&quot; class=&quot;当前类名&quot;/&gt;</span></span><br><span class="line"><span class="comment">//也可以通过 @Component(&quot;xxx&quot;) 指定 bean id；不加名称，id 就默认使用驼峰命名。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">&quot;cat&quot;</span>)        <span class="comment">//属性值注入</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setName</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">petTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        Pet pet = (Pet) context.getBean(<span class="string">&quot;pet&quot;</span>);</span><br><span class="line">        String name = pet.getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="衍生注解"><a href="#衍生注解" class="headerlink" title="衍生注解"></a>衍生注解</h4><ul>
<li>  @Controller：Web 层</li>
<li>  @Service：Service 层</li>
<li>  @Repository：Dao 层</li>
</ul>
<h3 id="scope"><a href="#scope" class="headerlink" title="@scope"></a>@scope</h3><p>之前就有图详细讲解过，故这里只给出使用方法。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(<span class="meta-string">&quot;prototype&quot;</span>)</span>        <span class="comment">//默认为 singleton</span></span><br></pre></td></tr></table></figure>

<h2 id="XML-配置文件与注解组合进行开发"><a href="#XML-配置文件与注解组合进行开发" class="headerlink" title="XML 配置文件与注解组合进行开发"></a>XML 配置文件与注解组合进行开发</h2><ul>
<li>  XML 配置文件注册 bean</li>
<li>  注解完成依赖注入</li>
</ul>
<p>如果是按照上面的组合进行开发，就可以在配置文件中删掉下面的代码，因为那只是为了扫描包注册 bean。既然都已经在 XML 配置文件中手动注册了 bean，就不需要再在配置文件下扫描包注册 bean 了。</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">&quot;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 详解(八)</title>
    <url>/2021/08/02/spring-expound08/</url>
    <content><![CDATA[<h2 id="代理模式（重点）"><a href="#代理模式（重点）" class="headerlink" title="代理模式（重点）"></a>代理模式（重点）</h2><p><strong>SpringAOP 的底层机制就是动态代理。</strong></p>
<p><img data-src="/images/spring-expound08.md-0.png"></p>
<p>在这个过程中，你直接接触的是中介。就如同现实生活中的情形，你看不到房东，但是你依旧通过中介租到了房东的房子，这就是所谓的代理模式。</p>
<p>代理模式的好处：</p>
<ul>
<li>  可以使得真实角色更加纯粹，不再去关注一些公共的业务。</li>
<li>  公共的业务由代理来完成，实现了业务的分工。</li>
<li>  公共的业务发生扩展时，方便集中管理。</li>
</ul>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><ul>
<li>  抽象角色：一般使用接口或者抽象类来实现（如上图中的租房）</li>
<li>  真实角色：被代理的角色（如上图中的房东）</li>
<li>  代理角色：代理真实角色，代理真实角色后，会做一些附属的操作。（如上图中的中介）</li>
<li>  客户：访问代理角色并使用代理角色来进行一些操作（如上图中的租房的人）</li>
</ul>
<h4 id="抽象角色（租房接口）"><a href="#抽象角色（租房接口）" class="headerlink" title="抽象角色（租房接口）"></a>抽象角色（租房接口）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="真实角色（房东实现租房接口）"><a href="#真实角色（房东实现租房接口）" class="headerlink" title="真实角色（房东实现租房接口）"></a>真实角色（房东实现租房接口）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LandLord</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代理角色（中介实现租房接口并附加一些自己的操作）"><a href="#代理角色（中介实现租房接口并附加一些自己的操作）" class="headerlink" title="代理角色（中介实现租房接口并附加一些自己的操作）"></a>代理角色（中介实现租房接口并附加一些自己的操作）</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="title">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尽量使用组合的方式，而不是使用继承。</span></span><br><span class="line">    <span class="keyword">private</span> LandLord landLord;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Proxy</span>(<span class="params">LandLord landLord</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.landLord = landLord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">rent</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        lookHouse();</span><br><span class="line">        landLord.rent();    <span class="comment">//调用了房东的方法</span></span><br><span class="line">        signContract();</span><br><span class="line">        charge();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">lookHouse</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带客户看房子。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">signContract</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签合同。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">charge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="客户"><a href="#客户" class="headerlink" title="客户"></a>客户</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//new 一个对象表示房东要出租房子</span></span><br><span class="line">        LandLord landLord = <span class="keyword">new</span> LandLord();</span><br><span class="line">        <span class="comment">//中介收到房东的要求准备帮房东出租房子</span></span><br><span class="line">        <span class="built_in">Proxy</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(landLord);</span><br><span class="line">        <span class="comment">//客户找到中介要租房子</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">房东要出租房子。</span></span><br><span class="line"><span class="comment">中介带客户看房子。</span></span><br><span class="line"><span class="comment">签合同。</span></span><br><span class="line"><span class="comment">收中介费。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>  真实角色和代理角色实现了相同的接口，真实角色通过代理角色实现了相同的方法。这样就出现了代码的大量重复。如果接口增加一个方法，除了所有真实角色需要实现这个方法外，所有代理角色也需要实现此方法。增加了代码维护复杂度。</li>
<li>  代理角色只服务于一种类型的真实角色，如果要服务多种类型的真实角色，势必要为每一种真实角色都进行代理，这样一种真实角色就会产生一种代理角色，工作量变大。</li>
</ul>
<h3 id="静态代理再理解"><a href="#静态代理再理解" class="headerlink" title="静态代理再理解"></a>静态代理再理解</h3><p>实现增删改查的业务。</p>
<h4 id="抽象角色"><a href="#抽象角色" class="headerlink" title="抽象角色"></a>抽象角色</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="真实角色"><a href="#真实角色" class="headerlink" title="真实角色"></a>真实角色</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="title">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">delete</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">update</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更改了一个用户。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">query</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想要在这之上增加一个日志功能，该如何实现？<br>在实现类上增加代码？这样需要在每个方法中增加代码，工作量会很大！<br>可以在不改变实现类的基础上，创建一个代理类来实现日志功能！</p>
<h4 id="代理角色"><a href="#代理角色" class="headerlink" title="代理角色"></a>代理角色</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceProxy</span><span class="params">(UserServiceImpl userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        userService.<span class="built_in">add</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">        userService.<span class="built_in"><span class="keyword">delete</span></span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">        userService.<span class="built_in">update</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">        userService.<span class="built_in">query</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">String</span> msg)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;执行了&quot;</span> + msg + <span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="客户-1"><a href="#客户-1" class="headerlink" title="客户"></a>客户</h4><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo02;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line"><span class="code">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">        UserServiceImpl userService = new UserServiceImpl();</span></span><br><span class="line"><span class="code">        UserServiceProxy proxy = new UserServiceProxy(userService);</span></span><br><span class="line"><span class="code">        proxy.add();</span></span><br><span class="line"><span class="code">        System.out.println(&quot;==============&quot;);</span></span><br><span class="line"><span class="code">        proxy.delete();</span></span><br><span class="line"><span class="code">        System.out.println(&quot;==============&quot;);</span></span><br><span class="line"><span class="code">        proxy.update();</span></span><br><span class="line"><span class="code">        System.out.println(&quot;==============&quot;);</span></span><br><span class="line"><span class="code">        proxy.query();</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">/*结果为</span><br><span class="line">执行了add方法</span><br><span class="line"><span class="section">增加了一个用户。</span></span><br><span class="line"><span class="section">==============</span></span><br><span class="line">执行了delete方法</span><br><span class="line"><span class="section">删除了一个用户。</span></span><br><span class="line"><span class="section">==============</span></span><br><span class="line">执行了update方法</span><br><span class="line"><span class="section">更改了一个用户。</span></span><br><span class="line"><span class="section">==============</span></span><br><span class="line">执行了query方法</span><br><span class="line">查询了一个用户。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h4 id="缺点举例再理解"><a href="#缺点举例再理解" class="headerlink" title="缺点举例再理解"></a>缺点举例再理解</h4><p>代理可以对实现类进行统一的管理。如在调用具体实现类之前，需要打印日志等信息，这样我们只需要添加一个代理类，在代理类中添加打印日志的功能，然后调用实现类，这样就避免了修改具体实现类。但是如果想让每个实现类都添加打印日志的功能的话，就需要添加多个代理类，以及代理类中各个方法都需要添加打印日志功能（如上代理方法的增删改查中都需要添加上打印日志的功能）</p>
<h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h4><p><strong>在不改变原来的代码的情况下，实现了对原有功能的增强，这是 AOP 中最核心的思想。</strong><img data-src="/images/spring-expound08.md-1.png"></p>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ul>
<li>  动态代理的角色和静态代理的一样</li>
<li>  动态代理的代理类是动态生成的，静态代理的代理类是我们提前写好的。</li>
<li>  动态代理分为两类：一类是基于接口的动态代理，一类是基于类的动态代理。</li>
<li>  基于接口的动态代理：JDK 动态代理</li>
<li>  基于类的动态代理：cglib</li>
</ul>
<h4 id="InvocationHandler"><a href="#InvocationHandler" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h4><p>InvocationHandler 是代理实例的调用处理程序实现的接口。每个代理实例都具有一个关联的调用处理程序。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序的 invoke 方法。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Object</span> invoke(<span class="keyword">Object</span> proxy, <span class="keyword">Method</span> <span class="keyword">method</span>, <span class="keyword">Object</span>[] args)；</span><br><span class="line">//proxy - 在其上调用方法的代理实例</span><br><span class="line">//<span class="keyword">method</span> - 对应于在代理实例上调用的接口方法的 <span class="keyword">Method</span> 实例。 <span class="keyword">Method</span> 对象的声明类将是在其中声明方法的接口，该接口可以是代理类赖以继承方法的代理接口的超接口。</span><br><span class="line">//args - 包含传入代理实例上方法调用的参数值的对象数组，如果接口方法不使用参数，则为 <span class="keyword">null</span>。基本类型的参数被包装在适当基本包装器类（如 java.lang.Integer 或 java.lang.Boolean）的实例中。</span><br></pre></td></tr></table></figure>

<h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><p>Proxy 提供用于创建动态代理类和实例的静态方法，它还是由这些方法创建的所有动态代理类的超类。</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">Object</span> newProxyInstance(ClassLoader loader,</span><br><span class="line">                                      <span class="keyword">Class</span>&lt;?&gt;[] interfaces,</span><br><span class="line">                                      InvocationHandler h);</span><br><span class="line"><span class="comment">//loader - 定义代理类的类加载器</span></span><br><span class="line"><span class="comment">//interfaces - 代理类要实现的接口列表</span></span><br><span class="line"><span class="comment">//h - 指派方法调用的调用处理程序</span></span><br></pre></td></tr></table></figure>

<h4 id="代码实现出租房子"><a href="#代码实现出租房子" class="headerlink" title="代码实现出租房子"></a>代码实现出租房子</h4><p>抽象角色和真实角色与上面的一模一样，故不再写出来了。</p>
<h5 id="代理角色（动态生成）"><a href="#代理角色（动态生成）" class="headerlink" title="代理角色（动态生成）"></a>代理角色（动态生成）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*该方法传入三个参数：</span></span><br><span class="line"><span class="comment">        1.类加载器，用于加载动态生成的代理类。</span></span><br><span class="line"><span class="comment">        2.被代理类实现的所有接口</span></span><br><span class="line"><span class="comment">        3.代理类对象本身引用，用于回调我们实现的 invoke 方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//反射机制，这里的 method 已经在上面通过 getInterfaces() 获取到了被代理类实现的接口的方法</span></span><br><span class="line">        Object result = method.invoke(rent, args);      <span class="comment">//这里会调用 LandLord 实现类中的 rent 方法</span></span><br><span class="line">        lookHouse();</span><br><span class="line">        signContract();</span><br><span class="line">        charge();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带客户看房子。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签合同。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="客户-2"><a href="#客户-2" class="headerlink" title="客户"></a>客户</h5><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo03;</span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">public</span> class Client &#123;</span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> void main(String[] args) &#123;</span><br><span class="line">        LandLord landLord =<span class="built_in"> new </span>LandLord();</span><br><span class="line">        ProxyInvocationHandler pih =<span class="built_in"> new </span>ProxyInvocationHandler();</span><br><span class="line">        pih.setRent(land<span class="class">Lord);</span></span><br><span class="line">        Rent proxy = (Rent) pih.getProxy();</span><br><span class="line">        proxy.rent();   //这一步会调用 ProxyInvocationHandler 类的<span class="built_in"> invoke </span>方法，是因为动态生成的代理类内部的代理方法全部显式地调用了 ProxyInvocationHandler 的<span class="built_in"> invoke </span>方法。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*结果为</span><br><span class="line">房东要出租房子。</span><br><span class="line">中介带客户看房子。</span><br><span class="line">签合同。</span><br><span class="line">收中介费。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h3 id="动态代理再理解"><a href="#动态代理再理解" class="headerlink" title="动态代理再理解"></a>动态代理再理解</h3><p>通过动态代理实现上面的增删改查业务，抽象角色和真实角色与上面的一模一样，故不再写出来了。</p>
<h4 id="代理角色-1"><a href="#代理角色-1" class="headerlink" title="代理角色"></a>代理角色</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="title">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Object</span> target;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setTarget</span>(<span class="params"><span class="built_in">Object</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成代理类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Object</span> <span class="function"><span class="title">getProxy</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">/*该方法传入三个参数：</span></span><br><span class="line"><span class="comment">        1.类加载器，用于加载动态生成的代理类。</span></span><br><span class="line"><span class="comment">        2.被代理类实现的所有接口</span></span><br><span class="line"><span class="comment">        3.代理类对象本身引用，用于回调我们实现的 invoke 方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Proxy</span>.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Object</span> invoke(<span class="built_in">Object</span> proxy, Method method, <span class="built_in">Object</span>[] args) throws Throwable &#123;</span><br><span class="line">        <span class="comment">//反射机制，通过 method 获取方法名</span></span><br><span class="line">        log(method.getName());</span><br><span class="line">        <span class="comment">//反射机制，这里的 method 就是在上面通过 getInterfaces() 获取到了被代理类实现的接口的方法</span></span><br><span class="line">        <span class="built_in">Object</span> result = method.invoke(target, args);      <span class="comment">//这里会调用 target 实现类中的方法</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">log</span>(<span class="params"><span class="built_in">String</span> msg</span>)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span> + msg + <span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="客户-3"><a href="#客户-3" class="headerlink" title="客户"></a>客户</h4><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo04;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line"><span class="code">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">        UserServiceImpl userService = new UserServiceImpl();</span></span><br><span class="line"><span class="code">        ProxyInvocationHandler pih = new ProxyInvocationHandler();</span></span><br><span class="line"><span class="code">        pih.setTarget(userService);</span></span><br><span class="line"><span class="code">        UserService proxy = (UserService) pih.getProxy();</span></span><br><span class="line"><span class="code">        proxy.add();</span></span><br><span class="line"><span class="code">        System.out.println(&quot;==============&quot;);</span></span><br><span class="line"><span class="code">        proxy.delete();</span></span><br><span class="line"><span class="code">        System.out.println(&quot;==============&quot;);</span></span><br><span class="line"><span class="code">        proxy.update();</span></span><br><span class="line"><span class="code">        System.out.println(&quot;==============&quot;);</span></span><br><span class="line"><span class="code">        proxy.query();</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">/*结果为</span><br><span class="line">执行了add方法</span><br><span class="line"><span class="section">增加了一个用户。</span></span><br><span class="line"><span class="section">==============</span></span><br><span class="line">执行了delete方法</span><br><span class="line"><span class="section">删除了一个用户。</span></span><br><span class="line"><span class="section">==============</span></span><br><span class="line">执行了update方法</span><br><span class="line"><span class="section">更改了一个用户。</span></span><br><span class="line"><span class="section">==============</span></span><br><span class="line">执行了query方法</span><br><span class="line">查询了一个用户。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 详解(九)</title>
    <url>/2021/08/02/spring-expound09/</url>
    <content><![CDATA[<h2 id="AOP（重点）"><a href="#AOP（重点）" class="headerlink" title="AOP（重点）"></a>AOP（重点）</h2><p>AOP（Aspect Oriented Programming）是一种设计模式，用于实现一个系统中的某一个方面的应用。<img data-src="/images/spring-expound09.md-0.png"></p>
<p>SpringAOP 中，通过 Advice 定义横切逻辑，Spring 中支持5种类型的 Advice：<img data-src="/images/spring-expound09.md-1.jpg"></p>
<p>SpringAOP 的环绕通知和前置、后置通知的区别：</p>
<ul>
<li>  目标方法的调用由环绕通知决定，即你可以决定是否调用目标方法，而前置和后置通知是不能决定的，它们只是在方法的调用前后执行通知而已，即目标方法肯定是要执行的。joinPoint.proceed() 就是执行目标方法的代码。</li>
<li>  环绕通知可以控制返回对象，即可以返回一个与目标对象完全不同的返回值。虽然这很危险，但是却可以做到。</li>
</ul>
<h3 id="添加-AOP-依赖"><a href="#添加-AOP-依赖" class="headerlink" title="添加 AOP 依赖"></a>添加 AOP 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--aop 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="AOP-实现方法一（Spring-API-实现）"><a href="#AOP-实现方法一（Spring-API-实现）" class="headerlink" title="AOP 实现方法一（Spring API 实现）"></a>AOP 实现方法一（Spring API 实现）</h3><h4 id="业务接口和实现类"><a href="#业务接口和实现类" class="headerlink" title="业务接口和实现类"></a>业务接口和实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.demo05.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo05.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="title">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">delete</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">update</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更改了一个用户。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">query</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="前置和后置通知类"><a href="#前置和后置通知类" class="headerlink" title="前置和后置通知类"></a>前置和后置通知类</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo05.<span class="keyword">log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="keyword">Method</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> BeforeLog implements MethodBeforeAdvice &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    method：要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">    objects：被调用的方法的参数</span></span><br><span class="line"><span class="comment">    o：目标对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">before</span>(<span class="keyword">Method</span> <span class="keyword">method</span>, <span class="keyword">Object</span>[] objects, <span class="keyword">Object</span> o) throws Throwable &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(o.getClass().getName() + &quot;的&quot; + <span class="keyword">method</span>.getName() + &quot;方法被执行了。&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo05.<span class="keyword">log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="keyword">Method</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> AfterLog implements AfterReturningAdvice &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    o：返回的对象</span></span><br><span class="line"><span class="comment">    method：要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">    objects：被调用的方法的参数</span></span><br><span class="line"><span class="comment">    o1：目标对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> afterReturning(<span class="keyword">Object</span> o, <span class="keyword">Method</span> <span class="keyword">method</span>, <span class="keyword">Object</span>[] objects, <span class="keyword">Object</span> o1) throws Throwable &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;执行了&quot; + o1.getClass().getName() + &quot;的&quot; + <span class="keyword">method</span>.getName() + &quot;方法,&quot; + &quot;返回值为：&quot; + o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="XML-配置文件"><a href="#XML-配置文件" class="headerlink" title="XML 配置文件"></a>XML 配置文件</h4><p>需要导入 AOP 约束。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.demo05.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.demo05.log.BeforeLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.demo05.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置 aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--选择切入点</span></span><br><span class="line"><span class="comment">        execution(修饰符 返回值 包.类.方法名(参数) throws异常)</span></span><br><span class="line"><span class="comment">        返回值 和 方法名(参数) 都是一定要定义的；* 和 .. 就表示任意。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* ml.guest997.demo05.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置通知类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo05;</span><br><span class="line"></span><br><span class="line">import ml.guest997.demo05.service.UserService;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class LogTest &#123;</span><br><span class="line"><span class="code">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext02.xml&quot;);</span></span><br><span class="line"><span class="code">        UserService userService = (UserService) context.getBean(&quot;userService&quot;);</span></span><br><span class="line"><span class="code">        userService.add();</span></span><br><span class="line"><span class="code">        System.out.println(&quot;==========================&quot;);</span></span><br><span class="line"><span class="code">        userService.delete();</span></span><br><span class="line"><span class="code">        System.out.println(&quot;==========================&quot;);</span></span><br><span class="line"><span class="code">        userService.update();</span></span><br><span class="line"><span class="code">        System.out.println(&quot;==========================&quot;);</span></span><br><span class="line"><span class="code">        userService.query();</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">/*结果为</span><br><span class="line">ml.guest997.demo05.service.UserServiceImpl的add方法被执行了。</span><br><span class="line">增加了一个用户。</span><br><span class="line"><span class="section">执行了ml.guest997.demo05.service.UserServiceImpl的add方法,返回值为：null</span></span><br><span class="line"><span class="section">==========================</span></span><br><span class="line">ml.guest997.demo05.service.UserServiceImpl的delete方法被执行了。</span><br><span class="line">删除了一个用户。</span><br><span class="line"><span class="section">执行了ml.guest997.demo05.service.UserServiceImpl的delete方法,返回值为：null</span></span><br><span class="line"><span class="section">==========================</span></span><br><span class="line">ml.guest997.demo05.service.UserServiceImpl的update方法被执行了。</span><br><span class="line">更改了一个用户。</span><br><span class="line"><span class="section">执行了ml.guest997.demo05.service.UserServiceImpl的update方法,返回值为：null</span></span><br><span class="line"><span class="section">==========================</span></span><br><span class="line">ml.guest997.demo05.service.UserServiceImpl的query方法被执行了。</span><br><span class="line">查询了一个用户。</span><br><span class="line">执行了ml.guest997.demo05.service.UserServiceImpl的query方法,返回值为：null</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h3 id="AOP-实现方法二（自定义类实现）"><a href="#AOP-实现方法二（自定义类实现）" class="headerlink" title="AOP 实现方法二（自定义类实现）"></a>AOP 实现方法二（自定义类实现）</h3><p>业务接口和实现类与上面的一模一样，故不再写出来了。</p>
<h4 id="通知类"><a href="#通知类" class="headerlink" title="通知类"></a>通知类</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo05.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyLog</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;---------方法执行前---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;---------方法执行后---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="XML-配置文件-1"><a href="#XML-配置文件-1" class="headerlink" title="XML 配置文件"></a>XML 配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diyLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.demo05.log.DiyLog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--选择切入面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diyLog&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--选择切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* ml.guest997.demo05.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置通知类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">package</span> <span class="comment">ml</span><span class="string">.</span><span class="comment">guest997</span><span class="string">.</span><span class="comment">demo05</span><span class="string">.</span><span class="comment">test;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">import</span> <span class="comment">ml</span><span class="string">.</span><span class="comment">guest997</span><span class="string">.</span><span class="comment">demo05</span><span class="string">.</span><span class="comment">service</span><span class="string">.</span><span class="comment">UserService;</span></span><br><span class="line"><span class="comment">import</span> <span class="comment">org</span><span class="string">.</span><span class="comment">springframework</span><span class="string">.</span><span class="comment">context</span><span class="string">.</span><span class="comment">ApplicationContext;</span></span><br><span class="line"><span class="comment">import</span> <span class="comment">org</span><span class="string">.</span><span class="comment">springframework</span><span class="string">.</span><span class="comment">context</span><span class="string">.</span><span class="comment">support</span><span class="string">.</span><span class="comment">ClassPathXmlApplicationContext;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">public</span> <span class="comment">class</span> <span class="comment">LogTest02</span> <span class="comment">&#123;</span></span><br><span class="line">    <span class="comment">public</span> <span class="comment">static</span> <span class="comment">void</span> <span class="comment">main(String</span><span class="title">[</span><span class="title">]</span> <span class="comment">args)</span> <span class="comment">&#123;</span></span><br><span class="line">        <span class="comment">ApplicationContext</span> <span class="comment">context</span> <span class="comment">=</span> <span class="comment">new</span> <span class="comment">ClassPathXmlApplicationContext(&quot;applicationContext02</span><span class="string">.</span><span class="comment">xml&quot;);</span></span><br><span class="line">        <span class="comment">UserService</span> <span class="comment">userService</span> <span class="comment">=</span> <span class="comment">(UserService)</span> <span class="comment">context</span><span class="string">.</span><span class="comment">getBean(&quot;userService&quot;);</span></span><br><span class="line">        <span class="comment">userService</span><span class="string">.</span><span class="comment">add();</span></span><br><span class="line">        <span class="comment">userService</span><span class="string">.</span><span class="comment">delete();</span></span><br><span class="line">        <span class="comment">userService</span><span class="string">.</span><span class="comment">update();</span></span><br><span class="line">        <span class="comment">userService</span><span class="string">.</span><span class="comment">query();</span></span><br><span class="line">    <span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line">--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">方法执行前</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="comment">增加了一个用户。</span></span><br><span class="line">--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">方法执行后</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line">--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">方法执行前</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="comment">删除了一个用户。</span></span><br><span class="line">--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">方法执行后</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line">--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">方法执行前</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="comment">更改了一个用户。</span></span><br><span class="line">--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">方法执行后</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line">--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">方法执行前</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="comment">查询了一个用户。</span></span><br><span class="line">--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">方法执行后</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="AOP-实现方法三（注解实现）"><a href="#AOP-实现方法三（注解实现）" class="headerlink" title="AOP 实现方法三（注解实现）"></a>AOP 实现方法三（注解实现）</h3><p>业务接口和实现类与上面的一模一样，故不再写出来了。</p>
<h4 id="通知类-1"><a href="#通知类-1" class="headerlink" title="通知类"></a>通知类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.demo05.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span>     <span class="comment">//定义为一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationLog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选择切入点并配置通知类型</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* ml.guest997.demo05.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行前---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* ml.guest997.demo05.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行后---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* ml.guest997.demo05.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundLog</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前。&quot;</span>);</span><br><span class="line">        Object proceed = jp.proceed();      <span class="comment">//执行目标对象方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;签名：&quot;</span> + jp.getSignature());    <span class="comment">//获取目标对象签名</span></span><br><span class="line">        System.out.println(proceed);</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="XML-配置文件-2"><a href="#XML-配置文件-2" class="headerlink" title="XML 配置文件"></a>XML 配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.demo05.log.AnnotationLog&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package ml.guest997.demo05.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.demo05.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> LogTest03 &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        ApplicationContext context = <span class="built_in">new</span> ClassPathXmlApplicationContext(&quot;applicationContext02.xml&quot;);</span><br><span class="line">        UserService userService = (UserService) context.getBean(&quot;userService&quot;);</span><br><span class="line">        userService.<span class="keyword">add</span>();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        userService.<span class="keyword">delete</span>();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        userService.<span class="keyword">update</span>();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果为</span></span><br><span class="line"><span class="comment">环绕前。</span></span><br><span class="line"><span class="comment">---------方法执行前---------</span></span><br><span class="line"><span class="comment">增加了一个用户。</span></span><br><span class="line"><span class="comment">---------方法执行后---------</span></span><br><span class="line"><span class="comment">签名：void ml.guest997.demo05.service.UserService.add()</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">环绕后。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">环绕前。</span></span><br><span class="line"><span class="comment">---------方法执行前---------</span></span><br><span class="line"><span class="comment">删除了一个用户。</span></span><br><span class="line"><span class="comment">---------方法执行后---------</span></span><br><span class="line"><span class="comment">签名：void ml.guest997.demo05.service.UserService.delete()</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">环绕后。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">环绕前。</span></span><br><span class="line"><span class="comment">---------方法执行前---------</span></span><br><span class="line"><span class="comment">更改了一个用户。</span></span><br><span class="line"><span class="comment">---------方法执行后---------</span></span><br><span class="line"><span class="comment">签名：void ml.guest997.demo05.service.UserService.update()</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">环绕后。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">环绕前。</span></span><br><span class="line"><span class="comment">---------方法执行前---------</span></span><br><span class="line"><span class="comment">查询了一个用户。</span></span><br><span class="line"><span class="comment">---------方法执行后---------</span></span><br><span class="line"><span class="comment">签名：void ml.guest997.demo05.service.UserService.query()</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">环绕后。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 详解(十)</title>
    <url>/2021/08/03/spring-expound10/</url>
    <content><![CDATA[<h2 id="整合-MyBatis-方法一（数据库基于之前-MyBatis-的文章）"><a href="#整合-MyBatis-方法一（数据库基于之前-MyBatis-的文章）" class="headerlink" title="整合 MyBatis 方法一（数据库基于之前 MyBatis 的文章）"></a>整合 MyBatis 方法一（数据库基于之前 MyBatis 的文章）</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql 数据库连接依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--整合 mybatis 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--lombok 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决配置文件无法导出或生效的问题"><a href="#解决配置文件无法导出或生效的问题" class="headerlink" title="解决配置文件无法导出或生效的问题"></a>解决配置文件无法导出或生效的问题</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--解决配置文件无法导出或生效的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="POJO-层"><a href="#POJO-层" class="headerlink" title="POJO 层"></a>POJO 层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Mapper-层"><a href="#Mapper-层" class="headerlink" title="Mapper 层"></a>Mapper 层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;ml.guest997.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="XML-配置文件（spring-mybatis-xml）"><a href="#XML-配置文件（spring-mybatis-xml）" class="headerlink" title="XML 配置文件（spring-mybatis.xml）"></a>XML 配置文件（spring-mybatis.xml）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring-mybatis.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用 SqlSessionFactoryBean 来创建 SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入上面配置好的数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入 mybatis 核心配置文件。有点类似于导入了，因为 mybatis 核心配置文件中能做的事情，Spring 中的配置文件也能做。--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;configLocation&quot; value=&quot;classpath:  &quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入 mapper 配置文件，相当于之前在 mybatis 中注册 mapper 配置文件。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:ml/guest997/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionTemplate 就是 sqlSession。</span></span><br><span class="line"><span class="comment">    使用 SqlSessionFactory 作为构造方法的参数来创建 SqlSessionTemplate 对象，这是因为其没有 set 方法。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Mapper-层完善"><a href="#Mapper-层完善" class="headerlink" title="Mapper 层完善"></a>Mapper 层完善</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个类更像是用来调 mapper 层的，故使用 UserServiceImpl 这个名字防止概念混淆。</span></span><br><span class="line"><span class="comment">//sqlSession 虽然已经创建好，但是我们还需要在用到的时候取出来，所以就需要交由 Spring 实现 sqlSession 注入。</span></span><br><span class="line"><span class="comment">//接口注入是现在不提倡的一种方式，基本处于“退役状态”。因为它强制被注入对象实现不必要的接口，带有侵入性。所以自然就有了这样的一个实现类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sqlSession 交由 Spring 来管理</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="XML-配置文件完善（applicationContext-xml）"><a href="#XML-配置文件完善（applicationContext-xml）" class="headerlink" title="XML 配置文件完善（applicationContext.xml）"></a>XML 配置文件完善（applicationContext.xml）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入 spring-mybatis 整合的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mybatis.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.mapper.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.<span class="keyword">User</span>;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserMapperTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> getUser()&#123;</span><br><span class="line">        ApplicationContext context = <span class="built_in">new</span> ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        UserMapper userMapper = (UserMapper) context.getBean(&quot;userMapper&quot;);</span><br><span class="line">        List&lt;<span class="keyword">User</span>&gt; userList = userMapper.getUser();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">User</span> <span class="keyword">user</span> : userList) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="整合-MyBatis-方法一改进"><a href="#整合-MyBatis-方法一改进" class="headerlink" title="整合 MyBatis 方法一改进"></a>整合 MyBatis 方法一改进</h2><p>SqlSessionDaoSupport 是一个抽象的支持类，用来提供 SqlSession。</p>
<h3 id="Mapper-层完善改进"><a href="#Mapper-层完善改进" class="headerlink" title="Mapper 层完善改进"></a>Mapper 层完善改进</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.<span class="type">User</span>;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.<span class="type">SqlSessionDaoSupport</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">List</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个类更像是用来调 mapper 层的，故使用 UserServiceImpl 这个名字防止概念混淆。</span></span><br><span class="line"><span class="comment">//sqlSession 虽然已经创建好，但是我们还需要在用到的时候取出来，所以就需要交由 Spring 实现 sqlSession 注入。</span></span><br><span class="line"><span class="comment">//接口注入是现在不提倡的一种方式，基本处于“退役状态”。因为它强制被注入对象实现不必要的接口，带有侵入性。所以自然就有了这样的一个实现类。</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="title">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">List</span>&lt;<span class="type">User</span>&gt; getUser() &#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(<span class="type">UserMapper</span>.<span class="keyword">class</span>).getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="XML-配置文件改进（spring-mybatis-xml）"><a href="#XML-配置文件改进（spring-mybatis-xml）" class="headerlink" title="XML 配置文件改进（spring-mybatis.xml）"></a>XML 配置文件改进（spring-mybatis.xml）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring-mybatis.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用 SqlSessionFactoryBean 来创建 SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入上面配置好的数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入 mybatis 核心配置文件。有点类似于导入了，因为 mybatis 核心配置文件中能做的事情，Spring 中的配置文件也能做。--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;configLocation&quot; value=&quot;classpath:  &quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入 mapper 配置文件，相当于之前在 mybatis 中注册 mapper 配置文件。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:ml/guest997/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="整合-MyBatis-方法二（基于方法一）"><a href="#整合-MyBatis-方法二（基于方法一）" class="headerlink" title="整合 MyBatis 方法二（基于方法一）"></a>整合 MyBatis 方法二（基于方法一）</h2><p>觉得多写一个实现类有点奇怪？其实可以用一种方式把 Mapper 接口自动配置成 Spring 中的 bean。</p>
<h3 id="XML-配置文件补充（spring-mybatis-xml）"><a href="#XML-配置文件补充（spring-mybatis-xml）" class="headerlink" title="XML 配置文件补充（spring-mybatis.xml）"></a>XML 配置文件补充（spring-mybatis.xml）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--把 mapper 接口自动配置成 spring 中的 bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ml.guest997.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.<span class="keyword">User</span>;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserMapperTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> getUser()&#123;</span><br><span class="line">        ApplicationContext context = <span class="built_in">new</span> ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        //直接通过反射获取 Spring 自动配置的 bean</span><br><span class="line">        UserMapper userMapper = context.getBean(UserMapper.<span class="keyword">class</span>);</span><br><span class="line">        List&lt;<span class="keyword">User</span>&gt; userList = userMapper.getUser();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">User</span> <span class="keyword">user</span> : userList) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>还可以使用注解来实现 MyBatis 的整合，这个等后面学习 SpringBoot 的时候再仔细讲解。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 详解(七)</title>
    <url>/2021/08/01/spring-expound07/</url>
    <content><![CDATA[<h2 id="基于Java-类配置-Spring"><a href="#基于Java-类配置-Spring" class="headerlink" title="基于Java 类配置 Spring"></a>基于Java 类配置 Spring</h2><p>通过 Java 类的方式提供 bean 的定义信息，完全不使用 Spring 的 XML 配置文件。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>      <span class="comment">//将这个类标注为 Spring 的一个组件并注册到容器中。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">&quot;巧克力&quot;</span>)       <span class="comment">//依赖注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setName</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Food;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面两个注释写一个就可以了，作用相同。</span></span><br><span class="line"><span class="meta">@Configuration</span>      <span class="comment">//标注为也是一个组件并注册到容器中，这是一个配置类，就相当于之前的 XML 配置文件。</span></span><br><span class="line"><span class="meta">@ComponentScan(<span class="meta-string">&quot;ml.guest997.pojo&quot;</span>)</span>        <span class="comment">//扫描指定包下类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FoodConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册一个 bean，方法名就是 id 属性，返回类型就是 class 属性。</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Food getFood()&#123;</span><br><span class="line">        <span class="keyword">return</span> new Food();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.config.FoodConfig;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> FoodTest &#123;</span><br><span class="line">    <span class="keyword">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> foodTest()&#123;</span><br><span class="line">        <span class="comment">//通过 AnnotationConfigApplicationContext 方法获取容器并通过配置类的 class 对象加载。</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(FoodConfig.<span class="keyword">class</span>);</span><br><span class="line">        Food food = (Food) applicationContext.getBean(<span class="string">&quot;getFood&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(food.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在一个-Java-配置类中导入其它-Java-配置类"><a href="#在一个-Java-配置类中导入其它-Java-配置类" class="headerlink" title="在一个 Java 配置类中导入其它 Java 配置类"></a>在一个 Java 配置类中导入其它 Java 配置类</h2><figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@Import</span>(FoodConfig.<span class="keyword">class</span>)        <span class="comment">//类似于配置文件中的 include 标签。</span></span><br></pre></td></tr></table></figure>

<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p><strong>基于 Java 类的配置方式，在之后的 SpringBoot 和 SpringCloud 中会大量看到，现在我们只需要知道这些注解的作用即可。</strong></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 详解(十一)</title>
    <url>/2021/08/03/spring-expound11/</url>
    <content><![CDATA[<h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p><strong>交由容器管理事务，不需要改变原有代码。</strong></p>
<h3 id="POJO-层"><a href="#POJO-层" class="headerlink" title="POJO 层"></a>POJO 层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Mapper-层"><a href="#Mapper-层" class="headerlink" title="Mapper 层"></a>Mapper 层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span></span><br><span class="line"><span class="meta"><span class="xml">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span></span><br><span class="line"><span class="meta"><span class="xml">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;ml.guest997.mapper.UserMapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        select * from mybatis.user</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;ml.guest997.pojo.User&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        insert into mybatis.user(id, name, pwd) values (#</span><span class="template-variable">&#123;id&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;name&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;pwd&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--故意将 delete 写错测试事务--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        deletes from mybatis.user where id=#</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line">import ml.guest997.pojo.User;</span><br><span class="line">import org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> UserServiceImpl extends SqlSessionDaoSupport implements UserMapper&#123;</span><br><span class="line">    <span class="comment">//在 getUser 方法中调用了代码错误的 deleteUser 方法，如果事务生效，则 addUser 方法是不会被执行的。</span></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;User&gt; get<span class="constructor">User()</span> &#123;</span><br><span class="line">        User user = <span class="keyword">new</span> <span class="constructor">User(6, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;1111111&quot;</span>)</span>;</span><br><span class="line">        UserMapper userMapper = get<span class="constructor">SqlSession()</span>.get<span class="constructor">Mapper(UserMapper.<span class="params">class</span>)</span>;</span><br><span class="line">        userMapper.add<span class="constructor">User(<span class="params">user</span>)</span>;</span><br><span class="line">        userMapper.delete<span class="constructor">User(6)</span>;</span><br><span class="line">        return userMapper.get<span class="constructor">User()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public <span class="built_in">int</span> add<span class="constructor">User(User <span class="params">user</span>)</span> &#123;</span><br><span class="line">        return get<span class="constructor">SqlSession()</span>.get<span class="constructor">Mapper(UserMapper.<span class="params">class</span>)</span>.add<span class="constructor">User(<span class="params">user</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public <span class="built_in">int</span> delete<span class="constructor">User(<span class="params">int</span> <span class="params">id</span>)</span> &#123;</span><br><span class="line">        return get<span class="constructor">SqlSession()</span>.get<span class="constructor">Mapper(UserMapper.<span class="params">class</span>)</span>.delete<span class="constructor">User(<span class="params">id</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="XML-配置文件（注意头文件的约束）"><a href="#XML-配置文件（注意头文件的约束）" class="headerlink" title="XML 配置文件（注意头文件的约束）"></a>XML 配置文件（注意头文件的约束）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring-mybatis.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:ml/guest997/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器，id 属性必须是 transactionManager。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置哪些方法使用什么样的事务，配置事务的传播特性。propagation 默认为 REQUIRED，这也是最常用到的传播特性。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--查询并不改变数据库的数据，故可以设置 read-only 属性为 true。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--所有方法使用 REQUIRED 类型的传播特性--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置 aop 织入事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* ml.guest997.mapper.UserMapper.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mybatis.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.mapper.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Spring-的7种事务传播行为类型（了解即可）"><a href="#Spring-的7种事务传播行为类型（了解即可）" class="headerlink" title="Spring 的7种事务传播行为类型（了解即可）"></a>Spring 的7种事务传播行为类型（了解即可）</h4><ul>
<li>  PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。</li>
<li>  PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。</li>
<li>  PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。</li>
<li>  PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。</li>
<li>  PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>
<li>  PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</li>
<li>  PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 PROPAGATION_REQUIRED 类似的操作。</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package ml.guest997.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.<span class="keyword">User</span>;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserMapperTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> userMapperTest()&#123;</span><br><span class="line">        ApplicationContext context = <span class="built_in">new</span> ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        UserMapper userMapper = (UserMapper) context.getBean(&quot;userMapper&quot;);</span><br><span class="line">        List&lt;<span class="keyword">User</span>&gt; userList = userMapper.getUser();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">User</span> <span class="keyword">user</span> : userList) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台会报错，查看数据库没有插入数据。将错误的代码修改正确并再次运行，发现能正常打印 user 列表，就说明事务是生效的。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 详解(一)</title>
    <url>/2021/08/06/springmvc-expound01/</url>
    <content><![CDATA[<h2 id="HelloSpringMVC"><a href="#HelloSpringMVC" class="headerlink" title="HelloSpringMVC"></a>HelloSpringMVC</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>之前在 <strong>JavaWeb 基础(一)</strong> 中就说过要做啥准备工作，这里就不再次说明了。要新建一个不基于模板的 maven 项目以及添加 Web 框架支持，最后添加下面的依赖以及解决配置文件无法导出或生效的问题。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--解决配置文件无法导出或生效的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单元测试依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写-web-xml-配置文件"><a href="#编写-web-xml-配置文件" class="headerlink" title="编写 web.xml 配置文件"></a>编写 web.xml 配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册 DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联 springmvc 的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别为1，表示跟服务器一起启动。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- /：匹配所有的请求（不包括.jsp），/*：匹配所有的请求（包括.jsp）。</span></span><br><span class="line"><span class="comment">    jsp 页面只是被返回给用户看的，不需要再进行处理，否则依然会走上面的 DispatcherServlet 进行处理。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写-SpringMVC-配置文件"><a href="#编写-SpringMVC-配置文件" class="headerlink" title="编写 SpringMVC 配置文件"></a>编写 SpringMVC 配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--springmvc-servlet.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册处理器映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册 HelloController 类的 bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Controller-层"><a href="#Controller-层" class="headerlink" title="Controller 层"></a>Controller 层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现了 Controller 接口，并将这个类交给 Spring 容器管理，即注册 bean。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实现了 handleRequest 方法，需要返回一个 ModelAndView 对象。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView：模型和视图</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//封装对象并放在 ModelAndView 中。（对象属性名为 msg，属性值为 HelloSpringMVC! ）</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图并放在 ModelAndView 中</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;hello&quot;</span>);    <span class="comment">//因为在 springmvc.xml 配置文件中，已经进行了前缀和后缀的处理，所以传给前端的实际路径就是：/WEB-INF/jsp/hello.jsp。</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="View-层"><a href="#View-层" class="headerlink" title="View 层"></a>View 层</h3><figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">&lt;%--hello.jsp--%&gt;</span></span><br><span class="line"><span class="attribute">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot;%&gt;</span></span><br><span class="line"><span class="attribute">&lt;html&gt;</span></span><br><span class="line"><span class="attribute">&lt;head&gt;</span></span><br><span class="line">    <span class="attribute">&lt;title&gt;</span>Title<span class="attribute">&lt;/title&gt;</span></span><br><span class="line"><span class="attribute">&lt;/head&gt;</span></span><br><span class="line"><span class="attribute">&lt;body&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="attribute">&lt;/body&gt;</span></span><br><span class="line"><span class="attribute">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="启动-Tomcat"><a href="#启动-Tomcat" class="headerlink" title="启动 Tomcat"></a>启动 Tomcat</h3><p>如果出现404错误，看下是不是缺少了 jar 包；如果 jar 包完整，就在 IDEA 的项目发布中，添加 lib 依赖。如下图所示：<img data-src="/images/springmvc-expound01.md-0.png"></p>
<p>最后重启 Tomcat，访问 localhost:8080/项目部署名/hello，能够正常显示 **HelloSpringMVC!**，就说明成功了。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 详解(二)</title>
    <url>/2021/08/06/springmvc-expound02/</url>
    <content><![CDATA[<h2 id="中心控制器"><a href="#中心控制器" class="headerlink" title="中心控制器"></a>中心控制器</h2><p><strong>SpringMVC 框架围绕 DispatcherServlet 设计，DispatcherServlet 的作用是将请求分发到不同的处理器。</strong></p>
<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p><img data-src="/images/springmvc-expound02.md-0.png">下面是更加具体的执行流程。实线表示 SpringMVC 框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。<img data-src="/images/springmvc-expound02.md-1.jpg"></p>
<h2 id="简要分析执行流程（基于上篇文章进行讲解）"><a href="#简要分析执行流程（基于上篇文章进行讲解）" class="headerlink" title="简要分析执行流程（基于上篇文章进行讲解）"></a>简要分析执行流程（基于上篇文章进行讲解）</h2><ol>
<li> DispatcherServlet 表示前端控制器，是整个 SpringMVC 的控制中心。用户发出请求，DispatcherServlet 接收请求并拦截请求。请求的 url 为：localhost:8080/SpringMVC/hello，请求位于服务器 localhost:8080 上的 SpringMVC 站点的 hello 控制器。</li>
<li> HandlerMapping 为处理器映射。DispatcherServlet 调用 HandlerMapping。</li>
<li> HandlerMapping根据请求 url 查找Handler。HandlerExecution表示具体的 Handler，其主要作用是根据 url 查找控制器。</li>
<li> HandlerExecution 将解析后的信息传递给 DispatcherServlet，如解析控制器映射等。</li>
<li> HandlerAdapter 表示处理器适配器，其按照特定的规则去执行 Handler。</li>
<li> Handler 让具体的 Controller 执行。</li>
<li> Controller 将具体的执行信息返回给 HandlerAdapter。（ModelAndView）</li>
<li> HandlerAdapter 将视图逻辑名或模型传递给 DispatcherServlet。</li>
<li> DispatcherServlet 调用视图解析器（ViewResolver）来解析 HandlerAdapter 传递的逻辑视图名。</li>
<li> 视图解析器将解析的逻辑视图名传给 DispatcherServlet。</li>
<li> DispatcherServlet 根据视图解析器解析的视图结果，调用具体的视图。</li>
<li> 最终将视图呈现给用户。</li>
</ol>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>在上篇文章中是为了将原理讲清楚，就将一步步的过程显式地编写了一遍，<strong>但是实际开发中并不会这么写</strong>。<strong>一般都是使用注解完成开发，这才是 SpringMVC 的精髓</strong>。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 详解(三)</title>
    <url>/2021/08/07/springmvc-expound03/</url>
    <content><![CDATA[<h2 id="使用注解开发（基于第一篇文章）"><a href="#使用注解开发（基于第一篇文章）" class="headerlink" title="使用注解开发（基于第一篇文章）"></a>使用注解开发（基于第一篇文章）</h2><p>由于 web.xml 配置文件以及 jsp 页面完全相同，便不再写出来了。</p>
<h3 id="编写-SpringMVC-配置文件"><a href="#编写-SpringMVC-配置文件" class="headerlink" title="编写 SpringMVC 配置文件"></a>编写 SpringMVC 配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--springmvc-servlet.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描包下注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ml.guest997.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--让 SpringMVC 不处理静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--支持 mvc 注解驱动（使用了扫描包下注解，可以不使用这个。）</span></span><br><span class="line"><span class="comment">        在 spring 中一般采用 @RequestMapping 注解来完成映射关系。</span></span><br><span class="line"><span class="comment">        要想使 @RequestMapping 注解生效，必须向上下文中注册 DefaultAnnotationHandlerMapping 和一个 AnnotationMethodHandlerAdapter 实例，这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而 annotation-driven 配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Controller-层"><a href="#Controller-层" class="headerlink" title="Controller 层"></a>Controller 层</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>        <span class="comment">//@Controller 注解的类会自动添加到 Spring 上下文中</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">&quot;/annotationController&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//映射访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">&quot;/hello&quot;</span>)</span>       <span class="comment">//真实访问地址：localhost:8080/项目部署名/annotationController/hello</span></span><br><span class="line">    <span class="keyword">public</span> String sayHello(Model model)&#123;</span><br><span class="line">        <span class="comment">//SpringMVC 会自动实例化一个 Model 对象用于向视图中传值。</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">        <span class="comment">//返回视图位置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;     <span class="comment">//返回了 jsp 页面的名字，将会被视图解析器进行处理。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">&quot;/hello02&quot;</span>)</span>       <span class="comment">//真实访问地址：localhost:8080/项目部署名/annotationController/hello02</span></span><br><span class="line">    <span class="keyword">public</span> String sayHello(Model model)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC02!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;     <span class="comment">//返回了 jsp 页面的名字，将会被视图解析器进行处理。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="启动-Tomcat"><a href="#启动-Tomcat" class="headerlink" title="启动 Tomcat"></a>启动 Tomcat</h3><p>访问 localhost:8080/项目部署名/annotationController/hello 和 localhost:8080/项目部署名/annotationController/hello02，能够正常显示 <strong>HelloSpringMVC!</strong> 和 **HelloSpringMVC02!**，就说明成功了。</p>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>用于声明 Spring 类的实例是一个控制器。Spring 可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证 Spring 能找到你的控制器，需要在配置文件中声明组件扫描。</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">&quot;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>可以从上面的 Controller 层看到，使用 @Controller 注解实现的控制器可以有多个映射访问路径，而这是之前通过实现 Controller 接口的控制器所做不到的。<br>而多个映射访问路径可以指向同一个视图，但是页面显示的结果却是不一样的。从这里可以看出视图是被复用的，控制器与视图之间是弱偶合关系。</p>
<h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p>用于映射 url 到控制器类或一个特定的处理程序方法，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。如果类和方法上都使用了，则需要先指定类的路径再指定方法的路径。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 详解(四)</title>
    <url>/2021/08/07/springmvc-expound04/</url>
    <content><![CDATA[<h2 id="RESTful-风格（重点）"><a href="#RESTful-风格（重点）" class="headerlink" title="RESTful 风格（重点）"></a>RESTful 风格（重点）</h2><p>RESTful 风格就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>
<h2 id="传统方式操作资源"><a href="#传统方式操作资源" class="headerlink" title="传统方式操作资源"></a>传统方式操作资源</h2><p>通过不同的请求参数来实现不同的功能。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/item/</span>queryItem.action?id=<span class="number">1</span>     查询 - GET</span><br><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/item/</span>saveItem.action             增加 - POST</span><br><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/item/u</span>pdateItem.action         更新 - POST</span><br><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/item/</span>deleteItem.action?id=<span class="number">1</span>     删除 - GET 或 POST</span><br></pre></td></tr></table></figure>

<h2 id="RESTful-操作资源"><a href="#RESTful-操作资源" class="headerlink" title="RESTful 操作资源"></a>RESTful 操作资源</h2><p>能通过相同的地址，不同的请求方式来实现不同的功能。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/item/</span><span class="number">1</span>     查询 - GET</span><br><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>/item         新增 - POST</span><br><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>/item         更新 - PUT</span><br><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/item/</span><span class="number">1</span>     删除 - DELETE</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test01/&#123;a&#125;/&#123;b&#125;&quot;)</span>      <span class="comment">//这里的 a 和 b 就是方法参数中的变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test01</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a,<span class="meta">@PathVariable</span> <span class="keyword">int</span> b, Model model)</span></span>&#123;     <span class="comment">//使用 @PathVariable 注解表示其为路径变量</span></span><br><span class="line">        <span class="keyword">int</span> result = a + b;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;结果为：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面两个方法使用同样的映射路径，但是请求方式不同，结果也会不同。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test02/&#123;a&#125;/&#123;b&#125;&quot;,method = RequestMethod.POST)</span>      <span class="comment">//使用 post 请求方式</span></span><br><span class="line">    <span class="comment">//等价于 @PostMapping(&quot;/test02/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test02</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a,<span class="meta">@PathVariable</span> <span class="keyword">int</span> b,Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a + b;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;post 请求方式，结果为：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test02/&#123;a&#125;/&#123;b&#125;&quot;,method = RequestMethod.GET)</span>      <span class="comment">//使用 get 请求方式</span></span><br><span class="line">    <span class="comment">//等价于 @GetMapping(&quot;/test02/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test03</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a,<span class="meta">@PathVariable</span> <span class="keyword">int</span> b,Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a + b;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;get 请求方式，结果为：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot;%&gt;</span></span><br><span class="line"><span class="xml">&lt;%--test.jsp--%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%--为了方便测试，就把下面的参数直接写死了。--%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath&#125;</span><span class="xml"><span class="tag"><span class="string">/test02/1/2&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;post 请求方式提交&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath&#125;</span><span class="xml"><span class="tag"><span class="string">/test02/1/2&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;get 请求方式提交&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>访问 localhost:8080/项目部署名/test01/1/2，会显示：<strong>结果为：3</strong><br>访问 localhost:8080/项目部署名/test.jsp，会显示两个按钮。点击 <strong>post 请求方式提交</strong> 按钮，会显示：<strong>post 请求方式，结果为：3</strong><br>返回 test.jsp 页面，点击 <strong>get 请求方式提交</strong> 按钮，会显示：<strong>get 请求方式，结果为：3</strong></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 详解(五)</title>
    <url>/2021/08/08/springmvc-expound05/</url>
    <content><![CDATA[<h2 id="重定向和转发"><a href="#重定向和转发" class="headerlink" title="重定向和转发"></a>重定向和转发</h2><h3 id="不使用视图解析器"><a href="#不使用视图解析器" class="headerlink" title="不使用视图解析器"></a>不使用视图解析器</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">&quot;/JumpController01&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpController01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">&quot;/forward&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String test01()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;    <span class="comment">//转发</span></span><br><span class="line">        <span class="comment">//等价于：return &quot;/index&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">&quot;/redirect&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String test02()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;   <span class="comment">//重定向</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用视图解析器"><a href="#使用视图解析器" class="headerlink" title="使用视图解析器"></a>使用视图解析器</h3><p>由于访问的是 web 目录下的 index.jsp，所以视图解析器不需要解析前缀。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">&quot;/JumpController02&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpController02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">&quot;/forward&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String test01()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;     <span class="comment">//转发</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">&quot;/redirect&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String test02()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;   <span class="comment">//重定向</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前端数据获取"><a href="#前端数据获取" class="headerlink" title="前端数据获取"></a>前端数据获取</h2><h3 id="url-的参数名与方法参数名一致"><a href="#url-的参数名与方法参数名一致" class="headerlink" title="url 的参数名与方法参数名一致"></a>url 的参数名与方法参数名一致</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/test01&quot;)</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test01(String <span class="type">name</span>)&#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 localhost:8080/项目部署名/test01?name=Guest997，控制台输出了：Guest997</p>
<h3 id="url-的参数名与方法参数名不一致"><a href="#url-的参数名与方法参数名不一致" class="headerlink" title="url 的参数名与方法参数名不一致"></a>url 的参数名与方法参数名不一致</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">&quot;/test02&quot;</span>)</span><br><span class="line">public void test02(<span class="variable">@RequestParam</span>(<span class="string">&quot;username&quot;</span>) String name)&#123;        <span class="comment">//使用 @RequestParam 注解将两边的参数名对应起来。建议不管是两边的参数名一不一致，都使用这个注解表示参数是从前端获取的。</span></span><br><span class="line">    <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 localhost:8080/项目部署名/test02?username=guest997，控制台输出了：guest997</p>
<h3 id="提交的是对象"><a href="#提交的是对象" class="headerlink" title="提交的是对象"></a>提交的是对象</h3><p>要求 url 的参数名和对象的属性名一致，否则属性值就为 null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/test03&quot;)</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test03(<span class="keyword">User</span> <span class="keyword">user</span>)&#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 localhost:8080/项目部署名/test03?id=1&amp;username=GUEST997&amp;age=18，控制台输出了：User(id=1, name=null, age=18)<br>访问 localhost:8080/项目部署名/test03?id=1&amp;name=GUEST997&amp;age=18，控制台输出了：User(id=1, name=GUEST997, age=18)</p>
<h2 id="前端数据显示"><a href="#前端数据显示" class="headerlink" title="前端数据显示"></a>前端数据显示</h2><p>使用 <strong>ModelandView、ModelMap 和 Model</strong> 可以将数据显示在前端，使用起来大同小异，故不赘述了。大部分时候使用 Model 就足够了。</p>
<p>Model 是一个接口，其实现类为 ExtendedModelMap，且这个类继承了 ModelMap 类。而 ModelMap 类则继承了 LinkedHashMap 类。</p>
<p>对比：</p>
<ul>
<li>  Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于 Model 对象的操作和理解。</li>
<li>  ModelMap 继承了 LinkedHashMap 类，除了实现自身的一些方法，同样地继承了 LinkedHashMap 类的方法和特性。</li>
<li>  ModelAndView 可以在储存数据的同时，设置返回的逻辑视图，进行视图层的跳转。</li>
</ul>
<h2 id="乱码问题解决"><a href="#乱码问题解决" class="headerlink" title="乱码问题解决"></a>乱码问题解决</h2><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;<span class="meta">%--encoding</span>.jsp--%&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%--post 方式提交的数据有可能产生乱码--%&gt;</span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/test&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">&quot;/test&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String test(Model model, String name)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 localhost:8080/项目部署名/encoding.jsp，输入中文并点击提交按钮。会发现跳转到 hello.jsp 显示的信息为乱码。<br>之前在讲 JavaWeb 中可以通过设置过滤器解决乱码问题，而 SpringMVC 中也提供了过滤器可以解决乱码问题，在 web.xml 配置文件中添加下面的代码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringMVC 编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重启 Tomcat 后，访问 localhost:8080/项目部署名/encoding.jsp，输入中文并点击提交按钮。会发现跳转到 hello.jsp 已经能够正常显示信息了。</p>
<h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><p>有些极端情况下，使用 SpringMVC 提供的过滤器也无法解决乱码问题，可以在网上找别人写的过滤器在 web.xml 文件中配置。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决 get 和 post 请求乱码的过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEncodingFilter</span> <span class="title">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">destroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//处理 response 的字符编码</span></span><br><span class="line">        HttpServletResponse myResponse=(HttpServletResponse) response;</span><br><span class="line">        myResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转型为与协议相关对象</span></span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        <span class="comment">//对 request 包装增强</span></span><br><span class="line">        HttpServletRequest myrequest = <span class="keyword">new</span> MyRequest(httpServletRequest);</span><br><span class="line">        chain.doFilter(myrequest, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义request对象，HttpServletRequest的包装类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">    <span class="comment">//是否编码的标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> hasEncode;</span><br><span class="line">    <span class="comment">//定义一个可以传入 HttpServletRequest 对象的构造函数，以便对其进行装饰</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">MyRequest</span>(<span class="params">HttpServletRequest request</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(request);        <span class="comment">//super必须写</span></span><br><span class="line">        <span class="built_in">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对需要增强方法进行覆盖</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Map</span> <span class="function"><span class="title">getParameterMap</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//先获得请求方式</span></span><br><span class="line">        <span class="built_in">String</span> method = request.getMethod();</span><br><span class="line">        <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;post&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//post 请求</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//处理 post 乱码</span></span><br><span class="line">                request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//get 请求</span></span><br><span class="line">            <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">            <span class="keyword">if</span> (!hasEncode) &#123;         <span class="comment">//确保 get 手动编码逻辑只运行一次</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">String</span> parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">                    <span class="built_in">String</span>[] values = parameterMap.get(parameterName);</span><br><span class="line">                    <span class="keyword">if</span> (values != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="comment">//处理 get 乱码</span></span><br><span class="line">                                values[i] = <span class="keyword">new</span> <span class="built_in">String</span>(values[i].getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                hasEncode = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> parameterMap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getParameterMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取一个值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getParameter</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>[]&gt; parameterMap = getParameterMap();</span><br><span class="line">        <span class="built_in">String</span>[] values = parameterMap.get(name);</span><br><span class="line">        <span class="keyword">if</span> (values == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values[<span class="number">0</span>];         <span class="comment">//取回参数的第一个值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取所有值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span>[] <span class="function"><span class="title">getParameterValues</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>[]&gt; parameterMap = getParameterMap();</span><br><span class="line">        <span class="built_in">String</span>[] values = parameterMap.get(name);</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>ml.guest997.filter.GenericEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>乱码问题需要平时多注意，在所有设置编码的地方，都统一设置为编码 UTF-8。</strong></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 详解(六)</title>
    <url>/2021/08/08/springmvc-expound06/</url>
    <content><![CDATA[<h2 id="JSON（重点）"><a href="#JSON（重点）" class="headerlink" title="JSON（重点）"></a>JSON（重点）</h2><p>JSON（JavaScript Object Notation, JS 对象标记）是一种轻量级的数据交换格式，目前使用特别广泛。采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p>
<p>之前在 JavaScript 的文章中讲过 JSON 和 JavaScript 对象互转，故不再赘述了。</p>
<p>Jackson 应该是目前比较好的 json 解析工具了，当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p>
<h3 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h3><h4 id="添加-Jackson-依赖"><a href="#添加-Jackson-依赖" class="headerlink" title="添加 Jackson 依赖"></a>添加 Jackson 依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--jackson 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.0-rc1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="输出对象测试"><a href="#输出对象测试" class="headerlink" title="输出对象测试"></a>输出对象测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/jsonTest01&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span>       <span class="comment">//将方法的返回值，以特定的格式写入到 response 的 body 区域，进而将数据返回给客户端。即不经过视图解析器处理，以特定的格式显示在客户端上。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">jsonTest01</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;测试&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//创建一个 jackson 的对象映射器，用来解析数据。</span></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//将对象解析成为 json 格式</span></span><br><span class="line">        String str = objectMapper.writeValueAsString(user);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 localhost:8080/项目部署名/jsonTest01，页面显示结果为：{“id”:1,”name”:”??”,”age”:18}<br>可以发现结果出现了乱码。SpringMVC 使用的 StringHttpMessageConverter 默认字符编码是 ISO_8859_1，这样就会导致响应头中出现 Content-Type: text/plain;charset=ISO-8859-1，即使你使用了 SpringMVC 中自带的编码过滤器也会出现乱码问题，因为在字符编码过滤器中没有设置响应的 Content-Type。</p>
<h4 id="解决乱码问题"><a href="#解决乱码问题" class="headerlink" title="解决乱码问题"></a>解决乱码问题</h4><p>想要解决这个问题，可以通过设置 @RequestMaping 注解的 produces 属性来实现。如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">RequestMapping(<span class="params">value</span> = <span class="string">&quot;/jsonTest01&quot;</span>,<span class="params">produces</span> = <span class="string">&quot;application/json;charset=utf-8&quot;</span>)</span></span><br></pre></td></tr></table></figure>

<p>这样的解决方法需要在每个请求上都添加这样的代码，非常的麻烦。<br>还可以通过 SpringMVC 配置文件统一设置 json 格式的字符编码为 UTF-8 来解决乱码问题。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--json 乱码问题配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><p>@ResponseBody 注解用于将 Controller 的方法返回的对象，通过适当的 HttpMessageConverter 转换为指定格式后，写入到 Response 对象的 body 数据区，通常用来返回 JSON 或者 XML 数据，返回 JSON 数据的情况比较多。<br>说白了，其实这个注解就是 <strong>@Controller + @ResponseBody</strong>。在前后端分离开发中，一般都使用 @RestController 注解，因为后端只要提供个接口给前端调用就行，<strong>不需要走视图解析器</strong>。</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">&quot;/jsonTest01&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> jsonTest01() throws JsonProcessingException &#123;</span><br><span class="line">        User user = <span class="keyword">new</span> <span class="type">User</span>(<span class="number">1</span>, <span class="string">&quot;测试&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//创建一个 jackson 的对象映射器，用来解析数据。</span></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> <span class="type">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">//将对象解析成为 json 格式</span></span><br><span class="line">        <span class="keyword">String</span> str = objectMapper.writeValueAsString(user);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="输出集合测试"><a href="#输出集合测试" class="headerlink" title="输出集合测试"></a>输出集合测试</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/jsonTest02&quot;)</span><br><span class="line"><span class="built_in">public</span> String jsonTest02() throws JsonProcessingException &#123;</span><br><span class="line">    <span class="keyword">User</span> user01 = <span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">1</span>, &quot;测试1&quot;, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">User</span> user02 = <span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">2</span>, &quot;测试2&quot;, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">User</span> user03 = <span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">3</span>, &quot;测试3&quot;, <span class="number">18</span>);</span><br><span class="line">    List&lt;<span class="keyword">User</span>&gt; userList = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    userList.<span class="keyword">add</span>(user01);</span><br><span class="line">    userList.<span class="keyword">add</span>(user02);</span><br><span class="line">    userList.<span class="keyword">add</span>(user03);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">new</span> ObjectMapper().writeValueAsString(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 localhost:8080/项目部署名/jsonTest02，页面显示结果为：[{“id”:1,”name”:”测试1”,”age”:18},{“id”:2,”name”:”测试2”,”age”:18},{“id”:3,”name”:”测试3”,”age”:18}]</p>
<h4 id="输出时间对象测试"><a href="#输出时间对象测试" class="headerlink" title="输出时间对象测试"></a>输出时间对象测试</h4><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">@RequestMapping(<span class="string">&quot;/jsonTest03&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> jsonTest03() throws JsonProcessingException &#123;</span><br><span class="line">    <span class="built_in">Date</span> <span class="built_in">date</span> = <span class="literal">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">new</span> ObjectMapper().writeValueAsString(<span class="built_in">date</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 localhost:8080/项目部署名/jsonTest03，页面显示结果为：1626779474559<br>可以发现结果是一个时间戳，是1970年1月1日到当前日期的毫秒数。<strong>Jackson 默认是会把时间转成 timestamps 形式。</strong>而想要以一定的格式输出，可以使用 Java 的 SimpleDateFormat 类来处理，还可以通过设置 Jackson 不使用时间戳而是使用指定日期格式来实现。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">@RequestMapping(<span class="string">&quot;/jsonTest03&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> jsonTest03() throws JsonProcessingException &#123;</span><br><span class="line">    <span class="built_in">Date</span> <span class="built_in">date</span> = <span class="literal">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    SimpleDateFormat sdf = <span class="literal">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="built_in">String</span> formatDate = sdf.format(<span class="built_in">date</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">new</span> ObjectMapper().writeValueAsString(formatDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">RequestMapping(<span class="string">&quot;/jsonTest04&quot;</span>)</span></span><br><span class="line">public String json<span class="constructor">Test04()</span> throws JsonProcessingException &#123;</span><br><span class="line">   ObjectMapper objectMapper = <span class="keyword">new</span> <span class="constructor">ObjectMapper()</span>;</span><br><span class="line">   <span class="comment">//不使用时间戳的方式</span></span><br><span class="line">   objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">   <span class="comment">//自定义日期格式对象</span></span><br><span class="line">   SimpleDateFormat sdf = <span class="keyword">new</span> <span class="constructor">SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span>;</span><br><span class="line">   <span class="comment">//指定日期格式</span></span><br><span class="line">   objectMapper.set<span class="constructor">DateFormat(<span class="params">sdf</span>)</span>;</span><br><span class="line">   return objectMapper.write<span class="constructor">ValueAsString(<span class="params">new</span> Date()</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 localhost:8080/项目部署名/jsonTest03 和 localhost:8080/项目部署名/jsonTest04，页面显示结果为：”2021-07-20 19:18:03”</p>
<h4 id="抽取为工具类"><a href="#抽取为工具类" class="headerlink" title="抽取为工具类"></a>抽取为工具类</h4><p>可以从上面多个测试可以看到，有些代码是一直重复写的，这样不利于维护，所以我们可以将这些代码抽取为工具类，在需要用到的地方直接调用即可。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">String</span> <span class="function"><span class="title">getJson</span>(<span class="params"><span class="built_in">Object</span> <span class="built_in">object</span></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//调用下面的 getJson 方法，设置日期默认格式。</span></span><br><span class="line">        <span class="keyword">return</span> getJson(<span class="built_in">object</span>,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">String</span> <span class="function"><span class="title">getJson</span>(<span class="params"><span class="built_in">Object</span> <span class="built_in">object</span>,<span class="built_in">String</span> dateFormat</span>)</span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">        objectMapper.setDateFormat(sdf);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objectMapper.writeValueAsString(<span class="built_in">object</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重写 jsonTest02 和 jsonTest04 方法</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/jsonTest02&quot;)</span><br><span class="line"><span class="built_in">public</span> String jsonTest02()&#123;</span><br><span class="line">    <span class="keyword">User</span> user01 = <span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">1</span>, &quot;测试1&quot;, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">User</span> user02 = <span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">2</span>, &quot;测试2&quot;, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">User</span> user03 = <span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">3</span>, &quot;测试3&quot;, <span class="number">18</span>);</span><br><span class="line">    List&lt;<span class="keyword">User</span>&gt; userList = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    userList.<span class="keyword">add</span>(user01);</span><br><span class="line">    userList.<span class="keyword">add</span>(user02);</span><br><span class="line">    userList.<span class="keyword">add</span>(user03);</span><br><span class="line">    <span class="keyword">return</span> JsonUtils.getJson(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/jsonTest04&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">jsonTest04</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JsonUtils.getJson(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p>fastjson.jar 是阿里开发的一款专门用于 Java 开发的包，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p>
<h4 id="导入-fastjson-依赖"><a href="#导入-fastjson-依赖" class="headerlink" title="导入 fastjson 依赖"></a>导入 fastjson 依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--fastjson 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Java-对象、JSON-对象-和-JSON-字符串-相互转换"><a href="#Java-对象、JSON-对象-和-JSON-字符串-相互转换" class="headerlink" title="Java 对象、JSON 对象 和 JSON 字符串 相互转换"></a>Java 对象、JSON 对象 和 JSON 字符串 相互转换</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">RequestMapping(<span class="string">&quot;/jsonTest05&quot;</span>)</span></span><br><span class="line">public String json<span class="constructor">Test05()</span> &#123;</span><br><span class="line">    User user01 = <span class="keyword">new</span> <span class="constructor">User(1, <span class="string">&quot;测试1&quot;</span>, 18)</span>;</span><br><span class="line">    User user02 = <span class="keyword">new</span> <span class="constructor">User(2, <span class="string">&quot;测试2&quot;</span>, 18)</span>;</span><br><span class="line">    User user03 = <span class="keyword">new</span> <span class="constructor">User(3, <span class="string">&quot;测试3&quot;</span>, 18)</span>;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">    userList.add(user01);</span><br><span class="line">    userList.add(user02);</span><br><span class="line">    userList.add(user03);</span><br><span class="line"></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;*******Java 对象转 JSON 字符串*******&quot;</span>);</span><br><span class="line">    String jsonList = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">userList</span>)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;jsonList：&quot;</span> + jsonList);</span><br><span class="line">    String user01ToJsonString = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">user01</span>)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;user01TojsonString：&quot;</span> + user01ToJsonString);</span><br><span class="line"></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;\n******Java 对象转 JSON 对象 ******&quot;</span>);</span><br><span class="line">    JSONObject user02TojsonObject = (JSONObject) <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSON(<span class="params">user02</span>)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;user02TojsonObject：&quot;</span> + user02TojsonObject);</span><br><span class="line"></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;\n******JSON 字符串转 Java 对象*******&quot;</span>);</span><br><span class="line">    User jsonStringTojavaObject = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse<span class="constructor">Object(<span class="params">user01ToJsonString</span>, User.<span class="params">class</span>)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;jsonStringTojavaObject：&quot;</span> + jsonStringTojavaObject);</span><br><span class="line"></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;\n******JSON 对象转 Java 对象 ******&quot;</span>);</span><br><span class="line">    User jsonObiectTojavaObject = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JavaObject(<span class="params">user02TojsonObject</span>, User.<span class="params">class</span>)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;jsonObiectTojavaObject：&quot;</span> + jsonObiectTojavaObject);</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 localhost:8080/项目部署名/jsonTest05，控制台输出了：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">*******Java 对象转 JSON 字符串*******</span><br><span class="line">jsonList：[&#123;<span class="string">&quot;age&quot;</span>:18,<span class="string">&quot;id&quot;</span>:1,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;测试1&quot;</span>&#125;,&#123;<span class="string">&quot;age&quot;</span>:18,<span class="string">&quot;id&quot;</span>:2,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;测试2&quot;</span>&#125;,&#123;<span class="string">&quot;age&quot;</span>:18,<span class="string">&quot;id&quot;</span>:3,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;测试3&quot;</span>&#125;]</span><br><span class="line">user01TojsonString：&#123;<span class="string">&quot;age&quot;</span>:18,<span class="string">&quot;id&quot;</span>:1,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;测试1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">******Java 对象转 JSON 对象 ******</span><br><span class="line">user02TojsonObject：&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;测试2&quot;</span>,<span class="string">&quot;id&quot;</span>:2,<span class="string">&quot;age&quot;</span>:18&#125;</span><br><span class="line"></span><br><span class="line">******JSON 字符串转 Java 对象*******</span><br><span class="line">jsonStringTojavaObject：User(<span class="attribute">id</span>=1, <span class="attribute">name</span>=测试1, <span class="attribute">age</span>=18)</span><br><span class="line"></span><br><span class="line">******JSON 对象转 Java 对象 ******</span><br><span class="line">jsonObiectTojavaObject：User(<span class="attribute">id</span>=2, <span class="attribute">name</span>=测试2, <span class="attribute">age</span>=18)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 详解(七)</title>
    <url>/2021/08/09/springmvc-expound07/</url>
    <content><![CDATA[<h2 id="SSM-整合"><a href="#SSM-整合" class="headerlink" title="SSM 整合"></a>SSM 整合</h2><p>项目源码会放在我的网盘 <strong>学习-SpringMVC</strong> 目录下的 <strong>SSM</strong> 压缩包。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>创建 ssmbuild 数据库以及 books 数据库表并插入数据。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="symbol">`ssmbuild`</span>;</span><br><span class="line">USE `ssmbuild`;</span><br><span class="line"><span class="keyword">DROP</span> TABLE <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="symbol">`books`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`books`</span> (</span><br><span class="line">    <span class="symbol">`bookID`</span> INT(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;书id&#x27;</span>,</span><br><span class="line">    <span class="symbol">`bookName`</span> VARCHAR(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;书名&#x27;</span>,</span><br><span class="line">    <span class="symbol">`bookCounts`</span> INT(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">    <span class="symbol">`detail`</span> VARCHAR(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">    <span class="keyword">KEY</span> <span class="symbol">`bookID`</span> (<span class="symbol">`bookID`</span>)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> <span class="symbol">`books`</span>(<span class="symbol">`bookID`</span>,<span class="symbol">`bookName`</span>,<span class="symbol">`bookCounts`</span>,<span class="symbol">`detail`</span>)<span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;从入门到放弃&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;MySQL&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;从删库到跑路&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;Linux&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;从进门到进牢&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>新建一个不基于模板的 maven 项目以及添加 Web 框架支持，然后添加下面的依赖以及解决配置文件无法导出或生效的问题。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--解决配置文件无法导出或生效的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单元测试依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jstl 标签依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MySQL 数据库连接依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--c3p0 数据库连接池依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MyBatis 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--整合 mybatis 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC 依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写 mybatis-config.xml 和 applicationContext.xml 配置文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-config.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>初始项目结构如下：<br><img data-src="/images/springmvc-expound07.md-0.png"></p>
<h3 id="整合-MyBatis"><a href="#整合-MyBatis" class="headerlink" title="整合 MyBatis"></a>整合 MyBatis</h3><h4 id="数据库配置文件"><a href="#数据库配置文件" class="headerlink" title="数据库配置文件"></a>数据库配置文件</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#database.properties</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/ssmbuild?useSSL=<span class="literal">true</span>&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8</span><br><span class="line"><span class="attr">jdbc.username</span>=root</span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="number">123456</span></span><br></pre></td></tr></table></figure>

<h4 id="MyBatis-核心配置文件"><a href="#MyBatis-核心配置文件" class="headerlink" title="MyBatis 核心配置文件"></a>MyBatis 核心配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-config.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--控制台日志输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;ml.guest997.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册 mapper 配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.dao.BooksMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="POJO-层"><a href="#POJO-层" class="headerlink" title="POJO 层"></a>POJO 层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Dao-层"><a href="#Dao-层" class="headerlink" title="Dao 层"></a>Dao 层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BooksMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="meta">@Param(&quot;bookID&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="meta">@Param(&quot;bookID&quot;)</span><span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span></span><br><span class="line"><span class="meta"><span class="xml">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span></span><br><span class="line"><span class="meta"><span class="xml">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;ml.guest997.dao.BooksMapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        insert into ssmbuild.books(bookName, bookCounts, detail)</span></span><br><span class="line"><span class="xml">        values (#</span><span class="template-variable">&#123;bookName&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;bookCounts&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;detail&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        delete</span></span><br><span class="line"><span class="xml">        from ssmbuild.books</span></span><br><span class="line"><span class="xml">        where bookID = #</span><span class="template-variable">&#123;bookID&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        update ssmbuild.books</span></span><br><span class="line"><span class="xml">        set bookName=#</span><span class="template-variable">&#123;bookName&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">            bookCounts=#</span><span class="template-variable">&#123;bookCounts&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">            detail=#</span><span class="template-variable">&#123;detail&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        where bookID = #</span><span class="template-variable">&#123;bookID&#125;</span><span class="xml">;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        select *</span></span><br><span class="line"><span class="xml">        from ssmbuild.books</span></span><br><span class="line"><span class="xml">        where bookID = #</span><span class="template-variable">&#123;bookID&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        select *</span></span><br><span class="line"><span class="xml">        from ssmbuild.books</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BooksService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.dao.BooksMapper;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BooksServiceImpl</span> <span class="keyword">implements</span> <span class="title">BooksService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组合的方式调 dao 层</span></span><br><span class="line">    <span class="keyword">private</span> BooksMapper booksMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setBooksMapper</span><span class="params">(BooksMapper booksMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksMapper = booksMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> booksMapper.<span class="title">addBook</span><span class="params">(book)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> booksMapper.<span class="title">deleteBookById</span><span class="params">(id)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> booksMapper.<span class="title">updateBook</span><span class="params">(book)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> booksMapper.<span class="title">queryBookById</span><span class="params">(id)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Books&gt; queryAllBook() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> booksMapper.<span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 详解(八)</title>
    <url>/2021/08/09/springmvc-expound08/</url>
    <content><![CDATA[<h2 id="SSM-整合（续）"><a href="#SSM-整合（续）" class="headerlink" title="SSM 整合（续）"></a>SSM 整合（续）</h2><h3 id="Spring-整合"><a href="#Spring-整合" class="headerlink" title="Spring 整合"></a>Spring 整合</h3><p><strong>Spring 就是一个大杂烩，一个容器。</strong></p>
<h4 id="Dao-层整合"><a href="#Dao-层整合" class="headerlink" title="Dao 层整合"></a>Dao 层整合</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--spring-dao.xml--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">       http://www.springframework.org/schema/context</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--关联数据库配置文件--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--配置 c3p0 数据库连接池--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--配置连接池属性--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;jdbc.driver&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;jdbc.username&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--c3p0 连接池的私有属性--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--关闭连接后不自动提交--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--获取连接超时时间--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--当获取连接失败重试次数--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--配置 SqlSessionFactory--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mybatis-config.xml&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--配置 SqlSession--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ml.guest997.dao&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="Service-层整合"><a href="#Service-层整合" class="headerlink" title="Service 层整合"></a>Service 层整合</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring-service.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描包注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ml.guest997.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置声明式事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SpringMVC-整合"><a href="#SpringMVC-整合" class="headerlink" title="SpringMVC 整合"></a>SpringMVC 整合</h3><h4 id="Controller-和-View-层整合"><a href="#Controller-和-View-层整合" class="headerlink" title="Controller 和 View 层整合"></a>Controller 和 View 层整合</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring-mvc.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置默认静态资源过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描包注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ml.guest997.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置 DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置 SpringMVC 编码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置 Session 过期时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring 配置文件整合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Controller-层"><a href="#Controller-层" class="headerlink" title="Controller 层"></a>Controller 层</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> ml.guest997.service.BooksService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/books&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BooksController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组合的方式调 service 层</span></span><br><span class="line">    <span class="keyword">private</span> BooksService booksService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setBooksService</span>(<span class="params">BooksService booksService</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.booksService = booksService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跳转到增加书籍页面</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">&quot;/toAddPage&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toAddPage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;addBook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加书籍</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">&quot;/addBook&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">addBook</span>(<span class="params"><span class="meta">@RequestParam</span>(<span class="string">&quot;books&quot;</span>) Books books</span>)</span> &#123;</span><br><span class="line">        booksService.addBook(books);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/books/allBooks&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除书籍</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">&quot;/deleteBook/&#123;bookID&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">deleteBook</span>(<span class="params"><span class="meta">@PathVariable</span>(<span class="string">&quot;bookID&quot;</span>) int id</span>)</span> &#123;</span><br><span class="line">        booksService.deleteBookById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/books/allBooks&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跳转到修改书籍页面</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">&quot;/toUpdatePage&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toUpdatePage</span>(<span class="params">Model model,<span class="meta">@RequestParam</span>(<span class="string">&quot;id&quot;</span>) int id</span>)</span> &#123;</span><br><span class="line">        Books book = booksService.queryBookById(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;book&quot;</span>, book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;updateBook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改书籍</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">&quot;/updateBook&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">updateBook</span>(<span class="params">Model model,<span class="meta">@RequestParam</span>(<span class="string">&quot;books&quot;</span>) Books book</span>)</span> &#123;</span><br><span class="line">        booksService.updateBook(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/books/allBooks&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部书籍</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">&quot;/allBooks&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">list</span>(<span class="params">Model model</span>)</span> &#123;</span><br><span class="line">        List&lt;Books&gt; booksList = booksService.queryAllBooks();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;booksList&quot;</span>, booksList);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;allBooks&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="View-层"><a href="#View-层" class="headerlink" title="View 层"></a>View 层</h4><p>需要注意的是修改书籍的表单，应该设置个 bookID 隐藏域，因为后端是要根据 bookID 来修改的。</p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%-</span><span class="ruby">-index.jsp-</span><span class="xml">-%&gt;</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-tag">a</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">text-decoration</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">color</span>: black;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-tag">h3</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">width</span>: <span class="number">180px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>: <span class="number">38px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">line-height</span>: <span class="number">38px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">background</span>: deepskyblue;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/books/allBooks&quot;</span>&gt;</span>点击进入书籍列表页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%--allBooks.jsp--%&gt;</span></span><br><span class="line"><span class="xml">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span></span><br><span class="line"><span class="xml">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>书籍列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--引入 Bootstrap--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">small</span>&gt;</span>书籍列表 —— 显示所有书籍<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 column&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">href</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath&#125;</span><span class="xml"><span class="tag"><span class="string">/books/toAddPage&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>书籍编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>书籍名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>书籍数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>书籍详情<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">&quot;book&quot;</span> <span class="attr">items</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;booksList&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;book.bookID&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;book.bookName&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;book.bookCounts&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;book.detail&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath&#125;</span><span class="xml"><span class="tag"><span class="string">/books/toUpdatePage?id=$</span></span></span><span class="template-variable">&#123;book.bookID&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath&#125;</span><span class="xml"><span class="tag"><span class="string">/books/deleteBook/$</span></span></span><span class="template-variable">&#123;book.bookID&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">%--addBook</span>.jsp--%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>添加书籍<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--引入 Bootstrap--&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                </span><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    </span><span class="xml"><span class="tag">&lt;<span class="name">small</span>&gt;</span>添加书籍<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/books/addBook&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        书籍名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span> <span class="attr">required</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">        书籍数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookCounts&quot;</span> <span class="attr">required</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">        书籍详情：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;detail&quot;</span> <span class="attr">required</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%--updateBook.jsp--%&gt;</span></span><br><span class="line"><span class="xml">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span></span><br><span class="line"><span class="xml">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改书籍<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--引入 Bootstrap--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">small</span>&gt;</span>修改书籍<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath&#125;</span><span class="xml"><span class="tag"><span class="string">/books/updateBook&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;book.bookID&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        书籍名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;book.bookName&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">        书籍数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookCounts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;book.bookCounts&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">        书籍详情：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;detail&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;book.detail&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 详解(九)</title>
    <url>/2021/08/10/springmvc-expound09/</url>
    <content><![CDATA[<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>Ajax：Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的 Web 应用程序的技术。当在百度的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。这就是一个使用 Ajax 技术的例子。使用 Ajax 技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的 Web 用户界面。</p>
<h3 id="伪造-Ajax"><a href="#伪造-Ajax" class="headerlink" title="伪造 Ajax"></a>伪造 Ajax</h3><p>使用 iframe 框架可以体验到类似使用 Ajax 的效果。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">    &#x27;use strict&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">LoadPage</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframePosition&#x27;</span>).src = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;url&#x27;</span>).value;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 请输入要加载的地址：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;https://guest997.ml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;LoadPage()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>加载页面位置：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframePosition&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;height: 500px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h3><p>Ajax 的核心是 XMLHttpRequest 对象(XHR)。XHR 为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。<br>通过 jQuery ajax 方法，能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON，同时能够把这些外部数据直接载入网页的被选元素中。jQuery ajax 本质就是 XMLHttpRequest，只是对它进行了封装，方便调用。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">jQuery.ajax(url, </span>settings)</span><br><span class="line">settings 部分参数：</span><br><span class="line">             url：请求地址</span><br><span class="line">            type：请求方式，GET、POST（<span class="number">1</span>.<span class="number">9</span>.<span class="number">0</span>之后用 method）</span><br><span class="line">         headers：请求头</span><br><span class="line">            data：要发送的数据</span><br><span class="line">     contentType：即将发送信息至服务器的内容编码类型(默认: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)</span><br><span class="line">           async：是否异步</span><br><span class="line">         timeout：设置请求超时时间（毫秒）</span><br><span class="line">      <span class="keyword">beforeSend：发送请求前执行的函数(全局)</span></span><br><span class="line"><span class="keyword"></span>        complete：完成之后执行的回调函数(全局)</span><br><span class="line">         success：成功之后执行的回调函数(全局)</span><br><span class="line">           error：失败之后执行的回调函数(全局)</span><br><span class="line">         accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型。</span><br><span class="line">        dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">           <span class="string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成 xml 格式</span><br><span class="line">          <span class="string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          <span class="string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入 DOM 中时，如果包含 <span class="keyword">JavaScript </span>标签，则会尝试去执行。</span><br><span class="line">        <span class="string">&quot;script&quot;</span>: 尝试将返回值当作 <span class="keyword">JavaScript </span>去执行，然后再将服务器端返回的内容转换成普通文本格式。</span><br><span class="line">          <span class="string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的 <span class="keyword">JavaScript </span>对象。</span><br><span class="line">         <span class="string">&quot;jsonp&quot;</span>: <span class="keyword">JSONP </span>格式使用 <span class="keyword">JSONP </span>形式调用函数时，如 <span class="string">&quot;myurl?callback=?&quot;</span> <span class="keyword">jQuery </span>将自动替换 ? 为正确的函数名，以执行回调函数。</span><br></pre></td></tr></table></figure>

<h3 id="接收后端数据并在前端展示"><a href="#接收后端数据并在前端展示" class="headerlink" title="接收后端数据并在前端展示"></a>接收后端数据并在前端展示</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ml.guest997.pojo.<span class="keyword">User</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> AjaxController &#123;</span><br><span class="line">    @RequestMapping(&quot;/ajaxTest&quot;)</span><br><span class="line">    <span class="built_in">public</span> List&lt;<span class="keyword">User</span>&gt; ajaxTest()&#123;</span><br><span class="line">        <span class="keyword">User</span> user01 = <span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">1</span>, &quot;测试1&quot;, <span class="number">18</span>);</span><br><span class="line">        <span class="keyword">User</span> user02 = <span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">2</span>, &quot;测试2&quot;, <span class="number">18</span>);</span><br><span class="line">        <span class="keyword">User</span> user03 = <span class="built_in">new</span> <span class="keyword">User</span>(<span class="number">3</span>, &quot;测试3&quot;, <span class="number">18</span>);</span><br><span class="line">        List&lt;<span class="keyword">User</span>&gt; userList = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userList.<span class="keyword">add</span>(user01);</span><br><span class="line">        userList.<span class="keyword">add</span>(user02);</span><br><span class="line">        userList.<span class="keyword">add</span>(user03);</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%-</span><span class="ruby">-showData.jsp-</span><span class="xml">-%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &lt;%-</span><span class="ruby">-引入 jQuery-</span><span class="xml">-%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/js/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span></span><br><span class="line"><span class="meta"><span class="javascript"><span class="xml">        &#x27;use strict&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//$(function()&#123;&#125;) 表示 DOM 树加载完毕之后执行。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $(<span class="string">&#x27;#btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;       <span class="comment">//点击按钮触发 ajax 请求</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $.post(<span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/ajaxTest&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(data);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">let</span> html = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        html += <span class="string">&#x27;&lt;tr&gt;&#x27;</span> +</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="string">&#x27;&lt;td&gt;&#x27;</span> + data[i].id + <span class="string">&#x27;&lt;td&gt;&#x27;</span> +</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="string">&#x27;&lt;td&gt;&#x27;</span> + data[i].name + <span class="string">&#x27;&lt;td&gt;&#x27;</span> +</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="string">&#x27;&lt;td&gt;&#x27;</span> + data[i].age + <span class="string">&#x27;&lt;td&gt;&#x27;</span> +</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="string">&#x27;&lt;tr&gt;&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    $(<span class="string">&#x27;#content&#x27;</span>).html(html);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取数据&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="登录提示"><a href="#登录提示" class="headerlink" title="登录提示"></a>登录提示</h3><figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%-</span><span class="ruby">-login.jsp-</span><span class="xml">-%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/js/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span></span><br><span class="line"><span class="meta"><span class="javascript"><span class="xml">        &#x27;use strict&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $.post(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">url</span>: <span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/verify&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">data</span>: &#123;<span class="string">&#x27;name&#x27;</span>: $(<span class="string">&#x27;#username&#x27;</span>).val()&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">if</span> (data.toString() === <span class="string">&#x27;用户名正确&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        $(<span class="string">&#x27;#nameInfo&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;green&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        $(<span class="string">&#x27;#nameInfo&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    $(<span class="string">&#x27;#nameInfo&#x27;</span>).html(data);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="keyword">function</span> <span class="title">v2</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $.post(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">url</span>: <span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/verify&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">data</span>: &#123;<span class="string">&#x27;password&#x27;</span>: $(<span class="string">&#x27;#pwd&#x27;</span>).val()&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">if</span> (data.toString() === <span class="string">&#x27;密码正确&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        $(<span class="string">&#x27;#pwdInfo&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;green&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        $(<span class="string">&#x27;#pwdInfo&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    $(<span class="string">&#x27;#pwdInfo&#x27;</span>).html(data);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;v1()&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;nameInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;v2()&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;pwdInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/verify&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">verify</span>(<span class="params"><span class="meta">@RequestParam</span>(<span class="string">&quot;name&quot;</span>) <span class="built_in">String</span> name,<span class="meta">@RequestParam</span>(<span class="string">&quot;password&quot;</span>) <span class="built_in">String</span> password</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">String</span> msg = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name)) &#123;</span><br><span class="line">            msg = <span class="string">&quot;用户名正确&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            msg = <span class="string">&quot;用户名错误&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (password != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">            msg = <span class="string">&quot;密码正确&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            msg = <span class="string">&quot;密码错误&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：即使不输入任何东西，失去焦点时传到后端的数据只是为空值，而不是不存在。所以 msg 是一定会被赋值的。并且由于两个 ajax 请求中都只传入了一个参数，所以传给后端时，后端接受到的肯定也是只有一个参数，另一个参数并不存在，所以两个并行的内嵌 if 判断中，其中有一个肯定是 false，这样就不可能出现 msg 多次被赋值的情况。</strong></p>
<h3 id="调用百度搜索接口"><a href="#调用百度搜索接口" class="headerlink" title="调用百度搜索接口"></a>调用百度搜索接口</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP 百度搜索<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#q</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#ul</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">520px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: -<span class="number">1px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#f60</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/js/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">        &#x27;use strict&#x27;</span></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;#q&#x27;</span>).on(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>: <span class="string">&#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=&#x27;</span> + <span class="built_in">this</span>.value + <span class="string">&#x27;&amp;cb=demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">jsonpCallback</span>: <span class="string">&#x27;demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> Ul = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> html = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//如果搜索数据存在把内容添加进去</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (data.s.length) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//隐藏掉的 ul 显示出来</span></span></span><br><span class="line"><span class="javascript">                            Ul.style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//搜索到的数据循环追加到 li 里</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.s.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                                html += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + data.s[i] + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//循环的 li 写入 ul</span></span></span><br><span class="line"><span class="javascript">                            Ul.innerHTML = html;</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;q&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 详解(十一)</title>
    <url>/2021/08/10/springmvc-expound11/</url>
    <content><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>SpringMVC 中默认没有装配 MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用文件上传功能，则需要配置 MultipartResolver。</p>
<p><strong>表单中的 enctype 属性说明：</strong></p>
<ul>
<li>  application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li>
<li>  multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li>
<li>  text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li>
</ul>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置-MultipartResolver"><a href="#配置-MultipartResolver" class="headerlink" title="配置 MultipartResolver"></a>配置 MultipartResolver</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id 属性值只能是 multipartResolver，否则会报错。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--请求的编码格式，必须和 jSP 的 pageEncoding 属性一致，以便正确读取表单的内容，默认为ISO-8859-1。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传文件大小上限，单位为字节（10485760=10M）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建文件上传页面"><a href="#创建文件上传页面" class="headerlink" title="创建文件上传页面"></a>创建文件上传页面</h3><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;<span class="meta">%--upload</span>.jsp--%&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="Controller-层"><a href="#Controller-层" class="headerlink" title="Controller 层"></a>Controller 层</h3><p>下面使用的 hash 打散算法，在之前的文章 <strong>JavaWeb 基础(十七)</strong> 中有讲到，这里就不赘述了。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public <span class="keyword">class</span> UploadController &#123;</span><br><span class="line">    @<span class="constructor">RequestMapping(<span class="string">&quot;/upload&quot;</span>)</span></span><br><span class="line">    <span class="comment">//批量上传设置 CommonsMultipartFile 对象为数组即可</span></span><br><span class="line">    public String file<span class="constructor">Upload(@RequestParam(<span class="string">&quot;file&quot;</span>)</span> CommonsMultipartFile file, HttpServletRequest request) throws IOException &#123;</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        String fileName = file.get<span class="constructor">OriginalFilename()</span>;</span><br><span class="line">        <span class="comment">//如果文件名为空，直接回到首页。</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(fileName)) &#123;</span><br><span class="line">            return <span class="string">&quot;文件上传失败！文件名为空！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文件的保存路径，先不生成目录，后面需要用 hash 算法打散。</span></span><br><span class="line">        String uploadPath = request.get<span class="constructor">ServletContext()</span>.get<span class="constructor">RealPath(<span class="string">&quot;WEB-INF/upload&quot;</span>)</span>;</span><br><span class="line">        <span class="comment">//随机生成一个唯一识别的通用码 - UUID，保证文件名唯一。</span></span><br><span class="line">        String saveFileName = <span class="module-access"><span class="module"><span class="identifier">UUID</span>.</span></span>random<span class="constructor">UUID()</span> + <span class="string">&quot;_&quot;</span> + fileName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//目录处理</span></span><br><span class="line">        <span class="comment">//hash 打散算法，打散目录。</span></span><br><span class="line">        <span class="built_in">int</span> hCode = fileName.hash<span class="constructor">Code()</span>;    <span class="comment">//获取文件名的 hashCode</span></span><br><span class="line">        <span class="comment">//获取 hCode 的低4位，并转换成16进制字符串</span></span><br><span class="line">        String dir1 = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span><span class="keyword">to</span><span class="constructor">HexString(<span class="params">hCode</span> &amp; 0xF)</span>;</span><br><span class="line">        <span class="comment">//获取 hCode 的低5~8位，并转换成16进制字符串</span></span><br><span class="line">        String dir2 = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span><span class="keyword">to</span><span class="constructor">HexString(<span class="params">hCode</span> &gt;&gt;&gt; 4 &amp; 0xF)</span>;</span><br><span class="line">        <span class="comment">//与文件保存目录连接成完整路径</span></span><br><span class="line">        uploadPath = uploadPath + <span class="string">&quot;/&quot;</span> + dir1 + <span class="string">&quot;/&quot;</span> + dir2;</span><br><span class="line">        <span class="comment">//因为这个路径可能不存在，所以创建成 File 对象，再创建目录链，确保目录在保存文件之前已经存在。</span></span><br><span class="line">        File saveFilePath = <span class="keyword">new</span> <span class="constructor">File(<span class="params">uploadPath</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (!saveFilePath.exists<span class="literal">()</span>)&#123;</span><br><span class="line">            saveFilePath.mkdirs<span class="literal">()</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过 CommonsMultipartFile 的 transferTo 方法直接写文件</span></span><br><span class="line">        file.transfer<span class="constructor">To(<span class="params">new</span> File(<span class="params">uploadPath</span> +<span class="string">&quot;/&quot;</span>+ <span class="params">saveFileName</span>)</span>);</span><br><span class="line"></span><br><span class="line">        return <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问 localhost:8080/项目部署名/upload.jsp，上传一个文件，显示 <strong>文件上传成功！</strong>。去到项目编译后文件夹下的 <strong>/WEB-INF/upload</strong> 目录，会看到使用 hash 打散算法生成的目录，并在目录下找到了文件。</p>
<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><h3 id="创建文件下载页面"><a href="#创建文件下载页面" class="headerlink" title="创建文件下载页面"></a>创建文件下载页面</h3><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;<span class="meta">%--download</span>.jsp--%&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/download&quot;</span>&gt;</span>下载文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="Controller-层-1"><a href="#Controller-层-1" class="headerlink" title="Controller 层"></a>Controller 层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">downloads</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//文件地址</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/upload&quot;</span>);</span><br><span class="line">        String fileName = <span class="string">&quot;test.jpg&quot;</span>;</span><br><span class="line">        <span class="comment">//设置 response 响应头</span></span><br><span class="line">        response.reset();       <span class="comment">//设置页面不缓存，清空 buffer。</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);         <span class="comment">//字符编码</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">        <span class="comment">//设置响应头</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">                <span class="string">&quot;attachment;fileName=&quot;</span> + URLEncoder.encode(fileName, StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(path, fileName);</span><br><span class="line">        <span class="comment">//输入流</span></span><br><span class="line">        InputStream input = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="comment">//输出流</span></span><br><span class="line">        OutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//写出操作</span></span><br><span class="line">        <span class="keyword">while</span> ((index = input.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>将 test.jpg 文件放到项目编译后文件夹下的 <strong>/WEB-INF/upload</strong> 目录，重启 Tomcat。访问 localhost:8080/项目部署名/download.jsp，点击 <strong>下载文件</strong> 链接，直接开始下载文件，下载完后能够正常打开文件。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC 详解(十)</title>
    <url>/2021/08/10/springmvc-expound10/</url>
    <content><![CDATA[<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>SpringMVC 的处理器拦截器类似于 Servlet 开发中的过滤器 Filter，用于对 <strong>Controller</strong> 进行预处理和后处理。<strong>过滤器与拦截器的区别</strong>：拦截器是 AOP 思想的具体应用。</p>
<ul>
<li>  过滤器：在 url-pattern 中配置了 /* 之后，会对所有要访问的资源进行拦截。</li>
<li>  拦截器：拦截器只会拦截访问的 Controller 方法， 如果访问的是 jsp/html/css/image/js 是不会进行拦截的。</li>
</ul>
<h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><h4 id="Controller-层"><a href="#Controller-层" class="headerlink" title="Controller 层"></a>Controller 层</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">&quot;/interceptorTest&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String interceptorTest()&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;请求执行。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="拦截器-1"><a href="#拦截器-1" class="headerlink" title="拦截器"></a>拦截器</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package ml.guest997.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> MyInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在请求处理方法之前执行</span></span><br><span class="line">    <span class="comment">//return false; 表示不执行下个拦截器，就是不放行。</span></span><br><span class="line">    @Override</span><br><span class="line">    public boolean pre<span class="constructor">Handle(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>, Object <span class="params">handler</span>)</span> throws Exception &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;------------处理前------------&quot;</span>);</span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">HandlerInterceptor</span>.</span></span>super.pre<span class="constructor">Handle(<span class="params">request</span>, <span class="params">response</span>, <span class="params">handler</span>)</span>;</span><br><span class="line">        <span class="comment">//return false;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在请求处理方法执行之后执行，做日志工作。</span></span><br><span class="line">    @Override</span><br><span class="line">    public void post<span class="constructor">Handle(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>, Object <span class="params">handler</span>, ModelAndView <span class="params">modelAndView</span>)</span> throws Exception &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;------------处理后------------&quot;</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">HandlerInterceptor</span>.</span></span>super.post<span class="constructor">Handle(<span class="params">request</span>, <span class="params">response</span>, <span class="params">handler</span>, <span class="params">modelAndView</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在 dispatcherServlet 处理后执行，做清理工作。</span></span><br><span class="line">    @Override</span><br><span class="line">    public void after<span class="constructor">Completion(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>, Object <span class="params">handler</span>, Exception <span class="params">ex</span>)</span> throws Exception &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;------------清理------------&quot;</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">HandlerInterceptor</span>.</span></span>super.after<span class="constructor">Completion(<span class="params">request</span>, <span class="params">response</span>, <span class="params">handler</span>, <span class="params">ex</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/**：拦截当前路径及其所有子路径</span></span><br><span class="line"><span class="comment">        /admin/*：拦截的是 /admin/add 等等这种，/admin/add/user 不会被拦截。</span></span><br><span class="line"><span class="comment">        /admin/**：拦截的是 /admin/ 下的所有--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.config.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>访问 localhost:8080/项目部署名/interceptorTest，控制台输出了：</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line">--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">处理前</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="comment">请求执行。</span></span><br><span class="line">--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">处理后</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line">--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">清理</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br></pre></td></tr></table></figure>

<h3 id="验证用户是否登录"><a href="#验证用户是否登录" class="headerlink" title="验证用户是否登录"></a>验证用户是否登录</h3><h4 id="创建三个页面，分别是索引页、登录页和首页。"><a href="#创建三个页面，分别是索引页、登录页和首页。" class="headerlink" title="创建三个页面，分别是索引页、登录页和首页。"></a>创建三个页面，分别是索引页、登录页和首页。</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span></span><br><span class="line"><span class="xml">&lt;%--index.jsp--%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$Title$<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath&#125;</span><span class="xml"><span class="tag"><span class="string">/user/toLoginPage&quot;</span>&gt;</span>进入登录页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath&#125;</span><span class="xml"><span class="tag"><span class="string">/user/toSuccessPage&quot;</span>&gt;</span>进入首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;<span class="meta">%--login</span>.jsp--%&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：</span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：</span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;<span class="meta">%--success</span>.jsp--%&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="Controller-层-1"><a href="#Controller-层-1" class="headerlink" title="Controller 层"></a>Controller 层</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package ml.guest997.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/user&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggedController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">&quot;/toLoginPage&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toLoginPage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">&quot;/toSuccessPage&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">toSuccessPage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">login</span>(<span class="params">HttpSession httpSession,<span class="meta">@RequestParam</span>(<span class="string">&quot;username&quot;</span>) <span class="built_in">String</span> username,<span class="meta">@RequestParam</span>(<span class="string">&quot;password&quot;</span>) <span class="built_in">String</span> password</span>)</span> &#123;</span><br><span class="line">        httpSession.setAttribute(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">        httpSession.setAttribute(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">logout</span>(<span class="params">HttpSession httpSession</span>)</span>&#123;</span><br><span class="line">        httpSession.removeAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        httpSession.removeAttribute(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="拦截器-2"><a href="#拦截器-2" class="headerlink" title="拦截器"></a>拦截器</h4><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ml.guest997.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggedInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//登录页面放行，否则会连登录页面也进不去。</span></span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//用户已登录就放行</span></span><br><span class="line">        <span class="keyword">if</span> (session.getAttribute(<span class="string">&quot;username&quot;</span>) != <span class="keyword">null</span> &amp;&amp; session.getAttribute(<span class="string">&quot;password&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户没有登陆跳就转到登录页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置用户登录拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;ml.guest997.config.LoggedInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>访问 localhost:8080 进入到索引页，点击 <strong>进入首页</strong> 链接，会发现跳转到了登录页。登录后，会跳转到首页。返回到索引页，点击 <strong>进入首页</strong> 链接，发现能正常进入。点击 <strong>注销</strong> 链接，会跳转到登录页，返回到索引页，点击 <strong>进入首页</strong> 链接，发现会跳转到登录页。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>为 blog 在复制内容时添加一个简约的版权弹窗</title>
    <url>/2021/02/08/sweetalert/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>SweetAlert 可以替代 Javascript 原生的 alert 和 confirm 等函数呈现的弹窗，它将弹窗进行了美化，并且允许自定义，支持设置弹窗标题、提示类型、内容展示图片、确认取消按钮文本、点击后回调函数等。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>添加以下代码到当前主题的 <strong>functions.php</strong> 文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">function zm_copyright_tips() &#123;</span><br><span class="line">echo &#x27;<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external nofollow&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/sweetalert/1.1.3/sweetalert.min.css&quot;</span> &gt;</span>&#x27;;</span><br><span class="line">echo &#x27;<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/sweetalert/1.1.3/sweetalert.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;;</span><br><span class="line">echo &#x27;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.body.oncopy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; swal(<span class="string">&quot;复制成功！&quot;</span>, <span class="string">&quot;转载请务必保留原文链接，申明来源，谢谢合作！！&quot;</span>,<span class="string">&quot;success&quot;</span>);&#125;;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">add_action( &#x27;wp_footer&#x27;, &#x27;zm_copyright_tips&#x27;, 100 );</span><br></pre></td></tr></table></figure>

<p>如果发现加载 <strong>sweetalert.min.css</strong> 和 <strong>sweetalert.min.js</strong> 文件缓慢，可以将文件下载下来放到绝对路径下，将 <strong>herf</strong> 和 <strong>src</strong> 属性改成上面的两个文件名即可。</p>
<p><img data-src="/images/sweetalert.md-0.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>SweetAlert 还有很多玩法，有兴趣的可到其官方中文网下了解一下。<a href="https://www.sweetalert.cn/">https://www.sweetalert.cn/</a></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>解锁网易云音乐客户端变灰歌曲</title>
    <url>/2021/01/28/unblockneteasemusic/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> UnblockNeteaseMusic - 解锁网易云音乐客户端变灰歌曲</li>
<li> 使用 QQ / 虾米 / 百度 / 酷狗 / 酷我 / 咪咕 / JOOX 音源替换变灰歌曲链接 (默认仅启用一、五、六)</li>
<li> 为请求增加 X-Real-IP 参数解锁海外限制，支持指定网易云服务器 IP，支持设置上游 HTTP / HTTPS 代理。</li>
<li> 完整的流量代理功能 (HTTP / HTTPS)，可直接作为系统代理。 (同时支持 PAC)</li>
</ol>
<h2 id="正文：（仅讲解-Windows-平台解锁过程，其它平台的请查看下方备注）"><a href="#正文：（仅讲解-Windows-平台解锁过程，其它平台的请查看下方备注）" class="headerlink" title="正文：（仅讲解 Windows 平台解锁过程，其它平台的请查看下方备注）"></a>正文：（仅讲解 Windows 平台解锁过程，其它平台的请查看下方备注）</h2><ul>
<li>点击下方链接进入 Node.js 官网，下载并安装 Node.js。<br>  <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></li>
<li>点击下方链接进入 UnblockNeteaseMusic 项目地址。<br>  <a href="https://github.com/nondanee/UnblockNeteaseMusic">https://github.com/nondanee/UnblockNeteaseMusic</a></li>
<li>  点击 <strong>Code</strong> 项下的 <strong>Download ZIP</strong>，下载源码并解压到 C 盘根目录下。（也可到我的网盘下载）</li>
<li>  运行 cmd，输入：<strong>ping music.163.com</strong>，复制 <strong>IP</strong> 地址。</li>
<li>  在解压出来的文件夹下创建 <strong>music.bat</strong> 文件，代码如下：</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd C:UnblockNeteaseMusic-<span class="keyword">master</span></span><br><span class="line"><span class="title">node</span> app.js -p <span class="number">1234</span> -f 你的 IP 地址</span><br></pre></td></tr></table></figure>

<ul>
<li>  设置网易云音乐客户端的 http 代理为 <strong>服务器：127.0.0.1，端口：1234</strong></li>
<li>  在解压出来的文件夹下创建 <strong>music.vbs</strong> 文件，代码如下：</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">Set</span> ws = CreateObject(<span class="string">&quot;Wscript.Shell&quot;</span>)</span><br><span class="line">ws.<span class="builtin-name">run</span> <span class="string">&quot;cmd /c music.bat&quot;</span>,vbhide</span><br></pre></td></tr></table></figure>

<ul>
<li>  发送 <strong>music.vbs</strong> 文件的快捷方式到桌面上，并将它移动到自启动的文件夹下。</li>
<li>重启电脑。（如发现重启电脑之后，网易云音乐客户端提示无网络连接，则手动运行 <strong>music.vbs</strong> 文件，再重启客户端即可）<br>  <img data-src="/images/unblockneteasemusic.md-0.png"></li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>此项目支持全平台的客户端，有兴趣的可到项目下 <strong>README.md</strong> 文件了解一下。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>大前端基础(一)</title>
    <url>/2021/08/11/universalfrondend-basis01/</url>
    <content><![CDATA[<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与 PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。 简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。底层架构是是 javascript，文件后缀是 .js。</p>
<h3 id="HelloNode-js"><a href="#HelloNode-js" class="headerlink" title="HelloNode.js"></a>HelloNode.js</h3><p>使用 vscode 新建一个文件，名为：helloNodejs.js。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="string">&#x27;HelloNode.js!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>保存后，在终端输入下面的命令运行文件。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">helloNodejs</span>.js      <span class="comment">#后缀可以省去，即使用 node helloNodejs 命令运行文件也是没问题的。</span></span><br><span class="line"><span class="comment">#结果为 HelloNode.js!</span></span><br></pre></td></tr></table></figure>

<h3 id="实现请求响应"><a href="#实现请求响应" class="headerlink" title="实现请求响应"></a>实现请求响应</h3><p>类似于 Tomcat 服务器的 Servlet。新建一个文件，名为：httpserver.js。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>导入 http 模块</span><br><span class="line">const http = require(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="regexp">//</span>创建 httpserver 服务</span><br><span class="line">http.createServer(<span class="keyword">function</span> (request, response) &#123;</span><br><span class="line">    <span class="regexp">//</span>发送响应头(状态码,响应头属性)</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span> &#125;);</span><br><span class="line">    <span class="regexp">//</span>结束响应，告诉客户端所有消息已经发送。当所有要返回的内容发送完毕时，该函数必须被调用一次。否则客户端将永远处于等待状态。</span><br><span class="line">    response.end(<span class="string">&#x27;&lt;strong&gt;helloserver!&lt;/strong&#x27;</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line">console.log(<span class="string">&#x27;服务启动成功。&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>保存后，在终端输入下面的命令运行文件。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">httpserver</span>.js</span><br><span class="line"><span class="comment">#结果为 服务启动成功。</span></span><br></pre></td></tr></table></figure>

<p>在浏览器中输入：localhost:8888 查看服务成功运行，并输出 html 页面。在终端按住 crtl+c 停止服务。</p>
<h3 id="操作-MySQL-数据库"><a href="#操作-MySQL-数据库" class="headerlink" title="操作 MySQL 数据库"></a>操作 MySQL 数据库</h3><p>在终端输入下面的命令安装第三方模块。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> mysql</span><br></pre></td></tr></table></figure>

<p>新建数据库 testdb 和 数据库表 kss_user 表。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="symbol">`testdb`</span>;</span><br><span class="line">USE `testdb`;</span><br><span class="line"><span class="keyword">DROP</span> TABLE <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="symbol">`kss_user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`kss_user`</span> (</span><br><span class="line">    <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="symbol">`name`</span> varchar(<span class="number">255</span>) DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="symbol">`kss_user`</span>(<span class="symbol">`id`</span>,<span class="symbol">`name`</span>) <span class="keyword">values</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Guest997&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;广东&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>新建一个文件，名为：db.js。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入第三方模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="comment">//创建 mysql 的 Connection 对象</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">post</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;testdb&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//连接</span></span><br><span class="line">connection.connect();</span><br><span class="line"><span class="comment">//执行 crud</span></span><br><span class="line">connection.query(<span class="string">&#x27;select * from kss_user&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fileds</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;results = &#x27;</span>, results);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure>

<p>保存后，在终端输入下面的命令运行文件。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">db</span>.js</span><br><span class="line"><span class="comment">#结果为 results = [RowDataPacket &#123; id: 1, name: &#x27;Guest997&#x27; &#125; , RowDataPacket &#123; id: 2, name: &#x27;广东&#x27; &#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><p><strong>如果想开发更复杂的基于 Node.js 的应用程序后台，需要进一步学习 Node.js 的 Web 开发相关框架 express、art-template、koa 等。</strong></p>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="let、const-和-var"><a href="#let、const-和-var" class="headerlink" title="let、const 和 var"></a>let、const 和 var</h3><p>var 的变量穿透以及使用 var 定义的常量能够修改的问题，在之前的 <strong>JavaScript 基础(一)</strong> 中有讲到，这里就不赘述了。需要注意的是：</p>
<ul>
<li>  在实际开发和生产中，如果是小程序， uniapp 或者一些脚手架中，可以大胆地去使用 let 和 const。</li>
<li>  但是如果你是 Web 开发。建议大家还是使用 var，因为在一些低版本的浏览器还是不支持 let 和 const。</li>
</ul>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>新建一个 html 文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">        &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//以前的字符串拼接</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = <span class="string">&#x27;es6&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span> + name);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//es6 的字符串拼接</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = <span class="string">&#x27;Guest997&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> age = <span class="string">&#x27;18&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">`我的名字叫<span class="subst">$&#123;username&#125;</span>，年龄是<span class="subst">$&#123;age&#125;</span>。`</span>);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制台输出了：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">helloes6</span></span><br><span class="line">我的名字叫Guest997，年龄是<span class="number">18</span>。</span><br></pre></td></tr></table></figure>

<h3 id="函数默认参数值"><a href="#函数默认参数值" class="headerlink" title="函数默认参数值"></a>函数默认参数值</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">        &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a = <span class="number">1</span>, b = <span class="number">2</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> a + b;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sum());</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sum(<span class="number">6</span>,<span class="number">8</span>));</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制台输出了：3 14</p>
<h3 id="箭头函数（重点）"><a href="#箭头函数（重点）" class="headerlink" title="箭头函数（重点）"></a>箭头函数（重点）</h3><p>在未来的项目开发中：比如小程序和 uniapp，一些常见的脚手架会大量使用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">        &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//声明式定义函数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">test01</span>(<span class="params"></span>) </span>&#123; &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//表达式定义函数</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> test02 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//箭头函数定义</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> test03 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(a + b) &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> test04 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> test05 = <span class="function"><span class="params">a</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(a) &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> test06 = <span class="function"><span class="params">a</span> =&gt;</span> a;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//调用箭头函数</span></span></span><br><span class="line"><span class="javascript">        test03(<span class="number">1</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(test04(<span class="number">1</span>, <span class="number">2</span>));</span></span><br><span class="line"><span class="javascript">        test05(<span class="number">6</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(test06(<span class="number">9</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//应用</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> newArr01 = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> obj * <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> newArr02 = arr.map(<span class="function"><span class="params">obj</span> =&gt;</span> obj * <span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//调用函数</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(newArr01);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(newArr02);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制台输出了：3 14</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">3</span></span><br><span class="line"><span class="selector-tag">3</span></span><br><span class="line"><span class="selector-tag">6</span></span><br><span class="line"><span class="selector-tag">9</span></span><br><span class="line">(<span class="number">4</span>)<span class="selector-tag">&amp;</span><span class="selector-tag">nbsp</span>;<span class="selector-attr">[2, 4, 6, 8]</span></span><br><span class="line">(<span class="number">4</span>)<span class="selector-tag">&amp;</span><span class="selector-tag">nbsp</span>;<span class="selector-attr">[2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>

<p>可以从上面看出箭头函数其实就是简化函数的定义，具体规则如下：</p>
<ol>
<li> 去掉 function 关键字</li>
<li> 在括号后面加箭头</li>
<li> 如果参数只有一个，可以把括号省去。</li>
<li> 如果逻辑代码仅有 return 的语句可以直接省去其它部分。</li>
</ol>
<h3 id="对象初始化简写"><a href="#对象初始化简写" class="headerlink" title="对象初始化简写"></a>对象初始化简写</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">        &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> info01 = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">title</span>: <span class="string">&#x27;Guest997&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">link</span>: <span class="string">&#x27;https://guest997.ml&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">go</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;信息一。&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(info01.title);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(info01.link);</span></span><br><span class="line"><span class="javascript">        info01.go();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//简写</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> title = <span class="string">&#x27;Guest997&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> link = <span class="string">&#x27;https://guest997.ml&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> info02 = &#123;</span></span><br><span class="line"><span class="javascript">            title,</span></span><br><span class="line"><span class="javascript">            link,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">go</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;信息二。&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(info02.title);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(info02.link);</span></span><br><span class="line"><span class="javascript">        info02.go();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//应用</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//&lt;button onclick=&quot;login()&quot;&gt;登录&lt;/button&gt;</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username = $(<span class="string">&#x27;#username&#x27;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> password = $(<span class="string">&#x27;#password&#x27;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//异步请求</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&#x27;https://guest997.ml&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123; username, password &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">success</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;登录成功！&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制台输出了：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Guest997</span><br><span class="line">https:<span class="regexp">//gu</span>est997.ml</span><br><span class="line">信息一。</span><br><span class="line">Guest997</span><br><span class="line">https:<span class="regexp">//gu</span>est997.ml</span><br><span class="line">信息二。</span><br></pre></td></tr></table></figure>

<h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>快捷获取对象属性和函数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">        &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> title = <span class="string">&#x27;Guest997&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> link = <span class="string">&#x27;https://guest997.ml&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> info02 = &#123;</span></span><br><span class="line"><span class="javascript">            title,</span></span><br><span class="line"><span class="javascript">            link,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">go</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;信息二。&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//传统获取对象属性和函数有两种方式，分别是 . 和 []，至于两种方式的区别，可以通过后面的链接了解：https://www.jianshu.com/p/42390e4d8416</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//传统获取方式一</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(info02.title);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(info02.link);</span></span><br><span class="line"><span class="javascript">        info02.go();</span></span><br><span class="line"><span class="javascript">        <span class="comment">//传统获取方式二</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(info02[<span class="string">&#x27;title&#x27;</span>]);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(info02[<span class="string">&#x27;link&#x27;</span>]);</span></span><br><span class="line"><span class="javascript">        info02[<span class="string">&#x27;go&#x27;</span>]();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//对象解构获取</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> &#123; title, link, go &#125; = info02;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(title);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(link);</span></span><br><span class="line"><span class="javascript">        go();</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制台输出了：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Guest997</span><br><span class="line">https:<span class="regexp">//gu</span>est997.ml</span><br><span class="line">信息二。</span><br><span class="line">Guest997</span><br><span class="line">https:<span class="regexp">//gu</span>est997.ml</span><br><span class="line">信息二。</span><br><span class="line">Guest997</span><br><span class="line">https:<span class="regexp">//gu</span>est997.ml</span><br><span class="line">信息二。</span><br></pre></td></tr></table></figure>

<h3 id="传播操作符"><a href="#传播操作符" class="headerlink" title="传播操作符"></a>传播操作符</h3><p>把一个对象的属性传播到另外一个对象中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">        &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> info = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;Guest997&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">link</span>: <span class="string">&#x27;https://guest997.ml&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">go</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;测试。&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//解构</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> &#123; name, age, ...info02 &#125; = info;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(name);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(age);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(info02);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//应用</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//后端传回数据：&#123;users:[&#123;&#125;,&#123;&#125;],pages,pageNo:10,pageSize:6&#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//异步请求</span></span></span><br><span class="line"><span class="javascript">        $.ajax(<span class="string">&#x27;/user/search&#x27;</span>,<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//data = &#123;users:[&#123;&#125;,&#123;&#125;],pages,pageNo:10,pageSize:6&#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//将用户拿出来</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> userPage = &#123;<span class="attr">users</span>:[&#123;&#125;,&#123;&#125;],pages,<span class="attr">pageNo</span>:<span class="number">10</span>,<span class="attr">pageSize</span>:<span class="number">6</span>&#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> &#123;users,...userPage02&#125; = userPage;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制台输出的结果如下图：<br><img data-src="/images/universalfrondend-basis01.md-0.png"></p>
<p>可以从图中看出 info02 对象被赋予了解构时没被定义的属性和函数。</p>
<h3 id="数组-map-函数"><a href="#数组-map-函数" class="headerlink" title="数组 map 函数"></a>数组 map 函数</h3><p>通过一个函数循环处理数组中的每一个元素，并放入到一个新数组中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">        &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span></span><br><span class="line"><span class="javascript">        <span class="comment">//将数组中的每个数字乘以2</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//传统方式</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> newArr = [];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            newArr.push(arr[i] * <span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(newArr);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//使用 map 函数</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> newArr02 = arr.map(<span class="function"><span class="params">obj</span> =&gt;</span> obj * <span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(newArr02);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//应用</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> users = [&#123; <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">name</span>: <span class="string">&#x27;Guest997&#x27;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">name</span>: <span class="string">&#x27;guest997&#x27;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">99</span>, <span class="attr">name</span>: <span class="string">&#x27;GUEST997&#x27;</span> &#125;];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> newUsers = users.map(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            obj.age += <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> obj;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(newUsers);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制台输出的结果如下图：<br><img data-src="/images/universalfrondend-basis01.md-1.png"></p>
<h3 id="数组-reduce-函数"><a href="#数组-reduce-函数" class="headerlink" title="数组 reduce 函数"></a>数组 reduce 函数</h3><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span></span><br><span class="line"><span class="meta"><span class="javascript"><span class="xml">        &#x27;use strict&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//reduce(function()</span></span></span><span class="template-variable">&#123;&#125;</span><span class="xml"><span class="javascript">,初始值（可选）)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> res = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(res)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>控制台输出了：21。</p>
<p>reduce() 解释：</p>
<ul>
<li>  第一个参数是上一次 reduce 处理的结果</li>
<li>  第二个参数是数组中要处理的下一个元素</li>
<li>  reduce() 会从左到右依次把数组中的元素用 reduce 进行处理，并把处理的结果作为下次 reduce 的第一个参数。如果是第一次，会把前两个元素作为计算参数。或者把用户指定的初始值作为起始参数。</li>
</ul>
<h3 id="备注：-1"><a href="#备注：-1" class="headerlink" title="备注："></a>备注：</h3><p><strong>ES6 的新特性肯定不止上面这些，上面这些只是一些常用的，还需要更加深入地去学习。并且上面讲到的所有代码都是能够直接复制进 nodejs 文件中的，是能够正常运行的。</strong></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>universalfrondend</tag>
      </tags>
  </entry>
  <entry>
    <title>大前端基础(二)</title>
    <url>/2021/08/11/universalfrondend-basis02/</url>
    <content><![CDATA[<h2 id="NPM-包管理器"><a href="#NPM-包管理器" class="headerlink" title="NPM 包管理器"></a>NPM 包管理器</h2><p>NPM（Node Package Manager）是 Node.js 包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的，相当于前端的 Maven 。</p>
<h3 id="构建-Node-js-项目"><a href="#构建-Node-js-项目" class="headerlink" title="构建 Node.js 项目"></a>构建 Node.js 项目</h3><p>新建一个空文件夹并在 vscode 中打开。在终端下输入下面的命令初始化项目。</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line"><span class="meta">#按照提示输入相关信息，如果是用默认值直接回车即可。</span></span><br><span class="line"><span class="meta">#package name：项目名称</span></span><br><span class="line"><span class="meta">#version：项目版本号</span></span><br><span class="line"><span class="meta">#description：项目描述</span></span><br><span class="line"><span class="meta">#entry point：js 入口</span></span><br><span class="line"><span class="meta">#test command：项目启动的时候要用什么命令来执行脚本文件。</span></span><br><span class="line"><span class="meta">#git repository：项目存放仓库地址</span></span><br><span class="line"><span class="meta">#keywords：数组关键词，便于用户搜索到我们的项目。</span></span><br><span class="line"><span class="meta">#author：项目作者</span></span><br><span class="line"><span class="meta">#license：授权协议</span></span><br></pre></td></tr></table></figure>

<p>最后会生成 package.json 配置文件，相当于 maven 的 pom.xml 文件。</p>
<p>还可以使用下面的命令直接生成 package.json 配置文件。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> init -y</span><br></pre></td></tr></table></figure>

<h3 id="修改-NPM-镜像"><a href="#修改-NPM-镜像" class="headerlink" title="修改 NPM 镜像"></a>修改 NPM 镜像</h3><p>NPM 官方管理的包都是从 <a href="http://npmjs.com/">http://npmjs.com</a> 下载的，但是这个网站在国内访问速度很慢。推荐使用淘宝 NPM 镜像：<a href="http://npm.taobao.org/">http://npm.taobao.org</a> ，淘宝 NPM 镜像是一个完整 npmjs.com 镜像，同步频率目前为10分钟一次，以保证尽量与官方服务同步。</p>
<p>使用下面的命令设置镜像地址。</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> registry <span class="comment">https:</span>//<span class="comment">registry.npm.taobao.org</span></span><br><span class="line">#查看 npm 配置信息</span><br><span class="line">npm <span class="comment">config list</span></span><br><span class="line">#查看 cnpm 版本</span><br><span class="line">cnpm <span class="comment">-v</span></span><br></pre></td></tr></table></figure>

<h3 id="模块安装和使用"><a href="#模块安装和使用" class="headerlink" title="模块安装和使用"></a>模块安装和使用</h3><p>使用下面的两个命令安装模块。模块会被放入到项目的 node_modules 文件夹中</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> 模块名 模块名 模块名        <span class="comment">#可以同时安装多个模块</span></span><br><span class="line">npm i 模块名 模块名 模块名</span><br><span class="line">cnpm <span class="keyword">install</span> 模块名 模块名 模块名</span><br><span class="line">cnpm i 模块名 模块名 模块名</span><br></pre></td></tr></table></figure>

<p>使用 require 关键词就能在 nodejs 文件中导入模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 常量名 = <span class="built_in">require</span>(<span class="string">&#x27;模块名&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="模块和-package-json"><a href="#模块和-package-json" class="headerlink" title="模块和 package.json"></a>模块和 package.json</h3><p>模块的安装会记录在 package.json 配置文件中，如下：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;^3.6.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mysql&quot;</span>: <span class="string">&quot;^2.18.1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而记录的作用就是能够被其它项目使用。如果别的项目需要用到原项目中的模块，就可以将原项目中的 package.json 文件直接复制到项目文件夹下，并运行 npm install 命令，就可以直接将 package.json 配置文件中的所有模块自动下载到别的项目下。这样就能避免重复下载模块，方便集成第三方模块。</p>
<p>至于为什么不直接复制 node_modules 文件夹到别的项目下，这种做法是没问题的，但是如果下载的模块依赖过多、文件过大，复制过去就会很慢。</p>
<h3 id="模块更新和卸载"><a href="#模块更新和卸载" class="headerlink" title="模块更新和卸载"></a>模块更新和卸载</h3><p>使用下面的命令更新模块。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> update 模块名 模块名        <span class="comment">#更新到最新版本</span></span><br></pre></td></tr></table></figure>

<p>使用下面的命令卸载模块。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> uninstall 模块名 模块名</span><br></pre></td></tr></table></figure>

<h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>ES6 的某些高级语法在浏览器环境甚至是 Node.js 环境中无法执行。Babel 是一个广泛使用的转码器，可以将 ES6 代码转为 ES5 代码，从而在现有环境中执行。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在终端下输入下面的命令安装 babel-cli，用于命令行转码。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">cnpm <span class="keyword">install </span>-g <span class="keyword">babel-cli</span></span><br><span class="line"><span class="keyword"></span><span class="comment">#查看是否安装成功</span></span><br><span class="line"><span class="keyword">babel </span>--version</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>新建 babel 文件夹并在 vscode 中打开。</p>
<p>在终端下输入下面的命令初始化项目。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> init -y</span><br></pre></td></tr></table></figure>

<p>新建 src/Demo.js 文件，并编写下面的 ES6 代码。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">input</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>.<span class="keyword">map</span>(item =&gt; item + <span class="number">1</span>)</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure>

<p>在项目根目录下新建 .babelrc 文件。（Babel 的配置文件是 .babelrc，用来设置转码规则和插件）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//presets 字段设定转码规则，将 es2015 规则添加进去。</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;es2015&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在终端下输入下面的命令安装转码器。</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">cnpm install --<span class="built_in">save</span>-<span class="built_in">dev</span> babel-preset-es2015</span><br></pre></td></tr></table></figure>

<p>在终端下输入下面的命令进行转码并将转码后的文件放到 dist 文件夹下。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">babel <span class="attribute">src</span> -d dist</span><br></pre></td></tr></table></figure>

<p>转码后文件代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> username = <span class="string">&#x27;Guest997&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(username);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>

<h3 id="自定义脚本"><a href="#自定义脚本" class="headerlink" title="自定义脚本"></a>自定义脚本</h3><p>改写 package.json 文件也能实现转码。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="comment">//其实就类似上面的转码命令</span></span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;babel src -d dist02&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在终端下输入下面的命令就能运行脚本进行转码了。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm <span class="builtin-name">run</span> dev</span><br></pre></td></tr></table></figure>

<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>随着网站逐渐变成“互联网应用程序”，嵌入网页的 JavaScript 代码越来越庞大，越来越复杂。JavaScript 模块化编程，已经成为一个迫切的需求。理想情况下，开发者只需要实现核心的业务逻辑，其它的都可以加载别人已经写好的模块。但是 JavaScript 不是一种模块化编程语言，它不支持类（class）、包（package）等概念，也不支持模块（module）。</p>
<p><strong>模块化规范</strong></p>
<ul>
<li>  CommonJS 模块化规范</li>
<li>  ES6 模块化规范</li>
</ul>
<h3 id="CommonJS-模块化规范"><a href="#CommonJS-模块化规范" class="headerlink" title="CommonJS 模块化规范"></a>CommonJS 模块化规范</h3><p>新建一个文件，名为：demo01.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工具类</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line"><span class="keyword">const</span> mul = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b;</span><br><span class="line"><span class="keyword">const</span> div = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a / b;</span><br><span class="line"><span class="comment">//模块导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    add,</span><br><span class="line">    sub,</span><br><span class="line">    mul,</span><br><span class="line">    div</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再新建一个文件，名为：demo02.js</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>当前路径必须写 .<span class="operator">/</span></span><br><span class="line">const demo01 <span class="operator">=</span> require(<span class="string">&#x27;./demo01.js&#x27;</span>);</span><br><span class="line">console.<span class="built_in">log</span>(demo01);</span><br><span class="line">console.<span class="built_in">log</span>(demo01.add(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">console.<span class="built_in">log</span>(demo01.sub(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">console.<span class="built_in">log</span>(demo01.mul(<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line">console.<span class="built_in">log</span>(demo01.div(<span class="number">7</span>,<span class="number">8</span>));</span><br></pre></td></tr></table></figure>

<p>输入下面的命令运行 demo02.js 文件。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">demo02</span></span><br></pre></td></tr></table></figure>

<p>终端输出了：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">add:</span> [<span class="attr">Function:</span> <span class="string">add</span>],</span><br><span class="line">  <span class="attr">sub:</span> [<span class="attr">Function:</span> <span class="string">sub</span>],</span><br><span class="line">  <span class="attr">mul:</span> [<span class="attr">Function:</span> <span class="string">mul</span>],</span><br><span class="line">  <span class="attr">div:</span> [<span class="attr">Function:</span> <span class="string">div</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">0.875</span></span><br></pre></td></tr></table></figure>

<h3 id="ES6模块化规范"><a href="#ES6模块化规范" class="headerlink" title="ES6模块化规范"></a>ES6模块化规范</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>新建 src/userApi.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;获取数据列表&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;保存数据&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再新建 src/userComponent.js 文件</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getList, <span class="built_in">save</span> &#125; from <span class="string">&#x27;./userApi.js&#x27;</span>;</span><br><span class="line">getList();</span><br><span class="line"><span class="built_in">save</span>();</span><br></pre></td></tr></table></figure>

<p><strong>注意：这时的程序无法运行的，因为 ES6 模块化语句无法在 Node.js 中执行，需要用 Babel 转码成 ES5 后再执行。</strong></p>
<p>在终端下输入下面的命令初始化项目。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> init -y</span><br></pre></td></tr></table></figure>

<p>在项目根目录下新建 .babelrc 文件。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;es2015&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在终端下输入下面的命令安装转码器。</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">cnpm install --<span class="built_in">save</span>-<span class="built_in">dev</span> babel-preset-es2015</span><br></pre></td></tr></table></figure>

<p>自定义转码脚本</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;babel src -d dist&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在终端下输入下面的命令运行脚本进行转码。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm <span class="builtin-name">run</span> build</span><br></pre></td></tr></table></figure>

<p>在终端下输入下面的命令运行 dist/userComponent.js 文件。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">dist</span>/userComponent</span><br><span class="line"><span class="comment">#结果为 获取数据列表 保存数据</span></span><br></pre></td></tr></table></figure>

<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>新建 src/userApi2.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;获取数据列表2&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">save</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;保存数据2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再新建 src/userComponent2.js 文件</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">import <span class="keyword">user</span>Api <span class="keyword">from</span> &#x27;./<span class="keyword">user</span>Api2.js&#x27;;</span><br><span class="line"><span class="keyword">user</span>Api.getList();</span><br><span class="line"><span class="keyword">user</span>Api.save();</span><br></pre></td></tr></table></figure>

<p>在终端下输入下面的命令运行脚本进行转码。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm <span class="builtin-name">run</span> build</span><br></pre></td></tr></table></figure>

<p>在终端下输入下面的命令运行 dist/userComponent2.js 文件。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">dist</span>/userComponent2</span><br><span class="line"><span class="comment">#结果为 获取数据列表2 保存数据2</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>universalfrondend</tag>
      </tags>
  </entry>
  <entry>
    <title>大前端基础(三)</title>
    <url>/2021/08/11/universalfrondend-basis03/</url>
    <content><![CDATA[<h2 id="WebPack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h2><p>WebPack 是一个前端资源加载、打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。从图中我们可以看出，WebPack 可以将多种静态资源 js、css、less 等转换成一个静态文件，减少了页面的请求。<img data-src="/images/universalfrondend-basis03.md-0.png"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在终端下输入下面的命令安装 WebPack。</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">cnpm install -g webpack webpack-<span class="keyword">cli</span></span><br><span class="line"><span class="meta">#查看版本号</span></span><br><span class="line">webpack -v</span><br></pre></td></tr></table></figure>

<h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>新建一个空文件夹，在终端下输入下面的命令初始化项目。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> init -y</span><br></pre></td></tr></table></figure>

<p>新建 src/common.js 和 util.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.info = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.add = <span class="function"><span class="params">(a, b)</span> =&gt;</span> a + b;</span><br></pre></td></tr></table></figure>

<p>再新建 src/style.css 文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="合并-js-文件"><a href="#合并-js-文件" class="headerlink" title="合并 js 文件"></a>合并 js 文件</h3><p>新建 src/man.js 文件</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">common</span> = require(<span class="string">&#x27;./common&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> util = require(<span class="string">&#x27;./util&#x27;</span>);</span><br><span class="line"><span class="keyword">common</span>.info(<span class="string">&#x27;Hello world!&#x27;</span> + util.add(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p>再新建 webpack.config.js 文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">const path = require(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/main.js&#x27;</span>, <span class="regexp">//</span>配置入口文件，从哪里开始编译打包。</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&#x27;./dist&#x27;</span>), <span class="regexp">//</span>输出路径，__dirname：当前项目根目录</span><br><span class="line">        filename: <span class="string">&#x27;bundle.js&#x27;</span> <span class="regexp">//</span>输出文件名</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在终端下输入下面的命令进行打包合并。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">webpack <span class="attribute">--mode</span>=development</span><br></pre></td></tr></table></figure>

<p>可以看到生成了 dist/bundle.js 文件，并且是已经压缩、加密好了的。</p>
<p>新建 html 文件并导入 bundle.js 文件看下成功没有。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="合并-css-文件"><a href="#合并-css-文件" class="headerlink" title="合并 css 文件"></a>合并 css 文件</h3><p>WebPack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。loader 可以理解为模块和资源的转换器。</p>
<p>安装相关 loader 插件</p>
<ul>
<li>  css-loader 是将 css 装载到 JavaScript</li>
<li>  style-loader 是让 JavaScript 认识 css</li>
</ul>
<p>在终端下输入下面的命令安装 style-loader 和 css-loader。</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">cnpm install --<span class="built_in">save</span>-dev <span class="built_in">style</span>-loader css-loader</span><br></pre></td></tr></table></figure>

<p>修改 src/main.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./common&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;./util&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./style.css&#x27;</span>);</span><br><span class="line">common.info(<span class="string">&#x27;Hello world!&#x27;</span> + util.add(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p>修改 webpack.config.js 文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">const path = require(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/main.js&#x27;</span>, <span class="regexp">//</span>配置入口文件，从哪里开始编译打包。</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&#x27;./dist&#x27;</span>), <span class="regexp">//</span>输出路径，__dirname：当前项目根目录</span><br><span class="line">        filename: <span class="string">&#x27;bundle.js&#x27;</span> <span class="regexp">//</span>输出文件名</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>, <span class="regexp">//</span>把项目中所有的 .css 结尾的文件进行打包。</span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在终端下输入下面的命令进行打包合并。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">webpack <span class="attribute">--mode</span>=development</span><br></pre></td></tr></table></figure>

<p>再打开之前新建的 html 文件，会发现背景颜色变了，就说明 css 文件也是被成功打包合并进去了。</p>
<h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><p>可以使用命令 webpack -w 实现实时监听，意思就是你在修改文件时，它也会自动重新打包合并。打包合并的命令也是能通过在上篇文章中讲到的自定义脚本实现。</p>
<h2 id="Vue-element-admin"><a href="#Vue-element-admin" class="headerlink" title="Vue-element-admin"></a>Vue-element-admin</h2><p>Vue-element-admin 是一个后台前端解决方案，它基于 vue 和 element-ui 实现。它使用了最新的前端技术栈，内置了 i18 国际化解决方案，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件，它可以帮助你快速搭建企业级后台产品原型。</p>
<h3 id="下载和运行项目"><a href="#下载和运行项目" class="headerlink" title="下载和运行项目"></a>下载和运行项目</h3><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#克隆项目</span></span><br><span class="line">git clone https:<span class="comment">//github.com/PanJiaChen/vue-element-admin.git</span></span><br><span class="line"><span class="meta">#进入项目目录</span></span><br><span class="line">cd vue-element-admin</span><br><span class="line"><span class="meta">#安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="meta">#启动项目</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>启动完成后会自动打开浏览器访问 localhost:9527，看到下面的页面就代表项目运行成功了。<img data-src="/images/universalfrondend-basis03.md-1.png"></p>
<p>通过查看项目源码可以发现，几乎用到了之前所讲的东西。可以多下载这些项目，然后在本地调试运行，这些组件说不定在以后就在工作中用得到。</p>
<p>几乎所有的 nodejs 项目的运行和打包命令如下：</p>
<ul>
<li>  npm run dev（运行）</li>
<li>  npm run build（打包）</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>universalfrondend</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 UpdraftPlus 插件备份/还原 WordPress 网站</title>
    <url>/2021/01/23/updraftplus/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>UpdraftPlus-备份/恢复 - 一个在本地进行备份, 或备份到 Amazon S3、Dropbox、Google 云端硬盘、rackspace、(S) FTP、WebDAV 和电子邮件, 按自动计划进行备份的插件。</p>
<h2 id="正文：（安装插件过程我就不赘述了）"><a href="#正文：（安装插件过程我就不赘述了）" class="headerlink" title="正文：（安装插件过程我就不赘述了）"></a>正文：（安装插件过程我就不赘述了）</h2><ul>
<li>  在 wordpress 仪表盘中找到设置，点击 <strong>UpdraftPlus 备份</strong>。</li>
<li>  点击设置，按自己的情况选择下图的选项。<img data-src="/images/updraftplus.md-0.png"></li>
<li>  移动到网页最下面，点击 <strong>保存更改</strong>。(你选择了什么方式远程存储，都会弹出相应的应用授权的提示框，照着整个过程走，就没问题了)</li>
<li>  点击 <strong>备份/还原</strong>，点击 <strong>立即备份</strong> 就能立马进行备份了。下方会提示现有备份，能够查看日志，还能够直接进行还原。</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>还有使用脚本备份/还原网站的方法，不过我刚接触 wordpress，所以就用简单的方法好。<br>无论用什么程序搭建的网站，都一定要记住，网站数据很重要。一旦网站被黑客攻击插入病毒代码或者服务器宕机无法恢复数据，到时候哭都来不及。<strong>所以定期备份网站数据非常重要非常重要非常重要</strong>，重要的事情说三遍。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建 VIP 视频解析网站</title>
    <url>/2021/02/26/vip-video/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>VIP视频解析 - 纯静态前端页面，播放各大主流视频网站的会员内容（支持腾讯视频、优酷视频、爱奇艺和芒果TV等）解析功能由第三方接口实现，无后台，不收集任何数据。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>到我的网盘下载 <strong>VIP 视频解析</strong> 压缩包，解压并上传到网站根目录下即可。<img data-src="/images/vip-video.md-0.png"><br>如果接口失效了，可以直接在网上搜索，可以找到很多。之后在 <strong>index.html</strong> 文件里的 <strong>apis</strong> 类中替换即可。</p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>其实在网上有很多这种 vip 解析视频网站的源码，不过大多都不够简洁美观，而其它的又需要付钱，故找到一个我认为算是比较好的了。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>实用</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建站点监控网站</title>
    <url>/2021/03/08/uptime-status/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> uptime-status - 一个基于 UptimeRobot API 的在线状态面板</li>
<li> UptimeRobot 是一家能够提供定时监控服务的网站。比如有些站长有多台服务器和多个网站，那么你需要时刻都关心你的 vps 或者网站的运行情况。如果遇到宕机，或者网站打不开都能第一时间得到通知。</li>
<li> 免费套餐提供了50个监控项目，2个月的日志存储，没有 SMS 短信服务。对于大多数站长应该是已经完全够用了。</li>
</ol>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul>
<li>点击下方链接注册账号，默认的是免费套餐。<br>  <a href="https://uptimerobot.com/signUp">https://uptimerobot.com/signUp</a></li>
<li>  登录后会进入后台，点击 <strong>Add New Monitor</strong>，选择相应的监控类型，有如下的选项。</li>
</ul>
<p>HTTP(s)：用于检测 HTTP 以及 HTTPS 网站，网站无法访问则邮件通知。<br>Keyword：用于检测某网站是否出现某关键词，可以设置为“出现 xxx 关键词”或者“关键词 xxx 消失”则邮件通知我。<br>Ping：用于检测服务器是否正常开机运行，ping不通则邮件通知，不能用于检测某 VPS 是否被 q。<br>Port：用于检测服务器某指定端口是否开放，若端口关闭则邮件通知。</p>
<ul>
<li>  添加完监控器之后，点击顶部导航栏的 <strong>My Settings</strong>，然后在右边面板中往下拉找到 <strong>API Settings</strong> 项下的 <strong>Monitor-Specific API Keys</strong> 或是 <strong>Read-Only API Key</strong>，生成密钥并且复制下来。</li>
<li>  点击下方链接下载源码，也可到我的网盘进行下载。（网盘中的是我稍作修改过的）<a href="https://github.com/yb/uptime-status/releases/">https://github.com/yb/uptime-status/releases/</a></li>
<li>  修改 <strong>config.js</strong> 文件，修改 <strong>UptimeRobot Api Keys</strong>，（就是之前复制下来的密钥）然后可以根据需要再修改其它的参数。下面是我的参数配置，可以参考一下。</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 配置</span><br><span class="line">window.Config = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> 站点名</span><br><span class="line">  SiteName: <span class="string">&#x27;Guest997\&#x27;s Status&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> 站点链接</span><br><span class="line">  SiteUrl: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> UptimeRobot Api 域名</span><br><span class="line">  <span class="regexp">//</span> 只需填写域名部分，默认为官网域名</span><br><span class="line">  <span class="regexp">//</span> 因官网 API 时不时的会 CROS 报错，可填自定义反代域名</span><br><span class="line">  <span class="regexp">//</span> 详见 https:<span class="regexp">//gi</span>thub.com<span class="regexp">/yb/u</span>ptime-status/ 说明</span><br><span class="line">  ApiDomain: <span class="string">&#x27;monitor.proxy-js.workers.dev&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> UptimeRobot Api Keys</span><br><span class="line">  <span class="regexp">//</span> 支持 Monitor-Specific 和 Read-Only 两只 Api Key</span><br><span class="line">  ApiKeys: [</span><br><span class="line">    <span class="string">&#x27;m787421506-593b43340289436d6af66e95&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m787422386-8493975a4b73069b4072b6bc&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m787422384-eb41036d5fe10d2ed196e950&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m787422392-2a803201bf8dd47f9af27b2e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m787422395-f96f03e04098eba9f71820dd&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m787422398-36193fe5edfd0a5b23b8b3cc&#x27;</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> 是否显示监测站点的链接</span><br><span class="line">  ShowLink: true,</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> 日志天数</span><br><span class="line">  <span class="regexp">//</span> 虽然免费版说仅保存<span class="number">60</span>天日志，但测试好像API可以获取<span class="number">90</span>天的</span><br><span class="line">  <span class="regexp">//</span> 不过时间不要设置太长，容易卡，接口请求也容易失败</span><br><span class="line">  CountDays: <span class="number">30</span>,</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> 导航栏菜单</span><br><span class="line">  Navi: [</span><br><span class="line">    &#123;</span><br><span class="line">      text: <span class="string">&#x27;Blog&#x27;</span>,</span><br><span class="line">      url: <span class="string">&#x27;https://guest997.ml/&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      text: <span class="string">&#x27;Github&#x27;</span>,</span><br><span class="line">      url: <span class="string">&#x27;https://github.com/zyp997&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>  最后直接将源码放到网站根目录下即可。页面如下图。<img data-src="/images/uptime-status.md-0.png"></li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>uptime-status 项目地址：<a href="https://github.com/yb/uptime-status">https://github.com/yb/uptime-status</a></p>
<p>UptimeRobot 官方的接口经常抽风，表现为响应头中丢失 CROS，导致跨域出错。可以通过自己搭建 api 域名，解决这个问题。方法很简单，只要在 Cloudflare 中创建 workers，将下面的代码复制粘贴进去，再在 <strong>config.js</strong> 文件中将 <strong>UptimeRobot Api 域名</strong> 改成自己搭建的 api 域名即可。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handleRequest = <span class="keyword">async</span> (&#123; request &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">new</span> URL(request.url);</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;https://api.uptimerobot.com&#x27;</span> + url.pathname, request);</span><br><span class="line">  response = <span class="keyword">new</span> Response(response.body, response);</span><br><span class="line">  response.headers.<span class="keyword">set</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  response.headers.<span class="keyword">set</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  response.headers.<span class="keyword">set</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">  response.headers.<span class="keyword">set</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type,Access-Token&#x27;</span>);</span><br><span class="line">  response.headers.<span class="keyword">set</span>(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">addEventListener(<span class="string">&#x27;fetch&#x27;</span>, (<span class="keyword">event</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">event</span>.respondWith(handleRequest(<span class="keyword">event</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 VMware 虚拟机安装 Lede 软路由</title>
    <url>/2021/01/29/vmware-lede/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> Lede 是路由器固件项目 OpenWRT 的一个复刻分支项目，并继承原来 OpenWRT 的开发目标。</li>
<li> 软路由的可玩性很高，功能也挺多的。而其中 Lede 软路由的酷软中心可提供诸多的插件，因而备受网友喜爱。</li>
</ol>
<h2 id="正文：（注意：没有提及的部分默认选择下一步）"><a href="#正文：（注意：没有提及的部分默认选择下一步）" class="headerlink" title="正文：（注意：没有提及的部分默认选择下一步）"></a>正文：（注意：没有提及的部分默认选择下一步）</h2><ul>
<li>  下载 VMware 虚拟机安装包进行安装。</li>
<li>  点击下方链接进入网站，下载后缀为 <strong>vmdk</strong> 的磁盘文件。<a href="https://firmware.koolshare.cn/LEDE_X64_fw867/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BD%AC%E7%9B%98%E6%88%96PE%E4%B8%8B%E5%86%99%E7%9B%98%E4%B8%93%E7%94%A8/">https://firmware.koolshare.cn/LEDE_X64_fw867/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BD%AC%E7%9B%98%E6%88%96PE%E4%B8%8B%E5%86%99%E7%9B%98%E4%B8%93%E7%94%A8/</a></li>
<li>  打开 VMware 虚拟机，点击 <strong>创建新的虚拟机</strong>，选择 <strong>自定义</strong>。</li>
<li>  选择 <strong>稍后安装操作系统</strong>。</li>
<li>  选择 <strong>Linux</strong>，选择 <strong>其他Linux或更高版本内核64位</strong>。</li>
<li>  虚拟机名称和位置随意填写和选择。（<strong>注意：安装位置至少留出1GB的存储空间</strong>）</li>
<li>  虚拟机内存选择1GB。选择 <strong>使用现有虚拟磁盘</strong>。</li>
<li>  创建完虚拟机后，点击 <strong>编辑虚拟机设置</strong>，点击 <strong>网络适配器</strong>，选择 <strong>桥接模式</strong>，并勾选 复制物理网络连接状态。点击 <strong>硬盘</strong>，点击 <strong>拓展</strong>，修改磁盘大小为1GB。</li>
<li>  点击 <strong>开启此虚拟机</strong>，画面停止滚动后，按回车。</li>
<li>  输入下面代码修改网络配置文件。</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>config/network</span><br></pre></td></tr></table></figure>

<ul>
<li>  按键盘的 <strong>i</strong> 键，修改 <strong>config interface ‘lan’</strong> 下的 <strong>option ipaddr</strong> 项的 IP 地址。（更改为物理机 IP 段内任意空闲 IP 地址。不知道物理机的 IP 段可到 <strong>控制面版</strong> 中，点击 <strong>网络和共享中心</strong> 或是 <strong>查看网络状态和任务</strong>，点击正在连接的网络，点击 <strong>详细信息</strong>，查看 <strong>IPv4 地址</strong> 的网段和 <strong>IPv4 默认网关</strong> 并记录下来，例如：IPv4 地址为 <strong>192.168.1.1</strong>，则修改的地址可以为 <strong>192.168.1.123</strong>）</li>
<li>  按 <strong>ESC</strong> 键后输入 <strong>:wq</strong> 保存并退出。</li>
<li>  输入 <strong>reboot</strong> 进行重启。</li>
<li>  打开浏览器，输入刚才修改的 IP 地址。（我的是 <strong>192.168.1.123</strong>）</li>
<li>  输入默认密码 <strong>koolshare</strong>，左侧列表点击 <strong>网络-接口</strong>，点击 LAN 口的 <strong>编辑</strong>。</li>
<li>  <strong>IPv4 网关</strong> 填写先前记录的 <strong>IPv4默认网关</strong>，<strong>使用自定义的DNS服务器</strong> 可填写为<strong>223.5.5.5</strong> 和 <strong>223.6.6.6</strong>，点击 <strong>保存并应用</strong>。</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>要用于日常使用且使用笔记本的小伙伴建议连接网线！！！</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>七合一共存脚本 + 伪装博客</title>
    <url>/2021/01/29/wall-blog/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> v2ray-agent 项目(VLESS+TCP+TLS/VLESS+TCP+XTLS/VLESS+WS+TLS/VMess+TCP+TLS/VMess+WS+TLS/Trojan/Trojan-Go WS) + 伪装博客、七合一共存脚本，支持多内核安装。</li>
<li> 支持 Xray-core[XTLS]、v2ray-core [XTLS]、v2ray-core</li>
<li> 支持不同核心之间的配置文件互相读取。</li>
<li> 支持 VLESS/VMess/trojan/trojan-go–&gt;ws 的协议</li>
<li> 支持Debian、Ubuntu、Centos，支持主流的cpu架构。<strong>不建议使用 Centos 以及低版本的系统，2.3.x后不再支持 Centos6</strong>。</li>
<li> 支持个性化安装。</li>
<li> 无需卸载即可安装、重装任意组合。卸载脚本时无多余文件残留。</li>
<li> 支持纯 IPv6。</li>
<li> 支持利用 IPv6 排除 Google 的人机验证，<strong>需自己申请 IPv6 隧道，不建议使用自带的 IPv6</strong>。</li>
<li> <a href="https://github.com/mack-a/v2ray-agent/blob/master/documents/install_tls.md">支持自定义证书安装</a></li>
</ol>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="安装类型"><a href="#安装类型" class="headerlink" title="安装类型"></a>安装类型</h3><ul>
<li>  VLESS+TCP+TLS</li>
<li>  VLESS+TCP+xtls-rprx-direct【<strong>推荐</strong>】</li>
<li>  VLESS+WS+TLS【支持 CDN、IPv6】</li>
<li>  VMess+TCP+TLS</li>
<li>  VMess+WS+TLS【支持 CDN、IPv6】</li>
<li>  Trojan【<strong>推荐</strong>】</li>
<li>  Trojan-Go+WS【支持 CDN、不支持 IPv6】</li>
</ul>
<h3 id="组合推荐"><a href="#组合推荐" class="headerlink" title="组合推荐"></a>组合推荐</h3><ul>
<li>  中专/gia —&gt; VLESS+TCP+TLS/XTLS、Trojan<strong>【推荐使用 XTLS 的 xtls-rprx-direct】</strong></li>
<li>  移动宽带 —&gt; VMESS+WS+TLS/Trojan-Go+WS+Cloudflare</li>
<li>  Trojan 建议开启 <strong>Mux【多路复用】</strong>，仅需客户端开启，服务端自适应。</li>
<li>  VMess/VLESS 也可开启 Mux，效果需要自己尝试，XTLS 不支持 Mux。仅需客户端开启，服务端自适应。</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>  <strong>修改 Cloudflare-&gt;SSL/TLS-&gt;Overview-&gt;Full</strong></li>
<li>  <strong>Cloudflare —&gt; A 记录解析的云朵必须为灰色。</strong></li>
<li>  <strong>使用纯净系统安装，如使用其他脚本安装过，请重新 build 系统再安装。</strong></li>
<li>  <strong>不支持非 root 账户。</strong></li>
<li>  <strong>中间的版本号升级意味可能不兼容之前安装的内容，如果不是追新用户或者必须升级的版本请谨慎升级。 例如 2.2.*，不兼容2.1.*。</strong></li>
<li>  <strong>如发现 Nginx 相关问题，请卸载掉自编译的 nginx 或者重新 build 系统</strong>。</li>
</ul>
<h3 id="脚本目录"><a href="#脚本目录" class="headerlink" title="脚本目录"></a>脚本目录</h3><ul>
<li>  v2ray-core 【/etc/v2ray-agent/v2ray】</li>
<li>  Xray-core 【/etc/v2ray-agent/xray】</li>
<li>  Trojan 【/etc/v2ray-agent/trojan】</li>
<li>  TLS 证书 【/etc/v2ray-agent/tls】</li>
<li>  Nginx 配置文件【/etc/nginx/conf.d/alone.conf】、Nginx 伪装博客目录 【/usr/share/nginx/html】</li>
</ul>
<h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><ul>
<li>  输入下面的代码安装 wget 和 curl。</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">yum update <span class="meta">&amp;&amp; yum install wget curl -y     <span class="comment">//Centos</span></span></span><br><span class="line">apt update <span class="meta">&amp;&amp; apt install wget curl -y     <span class="comment">//Debain、Ubuntu</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>  输入下面的代码下载并运行脚本。</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -P <span class="regexp">/root -N --no-check-certificate &quot;https:/</span><span class="regexp">/raw.githubusercontent.com/m</span>ack-a<span class="regexp">/v2ray-agent/m</span>aster<span class="regexp">/install.sh&quot; &amp;&amp; chmod 700 /</span>root<span class="regexp">/install.sh &amp;&amp; /</span>root/install.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>  根据自己的需要一步步进行选择安装。</li>
<li>  支持快捷方式启动，输入 <strong>vasma</strong> 即可运行脚本，脚本执行路径[/etc/v2ray-agent/install.sh]</li>
</ul>
<p><img data-src="/images/wall-blog.md-0.jpg"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>v2ray-agent 项目地址：<a href="https://github.com/mack-a/v2ray-agent">https://github.com/mack-a/v2ray-agent</a></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>爬墙</category>
      </categories>
      <tags>
        <tag>爬墙</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 VMware 虚拟机安装黑苹果</title>
    <url>/2021/01/29/vmware-macos/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> 推荐电脑的硬盘为固态硬盘，有8GB及以上的内存。</li>
<li> 网盘总共的文件大小为6.51GB。</li>
<li> 建议至少留出50GB的空间创建虚拟机。</li>
</ol>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="虚拟机的创建及设置"><a href="#虚拟机的创建及设置" class="headerlink" title="虚拟机的创建及设置"></a>虚拟机的创建及设置</h3><ul>
<li>  下载 VMware 虚拟机安装包进行安装，下载网盘文件，（下方备注有下载地址）将后缀为 <strong>cdr</strong> 的镜像文件改为 <strong>iso</strong>，解压 <strong>unblocker-master</strong> 压缩包，以管理员身份运行 <strong>Win-install.cmd</strong> 文件。</li>
<li>  脚本运行结束后，打开 VMware 虚拟机，点击 <strong>创建新的虚拟机</strong>。（<strong>注意：从这开始没有提及的部分，全部默认选择 下一步</strong>）</li>
<li>  选择 <strong>自定义</strong>。选择 <strong>稍后安装操作系统</strong>。</li>
<li>  客户机操作系统选择 <strong>Apple Mac OS X</strong>，版本选择 <strong>macOS 10.13</strong>。</li>
<li>  虚拟机名称和安装位置任意填写和选择。</li>
<li>  设置处理器及内核数量（不能超过宿主机处理器配置，当你设置的超过了宿主机的处理器配置，下方会有提示）</li>
<li>  设置内存。（内存设置的越高越流畅，我的是8GB内存，设置了4GB的）</li>
<li>  选择 <strong>使用桥接网络</strong>。勾选 <strong>立即分配所有磁盘空间</strong>，并选择 <strong>将虚拟磁盘存储为单个文件</strong>。</li>
<li>  虚拟机创建完成后，修改虚拟机文件存放目录下的后缀为 <strong>vmx</strong> 的文件，在文件最下方添加两行配置参数。（网盘里有文件说明）</li>
<li>  返回虚拟机操作界面，点击 <strong>编辑虚拟机设置</strong>。</li>
<li>  点击 **CD/DVD(SATA)**，选择 <strong>使用ISO映像文件</strong>，并在 <strong>浏览</strong> 中打开下载的macOS镜像文件。点击 <strong>网络适配器</strong>，选择 <strong>复制物理网络连接状态</strong>。</li>
</ul>
<h3 id="MacOS系统的设置"><a href="#MacOS系统的设置" class="headerlink" title="MacOS系统的设置"></a>MacOS系统的设置</h3><ul>
<li>  点击 <strong>开启此虚拟机</strong>，开机后耐心等待，直到语言选择界面，选择 <strong>以简体中文作为主要语言</strong>。</li>
<li>  点击菜单栏中的 <strong>实用工具-磁盘工具</strong>。（<strong>这一步切勿直接点击 继续</strong>）</li>
<li>  左侧列表内点击 **VMware Virtual SATA….**，然后再点击上方的 <strong>抹掉</strong>。</li>
<li>  修改名称为 <strong>macOS</strong>。（<strong>注意：从这开始没有提及的部分，默认点击就好了</strong>）</li>
<li>  安装 <strong>macOS</strong> 步骤时选择修改的名称 <strong>macOS</strong>。</li>
<li>  <strong>TCP/IP 连接类型</strong> 选择 <strong>使用 DHCP</strong>。</li>
<li>  进入桌面后，如不适应小屏，VMware 工具栏有 <strong>进入全屏模式</strong> 的按钮。</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>由于 OneDrive 网盘容量较小，所以放出百度网盘地址：<a href="https://pan.baidu.com/s/1LpH-M3BzBVrzWLkr-TfnJQ">https://pan.baidu.com/s/1LpH-M3BzBVrzWLkr-TfnJQ</a></p>
<p>如果虚拟机内的黑苹果运行不流畅，可以<strong>适当地增加处理器和内核数量，以及内存大小</strong>。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 Windows 的计划任务程序实现宽带自动连接</title>
    <url>/2021/03/20/windows-pppoe/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>由于我使用的是校园网，周日到周四晚上都会断网，第二天起来都需要自己手动重连宽带，比较麻烦。下面就教你如何利用 Windows 的计划任务程序实现宽带自动连接。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="创建自动拨号脚本"><a href="#创建自动拨号脚本" class="headerlink" title="创建自动拨号脚本"></a>创建自动拨号脚本</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">%<span class="number">1</span> start <span class="string">&quot;&quot;</span> mshta vbscript:CreateObject(<span class="string">&quot;Shell.Application&quot;</span>).ShellExecute(<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c &quot;</span><span class="string">&quot;%~s0&quot;</span><span class="string">&quot; ::&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;runas&quot;</span>,<span class="number">1</span>)(window.close)&amp;&amp;<span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">rasdial 宽带名字 账号 密码</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>宽带名字需要设置为英文。可以断开宽带，双击脚本试下能否正常运行，成功的话会显示如下的画面。</p>
<p><img data-src="/images/windows-pppoe.md-0.png"></p>
<h3 id="配置-Windows-计划任务程序"><a href="#配置-Windows-计划任务程序" class="headerlink" title="配置 Windows 计划任务程序"></a>配置 Windows 计划任务程序</h3><ul>
<li>  按 <strong>win+x</strong> 键，选择 <strong>计算机管理</strong>。</li>
<li>  右键左侧的 <strong>任务计划程序</strong>，选择 <strong>创建基本任务</strong>。</li>
<li>  之后跟着步骤走就行了，需要注意的是 <strong>触发器</strong> 和 <strong>操作</strong>，触发器根据自己的需要设置，而操作需要选择 <strong>启动程序</strong>，选择刚刚创建的脚本。</li>
<li>  打开创建好的计划任务程序的属性界面，取消勾选 <strong>条件-电源-只有在计算机使用交流电电源时才启动此任务</strong>。如果你想要电脑休眠后也能够自动重连宽带，勾选 <strong>唤醒计算机运行此任务</strong>。</li>
<li>  如果有需要可以创建多个触发器，比如计算机启动时或者发生特定事件时……</li>
</ul>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>其实如果你的宽带连接很稳定，只是想要它意外断开时自动重连，可以参考我下面找的两篇文章。 <a href="https://blog.csdn.net/liushall/article/details/112506550">https://blog.csdn.net/liushall/article/details/112506550</a><br><a href="https://www.zhihu.com/question/59449991">https://www.zhihu.com/question/59449991</a></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>自用 Windows 平台实用软件和脚本</title>
    <url>/2021/02/02/windows-software-script/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> Win10永久激活工具</li>
<li> Win10优化</li>
<li> O&amp;O AppBuster</li>
<li> 电脑管家软件管理独立版</li>
<li> Connectify</li>
</ol>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="Win10永久激活工具"><a href="#Win10永久激活工具" class="headerlink" title="Win10永久激活工具"></a>Win10永久激活工具</h3><p>功能如其名，就是个激活工具。使用起来非常简单，点一下 <strong>激活 Windows 10</strong> 即可。</p>
<p><img data-src="/images/windows-software-script.md-0.png"></p>
<h3 id="Win10优化"><a href="#Win10优化" class="headerlink" title="Win10优化"></a>Win10优化</h3><p>一个非常好用的 Windows10优化辅助工具。看下面的截图，有很多的非常实用的功能，缺点就是每运行完一次，无法回到初始页面，需要重新打开再自行解压一次，有点繁琐。</p>
<p><img data-src="/images/windows-software-script.md-1.png"></p>
<h3 id="O-amp-O-AppBuster"><a href="#O-amp-O-AppBuster" class="headerlink" title="O&amp;O AppBuster"></a>O&amp;O AppBuster</h3><p>卸载/重装 win10 自带的软件。</p>
<p><img data-src="/images/windows-software-script.md-2.png"></p>
<h3 id="电脑管家软件管理独立版"><a href="#电脑管家软件管理独立版" class="headerlink" title="电脑管家软件管理独立版"></a>电脑管家软件管理独立版</h3><p>不想装电脑管家，又想使用电脑管家的软件管理，那就只需要一个独立版的软件管理。大家应该都知道，我就不放截图了。</p>
<h3 id="Connectify"><a href="#Connectify" class="headerlink" title="Connectify"></a>Connectify</h3><p>笔记本连接网线想开 WIFI，发现 win10 自带的功能无法分享。使用其它的 WIFI 分享软件，会出现时不时断线的问题，又不想花钱买路由器，那就需要这款软件。由于是破解版的，请不要更新升级。<br>下载并解压压缩包之后，安装压缩包中的 <strong>Connectify2018Installer.exe</strong> 文件，再双击运行 <strong>BLOCKHosts.bat</strong> 文件，（修改 hosts 文件屏蔽更新）之后把 <strong>crack</strong> 文件夹中的文件替换到目录位置 <strong>C:\Program Files (x86)\Connectify</strong>，最后再重启电脑即可。</p>
<p><img data-src="/images/windows-software-script.md-3.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>软件和脚本下载地址：<a href="https://guest997.000webhostapp.com/?/%E5%AE%9E%E7%94%A8/">https://guest997.000webhostapp.com/?/%E5%AE%9E%E7%94%A8/</a></p>
<p>这篇文章会不定期更新。如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>软件</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 平台微信增强工具</title>
    <url>/2021/02/01/windows-wechat/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol>
<li> RevokeMsgPatcher - A hex editor for WeChat/QQ/TIM - PC 版微信/QQ/TIM防撤回补丁（我已经看到了，撤回也没用了）</li>
<li> CleanMyWechat - 自动删除 PC 端微信缓存数据，包括从所有聊天中自动下载的大量文件、视频、图片等数据内容，解放你的空间。</li>
</ol>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="RevokeMsgPatcher-👀微信-QQ-TIM-防撤回补丁"><a href="#RevokeMsgPatcher-👀微信-QQ-TIM-防撤回补丁" class="headerlink" title="RevokeMsgPatcher - 👀微信/QQ/TIM 防撤回补丁"></a>RevokeMsgPatcher - 👀微信/QQ/TIM 防撤回补丁</h3><p>适用于 Windows 下 PC 版微信/QQ/TIM 的防撤回补丁。<strong>支持最新版微信/QQ/TIM</strong>，其中微信能够选择安装多开功能。<br>下载地址： <strong><a href="https://github.com/huiyadanli/RevokeMsgPatcher/releases/download/0.9/RevokeMsgPatcher.v0.9.zip">⚡️点我下载最新版本</a></strong>  <a href="https://wwa.lanzous.com/iaULseyzpbe">☁备用下载-蓝奏云</a>  <a href="https://pan.baidu.com/s/1Yty-6d31by_E53SKZyQvTg">☁备用下载-百度云</a> 提取码：coco<br>相关文档： <strong><a href="https://github.com/huiyadanli/RevokeMsgPatcher/wiki/%E7%89%88%E6%9C%AC%E6%94%AF%E6%8C%81">✔支持哪些版本</a></strong>  <a href="https://github.com/huiyadanli/RevokeMsgPatcher/wiki#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">❓常见问题</a>  <a href="https://github.com/huiyadanli/RevokeMsgPatcher/wiki">📖查看完整文档</a><br>原理与方法： <a href="https://github.com/huiyadanli/RevokeMsgPatcher/wiki/%E5%BE%AE%E4%BF%A1%E9%98%B2%E6%92%A4%E5%9B%9E%E4%B8%8E%E5%A4%9A%E5%BC%80%E6%95%99%E7%A8%8B">📗微信</a>  <a href="https://github.com/huiyadanli/RevokeMsgPatcher/wiki/QQ%E6%88%96TIM%E9%98%B2%E6%92%A4%E5%9B%9E%E6%95%99%E7%A8%8B">📕QQ</a>  <a href="https://github.com/huiyadanli/RevokeMsgPatcher/wiki/QQ%E6%88%96TIM%E9%98%B2%E6%92%A4%E5%9B%9E%E6%95%99%E7%A8%8B">📘TIM</a><br>附带产物：<a href="https://github.com/huiyadanli/RevokeMsgPatcher/tree/master/RevokeMsgPatcher.MultiInstance">一个通用的微信多开工具</a></p>
<h4 id="📷截图"><a href="#📷截图" class="headerlink" title="📷截图"></a>📷截图</h4><p><img data-src="/images/windows-wechat.md-0.png"></p>
<h4 id="🔨使用方法"><a href="#🔨使用方法" class="headerlink" title="🔨使用方法"></a>🔨使用方法</h4><ul>
<li>首先，你的系统需要满足以下条件：<ul>
<li>  Windows 7或更高版本，<strong>不支持 XP</strong>。</li>
<li>  <a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=30653">.NET Framework 4.5</a>或更高版本。<strong>低于此版本在打开程序时可能无反应，或者直接报错</strong>。</li>
</ul>
</li>
<li>  使用本程序前，先关闭微信/QQ/TIM。</li>
<li>  <strong>以管理员身份运行本程序</strong>，等待右下角获取最新的补丁信息。</li>
<li>  选择微信/QQ/TIM 的安装路径。如果你用的安装版的微信/QQ/TIM，正常情况下本程序会自动从注册表中获取安装路径，绿色版需要手动选择路径。</li>
<li>  点击防撤回。界面可能会出现一段时间的无响应，请耐心等待。<strong>由于修改了微信的 WeChatWin.dll 文件、QQ/TIM 的 IM.dll 文件，杀毒软件可能会弹出警告，放行即可。</strong></li>
<li>  <strong>注意：微信/QQ/TIM 更新之后要重新安装补丁！</strong></li>
</ul>
<h3 id="CleanMyWechat"><a href="#CleanMyWechat" class="headerlink" title="CleanMyWechat"></a>CleanMyWechat</h3><p>自动删除 PC 端微信自动下载的大量文件、视频、图片等数据内容，解放一年几十 G 的空间占用。该工具不会删除文字的聊天记录，请放心使用。<br><strong>现已经支持 Windows 系统中的所有微信版本。</strong><br><a href="https://www.lanzoux.com/iamuhh1owmb">国内地址 - 点击下载</a><br><a href="https://github.com/blackboxo/CleanMyWechat/releases/download/v2.0/CleanMyWechat.zip">Github Release - 点击下载</a></p>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a><a href="https://github.com/blackboxo/CleanMyWechat#%E7%89%B9%E6%80%A7"></a>特性</h4><ul>
<li>  自动识别微信账号，支持用户选择自定义路径。</li>
<li>  同时管理多个账号，保留配置参数，打开即用。</li>
<li>  自由设置想要删除的文件类型，包括图片类缓存、文件、图片、视频。</li>
<li>  自由设置需要删除的文件的距离时间，默认365天。</li>
<li>  删除后的文件放置在回收站中，检查后自行清空，防止删错需要的文件。</li>
<li>  支持删除进度的显示。</li>
</ul>
<h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p><img data-src="/images/windows-wechat.md-1.jpg"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>RevokeMsgPatcher 项目地址：<a href="https://github.com/huiyadanli/RevokeMsgPatcher">https://github.com/huiyadanli/RevokeMsgPatcher</a></p>
<p>CleanMyWechat 项目地址：<a href="https://github.com/blackboxo/CleanMyWechat">https://github.com/blackboxo/CleanMyWechat</a></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 平台最好用的代理客户端</title>
    <url>/2021/01/25/winxray/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>winXray - V2Ray、Xray、Shadowsocks、Trojan、SSR、SSRoT、SSRoT、NaïveProxy 全能通用客户端，可自动发现最快服务器，连接异常自动切换 - 速度快如闪电，提供一键自动部署服务端工具，绿色便携版免安装仅6MB，使用轻量语言 aardio 开发不需要任何外部运行库。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="winXray入门小技巧："><a href="#winXray入门小技巧：" class="headerlink" title="winXray入门小技巧："></a>winXray入门小技巧：</h3><h4 id="一、批量导入链接技巧"><a href="#一、批量导入链接技巧" class="headerlink" title="一、批量导入链接技巧"></a>一、批量导入链接技巧</h4><p>winXray 可通过【批量导入链接】功能导入以下格式的分享链接、订阅源、或 JSON 配置：</p>
<p>1、一行或多行（忽略无效行）分享链接或服务器 JSON 配置。<br>支持 vmess://，vless://，ss://，ssr://，trojan://， trojan-go://，native+http://，socks:// 等通用分享链接。  </p>
<p>2、包含多个服务器配置的 JSON 数组,支持 winXray 格式以及通用格式 JSON。  </p>
<p>3、单个 http:// 或 https:// 开头的通用订阅源地址。<br>可直接使用浏览器地址栏的 github 文件地址。（含 blob 或 raw 目录名）<br>也可以仅复制单斜杆开始的 github 文件路径。  </p>
<p>订阅源可用 BASE64 编码或明文返回以上1、2条规定的配置或分享链接。</p>
<p>支持以下格式的 Github 项目文件地址作为订阅源：( 可省略域名并以斜杆开头 ）<br><a href="https://github.com/zyp997/winXray/blob/master/sub/sample.json">https://github.com/zyp997/winXray/blob/master/sub/sample.json</a><br><a href="https://github.com/zyp997/winXray/blob/master/sub/sample.json">/winXray/blob/master/sub/sample.json</a><br><a href="https://github.com/zyp997/winXray/raw/master/sub/sample.json">https://github.com/zyp997/winXray/raw/master/sub/sample.json</a><br><a href="https://github.com/zyp997/winXray/blob/master/sub/sample.json">/zyp997/winXray/raw/master/sub/sample.json</a><br><a href="https://raw.githubusercontent.com/zyp997/winXray/master/sub/sample.json">https://raw.githubusercontent.com/zyp997winXray/master/sub/sample.json</a></p>
<h4 id="二、使用新增、编辑服务器配置的对话框"><a href="#二、使用新增、编辑服务器配置的对话框" class="headerlink" title="二、使用新增、编辑服务器配置的对话框"></a>二、使用新增、编辑服务器配置的对话框</h4><p>winXray 新版已经添加了新增、编辑服务器配置的对话框，请直接在 winXray 首页服务器列表点右键菜单，然后点【新增、编辑代理服务器】即可。<br><img data-src="/images/winxray.md.png"><img data-src="/images/winxray.md-0.png"></p>
<h4 id="三、使用JSON配置服务器"><a href="#三、使用JSON配置服务器" class="headerlink" title="三、使用JSON配置服务器"></a>三、使用JSON配置服务器</h4><p>JSON 配置界面里点击任意字段都会显示该字段的用法说明。做很多对话框来配置服务器的参数其实是把简单的事搞复杂了，winXray 已经把各种代理协议的配置简化为几个统一命名的 JSON 字段，（ <strong>也可以作为一种标准的、统一的、通用的订阅响应格式使用</strong> ）只要稍加学习就可以非常熟练的添加、修改各种代理协议的配置。而且对于大多数用户根本不需要改配置 - 简单的复制导入分享链接就可以，不必要把简单的事搞复杂。<img data-src="/images/winxray.md-1.png"></p>
<h4 id="四、使用-PAC-编辑器"><a href="#四、使用-PAC-编辑器" class="headerlink" title="四、使用 PAC 编辑器"></a>四、使用 PAC 编辑器</h4><p>可以直接复制网址，（ 不需要去截取域名 ）然后打开 PAC 编辑器，这时候 winXray 会自动从剪贴板把域名取出来并且输入好，只要点一下设为代理，然后添加域名就可以了。也可以一次复制多个域名，域名可以任何空白字符（或者换行）分隔，然后点右键菜单，再点批量导入域名即可。winXray 里的 PAC 支持 CIDR 格式的 IP 地址段, 使用此功能可以轻松的让 PAC 代理支持 Telegram。<br><img data-src="/images/winxray.md-2.png"></p>
<h4 id="五、Telegram-代理设置"><a href="#五、Telegram-代理设置" class="headerlink" title="五、Telegram 代理设置"></a>五、Telegram 代理设置</h4><p>有很多软件的 PAC 代理不支持 Telegram，但 winXray 的 PAC 代理有良好的兼容性 - 可以完美支持 Telegram IP 地址库。（ 旧版本升级请在 PAC 编辑器右键添加 Telegram IP 地址库 ） 也可以直接告诉 Telegram 他要使用的代理服务器。<img data-src="/images/winxray.md-3.gif"></p>
<h3 id="关于PAC-代理："><a href="#关于PAC-代理：" class="headerlink" title="关于PAC 代理："></a>关于PAC 代理：</h3><p>winXray 的 PAC 代理稳定、流畅、易用。 在 PAC 模式下，winXray 会优先启用高效安全的 SOCKS5 协议，并且可以自动兼容在 PAC 模式下仅支持 HTTP代理的应用。winXray 也可以在 PAC 模式下完美支持 Telegram IP 地址库。（ 旧版本升级请在 PAC 编辑器右键添加 Telegram IP 地址库 ）</p>
<p>PAC 属于系统代理规则 - 是一种非常成( 老 )熟( 了 )的代理模式，与翻墙软件完全无关并完全独立，可以保证只有需要经过代理的域名才与翻墙软件发生关系。PAC 主要支持浏览器，可以避免迅雷、百度网盘、Steam 等流量在未经许可时经过翻墙软件。也只有 PAC 能真正让浏览器直接支持高效安全的 SOCKS5 协议，否则就只能改为低版本 SOCKS 或者 HTTP 代理。</p>
<p>winXray 里的 PAC 代理可以让目标应用（例如浏览器）优先选择高效安全的 SOCKS5 代理协议， 对于不支持 SOCKS 代理的应用，（例如谷歌地球）winXray 在 PAC 模式下会自动为这些应用提供 HTTP 代理。</p>
<h3 id="关于启用路由规则："><a href="#关于启用路由规则：" class="headerlink" title="关于启用路由规则："></a>关于启用路由规则：</h3><p>请注意启用路由规则时必须切换到全局代理模式，全局代理是有一些局限的， 使用全局 SOCKS 代理时浏览器等软件会降级为低版本 SOCKS 协议，（ 存在 DNS 泄漏隐患 ）否则就只能设置为全局 HTTP 代理。</p>
<p>一般不建议普通用户去编辑路由规则 - 错误的配置可能会导致敏感的流量误走代理服务器。 专业的事请交给专业的人去做，使用 winXray 可以一键启用、更新 <a href="https://github.com/Loyalsoldier/v2ray-rules-dat">v2ray-rules-dat</a> 提供的最新路由规则。注意在 winXray 里无论使用 NaïveProxy 还是 SSR，SSRoT 都支持 V2Ray 路由规则。</p>
<h3 id="设置系统代理失败怎么办："><a href="#设置系统代理失败怎么办：" class="headerlink" title="设置系统代理失败怎么办："></a>设置系统代理失败怎么办：</h3><p>如果设置代理以后不能正常生效：请首先右键点击 winXray 任务栏的托盘图标，在弹出的右键菜单中点击【查看 Internet 代理设置】，并检查代理设置是否正常。如果 winXray 不能修改代理设置，但是可以手动修改成功，这一般是被安全软件错误地拦截了。( 而且安全软件没有正常弹出确认对话框，或者误点了阻止设置 ）这时候请到安全软件的相关设置中将 winXray 添加到信任列表即可。</p>
<p>如果不是上面的原因，请按下【Win + R】组合键打开系统运行对话框，输入 regedit 点击确定打开注册表路径 HKEY_CURRENT_USERSoftwareMicrosoftWindowsCurrentVersionInternet SettingsConnections 然后将“Connections”项删除，注销一下系统即可正常使用代理了。</p>
<p>如果上面的方法仍然不行，请在注册表中打开打开路径 ComputerHKEY_LOCAL_MACHINESYSTEMCurrentControlSetServicesWinHttpAutoProxySvc 将 start 的值改为 2， 也就是将 WinHttpAutoProxySvc 服务改为自动启动，然后重启计算机即可。</p>
<h3 id="关于-V2Ray-Core-SSR-Core-默认路径："><a href="#关于-V2Ray-Core-SSR-Core-默认路径：" class="headerlink" title="关于 V2Ray Core / SSR Core 默认路径："></a>关于 V2Ray Core / SSR Core 默认路径：</h3><p>可在「 winXray/ 配置 / Core配置 」 下载更新 V2Ray Core / Xray Core / SSR Core ，<br>下载更新 V2Ray Core（或 Xray Core）完成后会自动切换 V2Ray 内核。</p>
<p>默认会在以下目录查找 V2Ray Core（或 Xray Core）：</p>
<p>./v2ray-core/<br>%localappdata%winXraycore</p>
<p>默认会在以下目录查找 SSR Core：</p>
<p>./v2ray-core/ssr-core<br>%localappdata%winXrayssr-core</p>
<p>默认会在以下目录查找 NaïveProxy Core：</p>
<p>./v2ray-core/naive-core<br>%localappdata%winXraynaive-core</p>
<p>找不到会自动下载，没有代理访问 Github 会很慢很慢，有时可能根本打不开，建议经常运行一下 winXray 工具里自带的 【Github 网速优化工具】</p>
<p>注意不同的代理协议连接时会调用不同的 Core，<br>例如 NaïveProxy 连接时会启动 naive.exe，这时候系统防火墙会有提示，<br>如果这时候没看清就点了拒绝，那么就无法正常使用相应的 Core 了，<br>所以请看清楚再点，点错了到系统防火墙里再打开一下就可以了。</p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>作者会频繁删库重建，理由大家懂的都懂，所以可以到下方我 fork 的项目的 github 地址或是到我的网盘进行下载。<br><a href="https://github.com/zyp997/winXray/tree/master/release">https://github.com/zyp997/winXray/tree/master/release</a><br><a href="https://guest997.000webhostapp.com/?/%E5%AE%9E%E7%94%A8/winXray/">https://guest997.000webhostapp.com/?/%E5%AE%9E%E7%94%A8/winXray/</a></p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>实用</tag>
        <tag>爬墙</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress 提示建立数据库连接时出错解决方法</title>
    <url>/2021/01/23/wordpress-database/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>宝塔的数据库经常性自动停止，是因为网站频繁地请求数据库，而服务器运存又不足，为了保证服务器不彻底卡死，保护性地自动停止数据库。wordpress 的数据库查询次数很多，wordpress 默认是自动升级的，加上 wordpress 插件之多，就算你不进行任何操作，你的后台也是在频繁地请求数据库！</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="数据库自动停止的原因："><a href="#数据库自动停止的原因：" class="headerlink" title="数据库自动停止的原因："></a>数据库自动停止的原因：</h3><p>服务器配置很低或者是设置不当所导致有关，比如 MySQL、php 等性能设置。虽然 wordpress 可以通过缓存减轻数据库负担，但是当你管理后台更新文章或其他操作还是会不可避免的请求数据库。引起这种问题的根本原因，还是服务器性能不足导致的。</p>
<h3 id="解决数据库自动停止的问题：-宝塔面板-计划任务-Shell脚本"><a href="#解决数据库自动停止的问题：-宝塔面板-计划任务-Shell脚本" class="headerlink" title="解决数据库自动停止的问题：(宝塔面板-计划任务-Shell脚本)"></a>解决数据库自动停止的问题：(宝塔面板-计划任务-Shell脚本)</h3><p>定时自动重启在运行中的数据库。缓减数据库的压力。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">pgrep -x mysqld &amp;&gt; <span class="regexp">/dev/</span><span class="keyword">null</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne <span class="number">0</span> ];then</span><br><span class="line">        bash <span class="regexp">/www/</span>server<span class="regexp">/panel/</span>script/rememory.sh   </span><br><span class="line">       <span class="regexp">/etc/i</span>nit.d/mysqld start</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>定时自动重启已停止的数据库。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">#!<span class="regexp">/bin/</span>bash PATH=<span class="regexp">/bin:/</span>sbin:<span class="regexp">/usr/</span>bin:<span class="regexp">/usr/</span>sbin:<span class="regexp">/usr/</span>local<span class="regexp">/bin:/u</span>sr<span class="regexp">/local/</span>sbin:~<span class="regexp">/bin export PATH pgrep -x mysqld /</span>dev/<span class="keyword">null</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne <span class="number">0</span> ] echo At time:$(date) :MySQL is stop . <span class="regexp">/var/</span>log/mysql_messages service mysqld start </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>由于现在使用的是小运存的 vps，所以建站的时候会遇到这个问题，故写篇文章记录一下。</p>
<p>在网上搜索到的还可以通过宝塔面板的 <strong>Linux 工具箱</strong> 设置 <strong>Swap/虚拟内存</strong> 缓解 vps 的压力。上面的两个脚本可以同时创建，<strong>我也建议两个都创建</strong>，至于执行周期，建议设置为每小时第3~5分钟执行，当然要视情况而定。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress 网站设置 HTTP 协议强制跳转到 HTTPS 协议</title>
    <url>/2021/02/08/wordpress-http-https/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>在互联网火热的今天，安全问题显得越来越重要，为了用户信息安全，很多热门网站都启用了 https。有小伙伴就问：我启用了 https，为什么访问的时候显示的还是 http 呢？其实，有时候并不是因为我们 ssl 证书配置的不对，而是因为我们没有做 https 强制跳转。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><ul>
<li>  在 <strong>宝塔面板-网站-设置-SSL</strong>，点击右上角的 <strong>强制HTTPS</strong>。</li>
<li>  访问网站，如果还显示连接不安全，则说明还有资源文件走的是 http，<strong>还需要做下面两种操作的其中一种</strong>。</li>
</ul>
<h3 id="利用-wordpress-提供的-api，通过修改主题让-wordpress-支持-https。"><a href="#利用-wordpress-提供的-api，通过修改主题让-wordpress-支持-https。" class="headerlink" title="利用 wordpress 提供的 api，通过修改主题让 wordpress 支持 https。"></a>利用 wordpress 提供的 api，通过修改主题让 wordpress 支持 https。</h3><p>优点：不涉及数据库，操作简单，不再使用 https 时只需要把代码删除即可，不会伤及网站。<br>缺点：换主题的时候要重新修改。</p>
<h4 id="代码一：HTTPS-绝对链接替换（推荐）"><a href="#代码一：HTTPS-绝对链接替换（推荐）" class="headerlink" title="代码一：HTTPS 绝对链接替换（推荐）"></a>代码一：HTTPS 绝对链接替换（推荐）</h4><p>进入网站后台，点击 <strong>外观-主题编辑器</strong>，在右侧 <strong>主题文件</strong> 中找到 **模板函数(functions.php)**文件，添加以下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">add_filter(<span class="string">&#x27;get_header&#x27;</span>, <span class="string">&#x27;fanly_ssl&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fanly_ssl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>( is_ssl() )&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fanly_ssl_main</span> (<span class="params"><span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$siteurl</span> = get_option(<span class="string">&#x27;siteurl&#x27;</span>);</span><br><span class="line"><span class="variable">$upload_dir</span> = wp_upload_dir();</span><br><span class="line"><span class="variable">$content</span> = str_replace( <span class="string">&#x27;http:&#x27;</span>.strstr(<span class="variable">$siteurl</span>, <span class="string">&#x27;//&#x27;</span>), <span class="string">&#x27;https:&#x27;</span>.strstr(<span class="variable">$siteurl</span>, <span class="string">&#x27;//&#x27;</span>), <span class="variable">$content</span>);</span><br><span class="line"><span class="variable">$content</span> = str_replace( <span class="string">&#x27;http:&#x27;</span>.strstr(<span class="variable">$upload_dir</span>[<span class="string">&#x27;baseurl&#x27;</span>], <span class="string">&#x27;//&#x27;</span>), <span class="string">&#x27;https:&#x27;</span>.strstr(<span class="variable">$upload_dir</span>[<span class="string">&#x27;baseurl&#x27;</span>], <span class="string">&#x27;//&#x27;</span>), <span class="variable">$content</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line">ob_start(<span class="string">&quot;fanly_ssl_main&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码二：HTTPS-相对链接替换"><a href="#代码二：HTTPS-相对链接替换" class="headerlink" title="代码二：HTTPS 相对链接替换"></a>代码二：HTTPS 相对链接替换</h4><p>使用相对链接，HTTP 和 HTTPS 双协议共存。进入网站后台，点击 <strong>外观-主题编辑器</strong>，在右侧 <strong>主题文件</strong> 中找到 **模板函数(functions.php)**文件，添加以下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">add_filter(<span class="string">&#x27;get_header&#x27;</span>, <span class="string">&#x27;fanly_ssl&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fanly_ssl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>( is_ssl() )&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fanly_ssl_main</span> (<span class="params"><span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$siteurl</span> = get_option(<span class="string">&#x27;siteurl&#x27;</span>);</span><br><span class="line"><span class="variable">$upload_dir</span> = wp_upload_dir();</span><br><span class="line"><span class="variable">$content</span> = str_replace( <span class="string">&#x27;http:&#x27;</span>.strstr(<span class="variable">$siteurl</span>, <span class="string">&#x27;//&#x27;</span>), strstr(<span class="variable">$siteurl</span>, <span class="string">&#x27;//&#x27;</span>), <span class="variable">$content</span>);</span><br><span class="line"><span class="variable">$content</span> = str_replace( <span class="string">&#x27;http:&#x27;</span>.strstr(<span class="variable">$upload_dir</span>[<span class="string">&#x27;baseurl&#x27;</span>], <span class="string">&#x27;//&#x27;</span>), strstr(<span class="variable">$upload_dir</span>[<span class="string">&#x27;baseurl&#x27;</span>], <span class="string">&#x27;//&#x27;</span>), <span class="variable">$content</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line">ob_start(<span class="string">&quot;fanly_ssl_main&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改修改库，把原来的-http-替换为-https。（注意：做下面的操作前一定要对数据库进行备份）"><a href="#修改修改库，把原来的-http-替换为-https。（注意：做下面的操作前一定要对数据库进行备份）" class="headerlink" title="修改修改库，把原来的 http 替换为 https。（注意：做下面的操作前一定要对数据库进行备份）"></a>修改修改库，把原来的 http 替换为 https。（注意：做下面的操作前一定要对数据库进行备份）</h3><p>优点：一劳永逸，绝对 https。<br>缺点：需要操作数据库，需要动手能力和理解能力，不再使用 https 时还要修改数据库。</p>
<ul>
<li>  进入网站后台，在 <strong>设置-常规</strong> 里修改 <strong>WordPress地址（URL）</strong>和 <strong>站点地址（URL）</strong>为 https 协议的地址，如下图：<img data-src="/images/wordpress-http-https.md-0.png"></li>
<li>  找到 wordpress 网站根目录的配置文件 <strong>wp-config.php</strong>，在里面找到下面这段代码。</li>
</ul>
<p>/* 好了！请不要再继续编辑。请保存本文件。使用愉快！ */</p>
<p>/** WordPress 目录的绝对路径。 */<br>if ( !defined(‘ABSPATH’) )<br>    define(‘ABSPATH’, dirname(__FILE__) . ‘/‘);</p>
<ul>
<li>  然后在上面这段代码的前一行，加入下面这段代码。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$_SERVER[<span class="string">&#x27;HTTPS&#x27;</span>] <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>;</span><br><span class="line"><span class="keyword">define</span>(<span class="string">&#x27;FORCE_SSL_LOGIN&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">define</span>(<span class="string">&#x27;FORCE_SSL_ADMIN&#x27;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>  为了保证网站之前添加的各个链接或者多媒体文件把 http 协议改成 https 协议，还需要通过数据库 SQL 查询执行一条替换命令。登陆网站数据库的 phpmyadmin 管理页面，在 SQL 中执行下面的命令：</li>
</ul>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">update wp_posts set post_content = replace(<span class="name">post_content</span>, &#x27;https<span class="symbol">://guest997</span>.ml&#x27;,&#x27;https<span class="symbol">://guest997</span>.ml&#x27;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  如果评论或者文章自定义字段中也使用过网站的地址，那么还要执行以下语句：</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">UPDATE wp_comments SET comment_content = <span class="constructor">REPLACE(<span class="params">comment_content</span>, &#x27;<span class="params">https</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">guest997</span>.<span class="params">ml</span>&#x27;,&#x27;<span class="params">https</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">guest997</span>.<span class="params">ml</span>&#x27;)</span>;</span><br><span class="line">UPDATE wp_comments SET comment_author_url = <span class="constructor">REPLACE(<span class="params">comment_author_url</span>, &#x27;<span class="params">https</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">guest997</span>.<span class="params">ml</span>&#x27;,&#x27;<span class="params">https</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">guest997</span>.<span class="params">ml</span>&#x27;)</span>;</span><br><span class="line">UPDATE wp_postmeta SET meta_value = <span class="constructor">REPLACE(<span class="params">meta_value</span>, &#x27;<span class="params">https</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">guest997</span>.<span class="params">ml</span>&#x27;,&#x27;<span class="params">https</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">guest997</span>.<span class="params">ml</span>&#x27;)</span>;</span><br><span class="line">UPDATE wp_termmeta SET meta_value = <span class="constructor">REPLACE(<span class="params">meta_value</span>, &#x27;<span class="params">https</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">guest997</span>.<span class="params">ml</span>&#x27;,&#x27;<span class="params">https</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">guest997</span>.<span class="params">ml</span>&#x27;)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>貌似 wordpress 新版本已经不需要最后两个步骤了。反正，可以先把前面的步骤做了，然后访问网站，如果网址旁边出现小绿锁了，那就说明已经成功了，不需要最后的两个步骤了。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 WP-China-Yes 插件将 blog 接入到本土生态体系中</title>
    <url>/2021/02/21/wp-china-yes-blog/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>WP-China-Yes - 此插件将你的 wordpress 接入本土生态体系之中，使之更适合国内应用环境。</p>
<h2 id="正文：（安装插件过程我就不赘述了）"><a href="#正文：（安装插件过程我就不赘述了）" class="headerlink" title="正文：（安装插件过程我就不赘述了）"></a>正文：（安装插件过程我就不赘述了）</h2><h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><ul>
<li>  对来自wordpress.org的所有外部服务进行加速</li>
<li>  对来自谷歌公共库的一些服务进行加速</li>
<li>  对接<a href="https://translate.wp-china.org/">本土翻译平台</a>，为WordPress本身及官方应用市场中的所有应用推送基于AI翻译+人工辅助校准的全量汉化包</li>
<li>  使WordPress内置应用市场支持中文作品信息展示及中文语义化搜索（开发中）</li>
<li>  使WordPress内置应用市场中支持选购国内开发者所推出的优秀作品并享受集成式的安装及更新推送服务（开发中）</li>
</ul>
<h3 id="插件截图"><a href="#插件截图" class="headerlink" title="插件截图"></a>插件截图</h3><p><img data-src="/images/wp-china-yes-blog.md-0.png"></p>
<p>上面是我的个人设置。最好用的应该就是 <strong>选择应用市场</strong> 这一项了，我选择了 <strong>本土应用市场</strong>，官方的很多插件并没有汉化，这款插件就能直接将插件汉化，还是非常好用的。（选择本土应用市场之后，需要到更新页面下更新翻译，就能正常使用了）<br>由于我已经禁用了谷歌字体和前端公共库，所以加速也是直接禁用掉了，这个视个人情况而言。</p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>WP-China-Yes 插件官网：<a href="https://wp-china.org/">https://wp-china.org</a><br>wp-china-yes 项目地址：<a href="https://github.com/wp-china/wp-china-yes">https://github.com/wp-china/wp-china-yes</a><br>插件也可以到我的网盘进行下载。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>压缩优化 wordpress 前端 html 页面代码</title>
    <url>/2021/03/09/wordpress-html/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>删除前端 html 页面所有空行和制表符等不必要的内容，可以减少需要传输给访问者的数据量，进而缩短页面加载时间。</p>
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h3 id="压缩优化-html-页面代码"><a href="#压缩优化-html-页面代码" class="headerlink" title="压缩优化 html 页面代码"></a>压缩优化 html 页面代码</h3><p>添加以下代码到当前主题的 <strong>functions.php</strong> 文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//压缩html代码 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wp_compress_html</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">wp_compress_html_main</span> (<span class="params"><span class="variable">$buffer</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$initial</span>=strlen(<span class="variable">$buffer</span>);</span><br><span class="line">        <span class="variable">$buffer</span>=explode(<span class="string">&quot;&lt;!--wp-compress-html--&gt;&quot;</span>, <span class="variable">$buffer</span>);</span><br><span class="line">        <span class="variable">$count</span>=count (<span class="variable">$buffer</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt;= <span class="variable">$count</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (stristr(<span class="variable">$buffer</span>[<span class="variable">$i</span>], <span class="string">&#x27;&lt;!--wp-compress-html no compression--&gt;&#x27;</span>)) &#123;</span><br><span class="line">                <span class="variable">$buffer</span>[<span class="variable">$i</span>]=(str_replace(<span class="string">&quot;&lt;!--wp-compress-html no compression--&gt;&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="variable">$buffer</span>[<span class="variable">$i</span>]));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$buffer</span>[<span class="variable">$i</span>]=(str_replace(<span class="string">&quot;\t&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="variable">$buffer</span>[<span class="variable">$i</span>]));</span><br><span class="line">                <span class="variable">$buffer</span>[<span class="variable">$i</span>]=(str_replace(<span class="string">&quot;\n\n&quot;</span>, <span class="string">&quot;\n&quot;</span>, <span class="variable">$buffer</span>[<span class="variable">$i</span>]));</span><br><span class="line">                <span class="variable">$buffer</span>[<span class="variable">$i</span>]=(str_replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$buffer</span>[<span class="variable">$i</span>]));</span><br><span class="line">                <span class="variable">$buffer</span>[<span class="variable">$i</span>]=(str_replace(<span class="string">&quot;\r&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$buffer</span>[<span class="variable">$i</span>]));</span><br><span class="line">                <span class="keyword">while</span> (stristr(<span class="variable">$buffer</span>[<span class="variable">$i</span>], <span class="string">&#x27;  &#x27;</span>)) &#123;</span><br><span class="line">                    <span class="variable">$buffer</span>[<span class="variable">$i</span>]=(str_replace(<span class="string">&quot;  &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="variable">$buffer</span>[<span class="variable">$i</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$buffer_out</span>.=<span class="variable">$buffer</span>[<span class="variable">$i</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$final</span>=strlen(<span class="variable">$buffer_out</span>);   </span><br><span class="line">        <span class="variable">$savings</span>=(<span class="variable">$initial</span>-<span class="variable">$final</span>)/<span class="variable">$initial</span>*<span class="number">100</span>;   </span><br><span class="line">        <span class="variable">$savings</span>=round(<span class="variable">$savings</span>, <span class="number">2</span>);   </span><br><span class="line">        <span class="variable">$buffer_out</span>.=<span class="string">&quot;\n&lt;!--压缩前的大小: <span class="subst">$initial</span> bytes; 压缩后的大小: <span class="subst">$final</span> bytes; 节约：<span class="subst">$savings</span>% --&gt;&quot;</span>;   </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$buffer_out</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !is_admin() ) &#123; </span><br><span class="line">        ob_start(<span class="string">&quot;wp_compress_html_main&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">add_action(<span class="string">&#x27;init&#x27;</span>, <span class="string">&#x27;wp_compress_html&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="绕过压缩优化的注释"><a href="#绕过压缩优化的注释" class="headerlink" title="绕过压缩优化的注释"></a>绕过压缩优化的注释</h3><p>如果发现压缩优化后出现了页面错误，可以通过下面的代码绕过压缩优化。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--wp-compress-html--&gt;</span><span class="comment">&lt;!--wp-compress-html no compression--&gt;</span></span><br><span class="line">此处代码不会被压缩，主要是避免压缩带来的错误，比如 JS 错误</span><br><span class="line"><span class="comment">&lt;!--wp-compress-html no compression--&gt;</span><span class="comment">&lt;!--wp-compress-html--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="避免高亮插件导致的代码混乱"><a href="#避免高亮插件导致的代码混乱" class="headerlink" title="避免高亮插件导致的代码混乱"></a>避免高亮插件导致的代码混乱</h3><p>如果 wordpress 使用了 <strong>Crayon Syntax Highlighter</strong> 代码高亮的话，那么通过代码压缩优化之后，你会发现在文章页面切换到纯文本模式时，会发现代码全挤在一团了。可以通过添加以下代码到当前主题的 <strong>functions.php</strong> 文件解决这个问题。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">function unCompress($content) &#123;</span><br><span class="line">    if(preg_match_all(&#x27;/(crayon-&lt;\/pre&gt;)/i&#x27;, $content, $matches)) &#123;</span><br><span class="line">        $content = &#x27;<span class="comment">&lt;!--wp-compress-html--&gt;</span><span class="comment">&lt;!--wp-compress-html no compression--&gt;</span>&#x27;.$content;</span><br><span class="line">        $content.= &#x27;<span class="comment">&lt;!--wp-compress-html no compression--&gt;</span><span class="comment">&lt;!--wp-compress-html--&gt;</span>&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return $content;</span><br><span class="line">&#125;</span><br><span class="line">add_filter( &quot;the_content&quot;, &quot;unCompress&quot;);</span><br></pre></td></tr></table></figure>

<p>同理如果使用的是 <strong>Pure Highlightjs</strong> 代码高亮的话。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">function unCompress($content) &#123;</span><br><span class="line">    if(preg_match_all(&#x27;/(pure-highlightjs&lt;\/pre&gt;)/i&#x27;, $content, $matches)) &#123;</span><br><span class="line">        $content = &#x27;<span class="comment">&lt;!--wp-compress-html--&gt;</span><span class="comment">&lt;!--wp-compress-html no compression--&gt;</span>&#x27;.$content;</span><br><span class="line">        $content.= &#x27;<span class="comment">&lt;!--wp-compress-html no compression--&gt;</span><span class="comment">&lt;!--wp-compress-html--&gt;</span>&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return $content;</span><br><span class="line">&#125;</span><br><span class="line">add_filter( &quot;the_content&quot;, &quot;unCompress&quot;);</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/wordpress-html.md-0.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>由于我使用的 Cloudflare 的 cdn 已经有一个 <strong>Auto Minify</strong> 的选项，可以更全面地进行压缩优化代码。所以我并没有实际试过上面的方法。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 WP Rocket 插件加速 blog</title>
    <url>/2021/03/26/wp-rocket/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>WP Rocket 是 WordPress 很流行的付费缓存插件。WP Rocket 不仅仅是一个简单的缓存插件，它有许多额外功能。提供了许多自定义设置，例如文件优化，预加载，延迟加载，数据库优化等等。</p>
<h2 id="正文：（插件安装过程就不赘述了）"><a href="#正文：（插件安装过程就不赘述了）" class="headerlink" title="正文：（插件安装过程就不赘述了）"></a>正文：（插件安装过程就不赘述了）</h2><p>请到我的网盘 <strong>建站</strong> 目录下载 <strong>wp-rocket 插件破解版</strong> 压缩包。</p>
<h3 id="仪表盘配置"><a href="#仪表盘配置" class="headerlink" title="仪表盘配置"></a>仪表盘配置</h3><p>不需要动任何东西。</p>
<h3 id="缓存配置"><a href="#缓存配置" class="headerlink" title="缓存配置"></a>缓存配置</h3><p>如下图配置。如果网站有多个用户，就勾选 <strong>为已登录的 WordPress 用户启用缓存</strong>，如果只有你自己就不要勾选。<strong>缓存有效期</strong> 默认10小时，如果网站更新频率快可以改短些，否则默认即可。<img data-src="/images/wp-rocket.md-0.png"></p>
<h3 id="文件优化配置"><a href="#文件优化配置" class="headerlink" title="文件优化配置"></a>文件优化配置</h3><p>建议全部勾选后测试，没问题就最好了，可以起到最大程度的加速效果。如果有异常就取消某项勾选，保存后再测试。大部分的问题出在 <strong>压缩 JS 文件</strong> 选项，也有部分网站问题出现在 <strong>合并CSS文件、合并 JavaScript 文件</strong> 选项。</p>
<h3 id="媒体配置"><a href="#媒体配置" class="headerlink" title="媒体配置"></a>媒体配置</h3><p>如下图配置。懒加载通俗地说就是页面滚动到哪里，媒体才开始加载。下面没出来的就不加载，这样可以提高网页打开速度。懒加载不是每个主题都合适的，也有可能起反作用，所以需要视个人情况配置。是否勾选 <strong>开启 WebP 缓存</strong>，就看你是否有使用 WebP 图片。<img data-src="/images/wp-rocket.md-1.png"></p>
<h3 id="预缓存配置"><a href="#预缓存配置" class="headerlink" title="预缓存配置"></a>预缓存配置</h3><p>如下图配置。预缓存就是提前生成缓存文件，这样可以提高网页打开速度。<img data-src="/images/wp-rocket.md-2.png"></p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>如下图所示，就是简单的文章、评论、临时数据清理，如果有需要还可以优化数据库表和设置定时清理任务。<strong>注意：对数据库的操作建议进行备份之后再进行。</strong><img data-src="/images/wp-rocket.md-3.png"></p>
<h3 id="CDN-配置"><a href="#CDN-配置" class="headerlink" title="CDN 配置"></a>CDN 配置</h3><p>所有静态文件 URL（CSS、JS和图片）将被重写至下方您提供的 CNAME。由于我使用了 Cloudflare，有额外的拓展给我使用，下面会讲到。</p>
<h3 id="Cloudflare-拓展"><a href="#Cloudflare-拓展" class="headerlink" title="Cloudflare 拓展"></a>Cloudflare 拓展</h3><p>需要填入 <strong>全局 API key</strong>、<strong>账户邮箱</strong> 和 <strong>Zone ID</strong>。会有自动优化的选项，勾选即可。具体如何获得这些数据，如下图操作获得 <strong>全局 API key</strong>。<br><img data-src="/images/wp-rocket.md-4.jpg"> <img data-src="/images/wp-rocket.md-5.jpg"> <img data-src="/images/wp-rocket.md-6.jpg"></p>
<p>进入域名的 <strong>概述</strong> 页面往下拉就能看到 <strong>Zone ID</strong>（<strong>区域ID）</strong> 了，如下图。<img data-src="/images/wp-rocket.md-7.jpg"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐一个好用的 WordPress 备份还原插件</title>
    <url>/2021/07/18/wpvivid/</url>
    <content><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>WPvivid Backup Plugin - 网站备份、还原、搬家插件。</p>
<h2 id="正文：（汉化了是因为使用了-WP-China-Yes-插件，之前的文章有写过）"><a href="#正文：（汉化了是因为使用了-WP-China-Yes-插件，之前的文章有写过）" class="headerlink" title="正文：（汉化了是因为使用了 WP-China-Yes 插件，之前的文章有写过）"></a>正文：（汉化了是因为使用了 WP-China-Yes 插件，之前的文章有写过）</h2><p>设置中的第一个菜单项界面如下，挺一目了然的。就是进行手动备份和还原、管理备份文件以及上传备份文件。<img data-src="/images/wpvivid.md-0.png"></p>
<p>第二个菜单项界面如下，是计划备份设置。也挺一目了然的，就不赘述了。<img data-src="/images/wpvivid.md-1.png"></p>
<p>第三个菜单项界面如下，是自动迁移功能。想要使用这个功能，需要两个网站都安装这个插件，并在原网站生成密钥，密钥生成是在下图中的倒数第二个菜单项，之后在新网站将密钥粘贴过去进行迁移即可。<img data-src="/images/wpvivid.md-2.png"></p>
<p>第四个菜单项界面如下，是备份的远程存储。建议使用这个功能，毕竟备份文件只在服务器上存着，服务器崩了的时候，想拿出来可能都没办法，只能重装。<img data-src="/images/wpvivid.md-3.png"></p>
<p>第五个菜单项界面如下，是常规的设置选项，根据自己的需要修改就好了，也没什么好说的。<img data-src="/images/wpvivid.md-4.png"></p>
<p>插件还支持选择性地导入和导出文章和页面，并且还在持续更新支持更多类型的选项。<img data-src="/images/wpvivid.md-5.png"></p>
<h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>之前其实也有推荐过一个备份插件，算是一个比较出名的插件了，但是使用起来情况并不理想甚至可以说是完全无法发挥作用。可能是博客配置问题，也有可能是服务器问题，不管怎么样，最终决定是不使用那个插件了。</p>
<p>只能说适合自己的才是最好的，推荐这个插件主要还是因为在之前换主题的时候，发现这个插件能够正常使用并且效果也不错。而且其它备份插件需要付费的功能，这个插件几乎全是免费的，使用起来也非常简便。</p>
<p>如有任何疑问，可在下方评论区@我或者发送悄悄话都可以，我会尽力回答。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
</search>
